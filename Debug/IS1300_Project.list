
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a34c  0800a34c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a34c  0800a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a354  0800a354  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a358  0800a358  0001a358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000084  0800a3e0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800a3e0  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029927  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048cd  00000000  00000000  000499db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  0004e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bb0  00000000  00000000  00050030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d511  00000000  00000000  00051be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022fba  00000000  00000000  0007f0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011af23  00000000  00000000  000a20ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bcfce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000891c  00000000  00000000  001bd024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a04c 	.word	0x0800a04c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800a04c 	.word	0x0800a04c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe0>)
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_ADC1_Init+0xe4>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005fc:	f001 fb74 	bl	8001ce8 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000606:	f000 fa17 	bl	8000a38 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000616:	f002 fbc1 	bl	8002d9c <HAL_ADCEx_MultiModeConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fa0a 	bl	8000a38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_ADC1_Init+0xe8>)
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2306      	movs	r3, #6
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000630:	237f      	movs	r3, #127	; 0x7f
 8000632:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000642:	f001 fe47 	bl	80022d4 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800064c:	f000 f9f4 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000538 	.word	0x20000538
 800065c:	50040000 	.word	0x50040000
 8000660:	43210000 	.word	0x43210000

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f008 fa27 	bl	8008ad8 <memset>
  if(adcHandle->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_ADC_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d146      	bne.n	8000722 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800069a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fdbf 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006d0:	f000 f9b2 	bl	8000a38 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_ADC_MspInit+0xd0>)
 800071e:	f002 fd4f 	bl	80031c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000722:	bf00      	nop
 8000724:	37b0      	adds	r7, #176	; 0xb0
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	50040000 	.word	0x50040000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <adc_read_pot>:
/**
 * @brief Reads the analog voltage of the potentimeter located on the shield
 * and returns a digital conversion.
 * @retval The current voltage level.
 */
uint16_t adc_read_pot() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800073c:	4806      	ldr	r0, [pc, #24]	; (8000758 <adc_read_pot+0x20>)
 800073e:	f001 fc29 	bl	8001f94 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8000742:	2101      	movs	r1, #1
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <adc_read_pot+0x20>)
 8000746:	f001 fcdf 	bl	8002108 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 800074a:	4803      	ldr	r0, [pc, #12]	; (8000758 <adc_read_pot+0x20>)
 800074c:	f001 fdb4 	bl	80022b8 <HAL_ADC_GetValue>
 8000750:	4603      	mov	r3, r0
 8000752:	b29b      	uxth	r3, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000538 	.word	0x20000538

0800075c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b48      	ldr	r3, [pc, #288]	; (8000894 <MX_GPIO_Init+0x138>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a47      	ldr	r2, [pc, #284]	; (8000894 <MX_GPIO_Init+0x138>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b45      	ldr	r3, [pc, #276]	; (8000894 <MX_GPIO_Init+0x138>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <MX_GPIO_Init+0x138>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a41      	ldr	r2, [pc, #260]	; (8000894 <MX_GPIO_Init+0x138>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b3f      	ldr	r3, [pc, #252]	; (8000894 <MX_GPIO_Init+0x138>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b3c      	ldr	r3, [pc, #240]	; (8000894 <MX_GPIO_Init+0x138>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a3b      	ldr	r2, [pc, #236]	; (8000894 <MX_GPIO_Init+0x138>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b39      	ldr	r3, [pc, #228]	; (8000894 <MX_GPIO_Init+0x138>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b36      	ldr	r3, [pc, #216]	; (8000894 <MX_GPIO_Init+0x138>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a35      	ldr	r2, [pc, #212]	; (8000894 <MX_GPIO_Init+0x138>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <MX_GPIO_Init+0x138>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_GPIO_Init+0x138>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_GPIO_Init+0x138>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0x138>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f002 fe8f 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f002 fe88 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800080a:	4823      	ldr	r0, [pc, #140]	; (8000898 <MX_GPIO_Init+0x13c>)
 800080c:	f002 fe82 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <MX_GPIO_Init+0x13c>)
 8000828:	f002 fcca 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082c:	230c      	movs	r3, #12
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083c:	2307      	movs	r3, #7
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f002 fcb9 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800084e:	f248 0320 	movw	r3, #32800	; 0x8020
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f002 fca9 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Green_Backlight_Pin|White_Backlight_Pin;
 800086e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0x13c>)
 8000888:	f002 fc9a 	bl	80031c0 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000800 	.word	0x48000800

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a2:	f000 ffb3 	bl	800180c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f861 	bl	800096c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f7ff ff57 	bl	800075c <MX_GPIO_Init>
  MX_UART5_Init();
 80008ae:	f000 fe4b 	bl	8001548 <MX_UART5_Init>
  MX_SPI2_Init();
 80008b2:	f000 f9dd 	bl	8000c70 <MX_SPI2_Init>
  MX_RTC_Init();
 80008b6:	f000 f8c5 	bl	8000a44 <MX_RTC_Init>
  MX_ADC1_Init();
 80008ba:	f7ff fe5d 	bl	8000578 <MX_ADC1_Init>
  MX_TIM8_Init();
 80008be:	f000 fd23 	bl	8001308 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */




    display_init();
 80008c2:	f000 fb1d 	bl	8000f00 <display_init>
    uint8_t start_time[8];
    uart_transmit((uint8_t*)"set time HH:MM:SS\r\n", 19);
 80008c6:	2113      	movs	r1, #19
 80008c8:	4825      	ldr	r0, [pc, #148]	; (8000960 <main+0xc4>)
 80008ca:	f000 ff01 	bl	80016d0 <uart_transmit>
    HAL_Delay(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 ffdc 	bl	800188c <HAL_Delay>
    uart_receive(start_time, 8);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2108      	movs	r1, #8
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 ff1e 	bl	800171c <uart_receive>
    HAL_Delay(5000);
 80008e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80008e4:	f000 ffd2 	bl	800188c <HAL_Delay>
    rtc_set_time(start_time);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f941 	bl	8000b74 <rtc_set_time>

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80008f2:	217f      	movs	r1, #127	; 0x7f
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <main+0xc8>)
 80008f6:	f002 f9f1 	bl	8002cdc <HAL_ADCEx_Calibration_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80008fa:	2104      	movs	r1, #4
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <main+0xcc>)
 80008fe:	f005 f919 	bl	8005b34 <HAL_TIM_PWM_Start>

    uint8_t current_time[8];
    uint16_t voltage;
    char vol_str[5];
    while (1) {
	voltage = adc_read_pot(voltage);
 8000902:	8bfb      	ldrh	r3, [r7, #30]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff17 	bl	8000738 <adc_read_pot>
 800090a:	4603      	mov	r3, r0
 800090c:	83fb      	strh	r3, [r7, #30]
	rtc_get_time(current_time);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f972 	bl	8000bfc <rtc_get_time>
//	current_time = increase_by_one(current_time);
	tim_set_duty_cycle(voltage);
 8000918:	8bfb      	ldrh	r3, [r7, #30]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fdf8 	bl	8001510 <tim_set_duty_cycle>

	itoa(voltage, vol_str, 10);
 8000920:	8bfb      	ldrh	r3, [r7, #30]
 8000922:	1d39      	adds	r1, r7, #4
 8000924:	220a      	movs	r2, #10
 8000926:	4618      	mov	r0, r3
 8000928:	f008 f8c6 	bl	8008ab8 <itoa>

	display_write_line(current_time, 8, 1);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2201      	movs	r2, #1
 8000932:	2108      	movs	r1, #8
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fb38 	bl	8000faa <display_write_line>
	HAL_Delay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 ffa6 	bl	800188c <HAL_Delay>
	display_write_line((uint8_t*)vol_str, strlen((char*)vol_str), 2);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc44 	bl	80001d0 <strlen>
 8000948:	4603      	mov	r3, r0
 800094a:	b2d9      	uxtb	r1, r3
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2202      	movs	r2, #2
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fb2a 	bl	8000faa <display_write_line>

//	uart_transmit((uint8_t*)vol_str, 4);
//	HAL_Delay(1);
//	uart_transmit((uint8_t*)"\r\n", 2);

	HAL_Delay(97);
 8000956:	2061      	movs	r0, #97	; 0x61
 8000958:	f000 ff98 	bl	800188c <HAL_Delay>
	voltage = adc_read_pot(voltage);
 800095c:	e7d1      	b.n	8000902 <main+0x66>
 800095e:	bf00      	nop
 8000960:	0800a064 	.word	0x0800a064
 8000964:	20000538 	.word	0x20000538
 8000968:	20000670 	.word	0x20000670

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	; 0x58
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2244      	movs	r2, #68	; 0x44
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f008 f8ac 	bl	8008ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800098e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000992:	f002 fde5 	bl	8003560 <HAL_PWREx_ControlVoltageScaling>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800099c:	f000 f84c 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009a0:	230a      	movs	r3, #10
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2310      	movs	r3, #16
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009ae:	2301      	movs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b6:	2302      	movs	r3, #2
 80009b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009be:	230a      	movs	r3, #10
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c2:	2307      	movs	r3, #7
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 fe1a 	bl	800360c <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80009de:	f000 f82b 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2303      	movs	r3, #3
 80009e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	2104      	movs	r1, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 f9ec 	bl	8003dd8 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a06:	f000 f817 	bl	8000a38 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3758      	adds	r7, #88	; 0x58
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a26:	f000 ff11 	bl	800184c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40012c00 	.word	0x40012c00

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a58:	2300      	movs	r3, #0
 8000a5a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a5e:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <MX_RTC_Init+0xb4>)
 8000a60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a6a:	227f      	movs	r2, #127	; 0x7f
 8000a6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a8c:	4819      	ldr	r0, [pc, #100]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000a8e:	f004 f897 	bl	8004bc0 <HAL_RTC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a98:	f7ff ffce 	bl	8000a38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000ab8:	f004 f8fd 	bl	8004cb6 <HAL_RTC_SetTime>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ac2:	f7ff ffb9 	bl	8000a38 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000aca:	2312      	movs	r3, #18
 8000acc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8000ace:	2322      	movs	r3, #34	; 0x22
 8000ad0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8000ad2:	2321      	movs	r3, #33	; 0x21
 8000ad4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_RTC_Init+0xb0>)
 8000ade:	f004 f9e3 	bl	8004ea8 <HAL_RTC_SetDate>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ae8:	f7ff ffa6 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000059c 	.word	0x2000059c
 8000af8:	40002800 	.word	0x40002800

08000afc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0a4      	sub	sp, #144	; 0x90
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2288      	movs	r2, #136	; 0x88
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 ffe3 	bl	8008ad8 <memset>
  if(rtcHandle->Instance==RTC)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_RTC_MspInit+0x5c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d118      	bne.n	8000b4e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fb8a 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b3a:	f7ff ff7d 	bl	8000a38 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_RTC_MspInit+0x60>)
 8000b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_RTC_MspInit+0x60>)
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3790      	adds	r7, #144	; 0x90
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40002800 	.word	0x40002800
 8000b5c:	40021000 	.word	0x40021000

08000b60 <RTC_Error>:
/**
 * @brief Error function called upon error generated
 * during exeuction of RTC functions.
 * @note Activates the LD2 led on the Nucleo board and loops infinitely.
 */
void RTC_Error() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2120      	movs	r1, #32
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f002 fcd2 	bl	8003514 <HAL_GPIO_WritePin>
    while (1) {}
 8000b70:	e7fe      	b.n	8000b70 <RTC_Error+0x10>
	...

08000b74 <rtc_set_time>:
/**
 * @brief Real Time Clock (RTC) function to set the RTC time.
 * @param tstr: time string of format "hh:mm:ss".
 * @retval None.
 */
void rtc_set_time(uint8_t tstr[]) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <rtc_set_time+0x80>)
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, del); //tokenize tstr on given delimiter
 8000b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f007 ffc8 	bl	8008b28 <strtok>
 8000b98:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000b9a:	6a38      	ldr	r0, [r7, #32]
 8000b9c:	f007 ff46 	bl	8008a2c <atoi>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 8000ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f007 ffbd 	bl	8008b28 <strtok>
 8000bae:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 8000bb0:	6a38      	ldr	r0, [r7, #32]
 8000bb2:	f007 ff3b 	bl	8008a2c <atoi>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f007 ffb2 	bl	8008b28 <strtok>
 8000bc4:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 8000bc6:	6a38      	ldr	r0, [r7, #32]
 8000bc8:	f007 ff30 	bl	8008a2c <atoi>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	73bb      	strb	r3, [r7, #14]

    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <rtc_set_time+0x84>)
 8000bdc:	f004 f86b 	bl	8004cb6 <HAL_RTC_SetTime>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <rtc_set_time+0x76>
	RTC_Error();
 8000be6:	f7ff ffbb 	bl	8000b60 <RTC_Error>
    }
}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	0800a078 	.word	0x0800a078
 8000bf8:	2000059c 	.word	0x2000059c

08000bfc <rtc_get_time>:
  * @brief Real Time Clock (RTC) function to get the current time.
  * @param buffer: buffer to store the current time.
  * @note GetDate() is called to properly retreive the time.
  * @retval None.
  */
void rtc_get_time(uint8_t buffer[]) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <rtc_get_time+0x6c>)
 8000c22:	f004 f8e5 	bl	8004df0 <HAL_RTC_GetTime>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <rtc_get_time+0x34>
	RTC_Error();
 8000c2c:	f7ff ff98 	bl	8000b60 <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <rtc_get_time+0x6c>)
 8000c3a:	f004 f9bc 	bl	8004fb6 <HAL_RTC_GetDate>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <rtc_get_time+0x4c>
	RTC_Error();
 8000c44:	f7ff ff8c 	bl	8000b60 <RTC_Error>
    }

    sprintf((char*)buffer, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000c48:	7b3b      	ldrb	r3, [r7, #12]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	7b7b      	ldrb	r3, [r7, #13]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	460b      	mov	r3, r1
 8000c56:	4905      	ldr	r1, [pc, #20]	; (8000c6c <rtc_get_time+0x70>)
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f007 ff45 	bl	8008ae8 <siprintf>
}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000059c 	.word	0x2000059c
 8000c6c:	0800a07c 	.word	0x0800a07c

08000c70 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 0 */
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <MX_SPI2_Init+0x78>)
 8000c78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c88:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000c8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000ca0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000ca8:	2230      	movs	r2, #48	; 0x30
 8000caa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_SPI2_Init+0x74>)
 8000cd2:	f004 fa8f 	bl	80051f4 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000cdc:	f7ff feac 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200005c0 	.word	0x200005c0
 8000ce8:	40003800 	.word	0x40003800

08000cec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <HAL_SPI_MspInit+0xb4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d144      	bne.n	8000d98 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */
  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_SPI_MspInit+0xb8>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d56:	2308      	movs	r3, #8
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <HAL_SPI_MspInit+0xbc>)
 8000d72:	f002 fa25 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_SPI_MspInit+0xc0>)
 8000d94:	f002 fa14 	bl	80031c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */
  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40003800 	.word	0x40003800
 8000da4:	40021000 	.word	0x40021000
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000400 	.word	0x48000400

08000db0 <SPI_Error>:
/**
 * @brief Error function that handles any error produced while
 * using SPI communication.
 * @note Enables LD2 LED on the Nucleo board and loops infinitely.
 */
void SPI_Error() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2120      	movs	r1, #32
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f002 fbaa 	bl	8003514 <HAL_GPIO_WritePin>
    while(1) {}
 8000dc0:	e7fe      	b.n	8000dc0 <SPI_Error+0x10>
	...

08000dc4 <set_startbyte>:
  * @param nibble: the sequence to set.
  * @note  nibble in format of "0|RS|R/W|1" (MSB first representation).
  * Placed at bits 4-7 in the startbyte.
  * @retval None
  */
void set_startbyte(uint8_t nibble) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
    instr[0] = ((instr[0] & 0x0F) | (nibble << 4));
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <set_startbyte+0x34>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	f003 030f 	and.w	r3, r3, #15
 8000dd8:	b25a      	sxtb	r2, r3
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <set_startbyte+0x34>)
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000

08000dfc <set_byte>:
  * to follow convention.
  * @param byte: the byte to set up transmission for
  * @note LSB first ordering in the instruction array instr[].
  * @retval None
  */
void set_byte(uint8_t byte) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
    instr[1] = (byte & 0x0F);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <set_byte+0x2c>)
 8000e10:	705a      	strb	r2, [r3, #1]
    instr[2] = ((byte & 0xF0) >> 4);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <set_byte+0x2c>)
 8000e1a:	709a      	strb	r2, [r3, #2]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20000000 	.word	0x20000000

08000e2c <display_set_backlight>:

/**
 * @brief This functions sets the backlight color of the display.
 * @param color: color mapped to an integer used in the switch statement below.
 */
void display_set_backlight(uint8_t color) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
    switch(color) {
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d012      	beq.n	8000e62 <display_set_backlight+0x36>
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	dc17      	bgt.n	8000e70 <display_set_backlight+0x44>
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <display_set_backlight+0x1e>
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <display_set_backlight+0x28>
	    break;
	case 2:
	    HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
	    break;
    }
}
 8000e48:	e012      	b.n	8000e70 <display_set_backlight+0x44>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <display_set_backlight+0x4c>)
 8000e4e:	f004 fe71 	bl	8005b34 <HAL_TIM_PWM_Start>
	  break;
 8000e52:	e00d      	b.n	8000e70 <display_set_backlight+0x44>
	    HAL_GPIO_WritePin(White_Backlight_GPIO_Port, White_Backlight_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <display_set_backlight+0x50>)
 8000e5c:	f002 fb5a 	bl	8003514 <HAL_GPIO_WritePin>
	    break;
 8000e60:	e006      	b.n	8000e70 <display_set_backlight+0x44>
	    HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <display_set_backlight+0x50>)
 8000e6a:	f002 fb53 	bl	8003514 <HAL_GPIO_WritePin>
	    break;
 8000e6e:	bf00      	nop
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000670 	.word	0x20000670
 8000e7c:	48000800 	.word	0x48000800

08000e80 <display_hw_reset>:

/**
 * @brief Before using the display it should be reset by toggling the
 * Disp_Reset pin: high->low->high with sufficient delays in between.
 */
void display_hw_reset() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000e84:	2005      	movs	r0, #5
 8000e86:	f000 fd01 	bl	800188c <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f002 fb3e 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f000 fcf7 	bl	800188c <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f002 fb34 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fced 	bl	800188c <HAL_Delay>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <send>:

/**
 * @brief sends the current data in the instructions array instr[] over SPI.
 */
void send() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    if (HAL_SPI_Transmit(&hspi2, (uint8_t*)instr, 3, 50) != HAL_OK) {
 8000ebc:	2332      	movs	r3, #50	; 0x32
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4905      	ldr	r1, [pc, #20]	; (8000ed8 <send+0x20>)
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <send+0x24>)
 8000ec4:	f004 fa39 	bl	800533a <HAL_SPI_Transmit>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <send+0x1a>
	SPI_Error();
 8000ece:	f7ff ff6f 	bl	8000db0 <SPI_Error>
    }
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	200005c0 	.word	0x200005c0

08000ee0 <display_clear>:

/**
 * @brief Sets all segments of the display to 20H, i.e. invisible character.
 */
void display_clear() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    set_startbyte(RS0_RW0);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff6c 	bl	8000dc4 <set_startbyte>
    set_byte(CLEAR_DISPLAY);
 8000eec:	2301      	movs	r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff83 	bl	8000dfc <set_byte>
    send();
 8000ef6:	f7ff ffdf 	bl	8000eb8 <send>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <display_init>:

/**
 * @brief Initialization routine to set up the running conditions for the display.
 * @note Sequence needed is predefined. Hardware reset required beforehand.
 */
void display_init() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

    display_hw_reset();
 8000f06:	f7ff ffbb 	bl	8000e80 <display_hw_reset>

    display_set_backlight(RED);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff8d 	bl	8000e2c <display_set_backlight>

    set_startbyte(RS0_RW0);
 8000f12:	2301      	movs	r3, #1
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff55 	bl	8000dc4 <set_startbyte>
    for (int i = 0; i < 11; i++) {
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	e00e      	b.n	8000f3e <display_init+0x3e>
	set_byte(init_seq[i]);
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <display_init+0x50>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff67 	bl	8000dfc <set_byte>
	send();
 8000f2e:	f7ff ffc3 	bl	8000eb8 <send>
	HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 fcaa 	bl	800188c <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0a      	cmp	r3, #10
 8000f42:	dded      	ble.n	8000f20 <display_init+0x20>
    }

    display_clear();
 8000f44:	f7ff ffcc 	bl	8000ee0 <display_clear>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000004 	.word	0x20000004

08000f54 <display_set_line>:

/**
 * @brief Instructs the display to target the line specified.
 * @param line: the line to target, 1, 2, 3 or 4.
 */
void display_set_line(uint8_t line) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
    set_byte(DDRAM_L[line - 1]);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <display_set_line+0x24>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff48 	bl	8000dfc <set_byte>
    send();
 8000f6c:	f7ff ffa4 	bl	8000eb8 <send>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	0800a08c 	.word	0x0800a08c

08000f7c <display_write>:

/**
 * @brief writes the current instruction loaded to the display.
 * @param the data to send.
 */
void display_write(uint8_t data) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS1_RW0);
 8000f86:	2305      	movs	r3, #5
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff1b 	bl	8000dc4 <set_startbyte>
    set_byte(data);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff33 	bl	8000dfc <set_byte>
    send();
 8000f96:	f7ff ff8f 	bl	8000eb8 <send>
    set_startbyte(RS0_RW0);
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff11 	bl	8000dc4 <set_startbyte>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <display_write_line>:
 * @brief Receives a buffer to write to the display.
 * @param buf: the buffer of data to send.
 * @param len: length of the buffer.
 * @param line: the line of the display to target.
 */
void display_write_line(uint8_t *buf, uint8_t len, uint8_t line) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	70fb      	strb	r3, [r7, #3]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	70bb      	strb	r3, [r7, #2]
    display_set_line(line);
 8000fba:	78bb      	ldrb	r3, [r7, #2]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffc9 	bl	8000f54 <display_set_line>

    uint8_t i = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
    while (i < len) {
 8000fc6:	e00c      	b.n	8000fe2 <display_write_line+0x38>
	display_write(buf[i++]);
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	73fa      	strb	r2, [r7, #15]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffd0 	bl	8000f7c <display_write>
	HAL_Delay(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 fc55 	bl	800188c <HAL_Delay>
    while (i < len) {
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d3ee      	bcc.n	8000fc8 <display_write_line+0x1e>
    }

    while (i < 10) { //set remaining segments to blank (0x20)
 8000fea:	e005      	b.n	8000ff8 <display_write_line+0x4e>
	display_write((uint8_t) 0x20);
 8000fec:	2020      	movs	r0, #32
 8000fee:	f7ff ffc5 	bl	8000f7c <display_write>
	i++;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
    while (i < 10) { //set remaining segments to blank (0x20)
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	d9f6      	bls.n	8000fec <display_write_line+0x42>
    }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_MspInit+0x4c>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_MspInit+0x4c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6613      	str	r3, [r2, #96]	; 0x60
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_MspInit+0x4c>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_MspInit+0x4c>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_MspInit+0x4c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_MspInit+0x4c>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	210f      	movs	r1, #15
 8001042:	f06f 0001 	mvn.w	r0, #1
 8001046:	f002 f811 	bl	800306c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2019      	movs	r0, #25
 800106e:	f001 fffd 	bl	800306c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001072:	2019      	movs	r0, #25
 8001074:	f002 f816 	bl	80030a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_InitTick+0x9c>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_InitTick+0x9c>)
 800107e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001082:	6613      	str	r3, [r2, #96]	; 0x60
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_InitTick+0x9c>)
 8001086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001090:	f107 0210 	add.w	r2, r7, #16
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f842 	bl	8004124 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010a0:	f003 f82a 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 80010a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_InitTick+0xa0>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9b      	lsrs	r3, r3, #18
 80010b0:	3b01      	subs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_InitTick+0xa4>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_InitTick+0xa8>)
 80010b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_InitTick+0xa4>)
 80010bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_InitTick+0xa4>)
 80010c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_InitTick+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_InitTick+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <HAL_InitTick+0xa4>)
 80010d6:	f004 fc03 	bl	80058e0 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d104      	bne.n	80010ea <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <HAL_InitTick+0xa4>)
 80010e2:	f004 fc55 	bl	8005990 <HAL_TIM_Base_Start_IT>
 80010e6:	4603      	mov	r3, r0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3730      	adds	r7, #48	; 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	20000624 	.word	0x20000624
 8001100:	40012c00 	.word	0x40012c00

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001136:	f004 fe03 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000624 	.word	0x20000624

08001144 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <UART5_IRQHandler+0x10>)
 800114a:	f005 ff85 	bl	8007058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200006bc 	.word	0x200006bc

08001158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	return 1;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001172:	f007 fc5f 	bl	8008a34 <__errno>
 8001176:	4603      	mov	r3, r0
 8001178:	2216      	movs	r2, #22
 800117a:	601a      	str	r2, [r3, #0]
	return -1;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_exit>:

void _exit (int status)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffe7 	bl	8001168 <_kill>
	while (1) {}		/* Make sure we hang here */
 800119a:	e7fe      	b.n	800119a <_exit+0x12>

0800119c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
	}

return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e009      	b.n	80011fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf1      	blt.n	80011e8 <_write+0x12>
	}
	return len;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_close>:

int _close(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	605a      	str	r2, [r3, #4]
	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f007 fbc4 	bl	8008a34 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20018000 	.word	0x20018000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200000a0 	.word	0x200000a0
 80012e0:	20000758 	.word	0x20000758

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09a      	sub	sp, #104	; 0x68
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	222c      	movs	r2, #44	; 0x2c
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f007 fbc8 	bl	8008ad8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001348:	4b43      	ldr	r3, [pc, #268]	; (8001458 <MX_TIM8_Init+0x150>)
 800134a:	4a44      	ldr	r2, [pc, #272]	; (800145c <MX_TIM8_Init+0x154>)
 800134c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4000;
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <MX_TIM8_Init+0x150>)
 8001350:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001354:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b40      	ldr	r3, [pc, #256]	; (8001458 <MX_TIM8_Init+0x150>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 800135c:	4b3e      	ldr	r3, [pc, #248]	; (8001458 <MX_TIM8_Init+0x150>)
 800135e:	2264      	movs	r2, #100	; 0x64
 8001360:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <MX_TIM8_Init+0x150>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001368:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <MX_TIM8_Init+0x150>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <MX_TIM8_Init+0x150>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001374:	4838      	ldr	r0, [pc, #224]	; (8001458 <MX_TIM8_Init+0x150>)
 8001376:	f004 fab3 	bl	80058e0 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001380:	f7ff fb5a 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800138e:	4619      	mov	r1, r3
 8001390:	4831      	ldr	r0, [pc, #196]	; (8001458 <MX_TIM8_Init+0x150>)
 8001392:	f004 ff09 	bl	80061a8 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800139c:	f7ff fb4c 	bl	8000a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013a0:	482d      	ldr	r0, [pc, #180]	; (8001458 <MX_TIM8_Init+0x150>)
 80013a2:	f004 fb65 	bl	8005a70 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80013ac:	f7ff fb44 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013c0:	4619      	mov	r1, r3
 80013c2:	4825      	ldr	r0, [pc, #148]	; (8001458 <MX_TIM8_Init+0x150>)
 80013c4:	f005 fc12 	bl	8006bec <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80013ce:	f7ff fb33 	bl	8000a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d2:	2360      	movs	r3, #96	; 0x60
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 80013d6:	2332      	movs	r3, #50	; 0x32
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f2:	2204      	movs	r2, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4818      	ldr	r0, [pc, #96]	; (8001458 <MX_TIM8_Init+0x150>)
 80013f8:	f004 fdc2 	bl	8005f80 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001402:	f7ff fb19 	bl	8000a38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800141a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_TIM8_Init+0x150>)
 800143c:	f005 fc5e 	bl	8006cfc <HAL_TIMEx_ConfigBreakDeadTime>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001446:	f7ff faf7 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <MX_TIM8_Init+0x150>)
 800144c:	f000 f828 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 8001450:	bf00      	nop
 8001452:	3768      	adds	r7, #104	; 0x68
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000670 	.word	0x20000670
 800145c:	40013400 	.word	0x40013400

08001460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_TIM_Base_MspInit+0x38>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10b      	bne.n	800148a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_TIM_Base_MspInit+0x3c>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_TIM_Base_MspInit+0x3c>)
 8001478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800147c:	6613      	str	r3, [r2, #96]	; 0x60
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_TIM_Base_MspInit+0x3c>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40013400 	.word	0x40013400
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_TIM_MspPostInit+0x64>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d11b      	bne.n	80014fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014ea:	2303      	movs	r3, #3
 80014ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_TIM_MspPostInit+0x6c>)
 80014f6:	f001 fe63 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40013400 	.word	0x40013400
 8001508:	40021000 	.word	0x40021000
 800150c:	48000800 	.word	0x48000800

08001510 <tim_set_duty_cycle>:
/**
 * @brief Sets the duty cycle for the PWM proportional to the voltage
 * over the potentiometer.
 * @param voltage: the voltage level given by ADC conversion.
 */
void tim_set_duty_cycle(uint16_t voltage) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
    /* "or 1" syntax to never allow 0% duty cycle */
    uint32_t new_dc = (uint32_t)((voltage * 100)/MAX_VALUE | 1);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	2264      	movs	r2, #100	; 0x64
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	f640 72e3 	movw	r2, #4067	; 0xfe3
 8001526:	fb93 f3f2 	sdiv	r3, r3, r2
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]

    htim8.Instance->CCR2 = new_dc;
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <tim_set_duty_cycle+0x34>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20000670 	.word	0x20000670

08001548 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_UART5_Init+0x58>)
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_UART5_Init+0x5c>)
 8001550:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_UART5_Init+0x58>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_UART5_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_UART5_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_UART5_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_UART5_Init+0x58>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_UART5_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_UART5_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_UART5_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_UART5_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_UART5_Init+0x58>)
 800158c:	f005 fc52 	bl	8006e34 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001596:	f7ff fa4f 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200006bc 	.word	0x200006bc
 80015a4:	40005000 	.word	0x40005000

080015a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0ac      	sub	sp, #176	; 0xb0
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2288      	movs	r2, #136	; 0x88
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f007 fa85 	bl	8008ad8 <memset>
  if(uartHandle->Instance==UART5)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a36      	ldr	r2, [pc, #216]	; (80016ac <HAL_UART_MspInit+0x104>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d164      	bne.n	80016a2 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80015d8:	2310      	movs	r3, #16
 80015da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80015dc:	2300      	movs	r3, #0
 80015de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fe2f 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f0:	f7ff fa22 	bl	8000a38 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_UART_MspInit+0x108>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <HAL_UART_MspInit+0x108>)
 80015fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_UART_MspInit+0x108>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_UART_MspInit+0x108>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_UART_MspInit+0x108>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_UART_MspInit+0x108>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_UART_MspInit+0x108>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_UART_MspInit+0x108>)
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_UART_MspInit+0x108>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001656:	2308      	movs	r3, #8
 8001658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001660:	4619      	mov	r1, r3
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <HAL_UART_MspInit+0x10c>)
 8001664:	f001 fdac 	bl	80031c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001668:	2304      	movs	r3, #4
 800166a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001680:	2308      	movs	r3, #8
 8001682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800168a:	4619      	mov	r1, r3
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <HAL_UART_MspInit+0x110>)
 800168e:	f001 fd97 	bl	80031c0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2105      	movs	r1, #5
 8001696:	2035      	movs	r0, #53	; 0x35
 8001698:	f001 fce8 	bl	800306c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800169c:	2035      	movs	r0, #53	; 0x35
 800169e:	f001 fd01 	bl	80030a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	37b0      	adds	r7, #176	; 0xb0
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40005000 	.word	0x40005000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000800 	.word	0x48000800
 80016b8:	48000c00 	.word	0x48000c00

080016bc <UART_Error>:
/**
 * @brief Error function called upon error generated
 * during UART communication.
 * @note Enables the LD2 LED on the Nucleo board and loops infinitely.
 */
void UART_Error(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2120      	movs	r1, #32
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f001 ff24 	bl	8003514 <HAL_GPIO_WritePin>
    while (1) {}
 80016cc:	e7fe      	b.n	80016cc <UART_Error+0x10>
	...

080016d0 <uart_transmit>:
  * @param size: amount of bytes to transmit.
  * @note Starting the interrupt handler for transmitting.
  * Not allowed to receive if transmission not finished.
  * @retval None
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
    if (UartDoneR == SET) {
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <uart_transmit+0x40>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d110      	bne.n	8001706 <uart_transmit+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <uart_transmit+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <uart_transmit+0x44>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	461a      	mov	r2, r3
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <uart_transmit+0x48>)
 80016f8:	f005 fbea 	bl	8006ed0 <HAL_UART_Transmit_IT>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <uart_transmit+0x36>
	    UART_Error();
 8001702:	f7ff ffdb 	bl	80016bc <UART_Error>
	}
    }
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000015 	.word	0x20000015
 8001714:	20000014 	.word	0x20000014
 8001718:	200006bc 	.word	0x200006bc

0800171c <uart_receive>:
  * @param size: amount of bytes to receive.
  * @note Starting the interrupt handler for receiving.
  * Not allowed to transmit if reception not finished.
  * @retval None.
  */
void uart_receive(uint8_t buffer[], uint16_t size) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
    if (UartDoneT == SET) {
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <uart_receive+0x40>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d110      	bne.n	8001752 <uart_receive+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <uart_receive+0x44>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <uart_receive+0x40>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	461a      	mov	r2, r3
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4808      	ldr	r0, [pc, #32]	; (8001764 <uart_receive+0x48>)
 8001744:	f005 fc32 	bl	8006fac <HAL_UART_Receive_IT>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <uart_receive+0x36>
	    UART_Error();
 800174e:	f7ff ffb5 	bl	80016bc <UART_Error>
	}
    }
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000014 	.word	0x20000014
 8001760:	20000015 	.word	0x20000015
 8001764:	200006bc 	.word	0x200006bc

08001768 <HAL_UART_TxCpltCallback>:
  * @brief UART transfer completion callback.
  * @param UartHandle: UART handle to which the interrupt is sent.
  * @note Reporting that the tranmission over UART is complete.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_UART_TxCpltCallback+0x20>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
    UartDoneR = SET;
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_UART_TxCpltCallback+0x24>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	20000014 	.word	0x20000014
 800178c:	20000015 	.word	0x20000015

08001790 <HAL_UART_RxCpltCallback>:
* @brief UART reception completion callback.
* @param UartHandle: UART handle to which the interrupt is sent.
* @note Reporting that the reception over UART is complete.
* @retval None.
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    UartDoneR = SET;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_UART_RxCpltCallback+0x20>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
    UartDoneT = SET;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_UART_RxCpltCallback+0x24>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	20000015 	.word	0x20000015
 80017b4:	20000014 	.word	0x20000014

080017b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff fd92 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	; (80017f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LoopForever+0xe>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	; (8001804 <LoopForever+0x16>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f007 f92b 	bl	8008a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ea:	f7ff f857 	bl	800089c <main>

080017ee <LoopForever>:

LoopForever:
    b LoopForever
 80017ee:	e7fe      	b.n	80017ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80017fc:	0800a35c 	.word	0x0800a35c
  ldr r2, =_sbss
 8001800:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001804:	20000754 	.word	0x20000754

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_Init+0x3c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_Init+0x3c>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001822:	2003      	movs	r0, #3
 8001824:	f001 fc17 	bl	8003056 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001828:	200f      	movs	r0, #15
 800182a:	f7ff fc15 	bl	8001058 <HAL_InitTick>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	e001      	b.n	800183e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800183a:	f7ff fbe5 	bl	8001008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800183e:	79fb      	ldrb	r3, [r7, #7]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000001c 	.word	0x2000001c
 8001870:	20000740 	.word	0x20000740

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000740 	.word	0x20000740

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000001c 	.word	0x2000001c

080018d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3360      	adds	r3, #96	; 0x60
 800194e:	461a      	mov	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <LL_ADC_SetOffset+0x44>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	4313      	orrs	r3, r2
 800196c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	03fff000 	.word	0x03fff000

08001984 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3360      	adds	r3, #96	; 0x60
 8001992:	461a      	mov	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3360      	adds	r3, #96	; 0x60
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3330      	adds	r3, #48	; 0x30
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	211f      	movs	r1, #31
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	401a      	ands	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	f003 011f 	and.w	r1, r3, #31
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	431a      	orrs	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3314      	adds	r3, #20
 8001a74:	461a      	mov	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	0e5b      	lsrs	r3, r3, #25
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	0d1b      	lsrs	r3, r3, #20
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2107      	movs	r1, #7
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0d1b      	lsrs	r3, r3, #20
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0318 	and.w	r3, r3, #24
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ae0:	40d9      	lsrs	r1, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	0007ffff 	.word	0x0007ffff

08001b04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 031f 	and.w	r3, r3, #31
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6093      	str	r3, [r2, #8]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b74:	d101      	bne.n	8001b7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bc4:	d101      	bne.n	8001bca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c14:	f043 0202 	orr.w	r2, r3, #2
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <LL_ADC_IsEnabled+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_ADC_IsEnabled+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d101      	bne.n	8001c66 <LL_ADC_IsDisableOngoing+0x18>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_ADC_IsDisableOngoing+0x1a>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c88:	f043 0204 	orr.w	r2, r3, #4
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d101      	bne.n	8001cb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d101      	bne.n	8001cda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e136      	b.n	8001f70 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7fe fca7 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff19 	bl	8001b60 <LL_ADC_IsDeepPowerDownEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff feff 	bl	8001b3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff34 	bl	8001bb0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d115      	bne.n	8001d7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff18 	bl	8001b88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d58:	4b87      	ldr	r3, [pc, #540]	; (8001f78 <HAL_ADC_Init+0x290>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	4a87      	ldr	r2, [pc, #540]	; (8001f7c <HAL_ADC_Init+0x294>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	099b      	lsrs	r3, r3, #6
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f9      	bne.n	8001d6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff16 	bl	8001bb0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff76 	bl	8001c9c <LL_ADC_REG_IsConversionOngoing>
 8001db0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 80cf 	bne.w	8001f5e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80cb 	bne.w	8001f5e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dd0:	f043 0202 	orr.w	r2, r3, #2
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff23 	bl	8001c28 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d115      	bne.n	8001e14 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de8:	4865      	ldr	r0, [pc, #404]	; (8001f80 <HAL_ADC_Init+0x298>)
 8001dea:	f7ff ff1d 	bl	8001c28 <LL_ADC_IsEnabled>
 8001dee:	4604      	mov	r4, r0
 8001df0:	4864      	ldr	r0, [pc, #400]	; (8001f84 <HAL_ADC_Init+0x29c>)
 8001df2:	f7ff ff19 	bl	8001c28 <LL_ADC_IsEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	431c      	orrs	r4, r3
 8001dfa:	4863      	ldr	r0, [pc, #396]	; (8001f88 <HAL_ADC_Init+0x2a0>)
 8001dfc:	f7ff ff14 	bl	8001c28 <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4323      	orrs	r3, r4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	485f      	ldr	r0, [pc, #380]	; (8001f8c <HAL_ADC_Init+0x2a4>)
 8001e10:	f7ff fd60 	bl	80018d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e5b      	ldrb	r3, [r3, #25]
 8001e18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	3b01      	subs	r3, #1
 8001e48:	045b      	lsls	r3, r3, #17
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_ADC_Init+0x2a8>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff09 	bl	8001c9c <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff16 	bl	8001cc2 <LL_ADC_INJ_IsConversionOngoing>
 8001e96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d13d      	bne.n	8001f1a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d13a      	bne.n	8001f1a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eb0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec0:	f023 0302 	bic.w	r3, r3, #2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	69b9      	ldr	r1, [r7, #24]
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d118      	bne.n	8001f0a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001efa:	430a      	orrs	r2, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	e007      	b.n	8001f1a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10c      	bne.n	8001f3c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	f023 010f 	bic.w	r1, r3, #15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
 8001f3a:	e007      	b.n	8001f4c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 020f 	bic.w	r2, r2, #15
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f023 0303 	bic.w	r3, r3, #3
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3724      	adds	r7, #36	; 0x24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	053e2d63 	.word	0x053e2d63
 8001f80:	50040000 	.word	0x50040000
 8001f84:	50040100 	.word	0x50040100
 8001f88:	50040200 	.word	0x50040200
 8001f8c:	50040300 	.word	0x50040300
 8001f90:	fff0c007 	.word	0xfff0c007

08001f94 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	4857      	ldr	r0, [pc, #348]	; (80020fc <HAL_ADC_Start+0x168>)
 8001f9e:	f7ff fdb1 	bl	8001b04 <LL_ADC_GetMultimode>
 8001fa2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe77 	bl	8001c9c <LL_ADC_REG_IsConversionOngoing>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 809c 	bne.w	80020ee <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_Start+0x30>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e097      	b.n	80020f4 <HAL_ADC_Start+0x160>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fd71 	bl	8002ab4 <ADC_Enable>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 8083 	bne.w	80020e4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a42      	ldr	r2, [pc, #264]	; (8002100 <HAL_ADC_Start+0x16c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d002      	beq.n	8002002 <HAL_ADC_Start+0x6e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e000      	b.n	8002004 <HAL_ADC_Start+0x70>
 8002002:	4b40      	ldr	r3, [pc, #256]	; (8002104 <HAL_ADC_Start+0x170>)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4293      	cmp	r3, r2
 800200a:	d002      	beq.n	8002012 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202a:	d106      	bne.n	800203a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f023 0206 	bic.w	r2, r3, #6
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	659a      	str	r2, [r3, #88]	; 0x58
 8002038:	e002      	b.n	8002040 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	221c      	movs	r2, #28
 8002046:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_ADC_Start+0x16c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d002      	beq.n	8002060 <HAL_ADC_Start+0xcc>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e000      	b.n	8002062 <HAL_ADC_Start+0xce>
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <HAL_ADC_Start+0x170>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4293      	cmp	r3, r2
 8002068:	d008      	beq.n	800207c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d002      	beq.n	800207c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d114      	bne.n	80020a6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002092:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fde8 	bl	8001c74 <LL_ADC_REG_StartConversion>
 80020a4:	e025      	b.n	80020f2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_ADC_Start+0x16c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d002      	beq.n	80020c2 <HAL_ADC_Start+0x12e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e000      	b.n	80020c4 <HAL_ADC_Start+0x130>
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_ADC_Start+0x170>)
 80020c4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00f      	beq.n	80020f2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
 80020e2:	e006      	b.n	80020f2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020ec:	e001      	b.n	80020f2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	50040300 	.word	0x50040300
 8002100:	50040100 	.word	0x50040100
 8002104:	50040000 	.word	0x50040000

08002108 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002112:	4866      	ldr	r0, [pc, #408]	; (80022ac <HAL_ADC_PollForConversion+0x1a4>)
 8002114:	f7ff fcf6 	bl	8001b04 <LL_ADC_GetMultimode>
 8002118:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b08      	cmp	r3, #8
 8002120:	d102      	bne.n	8002128 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002122:	2308      	movs	r3, #8
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e02a      	b.n	800217e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d002      	beq.n	800213a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b09      	cmp	r3, #9
 8002138:	d111      	bne.n	800215e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0a4      	b.n	80022a2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002158:	2304      	movs	r3, #4
 800215a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800215c:	e00f      	b.n	800217e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800215e:	4853      	ldr	r0, [pc, #332]	; (80022ac <HAL_ADC_PollForConversion+0x1a4>)
 8002160:	f7ff fcde 	bl	8001b20 <LL_ADC_GetMultiDMATransfer>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e093      	b.n	80022a2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800217a:	2304      	movs	r3, #4
 800217c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800217e:	f7ff fb79 	bl	8001874 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002184:	e021      	b.n	80021ca <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218c:	d01d      	beq.n	80021ca <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800218e:	f7ff fb71 	bl	8001874 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <HAL_ADC_PollForConversion+0x9c>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d112      	bne.n	80021ca <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10b      	bne.n	80021ca <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	f043 0204 	orr.w	r2, r3, #4
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e06b      	b.n	80022a2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0d6      	beq.n	8002186 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fbfc 	bl	80019e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01c      	beq.n	800222e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e5b      	ldrb	r3, [r3, #25]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d118      	bne.n	800222e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b08      	cmp	r3, #8
 8002208:	d111      	bne.n	800222e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_ADC_PollForConversion+0x1a8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d002      	beq.n	800223e <HAL_ADC_PollForConversion+0x136>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	e000      	b.n	8002240 <HAL_ADC_PollForConversion+0x138>
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_ADC_PollForConversion+0x1ac>)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	4293      	cmp	r3, r2
 8002246:	d008      	beq.n	800225a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d002      	beq.n	800225a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d104      	bne.n	8002264 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e00c      	b.n	800227e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_ADC_PollForConversion+0x1a8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d002      	beq.n	8002274 <HAL_ADC_PollForConversion+0x16c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e000      	b.n	8002276 <HAL_ADC_PollForConversion+0x16e>
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_ADC_PollForConversion+0x1ac>)
 8002276:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d104      	bne.n	800228e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2208      	movs	r2, #8
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e008      	b.n	80022a0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	220c      	movs	r2, #12
 800229e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	50040300 	.word	0x50040300
 80022b0:	50040100 	.word	0x50040100
 80022b4:	50040000 	.word	0x50040000

080022b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0b6      	sub	sp, #216	; 0xd8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x22>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e3c7      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x7b2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fcca 	bl	8001c9c <LL_ADC_REG_IsConversionOngoing>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 83a8 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d824      	bhi.n	8002362 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	3b02      	subs	r3, #2
 800231e:	2b03      	cmp	r3, #3
 8002320:	d81b      	bhi.n	800235a <HAL_ADC_ConfigChannel+0x86>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <HAL_ADC_ConfigChannel+0x54>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002339 	.word	0x08002339
 800232c:	08002341 	.word	0x08002341
 8002330:	08002349 	.word	0x08002349
 8002334:	08002351 	.word	0x08002351
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	220c      	movs	r2, #12
 800233c:	605a      	str	r2, [r3, #4]
          break;
 800233e:	e011      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2212      	movs	r2, #18
 8002344:	605a      	str	r2, [r3, #4]
          break;
 8002346:	e00d      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2218      	movs	r2, #24
 800234c:	605a      	str	r2, [r3, #4]
          break;
 800234e:	e009      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002356:	605a      	str	r2, [r3, #4]
          break;
 8002358:	e004      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2206      	movs	r2, #6
 800235e:	605a      	str	r2, [r3, #4]
          break;
 8002360:	e000      	b.n	8002364 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002362:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff fb4b 	bl	8001a0c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fc8e 	bl	8001c9c <LL_ADC_REG_IsConversionOngoing>
 8002380:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc9a 	bl	8001cc2 <LL_ADC_INJ_IsConversionOngoing>
 800238e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 81a6 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800239c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 81a1 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fb56 	bl	8001a64 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d00a      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ea:	f7ff faa7 	bl	800193c <LL_ADC_SetOffset>
 80023ee:	e17b      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fac4 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0x148>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fab9 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x186>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff faae 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800243e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800244e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x19e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1d0>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800248a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800248e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800249a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa7d 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fa61 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fa56 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x24c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa4b 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002500:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x264>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e018      	b.n	800256a <HAL_ADC_ConfigChannel+0x296>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800254c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e004      	b.n	800256a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800256a:	429a      	cmp	r2, r3
 800256c:	d106      	bne.n	800257c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fa1a 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f9fe 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x2d4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f9f3 	bl	8001984 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	e01e      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x312>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f9e8 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e004      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x32a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	e016      	b.n	800262c <HAL_ADC_ConfigChannel+0x358>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e004      	b.n	800262c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f9b9 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f99d 	bl	8001984 <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x396>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f992 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	e017      	b.n	800269a <HAL_ADC_ConfigChannel+0x3c6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f987 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x3de>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e011      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x402>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d106      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	2103      	movs	r1, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f964 	bl	80019b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fa9b 	bl	8001c28 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 813f 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f7ff f9d8 	bl	8001abc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a8e      	ldr	r2, [pc, #568]	; (800294c <HAL_ADC_ConfigChannel+0x678>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f040 8130 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x46c>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2b09      	cmp	r3, #9
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e019      	b.n	8002774 <HAL_ADC_ConfigChannel+0x4a0>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800275c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b09      	cmp	r3, #9
 800276c:	bf94      	ite	ls
 800276e:	2301      	movls	r3, #1
 8002770:	2300      	movhi	r3, #0
 8002772:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	2b00      	cmp	r3, #0
 8002776:	d079      	beq.n	800286c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x4c0>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	3301      	adds	r3, #1
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002792:	e015      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x4ec>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e003      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	069b      	lsls	r3, r3, #26
 80027bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x50c>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	e017      	b.n	8002810 <HAL_ADC_ConfigChannel+0x53c>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	ea42 0103 	orr.w	r1, r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x562>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	e018      	b.n	8002868 <HAL_ADC_ConfigChannel+0x594>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002868:	430b      	orrs	r3, r1
 800286a:	e080      	b.n	800296e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5b4>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	3301      	adds	r3, #1
 8002880:	069b      	lsls	r3, r3, #26
 8002882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002886:	e015      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x5e0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	069b      	lsls	r3, r3, #26
 80028b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x600>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	e017      	b.n	8002904 <HAL_ADC_ConfigChannel+0x630>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	61fb      	str	r3, [r7, #28]
  return result;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	ea42 0103 	orr.w	r1, r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x65c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	3301      	adds	r3, #1
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292e:	e01d      	b.n	800296c <HAL_ADC_ConfigChannel+0x698>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	613b      	str	r3, [r7, #16]
  return result;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e005      	b.n	8002958 <HAL_ADC_ConfigChannel+0x684>
 800294c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f003 021f 	and.w	r2, r3, #31
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	3b1e      	subs	r3, #30
 8002966:	051b      	lsls	r3, r3, #20
 8002968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	430b      	orrs	r3, r1
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	4619      	mov	r1, r3
 8002974:	f7ff f876 	bl	8001a64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_ADC_ConfigChannel+0x7bc>)
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d07a      	beq.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002984:	4843      	ldr	r0, [pc, #268]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002986:	f7fe ffcb 	bl	8001920 <LL_ADC_GetCommonPathInternalCh>
 800298a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d12c      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d126      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x6e4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7cc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d15d      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c0:	4619      	mov	r1, r3
 80029c2:	4834      	ldr	r0, [pc, #208]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 80029c4:	f7fe ff99 	bl	80018fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7d0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	4a36      	ldr	r2, [pc, #216]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d4>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029e2:	e002      	b.n	80029ea <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f0:	e040      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <HAL_ADC_ConfigChannel+0x7d8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d118      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x75a>
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d112      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0x748>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d12d      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a24:	4619      	mov	r1, r3
 8002a26:	481b      	ldr	r0, [pc, #108]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a28:	f7fe ff67 	bl	80018fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2c:	e024      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d120      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d115      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a56:	4619      	mov	r1, r3
 8002a58:	480e      	ldr	r0, [pc, #56]	; (8002a94 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a5a:	f7fe ff4e 	bl	80018fa <LL_ADC_SetCommonPathInternalCh>
 8002a5e:	e00c      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a72:	e002      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	37d8      	adds	r7, #216	; 0xd8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	80080000 	.word	0x80080000
 8002a94:	50040300 	.word	0x50040300
 8002a98:	c7520000 	.word	0xc7520000
 8002a9c:	50040000 	.word	0x50040000
 8002aa0:	50040200 	.word	0x50040200
 8002aa4:	20000010 	.word	0x20000010
 8002aa8:	053e2d63 	.word	0x053e2d63
 8002aac:	cb840000 	.word	0xcb840000
 8002ab0:	80000001 	.word	0x80000001

08002ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f8b1 	bl	8001c28 <LL_ADC_IsEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d14d      	bne.n	8002b68 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <ADC_Enable+0xc0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e039      	b.n	8002b6a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f86c 	bl	8001bd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b00:	f7fe feb8 	bl	8001874 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b06:	e028      	b.n	8002b5a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff f88b 	bl	8001c28 <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff f85b 	bl	8001bd8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b22:	f7fe fea7 	bl	8001874 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d914      	bls.n	8002b5a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d00d      	beq.n	8002b5a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d1cf      	bne.n	8002b08 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	8000003f 	.word	0x8000003f

08002b78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f862 	bl	8001c4e <LL_ADC_IsDisableOngoing>
 8002b8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f849 	bl	8001c28 <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d047      	beq.n	8002c2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d144      	bne.n	8002c2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030d 	and.w	r3, r3, #13
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10c      	bne.n	8002bca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff f823 	bl	8001c00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bc2:	f7fe fe57 	bl	8001874 <HAL_GetTick>
 8002bc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bc8:	e029      	b.n	8002c1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e023      	b.n	8002c2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002be6:	f7fe fe45 	bl	8001874 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d914      	bls.n	8002c1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e007      	b.n	8002c2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1dc      	bne.n	8002be6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <LL_ADC_IsEnabled>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <LL_ADC_IsEnabled+0x18>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <LL_ADC_IsEnabled+0x1a>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_StartCalibration>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_ADC_IsCalibrationOnGoing>:
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ca2:	d101      	bne.n	8002ca8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d101      	bne.n	8002cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e04d      	b.n	8002d94 <HAL_ADCEx_Calibration_Start+0xb8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff39 	bl	8002b78 <ADC_Disable>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d136      	bne.n	8002d7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d18:	f023 0302 	bic.w	r3, r3, #2
 8002d1c:	f043 0202 	orr.w	r2, r3, #2
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff96 	bl	8002c5c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d30:	e014      	b.n	8002d5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3301      	adds	r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002d3e:	d30d      	bcc.n	8002d5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f023 0312 	bic.w	r3, r3, #18
 8002d48:	f043 0210 	orr.w	r2, r3, #16
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01b      	b.n	8002d94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff94 	bl	8002c8e <LL_ADC_IsCalibrationOnGoing>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e2      	bne.n	8002d32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f023 0303 	bic.w	r3, r3, #3
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
 8002d7c:	e005      	b.n	8002d8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b09f      	sub	sp, #124	; 0x7c
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e093      	b.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d102      	bne.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002dd4:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	e001      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e072      	b.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff59 	bl	8002cb6 <LL_ADC_REG_IsConversionOngoing>
 8002e04:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff53 	bl	8002cb6 <LL_ADC_REG_IsConversionOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d154      	bne.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d151      	bne.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e1e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02c      	beq.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e3a:	035b      	lsls	r3, r3, #13
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e44:	4829      	ldr	r0, [pc, #164]	; (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e46:	f7ff fef6 	bl	8002c36 <LL_ADC_IsEnabled>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4828      	ldr	r0, [pc, #160]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e4e:	f7ff fef2 	bl	8002c36 <LL_ADC_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	431c      	orrs	r4, r3
 8002e56:	4828      	ldr	r0, [pc, #160]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e58:	f7ff feed 	bl	8002c36 <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d137      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	6811      	ldr	r1, [r2, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e80:	e028      	b.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8e:	4817      	ldr	r0, [pc, #92]	; (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e90:	f7ff fed1 	bl	8002c36 <LL_ADC_IsEnabled>
 8002e94:	4604      	mov	r4, r0
 8002e96:	4816      	ldr	r0, [pc, #88]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e98:	f7ff fecd 	bl	8002c36 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	431c      	orrs	r4, r3
 8002ea0:	4815      	ldr	r0, [pc, #84]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ea2:	f7ff fec8 	bl	8002c36 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4323      	orrs	r3, r4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d112      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eb6:	f023 030f 	bic.w	r3, r3, #15
 8002eba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ebc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ebe:	e009      	b.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ede:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	377c      	adds	r7, #124	; 0x7c
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd90      	pop	{r4, r7, pc}
 8002eea:	bf00      	nop
 8002eec:	50040000 	.word	0x50040000
 8002ef0:	50040100 	.word	0x50040100
 8002ef4:	50040300 	.word	0x50040300
 8002ef8:	50040200 	.word	0x50040200

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4907      	ldr	r1, [pc, #28]	; (8002f98 <__NVIC_EnableIRQ+0x38>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db0a      	blt.n	8002fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <__NVIC_SetPriority+0x4c>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc4:	e00a      	b.n	8002fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4908      	ldr	r1, [pc, #32]	; (8002fec <__NVIC_SetPriority+0x50>)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	440b      	add	r3, r1
 8002fda:	761a      	strb	r2, [r3, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f1c3 0307 	rsb	r3, r3, #7
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf28      	it	cs
 800300e:	2304      	movcs	r3, #4
 8003010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3304      	adds	r3, #4
 8003016:	2b06      	cmp	r3, #6
 8003018:	d902      	bls.n	8003020 <NVIC_EncodePriority+0x30>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3b03      	subs	r3, #3
 800301e:	e000      	b.n	8003022 <NVIC_EncodePriority+0x32>
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43d9      	mvns	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	4313      	orrs	r3, r2
         );
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff4c 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800307e:	f7ff ff61 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 8003082:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	6978      	ldr	r0, [r7, #20]
 800308a:	f7ff ffb1 	bl	8002ff0 <NVIC_EncodePriority>
 800308e:	4602      	mov	r2, r0
 8003090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff80 	bl	8002f9c <__NVIC_SetPriority>
}
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff54 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d008      	beq.n	80030ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2204      	movs	r2, #4
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e022      	b.n	8003130 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 020e 	bic.w	r2, r2, #14
 80030f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f003 021c 	and.w	r2, r3, #28
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d005      	beq.n	8003160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e029      	b.n	80031b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f003 021c 	and.w	r2, r3, #28
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
    }
  }
  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ce:	e17f      	b.n	80034d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8171 	beq.w	80034ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d005      	beq.n	8003200 <HAL_GPIO_Init+0x40>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d130      	bne.n	8003262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003236:	2201      	movs	r2, #1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0201 	and.w	r2, r3, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b03      	cmp	r3, #3
 800326c:	d118      	bne.n	80032a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003274:	2201      	movs	r2, #1
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f003 0201 	and.w	r2, r3, #1
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d017      	beq.n	80032dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d123      	bne.n	8003330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	08da      	lsrs	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3208      	adds	r2, #8
 80032f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	220f      	movs	r2, #15
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	6939      	ldr	r1, [r7, #16]
 800332c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80ac 	beq.w	80034ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	4b5f      	ldr	r3, [pc, #380]	; (80034f0 <HAL_GPIO_Init+0x330>)
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <HAL_GPIO_Init+0x330>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6613      	str	r3, [r2, #96]	; 0x60
 800337e:	4b5c      	ldr	r3, [pc, #368]	; (80034f0 <HAL_GPIO_Init+0x330>)
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800338a:	4a5a      	ldr	r2, [pc, #360]	; (80034f4 <HAL_GPIO_Init+0x334>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033b4:	d025      	beq.n	8003402 <HAL_GPIO_Init+0x242>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <HAL_GPIO_Init+0x338>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <HAL_GPIO_Init+0x23e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <HAL_GPIO_Init+0x33c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_Init+0x23a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4d      	ldr	r2, [pc, #308]	; (8003500 <HAL_GPIO_Init+0x340>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_Init+0x236>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_GPIO_Init+0x344>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_Init+0x232>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_GPIO_Init+0x348>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_Init+0x22e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4a      	ldr	r2, [pc, #296]	; (800350c <HAL_GPIO_Init+0x34c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_Init+0x22a>
 80033e6:	2306      	movs	r3, #6
 80033e8:	e00c      	b.n	8003404 <HAL_GPIO_Init+0x244>
 80033ea:	2307      	movs	r3, #7
 80033ec:	e00a      	b.n	8003404 <HAL_GPIO_Init+0x244>
 80033ee:	2305      	movs	r3, #5
 80033f0:	e008      	b.n	8003404 <HAL_GPIO_Init+0x244>
 80033f2:	2304      	movs	r3, #4
 80033f4:	e006      	b.n	8003404 <HAL_GPIO_Init+0x244>
 80033f6:	2303      	movs	r3, #3
 80033f8:	e004      	b.n	8003404 <HAL_GPIO_Init+0x244>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e002      	b.n	8003404 <HAL_GPIO_Init+0x244>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_GPIO_Init+0x244>
 8003402:	2300      	movs	r3, #0
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	f002 0203 	and.w	r2, r2, #3
 800340a:	0092      	lsls	r2, r2, #2
 800340c:	4093      	lsls	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003414:	4937      	ldr	r1, [pc, #220]	; (80034f4 <HAL_GPIO_Init+0x334>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	3302      	adds	r3, #2
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_GPIO_Init+0x350>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003446:	4a32      	ldr	r2, [pc, #200]	; (8003510 <HAL_GPIO_Init+0x350>)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_GPIO_Init+0x350>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <HAL_GPIO_Init+0x350>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_GPIO_Init+0x350>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_GPIO_Init+0x350>)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_GPIO_Init+0x350>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034c4:	4a12      	ldr	r2, [pc, #72]	; (8003510 <HAL_GPIO_Init+0x350>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f47f ae78 	bne.w	80031d0 <HAL_GPIO_Init+0x10>
  }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40010000 	.word	0x40010000
 80034f8:	48000400 	.word	0x48000400
 80034fc:	48000800 	.word	0x48000800
 8003500:	48000c00 	.word	0x48000c00
 8003504:	48001000 	.word	0x48001000
 8003508:	48001400 	.word	0x48001400
 800350c:	48001800 	.word	0x48001800
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003530:	e002      	b.n	8003538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_PWREx_GetVoltageRange+0x18>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40007000 	.word	0x40007000

08003560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356e:	d130      	bne.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d038      	beq.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800358c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2232      	movs	r2, #50	; 0x32
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	4a1b      	ldr	r2, [pc, #108]	; (8003608 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0c9b      	lsrs	r3, r3, #18
 80035a0:	3301      	adds	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a4:	e002      	b.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b8:	d102      	bne.n	80035c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f2      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d110      	bne.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e00f      	b.n	80035f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035de:	d007      	beq.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e8:	4a05      	ldr	r2, [pc, #20]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40007000 	.word	0x40007000
 8003604:	20000010 	.word	0x20000010
 8003608:	431bde83 	.word	0x431bde83

0800360c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e3d4      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361e:	4ba1      	ldr	r3, [pc, #644]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003628:	4b9e      	ldr	r3, [pc, #632]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80e4 	beq.w	8003808 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_RCC_OscConfig+0x4a>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b0c      	cmp	r3, #12
 800364a:	f040 808b 	bne.w	8003764 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 8087 	bne.w	8003764 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003656:	4b93      	ldr	r3, [pc, #588]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e3ac      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	4b8c      	ldr	r3, [pc, #560]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d004      	beq.n	8003688 <HAL_RCC_OscConfig+0x7c>
 800367e:	4b89      	ldr	r3, [pc, #548]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003686:	e005      	b.n	8003694 <HAL_RCC_OscConfig+0x88>
 8003688:	4b86      	ldr	r3, [pc, #536]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003694:	4293      	cmp	r3, r2
 8003696:	d223      	bcs.n	80036e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fd73 	bl	8004188 <RCC_SetFlashLatencyFromMSIRange>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e38d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ac:	4b7d      	ldr	r3, [pc, #500]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7c      	ldr	r2, [pc, #496]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036b2:	f043 0308 	orr.w	r3, r3, #8
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b7a      	ldr	r3, [pc, #488]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4977      	ldr	r1, [pc, #476]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	4972      	ldr	r1, [pc, #456]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
 80036de:	e025      	b.n	800372c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e0:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6f      	ldr	r2, [pc, #444]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036e6:	f043 0308 	orr.w	r3, r3, #8
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	496a      	ldr	r1, [pc, #424]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fe:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	4965      	ldr	r1, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd33 	bl	8004188 <RCC_SetFlashLatencyFromMSIRange>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e34d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800372c:	f000 fc36 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b5c      	ldr	r3, [pc, #368]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	495a      	ldr	r1, [pc, #360]	; (80038a8 <HAL_RCC_OscConfig+0x29c>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
 8003748:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_RCC_OscConfig+0x2a0>)
 800374a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800374c:	4b58      	ldr	r3, [pc, #352]	; (80038b0 <HAL_RCC_OscConfig+0x2a4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fc81 	bl	8001058 <HAL_InitTick>
 8003756:	4603      	mov	r3, r0
 8003758:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d052      	beq.n	8003806 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	e331      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d032      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800376c:	4b4d      	ldr	r3, [pc, #308]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a4c      	ldr	r2, [pc, #304]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003778:	f7fe f87c 	bl	8001874 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003780:	f7fe f878 	bl	8001874 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e31a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003792:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a40      	ldr	r2, [pc, #256]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b3e      	ldr	r3, [pc, #248]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	493b      	ldr	r1, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037bc:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	4936      	ldr	r1, [pc, #216]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
 80037d0:	e01a      	b.n	8003808 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037d2:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a33      	ldr	r2, [pc, #204]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037de:	f7fe f849 	bl	8001874 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e6:	f7fe f845 	bl	8001874 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e2e7      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037f8:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x1da>
 8003804:	e000      	b.n	8003808 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003806:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d074      	beq.n	80038fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x21a>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b0c      	cmp	r3, #12
 800381e:	d10e      	bne.n	800383e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d10b      	bne.n	800383e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003826:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d064      	beq.n	80038fc <HAL_RCC_OscConfig+0x2f0>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d160      	bne.n	80038fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e2c4      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x24a>
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e01d      	b.n	8003892 <HAL_RCC_OscConfig+0x286>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385e:	d10c      	bne.n	800387a <HAL_RCC_OscConfig+0x26e>
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e00b      	b.n	8003892 <HAL_RCC_OscConfig+0x286>
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a06      	ldr	r2, [pc, #24]	; (80038a4 <HAL_RCC_OscConfig+0x298>)
 800388c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389a:	f7fd ffeb 	bl	8001874 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a0:	e011      	b.n	80038c6 <HAL_RCC_OscConfig+0x2ba>
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	0800a090 	.word	0x0800a090
 80038ac:	20000010 	.word	0x20000010
 80038b0:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fd ffde 	bl	8001874 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e280      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c6:	4baf      	ldr	r3, [pc, #700]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x2a8>
 80038d2:	e014      	b.n	80038fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd ffce 	bl	8001874 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fd ffca 	bl	8001874 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	; 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e26c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ee:	4ba5      	ldr	r3, [pc, #660]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x2d0>
 80038fa:	e000      	b.n	80038fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d060      	beq.n	80039cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d005      	beq.n	800391c <HAL_RCC_OscConfig+0x310>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d119      	bne.n	800394a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d116      	bne.n	800394a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800391c:	4b99      	ldr	r3, [pc, #612]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_OscConfig+0x328>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e249      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003934:	4b93      	ldr	r3, [pc, #588]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	4990      	ldr	r1, [pc, #576]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003948:	e040      	b.n	80039cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d023      	beq.n	800399a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003952:	4b8c      	ldr	r3, [pc, #560]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a8b      	ldr	r2, [pc, #556]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd ff89 	bl	8001874 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003966:	f7fd ff85 	bl	8001874 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e227      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003978:	4b82      	ldr	r3, [pc, #520]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	497c      	ldr	r1, [pc, #496]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
 8003998:	e018      	b.n	80039cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399a:	4b7a      	ldr	r3, [pc, #488]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a79      	ldr	r2, [pc, #484]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 80039a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fd ff65 	bl	8001874 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fd ff61 	bl	8001874 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e203      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c0:	4b70      	ldr	r3, [pc, #448]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d03c      	beq.n	8003a52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01c      	beq.n	8003a1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	4a67      	ldr	r2, [pc, #412]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fd ff40 	bl	8001874 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f8:	f7fd ff3c 	bl	8001874 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1de      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a0a:	4b5e      	ldr	r3, [pc, #376]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ef      	beq.n	80039f8 <HAL_RCC_OscConfig+0x3ec>
 8003a18:	e01b      	b.n	8003a52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1a:	4b5a      	ldr	r3, [pc, #360]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a20:	4a58      	ldr	r2, [pc, #352]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fd ff23 	bl	8001874 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fd ff1f 	bl	8001874 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1c1      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a44:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ef      	bne.n	8003a32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80a6 	beq.w	8003bac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a64:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a70:	4b44      	ldr	r3, [pc, #272]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	4a43      	ldr	r2, [pc, #268]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7c:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <HAL_RCC_OscConfig+0x57c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d118      	bne.n	8003aca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a98:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_OscConfig+0x57c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a3a      	ldr	r2, [pc, #232]	; (8003b88 <HAL_RCC_OscConfig+0x57c>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fee6 	bl	8001874 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aac:	f7fd fee2 	bl	8001874 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e184      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abe:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_RCC_OscConfig+0x57c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d108      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4d8>
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae2:	e024      	b.n	8003b2e <HAL_RCC_OscConfig+0x522>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d110      	bne.n	8003b0e <HAL_RCC_OscConfig+0x502>
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	4a24      	ldr	r2, [pc, #144]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b0c:	e00f      	b.n	8003b2e <HAL_RCC_OscConfig+0x522>
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fe9d 	bl	8001874 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fd fe99 	bl	8001874 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e139      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_OscConfig+0x578>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ed      	beq.n	8003b3e <HAL_RCC_OscConfig+0x532>
 8003b62:	e01a      	b.n	8003b9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd fe86 	bl	8001874 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b6a:	e00f      	b.n	8003b8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fe82 	bl	8001874 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d906      	bls.n	8003b8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e122      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b8c:	4b90      	ldr	r3, [pc, #576]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e8      	bne.n	8003b6c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9a:	7ffb      	ldrb	r3, [r7, #31]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba0:	4b8b      	ldr	r3, [pc, #556]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba4:	4a8a      	ldr	r2, [pc, #552]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003baa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8108 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	f040 80d0 	bne.w	8003d60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bc0:	4b83      	ldr	r3, [pc, #524]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d130      	bne.n	8003c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	3b01      	subs	r3, #1
 8003be0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d127      	bne.n	8003c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d11f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c00:	2a07      	cmp	r2, #7
 8003c02:	bf14      	ite	ne
 8003c04:	2201      	movne	r2, #1
 8003c06:	2200      	moveq	r2, #0
 8003c08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d113      	bne.n	8003c36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d06e      	beq.n	8003d14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d069      	beq.n	8003d10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c3c:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c48:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b7      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c58:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a5c      	ldr	r2, [pc, #368]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c64:	f7fd fe06 	bl	8001874 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fd fe02 	bl	8001874 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0a4      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7e:	4b54      	ldr	r3, [pc, #336]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <HAL_RCC_OscConfig+0x7c8>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c9a:	3a01      	subs	r2, #1
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ca4:	0212      	lsls	r2, r2, #8
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cac:	0852      	lsrs	r2, r2, #1
 8003cae:	3a01      	subs	r2, #1
 8003cb0:	0552      	lsls	r2, r2, #21
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cb8:	0852      	lsrs	r2, r2, #1
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	0652      	lsls	r2, r2, #25
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cc4:	0912      	lsrs	r2, r2, #4
 8003cc6:	0452      	lsls	r2, r2, #17
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	4941      	ldr	r1, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3e      	ldr	r2, [pc, #248]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cdc:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ce8:	f7fd fdc4 	bl	8001874 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fd fdc0 	bl	8001874 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e062      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d0e:	e05a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e059      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d152      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d38:	f7fd fd9c 	bl	8001874 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fd98 	bl	8001874 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e03a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d52:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x734>
 8003d5e:	e032      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d02d      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a19      	ldr	r2, [pc, #100]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d70:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d84:	f023 0303 	bic.w	r3, r3, #3
 8003d88:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003d90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7fd fd6b 	bl	8001874 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fd fd67 	bl	8001874 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e009      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x7c4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x796>
 8003dc0:	e001      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	f99d808c 	.word	0xf99d808c

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0c8      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d910      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 0207 	bic.w	r2, r3, #7
 8003e02:	4961      	ldr	r1, [pc, #388]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b5f      	ldr	r3, [pc, #380]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b0      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d04c      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e30:	4b56      	ldr	r3, [pc, #344]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d121      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e09e      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e48:	4b50      	ldr	r3, [pc, #320]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d115      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e092      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e60:	4b4a      	ldr	r3, [pc, #296]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e086      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e70:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e07e      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e80:	4b42      	ldr	r3, [pc, #264]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 0203 	bic.w	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	493f      	ldr	r1, [pc, #252]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e92:	f7fd fcef 	bl	8001874 <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9a:	f7fd fceb 	bl	8001874 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e066      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb0:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 020c 	and.w	r2, r3, #12
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d1eb      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	492c      	ldr	r1, [pc, #176]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d210      	bcs.n	8003f10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	4924      	ldr	r1, [pc, #144]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_RCC_ClockConfig+0x1b0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e036      	b.n	8003f7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4918      	ldr	r1, [pc, #96]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4910      	ldr	r1, [pc, #64]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f4e:	f000 f825 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 8003f52:	4602      	mov	r2, r0
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <HAL_RCC_ClockConfig+0x1b4>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	490c      	ldr	r1, [pc, #48]	; (8003f90 <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	5ccb      	ldrb	r3, [r1, r3]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd f870 	bl	8001058 <HAL_InitTick>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40022000 	.word	0x40022000
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	0800a090 	.word	0x0800a090
 8003f94:	20000010 	.word	0x20000010
 8003f98:	20000018 	.word	0x20000018

08003f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b089      	sub	sp, #36	; 0x24
 8003fa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003faa:	4b3e      	ldr	r3, [pc, #248]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb4:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d121      	bne.n	800400e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d11e      	bne.n	800400e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fdc:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e005      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fec:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ff8:	4a2b      	ldr	r2, [pc, #172]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004000:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d102      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e004      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d101      	bne.n	8004024 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004020:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004022:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d134      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d003      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0xa6>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d003      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0xac>
 8004040:	e005      	b.n	800404e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004044:	617b      	str	r3, [r7, #20]
      break;
 8004046:	e005      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004048:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800404a:	617b      	str	r3, [r7, #20]
      break;
 800404c:	e002      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	617b      	str	r3, [r7, #20]
      break;
 8004052:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	3301      	adds	r3, #1
 8004060:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	fb02 f203 	mul.w	r2, r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	0e5b      	lsrs	r3, r3, #25
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	3301      	adds	r3, #1
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004094:	69bb      	ldr	r3, [r7, #24]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3724      	adds	r7, #36	; 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	0800a0a8 	.word	0x0800a0a8
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	007a1200 	.word	0x007a1200

080040b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000010 	.word	0x20000010

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040d0:	f7ff fff0 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4904      	ldr	r1, [pc, #16]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	0800a0a0 	.word	0x0800a0a0

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040fc:	f7ff ffda 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0adb      	lsrs	r3, r3, #11
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	0800a0a0 	.word	0x0800a0a0

08004124 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	220f      	movs	r2, #15
 8004132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0203 	and.w	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_GetClockConfig+0x5c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_RCC_GetClockConfig+0x60>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0207 	and.w	r2, r3, #7
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	40022000 	.word	0x40022000

08004188 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004194:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041a0:	f7ff f9d0 	bl	8003544 <HAL_PWREx_GetVoltageRange>
 80041a4:	6178      	str	r0, [r7, #20]
 80041a6:	e014      	b.n	80041d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	4a24      	ldr	r2, [pc, #144]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6593      	str	r3, [r2, #88]	; 0x58
 80041b4:	4b22      	ldr	r3, [pc, #136]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041c0:	f7ff f9c0 	bl	8003544 <HAL_PWREx_GetVoltageRange>
 80041c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d10b      	bne.n	80041f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d919      	bls.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2ba0      	cmp	r3, #160	; 0xa0
 80041e4:	d902      	bls.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e6:	2302      	movs	r3, #2
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e013      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041ec:	2301      	movs	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e010      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d902      	bls.n	80041fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041f8:	2303      	movs	r3, #3
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e00a      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d102      	bne.n	800420a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004204:	2302      	movs	r3, #2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e004      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b70      	cmp	r3, #112	; 0x70
 800420e:	d101      	bne.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004210:	2301      	movs	r3, #1
 8004212:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 0207 	bic.w	r2, r3, #7
 800421c:	4909      	ldr	r1, [pc, #36]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d001      	beq.n	8004236 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	40022000 	.word	0x40022000

08004248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004250:	2300      	movs	r3, #0
 8004252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004254:	2300      	movs	r3, #0
 8004256:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004260:	2b00      	cmp	r3, #0
 8004262:	d041      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004268:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800426c:	d02a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800426e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004272:	d824      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800427a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800427e:	d81e      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004288:	d010      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800428a:	e018      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800428c:	4b86      	ldr	r3, [pc, #536]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a85      	ldr	r2, [pc, #532]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004296:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004298:	e015      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fabb 	bl	800481c <RCCEx_PLLSAI1_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042aa:	e00c      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3320      	adds	r3, #32
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fba6 	bl	8004a04 <RCCEx_PLLSAI2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042bc:	e003      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	74fb      	strb	r3, [r7, #19]
      break;
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042cc:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042da:	4973      	ldr	r1, [pc, #460]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042e2:	e001      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d041      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042fc:	d02a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004302:	d824      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004308:	d008      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800430a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800430e:	d81e      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004318:	d010      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800431a:	e018      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800431c:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a61      	ldr	r2, [pc, #388]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004328:	e015      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fa73 	bl	800481c <RCCEx_PLLSAI1_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800433a:	e00c      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3320      	adds	r3, #32
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fb5e 	bl	8004a04 <RCCEx_PLLSAI2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800434c:	e003      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	74fb      	strb	r3, [r7, #19]
      break;
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800435c:	4b52      	ldr	r3, [pc, #328]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800436a:	494f      	ldr	r1, [pc, #316]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004372:	e001      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80a0 	beq.w	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00d      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a0:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	4a40      	ldr	r2, [pc, #256]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043aa:	6593      	str	r3, [r2, #88]	; 0x58
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043bc:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3a      	ldr	r2, [pc, #232]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c8:	f7fd fa54 	bl	8001874 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ce:	e009      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fd fa50 	bl	8001874 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	74fb      	strb	r3, [r7, #19]
        break;
 80043e2:	e005      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e4:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ef      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d15c      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f6:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	429a      	cmp	r2, r3
 8004412:	d019      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004414:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d016      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fd fa0f 	bl	8001874 <HAL_GetTick>
 8004456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004458:	e00b      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fd fa0b 	bl	8001874 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d902      	bls.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	74fb      	strb	r3, [r7, #19]
            break;
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ec      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004496:	4904      	ldr	r1, [pc, #16]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800449e:	e009      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	74bb      	strb	r3, [r7, #18]
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b4:	7c7b      	ldrb	r3, [r7, #17]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ba:	4b9e      	ldr	r3, [pc, #632]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	4a9d      	ldr	r2, [pc, #628]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044d2:	4b98      	ldr	r3, [pc, #608]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f023 0203 	bic.w	r2, r3, #3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	4994      	ldr	r1, [pc, #592]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044f4:	4b8f      	ldr	r3, [pc, #572]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 020c 	bic.w	r2, r3, #12
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	498c      	ldr	r1, [pc, #560]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004516:	4b87      	ldr	r3, [pc, #540]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	4983      	ldr	r1, [pc, #524]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004538:	4b7e      	ldr	r3, [pc, #504]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	497b      	ldr	r1, [pc, #492]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800455a:	4b76      	ldr	r3, [pc, #472]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	4972      	ldr	r1, [pc, #456]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800457c:	4b6d      	ldr	r3, [pc, #436]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	496a      	ldr	r1, [pc, #424]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800459e:	4b65      	ldr	r3, [pc, #404]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	4961      	ldr	r1, [pc, #388]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045c0:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ce:	4959      	ldr	r1, [pc, #356]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e2:	4b54      	ldr	r3, [pc, #336]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	4950      	ldr	r1, [pc, #320]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	4948      	ldr	r1, [pc, #288]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004626:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	493f      	ldr	r1, [pc, #252]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d028      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004648:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	4937      	ldr	r1, [pc, #220]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004666:	d106      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a31      	ldr	r2, [pc, #196]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004672:	60d3      	str	r3, [r2, #12]
 8004674:	e011      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800467a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467e:	d10c      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f8c8 	bl	800481c <RCCEx_PLLSAI1_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d028      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046a6:	4b23      	ldr	r3, [pc, #140]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	491f      	ldr	r1, [pc, #124]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c4:	d106      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d0:	60d3      	str	r3, [r2, #12]
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f899 	bl	800481c <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02b      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004712:	4908      	ldr	r1, [pc, #32]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004722:	d109      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a02      	ldr	r2, [pc, #8]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	60d3      	str	r3, [r2, #12]
 8004730:	e014      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004740:	d10c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f867 	bl	800481c <RCCEx_PLLSAI1_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02f      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004776:	4928      	ldr	r1, [pc, #160]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004786:	d10d      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f844 	bl	800481c <RCCEx_PLLSAI1_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d014      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	74bb      	strb	r3, [r7, #18]
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3320      	adds	r3, #32
 80047b2:	2102      	movs	r1, #2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f925 	bl	8004a04 <RCCEx_PLLSAI2_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047be:	7cfb      	ldrb	r3, [r7, #19]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e2:	490d      	ldr	r1, [pc, #52]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004806:	4904      	ldr	r1, [pc, #16]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800480e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000

0800481c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800482a:	4b75      	ldr	r3, [pc, #468]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004836:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0203 	and.w	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d10d      	bne.n	8004862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
       ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800484e:	4b6c      	ldr	r3, [pc, #432]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
       ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d047      	beq.n	80048f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
 8004866:	e044      	b.n	80048f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d018      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0x86>
 8004870:	2b03      	cmp	r3, #3
 8004872:	d825      	bhi.n	80048c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004874:	2b01      	cmp	r3, #1
 8004876:	d002      	beq.n	800487e <RCCEx_PLLSAI1_Config+0x62>
 8004878:	2b02      	cmp	r3, #2
 800487a:	d009      	beq.n	8004890 <RCCEx_PLLSAI1_Config+0x74>
 800487c:	e020      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800487e:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11d      	bne.n	80048c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800488e:	e01a      	b.n	80048c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004890:	4b5b      	ldr	r3, [pc, #364]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004898:	2b00      	cmp	r3, #0
 800489a:	d116      	bne.n	80048ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e013      	b.n	80048ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048a2:	4b57      	ldr	r3, [pc, #348]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10f      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ae:	4b54      	ldr	r3, [pc, #336]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048be:	e006      	b.n	80048ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
      break;
 80048c4:	e004      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c6:	bf00      	nop
 80048c8:	e002      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ca:	bf00      	nop
 80048cc:	e000      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	430b      	orrs	r3, r1
 80048ec:	4944      	ldr	r1, [pc, #272]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d17d      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048f8:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a40      	ldr	r2, [pc, #256]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004904:	f7fc ffb6 	bl	8001874 <HAL_GetTick>
 8004908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800490a:	e009      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800490c:	f7fc ffb2 	bl	8001874 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d902      	bls.n	8004920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	73fb      	strb	r3, [r7, #15]
        break;
 800491e:	e005      	b.n	800492c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004920:	4b37      	ldr	r3, [pc, #220]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ef      	bne.n	800490c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d160      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004938:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	0211      	lsls	r1, r2, #8
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68d2      	ldr	r2, [r2, #12]
 800494e:	0912      	lsrs	r2, r2, #4
 8004950:	0452      	lsls	r2, r2, #17
 8004952:	430a      	orrs	r2, r1
 8004954:	492a      	ldr	r1, [pc, #168]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	610b      	str	r3, [r1, #16]
 800495a:	e027      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d112      	bne.n	8004988 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800496a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	0211      	lsls	r1, r2, #8
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6912      	ldr	r2, [r2, #16]
 8004978:	0852      	lsrs	r2, r2, #1
 800497a:	3a01      	subs	r2, #1
 800497c:	0552      	lsls	r2, r2, #21
 800497e:	430a      	orrs	r2, r1
 8004980:	491f      	ldr	r1, [pc, #124]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	610b      	str	r3, [r1, #16]
 8004986:	e011      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004990:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6892      	ldr	r2, [r2, #8]
 8004998:	0211      	lsls	r1, r2, #8
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6952      	ldr	r2, [r2, #20]
 800499e:	0852      	lsrs	r2, r2, #1
 80049a0:	3a01      	subs	r2, #1
 80049a2:	0652      	lsls	r2, r2, #25
 80049a4:	430a      	orrs	r2, r1
 80049a6:	4916      	ldr	r1, [pc, #88]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fc ff5c 	bl	8001874 <HAL_GetTick>
 80049bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049be:	e009      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049c0:	f7fc ff58 	bl	8001874 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d902      	bls.n	80049d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	73fb      	strb	r3, [r7, #15]
          break;
 80049d2:	e005      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ef      	beq.n	80049c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	4904      	ldr	r1, [pc, #16]	; (8004a00 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a12:	4b6a      	ldr	r3, [pc, #424]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a1e:	4b67      	ldr	r3, [pc, #412]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0203 	and.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d10d      	bne.n	8004a4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
       ||
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a36:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
       ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d047      	beq.n	8004ada <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	e044      	b.n	8004ada <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d018      	beq.n	8004a8a <RCCEx_PLLSAI2_Config+0x86>
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d825      	bhi.n	8004aa8 <RCCEx_PLLSAI2_Config+0xa4>
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d002      	beq.n	8004a66 <RCCEx_PLLSAI2_Config+0x62>
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d009      	beq.n	8004a78 <RCCEx_PLLSAI2_Config+0x74>
 8004a64:	e020      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a66:	4b55      	ldr	r3, [pc, #340]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d11d      	bne.n	8004aae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a76:	e01a      	b.n	8004aae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a78:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a88:	e013      	b.n	8004ab2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a8a:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a96:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004aa6:	e006      	b.n	8004ab6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8004aac:	e004      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10d      	bne.n	8004ada <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004abe:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	4939      	ldr	r1, [pc, #228]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d167      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a35      	ldr	r2, [pc, #212]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aec:	f7fc fec2 	bl	8001874 <HAL_GetTick>
 8004af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004af2:	e009      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004af4:	f7fc febe 	bl	8001874 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d902      	bls.n	8004b08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	73fb      	strb	r3, [r7, #15]
        break;
 8004b06:	e005      	b.n	8004b14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b08:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ef      	bne.n	8004af4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d14a      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d111      	bne.n	8004b44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b20:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6892      	ldr	r2, [r2, #8]
 8004b30:	0211      	lsls	r1, r2, #8
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	0912      	lsrs	r2, r2, #4
 8004b38:	0452      	lsls	r2, r2, #17
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	491f      	ldr	r1, [pc, #124]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	614b      	str	r3, [r1, #20]
 8004b42:	e011      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b44:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6892      	ldr	r2, [r2, #8]
 8004b54:	0211      	lsls	r1, r2, #8
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6912      	ldr	r2, [r2, #16]
 8004b5a:	0852      	lsrs	r2, r2, #1
 8004b5c:	3a01      	subs	r2, #1
 8004b5e:	0652      	lsls	r2, r2, #25
 8004b60:	430a      	orrs	r2, r1
 8004b62:	4916      	ldr	r1, [pc, #88]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fc fe7e 	bl	8001874 <HAL_GetTick>
 8004b78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b7a:	e009      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b7c:	f7fc fe7a 	bl	8001874 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d902      	bls.n	8004b90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b8e:	e005      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ef      	beq.n	8004b7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	4904      	ldr	r1, [pc, #16]	; (8004bbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000

08004bc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d06c      	beq.n	8004cac <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fb ff88 	bl	8000afc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	22ca      	movs	r2, #202	; 0xca
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2253      	movs	r2, #83	; 0x53
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fa49 	bl	800509c <RTC_EnterInitMode>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d14b      	bne.n	8004cac <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c26:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6899      	ldr	r1, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6919      	ldr	r1, [r3, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	041a      	lsls	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa4d 	bl	8005104 <RTC_ExitInitMode>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11b      	bne.n	8004cac <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0203 	bic.w	r2, r2, #3
 8004c82:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cb6:	b590      	push	{r4, r7, lr}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_RTC_SetTime+0x1a>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e08b      	b.n	8004de8 <HAL_RTC_SetTime+0x132>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	22ca      	movs	r2, #202	; 0xca
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2253      	movs	r2, #83	; 0x53
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f9d3 	bl	800509c <RTC_EnterInitMode>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d163      	bne.n	8004dc8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d126      	bne.n	8004d54 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fa2e 	bl	8005180 <RTC_ByteToBcd2>
 8004d24:	4603      	mov	r3, r0
 8004d26:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fa27 	bl	8005180 <RTC_ByteToBcd2>
 8004d32:	4603      	mov	r3, r0
 8004d34:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d36:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	789b      	ldrb	r3, [r3, #2]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fa1f 	bl	8005180 <RTC_ByteToBcd2>
 8004d42:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d44:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	78db      	ldrb	r3, [r3, #3]
 8004d4c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e018      	b.n	8004d86 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2200      	movs	r2, #0
 8004d66:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d74:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d7a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	78db      	ldrb	r3, [r3, #3]
 8004d80:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d90:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d94:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f9a0 	bl	8005104 <RTC_ExitInitMode>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	22ff      	movs	r2, #255	; 0xff
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}

08004df0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e1e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	0d9b      	lsrs	r3, r3, #22
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11a      	bne.n	8004e9e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f9a7 	bl	80051c0 <RTC_Bcd2ToByte>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	785b      	ldrb	r3, [r3, #1]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f99e 	bl	80051c0 <RTC_Bcd2ToByte>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	789b      	ldrb	r3, [r3, #2]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f995 	bl	80051c0 <RTC_Bcd2ToByte>
 8004e96:	4603      	mov	r3, r0
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RTC_SetDate+0x1a>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e075      	b.n	8004fae <HAL_RTC_SetDate+0x106>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_RTC_SetDate+0x4e>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	330a      	adds	r3, #10
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11c      	bne.n	8004f36 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	78db      	ldrb	r3, [r3, #3]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f93d 	bl	8005180 <RTC_ByteToBcd2>
 8004f06:	4603      	mov	r3, r0
 8004f08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f936 	bl	8005180 <RTC_ByteToBcd2>
 8004f14:	4603      	mov	r3, r0
 8004f16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004f18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	789b      	ldrb	r3, [r3, #2]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f92e 	bl	8005180 <RTC_ByteToBcd2>
 8004f24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e00e      	b.n	8004f54 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	78db      	ldrb	r3, [r3, #3]
 8004f3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f42:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	22ca      	movs	r2, #202	; 0xca
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2253      	movs	r2, #83	; 0x53
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f899 	bl	800509c <RTC_EnterInitMode>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10c      	bne.n	8004f8e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f82:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f8bd 	bl	8005104 <RTC_ExitInitMode>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd90      	pop	{r4, r7, pc}

08004fb6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	0b5b      	lsrs	r3, r3, #13
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11a      	bne.n	8005046 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	78db      	ldrb	r3, [r3, #3]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f8d3 	bl	80051c0 <RTC_Bcd2ToByte>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f8ca 	bl	80051c0 <RTC_Bcd2ToByte>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	789b      	ldrb	r3, [r3, #2]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f8c1 	bl	80051c0 <RTC_Bcd2ToByte>
 800503e:	4603      	mov	r3, r0
 8005040:	461a      	mov	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005066:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005068:	f7fc fc04 	bl	8001874 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800506e:	e009      	b.n	8005084 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005070:	f7fc fc00 	bl	8001874 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800507e:	d901      	bls.n	8005084 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e007      	b.n	8005094 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0ee      	beq.n	8005070 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d120      	bne.n	80050f8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80050c0:	f7fc fbd8 	bl	8001874 <HAL_GetTick>
 80050c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80050c6:	e00d      	b.n	80050e4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80050c8:	f7fc fbd4 	bl	8001874 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d6:	d905      	bls.n	80050e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2203      	movs	r2, #3
 80050e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <RTC_EnterInitMode+0x5c>
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d1e7      	bne.n	80050c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005110:	4b1a      	ldr	r3, [pc, #104]	; (800517c <RTC_ExitInitMode+0x78>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <RTC_ExitInitMode+0x78>)
 8005116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800511c:	4b17      	ldr	r3, [pc, #92]	; (800517c <RTC_ExitInitMode+0x78>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10c      	bne.n	8005142 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff ff91 	bl	8005050 <HAL_RTC_WaitForSynchro>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01e      	beq.n	8005172 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2203      	movs	r2, #3
 8005138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	e017      	b.n	8005172 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <RTC_ExitInitMode+0x78>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4a0d      	ldr	r2, [pc, #52]	; (800517c <RTC_ExitInitMode+0x78>)
 8005148:	f023 0320 	bic.w	r3, r3, #32
 800514c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff7e 	bl	8005050 <HAL_RTC_WaitForSynchro>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2203      	movs	r2, #3
 800515e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <RTC_ExitInitMode+0x78>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4a04      	ldr	r2, [pc, #16]	; (800517c <RTC_ExitInitMode+0x78>)
 800516c:	f043 0320 	orr.w	r3, r3, #32
 8005170:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40002800 	.word	0x40002800

08005180 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005192:	e005      	b.n	80051a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800519a:	7afb      	ldrb	r3, [r7, #11]
 800519c:	3b0a      	subs	r3, #10
 800519e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80051a0:	7afb      	ldrb	r3, [r7, #11]
 80051a2:	2b09      	cmp	r3, #9
 80051a4:	d8f6      	bhi.n	8005194 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b2db      	uxtb	r3, r3
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	4413      	add	r3, r2
 80051e6:	b2db      	uxtb	r3, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e095      	b.n	8005332 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	d108      	bne.n	8005220 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005216:	d009      	beq.n	800522c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	61da      	str	r2, [r3, #28]
 800521e:	e005      	b.n	800522c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fb fd50 	bl	8000cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800526c:	d902      	bls.n	8005274 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	e002      	b.n	800527a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005278:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005282:	d007      	beq.n	8005294 <HAL_SPI_Init+0xa0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	ea42 0103 	orr.w	r1, r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	f003 0204 	and.w	r2, r3, #4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005310:	ea42 0103 	orr.w	r1, r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b088      	sub	sp, #32
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_SPI_Transmit+0x22>
 8005358:	2302      	movs	r3, #2
 800535a:	e158      	b.n	800560e <HAL_SPI_Transmit+0x2d4>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005364:	f7fc fa86 	bl	8001874 <HAL_GetTick>
 8005368:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800537a:	2302      	movs	r3, #2
 800537c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800537e:	e13d      	b.n	80055fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_SPI_Transmit+0x52>
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005390:	e134      	b.n	80055fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2203      	movs	r2, #3
 8005396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d10f      	bne.n	80053fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d007      	beq.n	800541c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005424:	d94b      	bls.n	80054be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Transmit+0xfa>
 800542e:	8afb      	ldrh	r3, [r7, #22]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d13e      	bne.n	80054b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005458:	e02b      	b.n	80054b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d112      	bne.n	800548e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	881a      	ldrh	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800548c:	e011      	b.n	80054b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548e:	f7fc f9f1 	bl	8001874 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d803      	bhi.n	80054a6 <HAL_SPI_Transmit+0x16c>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_Transmit+0x172>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054b0:	e0a4      	b.n	80055fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ce      	bne.n	800545a <HAL_SPI_Transmit+0x120>
 80054bc:	e07c      	b.n	80055b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Transmit+0x192>
 80054c6:	8afb      	ldrh	r3, [r7, #22]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d170      	bne.n	80055ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d912      	bls.n	80054fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	881a      	ldrh	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b02      	subs	r3, #2
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054fa:	e058      	b.n	80055ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005522:	e044      	b.n	80055ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d12b      	bne.n	800558a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	d912      	bls.n	8005562 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b02      	subs	r3, #2
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005560:	e025      	b.n	80055ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005588:	e011      	b.n	80055ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800558a:	f7fc f973 	bl	8001874 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d803      	bhi.n	80055a2 <HAL_SPI_Transmit+0x268>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a0:	d102      	bne.n	80055a8 <HAL_SPI_Transmit+0x26e>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055ac:	e026      	b.n	80055fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1b5      	bne.n	8005524 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f949 	bl	8005854 <SPI_EndRxTxTransaction>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e000      	b.n	80055fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80055fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800560c:	7ffb      	ldrb	r3, [r7, #31]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005628:	f7fc f924 	bl	8001874 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	4413      	add	r3, r2
 8005636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005638:	f7fc f91c 	bl	8001874 <HAL_GetTick>
 800563c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	015b      	lsls	r3, r3, #5
 8005644:	0d1b      	lsrs	r3, r3, #20
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800564e:	e054      	b.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005656:	d050      	beq.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005658:	f7fc f90c 	bl	8001874 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	429a      	cmp	r2, r3
 8005666:	d902      	bls.n	800566e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d13d      	bne.n	80056ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800567c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005686:	d111      	bne.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005690:	d004      	beq.n	800569c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569a:	d107      	bne.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b4:	d10f      	bne.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e017      	b.n	800571a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4013      	ands	r3, r2
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	429a      	cmp	r2, r3
 8005708:	bf0c      	ite	eq
 800570a:	2301      	moveq	r3, #1
 800570c:	2300      	movne	r3, #0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	429a      	cmp	r2, r3
 8005716:	d19b      	bne.n	8005650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000010 	.word	0x20000010

08005728 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800573a:	f7fc f89b 	bl	8001874 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	4413      	add	r3, r2
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800574a:	f7fc f893 	bl	8001874 <HAL_GetTick>
 800574e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005758:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00da      	lsls	r2, r3, #3
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	0d1b      	lsrs	r3, r3, #20
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005770:	e060      	b.n	8005834 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005778:	d107      	bne.n	800578a <SPI_WaitFifoStateUntilTimeout+0x62>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005788:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005790:	d050      	beq.n	8005834 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005792:	f7fc f86f 	bl	8001874 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579e:	429a      	cmp	r2, r3
 80057a0:	d902      	bls.n	80057a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d13d      	bne.n	8005824 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c0:	d111      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d004      	beq.n	80057d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d4:	d107      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ee:	d10f      	bne.n	8005810 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800580e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e010      	b.n	8005846 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	3b01      	subs	r3, #1
 8005832:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d196      	bne.n	8005772 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3728      	adds	r7, #40	; 0x28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000010 	.word	0x20000010

08005854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff ff5b 	bl	8005728 <SPI_WaitFifoStateUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e027      	b.n	80058d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	2180      	movs	r1, #128	; 0x80
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff fec0 	bl	8005618 <SPI_WaitFlagStateUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e014      	b.n	80058d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff ff34 	bl	8005728 <SPI_WaitFifoStateUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e000      	b.n	80058d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e049      	b.n	8005986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb fdaa 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f000 fd34 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d001      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e04f      	b.n	8005a48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01d      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0x76>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d018      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0x76>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0x76>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0x76>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0x76>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_TIM_Base_Start_IT+0x76>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d115      	bne.n	8005a32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <HAL_TIM_Base_Start_IT+0xdc>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	d015      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0xb4>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1e:	d011      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	e008      	b.n	8005a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e000      	b.n	8005a46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40013400 	.word	0x40013400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	00010007 	.word	0x00010007

08005a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e049      	b.n	8005b16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f841 	bl	8005b1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f000 fc6c 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <HAL_TIM_PWM_Start+0x24>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	bf14      	ite	ne
 8005b50:	2301      	movne	r3, #1
 8005b52:	2300      	moveq	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e03c      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x9e>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d109      	bne.n	8005b72 <HAL_TIM_PWM_Start+0x3e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	bf14      	ite	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2300      	moveq	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	e02f      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x9e>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d109      	bne.n	8005b8c <HAL_TIM_PWM_Start+0x58>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e022      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x9e>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b0c      	cmp	r3, #12
 8005b90:	d109      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0x72>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	bf14      	ite	ne
 8005b9e:	2301      	movne	r3, #1
 8005ba0:	2300      	moveq	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	e015      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x9e>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d109      	bne.n	8005bc0 <HAL_TIM_PWM_Start+0x8c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	bf14      	ite	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	2300      	moveq	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e008      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x9e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e09c      	b.n	8005d14 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Start+0xb6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be8:	e023      	b.n	8005c32 <HAL_TIM_PWM_Start+0xfe>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0xc6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf8:	e01b      	b.n	8005c32 <HAL_TIM_PWM_Start+0xfe>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0xd6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c08:	e013      	b.n	8005c32 <HAL_TIM_PWM_Start+0xfe>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Start+0xe6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c18:	e00b      	b.n	8005c32 <HAL_TIM_PWM_Start+0xfe>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Start+0xf6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c28:	e003      	b.n	8005c32 <HAL_TIM_PWM_Start+0xfe>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2201      	movs	r2, #1
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 ffb0 	bl	8006ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a35      	ldr	r2, [pc, #212]	; (8005d1c <HAL_TIM_PWM_Start+0x1e8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x13e>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <HAL_TIM_PWM_Start+0x1ec>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00e      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x13e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a32      	ldr	r2, [pc, #200]	; (8005d24 <HAL_TIM_PWM_Start+0x1f0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d009      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x13e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a31      	ldr	r2, [pc, #196]	; (8005d28 <HAL_TIM_PWM_Start+0x1f4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_TIM_PWM_Start+0x13e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2f      	ldr	r2, [pc, #188]	; (8005d2c <HAL_TIM_PWM_Start+0x1f8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x142>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <HAL_TIM_PWM_Start+0x144>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <HAL_TIM_PWM_Start+0x1e8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01d      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x19e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9e:	d018      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x19e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <HAL_TIM_PWM_Start+0x1fc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x19e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_TIM_PWM_Start+0x200>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x19e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_TIM_PWM_Start+0x204>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x19e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <HAL_TIM_PWM_Start+0x1ec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x19e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a15      	ldr	r2, [pc, #84]	; (8005d24 <HAL_TIM_PWM_Start+0x1f0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d115      	bne.n	8005cfe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_TIM_PWM_Start+0x208>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b06      	cmp	r3, #6
 8005ce2:	d015      	beq.n	8005d10 <HAL_TIM_PWM_Start+0x1dc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cea:	d011      	beq.n	8005d10 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfc:	e008      	b.n	8005d10 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e000      	b.n	8005d12 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800
 8005d38:	40000c00 	.word	0x40000c00
 8005d3c:	00010007 	.word	0x00010007

08005d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0202 	mvn.w	r2, #2
 8005d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fae3 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fad5 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fae6 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0204 	mvn.w	r2, #4
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fab9 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 faab 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fabc 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0208 	mvn.w	r2, #8
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa8f 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa81 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fa92 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0210 	mvn.w	r2, #16
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa65 	bl	800634e <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa57 	bl	800633a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa68 	bl	8006362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0201 	mvn.w	r2, #1
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fa fda8 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 ff8e 	bl	8006e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d10e      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 ff81 	bl	8006e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d10e      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa16 	bl	8006376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f06f 0220 	mvn.w	r2, #32
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 ff41 	bl	8006df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e0ff      	b.n	800619e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b14      	cmp	r3, #20
 8005faa:	f200 80f0 	bhi.w	800618e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08006009 	.word	0x08006009
 8005fb8:	0800618f 	.word	0x0800618f
 8005fbc:	0800618f 	.word	0x0800618f
 8005fc0:	0800618f 	.word	0x0800618f
 8005fc4:	08006049 	.word	0x08006049
 8005fc8:	0800618f 	.word	0x0800618f
 8005fcc:	0800618f 	.word	0x0800618f
 8005fd0:	0800618f 	.word	0x0800618f
 8005fd4:	0800608b 	.word	0x0800608b
 8005fd8:	0800618f 	.word	0x0800618f
 8005fdc:	0800618f 	.word	0x0800618f
 8005fe0:	0800618f 	.word	0x0800618f
 8005fe4:	080060cb 	.word	0x080060cb
 8005fe8:	0800618f 	.word	0x0800618f
 8005fec:	0800618f 	.word	0x0800618f
 8005ff0:	0800618f 	.word	0x0800618f
 8005ff4:	0800610d 	.word	0x0800610d
 8005ff8:	0800618f 	.word	0x0800618f
 8005ffc:	0800618f 	.word	0x0800618f
 8006000:	0800618f 	.word	0x0800618f
 8006004:	0800614d 	.word	0x0800614d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fa56 	bl	80064c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0208 	orr.w	r2, r2, #8
 8006022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0204 	bic.w	r2, r2, #4
 8006032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6999      	ldr	r1, [r3, #24]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	619a      	str	r2, [r3, #24]
      break;
 8006046:	e0a5      	b.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fac6 	bl	80065e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6999      	ldr	r1, [r3, #24]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	021a      	lsls	r2, r3, #8
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	619a      	str	r2, [r3, #24]
      break;
 8006088:	e084      	b.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fb2f 	bl	80066f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0208 	orr.w	r2, r2, #8
 80060a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0204 	bic.w	r2, r2, #4
 80060b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69d9      	ldr	r1, [r3, #28]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	61da      	str	r2, [r3, #28]
      break;
 80060c8:	e064      	b.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fb97 	bl	8006804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69da      	ldr	r2, [r3, #28]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69d9      	ldr	r1, [r3, #28]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	021a      	lsls	r2, r3, #8
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	61da      	str	r2, [r3, #28]
      break;
 800610a:	e043      	b.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fbe0 	bl	80068d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800614a:	e023      	b.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fc24 	bl	80069a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006166:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800618c:	e002      	b.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	75fb      	strb	r3, [r7, #23]
      break;
 8006192:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop

080061a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_TIM_ConfigClockSource+0x1c>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e0b6      	b.n	8006332 <HAL_TIM_ConfigClockSource+0x18a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006200:	d03e      	beq.n	8006280 <HAL_TIM_ConfigClockSource+0xd8>
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006206:	f200 8087 	bhi.w	8006318 <HAL_TIM_ConfigClockSource+0x170>
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	f000 8086 	beq.w	800631e <HAL_TIM_ConfigClockSource+0x176>
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006216:	d87f      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
 8006218:	2b70      	cmp	r3, #112	; 0x70
 800621a:	d01a      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0xaa>
 800621c:	2b70      	cmp	r3, #112	; 0x70
 800621e:	d87b      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
 8006220:	2b60      	cmp	r3, #96	; 0x60
 8006222:	d050      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0x11e>
 8006224:	2b60      	cmp	r3, #96	; 0x60
 8006226:	d877      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
 8006228:	2b50      	cmp	r3, #80	; 0x50
 800622a:	d03c      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0xfe>
 800622c:	2b50      	cmp	r3, #80	; 0x50
 800622e:	d873      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d058      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x13e>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d86f      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
 8006238:	2b30      	cmp	r3, #48	; 0x30
 800623a:	d064      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15e>
 800623c:	2b30      	cmp	r3, #48	; 0x30
 800623e:	d86b      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
 8006240:	2b20      	cmp	r3, #32
 8006242:	d060      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15e>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d867      	bhi.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d05c      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15e>
 800624c:	2b10      	cmp	r3, #16
 800624e:	d05a      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0x15e>
 8006250:	e062      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6899      	ldr	r1, [r3, #8]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f000 fc7d 	bl	8006b60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	609a      	str	r2, [r3, #8]
      break;
 800627e:	e04f      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6899      	ldr	r1, [r3, #8]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f000 fc66 	bl	8006b60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a2:	609a      	str	r2, [r3, #8]
      break;
 80062a4:	e03c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f000 fbda 	bl	8006a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2150      	movs	r1, #80	; 0x50
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fc33 	bl	8006b2a <TIM_ITRx_SetConfig>
      break;
 80062c4:	e02c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6859      	ldr	r1, [r3, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f000 fbf9 	bl	8006aca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2160      	movs	r1, #96	; 0x60
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fc23 	bl	8006b2a <TIM_ITRx_SetConfig>
      break;
 80062e4:	e01c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6859      	ldr	r1, [r3, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	461a      	mov	r2, r3
 80062f4:	f000 fbba 	bl	8006a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2140      	movs	r1, #64	; 0x40
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fc13 	bl	8006b2a <TIM_ITRx_SetConfig>
      break;
 8006304:	e00c      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4619      	mov	r1, r3
 8006310:	4610      	mov	r0, r2
 8006312:	f000 fc0a 	bl	8006b2a <TIM_ITRx_SetConfig>
      break;
 8006316:	e003      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
      break;
 800631c:	e000      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800631e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a40      	ldr	r2, [pc, #256]	; (80064a0 <TIM_Base_SetConfig+0x114>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063aa:	d00f      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3d      	ldr	r2, [pc, #244]	; (80064a4 <TIM_Base_SetConfig+0x118>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3c      	ldr	r2, [pc, #240]	; (80064a8 <TIM_Base_SetConfig+0x11c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3b      	ldr	r2, [pc, #236]	; (80064ac <TIM_Base_SetConfig+0x120>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3a      	ldr	r2, [pc, #232]	; (80064b0 <TIM_Base_SetConfig+0x124>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d108      	bne.n	80063de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2f      	ldr	r2, [pc, #188]	; (80064a0 <TIM_Base_SetConfig+0x114>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01f      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2c      	ldr	r2, [pc, #176]	; (80064a4 <TIM_Base_SetConfig+0x118>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2b      	ldr	r2, [pc, #172]	; (80064a8 <TIM_Base_SetConfig+0x11c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <TIM_Base_SetConfig+0x120>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a29      	ldr	r2, [pc, #164]	; (80064b0 <TIM_Base_SetConfig+0x124>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a28      	ldr	r2, [pc, #160]	; (80064b4 <TIM_Base_SetConfig+0x128>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <TIM_Base_SetConfig+0x12c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0x9a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a26      	ldr	r2, [pc, #152]	; (80064bc <TIM_Base_SetConfig+0x130>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a10      	ldr	r2, [pc, #64]	; (80064a0 <TIM_Base_SetConfig+0x114>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00f      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a12      	ldr	r2, [pc, #72]	; (80064b0 <TIM_Base_SetConfig+0x124>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a11      	ldr	r2, [pc, #68]	; (80064b4 <TIM_Base_SetConfig+0x128>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <TIM_Base_SetConfig+0x12c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xf8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0f      	ldr	r2, [pc, #60]	; (80064bc <TIM_Base_SetConfig+0x130>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40012c00 	.word	0x40012c00
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40013400 	.word	0x40013400
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40014400 	.word	0x40014400
 80064bc:	40014800 	.word	0x40014800

080064c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f023 0201 	bic.w	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0302 	bic.w	r3, r3, #2
 800650c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2c      	ldr	r2, [pc, #176]	; (80065cc <TIM_OC1_SetConfig+0x10c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00f      	beq.n	8006540 <TIM_OC1_SetConfig+0x80>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <TIM_OC1_SetConfig+0x110>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00b      	beq.n	8006540 <TIM_OC1_SetConfig+0x80>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2a      	ldr	r2, [pc, #168]	; (80065d4 <TIM_OC1_SetConfig+0x114>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <TIM_OC1_SetConfig+0x80>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a29      	ldr	r2, [pc, #164]	; (80065d8 <TIM_OC1_SetConfig+0x118>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_OC1_SetConfig+0x80>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a28      	ldr	r2, [pc, #160]	; (80065dc <TIM_OC1_SetConfig+0x11c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10c      	bne.n	800655a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0308 	bic.w	r3, r3, #8
 8006546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 0304 	bic.w	r3, r3, #4
 8006558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1b      	ldr	r2, [pc, #108]	; (80065cc <TIM_OC1_SetConfig+0x10c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00f      	beq.n	8006582 <TIM_OC1_SetConfig+0xc2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <TIM_OC1_SetConfig+0x110>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00b      	beq.n	8006582 <TIM_OC1_SetConfig+0xc2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a19      	ldr	r2, [pc, #100]	; (80065d4 <TIM_OC1_SetConfig+0x114>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_OC1_SetConfig+0xc2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <TIM_OC1_SetConfig+0x118>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC1_SetConfig+0xc2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a17      	ldr	r2, [pc, #92]	; (80065dc <TIM_OC1_SetConfig+0x11c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d111      	bne.n	80065a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40013400 	.word	0x40013400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800

080065e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f023 0210 	bic.w	r2, r3, #16
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0320 	bic.w	r3, r3, #32
 800662e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a28      	ldr	r2, [pc, #160]	; (80066e0 <TIM_OC2_SetConfig+0x100>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d003      	beq.n	800664c <TIM_OC2_SetConfig+0x6c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a27      	ldr	r2, [pc, #156]	; (80066e4 <TIM_OC2_SetConfig+0x104>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d10d      	bne.n	8006668 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1d      	ldr	r2, [pc, #116]	; (80066e0 <TIM_OC2_SetConfig+0x100>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00f      	beq.n	8006690 <TIM_OC2_SetConfig+0xb0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a1c      	ldr	r2, [pc, #112]	; (80066e4 <TIM_OC2_SetConfig+0x104>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00b      	beq.n	8006690 <TIM_OC2_SetConfig+0xb0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1b      	ldr	r2, [pc, #108]	; (80066e8 <TIM_OC2_SetConfig+0x108>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_OC2_SetConfig+0xb0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <TIM_OC2_SetConfig+0x10c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_OC2_SetConfig+0xb0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <TIM_OC2_SetConfig+0x110>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d113      	bne.n	80066b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40013400 	.word	0x40013400
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400
 80066f0:	40014800 	.word	0x40014800

080066f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a27      	ldr	r2, [pc, #156]	; (80067f0 <TIM_OC3_SetConfig+0xfc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC3_SetConfig+0x6a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a26      	ldr	r2, [pc, #152]	; (80067f4 <TIM_OC3_SetConfig+0x100>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10d      	bne.n	800677a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <TIM_OC3_SetConfig+0xfc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_OC3_SetConfig+0xae>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <TIM_OC3_SetConfig+0x100>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_OC3_SetConfig+0xae>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <TIM_OC3_SetConfig+0x104>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_OC3_SetConfig+0xae>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a19      	ldr	r2, [pc, #100]	; (80067fc <TIM_OC3_SetConfig+0x108>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_OC3_SetConfig+0xae>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a18      	ldr	r2, [pc, #96]	; (8006800 <TIM_OC3_SetConfig+0x10c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d113      	bne.n	80067ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	031b      	lsls	r3, r3, #12
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <TIM_OC4_SetConfig+0xc0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_OC4_SetConfig+0x84>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <TIM_OC4_SetConfig+0xc4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_OC4_SetConfig+0x84>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a16      	ldr	r2, [pc, #88]	; (80068cc <TIM_OC4_SetConfig+0xc8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_OC4_SetConfig+0x84>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <TIM_OC4_SetConfig+0xcc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC4_SetConfig+0x84>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <TIM_OC4_SetConfig+0xd0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d109      	bne.n	800689c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800688e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	019b      	lsls	r3, r3, #6
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800691c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	041b      	lsls	r3, r3, #16
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a17      	ldr	r2, [pc, #92]	; (800698c <TIM_OC5_SetConfig+0xb4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00f      	beq.n	8006952 <TIM_OC5_SetConfig+0x7a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a16      	ldr	r2, [pc, #88]	; (8006990 <TIM_OC5_SetConfig+0xb8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00b      	beq.n	8006952 <TIM_OC5_SetConfig+0x7a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a15      	ldr	r2, [pc, #84]	; (8006994 <TIM_OC5_SetConfig+0xbc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d007      	beq.n	8006952 <TIM_OC5_SetConfig+0x7a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a14      	ldr	r2, [pc, #80]	; (8006998 <TIM_OC5_SetConfig+0xc0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d003      	beq.n	8006952 <TIM_OC5_SetConfig+0x7a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a13      	ldr	r2, [pc, #76]	; (800699c <TIM_OC5_SetConfig+0xc4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d109      	bne.n	8006966 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006958:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40013400 	.word	0x40013400
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800

080069a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	021b      	lsls	r3, r3, #8
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	051b      	lsls	r3, r3, #20
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a18      	ldr	r2, [pc, #96]	; (8006a58 <TIM_OC6_SetConfig+0xb8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00f      	beq.n	8006a1c <TIM_OC6_SetConfig+0x7c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <TIM_OC6_SetConfig+0xbc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <TIM_OC6_SetConfig+0x7c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <TIM_OC6_SetConfig+0xc0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_OC6_SetConfig+0x7c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <TIM_OC6_SetConfig+0xc4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_OC6_SetConfig+0x7c>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <TIM_OC6_SetConfig+0xc8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d109      	bne.n	8006a30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40013400 	.word	0x40013400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 030a 	bic.w	r3, r3, #10
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b087      	sub	sp, #28
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f023 0210 	bic.w	r2, r3, #16
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f043 0307 	orr.w	r3, r3, #7
 8006b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	609a      	str	r2, [r3, #8]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1a      	ldr	r2, [r3, #32]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1a      	ldr	r2, [r3, #32]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e068      	b.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2e      	ldr	r2, [pc, #184]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2d      	ldr	r2, [pc, #180]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d108      	bne.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1e      	ldr	r2, [pc, #120]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01d      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d018      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a18      	ldr	r2, [pc, #96]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a13      	ldr	r2, [pc, #76]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a14      	ldr	r2, [pc, #80]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d10c      	bne.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40013400 	.word	0x40013400
 8006cec:	40000400 	.word	0x40000400
 8006cf0:	40000800 	.word	0x40000800
 8006cf4:	40000c00 	.word	0x40000c00
 8006cf8:	40014000 	.word	0x40014000

08006cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e065      	b.n	8006de4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a14      	ldr	r2, [pc, #80]	; (8006df4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d115      	bne.n	8006dd2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	051b      	lsls	r3, r3, #20
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40013400 	.word	0x40013400

08006df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e040      	b.n	8006ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fa fba6 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2224      	movs	r2, #36	; 0x24
 8006e60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0201 	bic.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fbe8 	bl	8007648 <UART_SetConfig>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e022      	b.n	8006ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fe66 	bl	8007b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 feed 	bl	8007ca0 <UART_CheckIdleState>
 8006ec6:	4603      	mov	r3, r0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b08b      	sub	sp, #44	; 0x2c
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d156      	bne.n	8006f94 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <HAL_UART_Transmit_IT+0x22>
 8006eec:	88fb      	ldrh	r3, [r7, #6]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e04f      	b.n	8006f96 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_UART_Transmit_IT+0x34>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e048      	b.n	8006f96 <HAL_UART_Transmit_IT+0xc6>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	88fa      	ldrh	r2, [r7, #6]
 8006f16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	88fa      	ldrh	r2, [r7, #6]
 8006f1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2221      	movs	r2, #33	; 0x21
 8006f34:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3e:	d107      	bne.n	8006f50 <HAL_UART_Transmit_IT+0x80>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a16      	ldr	r2, [pc, #88]	; (8006fa4 <HAL_UART_Transmit_IT+0xd4>)
 8006f4c:	669a      	str	r2, [r3, #104]	; 0x68
 8006f4e:	e002      	b.n	8006f56 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <HAL_UART_Transmit_IT+0xd8>)
 8006f54:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	623b      	str	r3, [r7, #32]
 8006f7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	6a3a      	ldr	r2, [r7, #32]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e6      	bne.n	8006f5e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	372c      	adds	r7, #44	; 0x2c
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	080081fb 	.word	0x080081fb
 8006fa8:	08008143 	.word	0x08008143

08006fac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d142      	bne.n	8007048 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_UART_Receive_IT+0x22>
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e03b      	b.n	800704a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_UART_Receive_IT+0x34>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e034      	b.n	800704a <HAL_UART_Receive_IT+0x9e>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a18      	ldr	r2, [pc, #96]	; (8007054 <HAL_UART_Receive_IT+0xa8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d01f      	beq.n	8007038 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d018      	beq.n	8007038 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	613b      	str	r3, [r7, #16]
   return(result);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	69f9      	ldr	r1, [r7, #28]
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	61bb      	str	r3, [r7, #24]
   return(result);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	461a      	mov	r2, r3
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 ff3c 	bl	8007ebc <UART_Start_Receive_IT>
 8007044:	4603      	mov	r3, r0
 8007046:	e000      	b.n	800704a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3728      	adds	r7, #40	; 0x28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40008000 	.word	0x40008000

08007058 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b0ba      	sub	sp, #232	; 0xe8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800707e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007082:	f640 030f 	movw	r3, #2063	; 0x80f
 8007086:	4013      	ands	r3, r2
 8007088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800708c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d115      	bne.n	80070c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00f      	beq.n	80070c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 82a6 	beq.w	8007602 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
      }
      return;
 80070be:	e2a0      	b.n	8007602 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80070c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8117 	beq.w	80072f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070da:	4b85      	ldr	r3, [pc, #532]	; (80072f0 <HAL_UART_IRQHandler+0x298>)
 80070dc:	4013      	ands	r3, r2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 810a 	beq.w	80072f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d011      	beq.n	8007114 <HAL_UART_IRQHandler+0xbc>
 80070f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2201      	movs	r2, #1
 8007102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800710a:	f043 0201 	orr.w	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d011      	beq.n	8007144 <HAL_UART_IRQHandler+0xec>
 8007120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2202      	movs	r2, #2
 8007132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800713a:	f043 0204 	orr.w	r2, r3, #4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d011      	beq.n	8007174 <HAL_UART_IRQHandler+0x11c>
 8007150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2204      	movs	r2, #4
 8007162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716a:	f043 0202 	orr.w	r2, r3, #2
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d017      	beq.n	80071b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800718c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007190:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2208      	movs	r2, #8
 800719e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a6:	f043 0208 	orr.w	r2, r3, #8
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <HAL_UART_IRQHandler+0x18a>
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00c      	beq.n	80071e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d8:	f043 0220 	orr.w	r2, r3, #32
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 820c 	beq.w	8007606 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d005      	beq.n	800723a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800722e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007232:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007236:	2b00      	cmp	r3, #0
 8007238:	d04f      	beq.n	80072da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 ff08 	bl	8008050 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d141      	bne.n	80072d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3308      	adds	r3, #8
 8007254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800727a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800727e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1d9      	bne.n	800724e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d013      	beq.n	80072ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <HAL_UART_IRQHandler+0x29c>)
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fb ff44 	bl	800313c <HAL_DMA_Abort_IT>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d017      	beq.n	80072ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c8:	e00f      	b.n	80072ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9a6 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	e00b      	b.n	80072ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9a2 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	e007      	b.n	80072ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f99e 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072e8:	e18d      	b.n	8007606 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ea:	bf00      	nop
    return;
 80072ec:	e18b      	b.n	8007606 <HAL_UART_IRQHandler+0x5ae>
 80072ee:	bf00      	nop
 80072f0:	04000120 	.word	0x04000120
 80072f4:	08008117 	.word	0x08008117

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	f040 8146 	bne.w	800758e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 813f 	beq.w	800758e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8138 	beq.w	800758e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2210      	movs	r2, #16
 8007324:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	f040 80b4 	bne.w	800749e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007342:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 815f 	beq.w	800760a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007356:	429a      	cmp	r2, r3
 8007358:	f080 8157 	bcs.w	800760a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007362:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b00      	cmp	r3, #0
 8007374:	f040 8085 	bne.w	8007482 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800738c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1da      	bne.n	8007378 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e1      	bne.n	80073c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800740e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007422:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007428:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e3      	bne.n	80073fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007452:	f023 0310 	bic.w	r3, r3, #16
 8007456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007464:	65bb      	str	r3, [r7, #88]	; 0x58
 8007466:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800746a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e4      	bne.n	8007442 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	4618      	mov	r0, r3
 800747e:	f7fb fe1f 	bl	80030c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800748e:	b29b      	uxth	r3, r3
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	b29b      	uxth	r3, r3
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8ca 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800749c:	e0b5      	b.n	800760a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80a7 	beq.w	800760e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80074c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80a2 	beq.w	800760e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074ec:	647b      	str	r3, [r7, #68]	; 0x44
 80074ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e4      	bne.n	80074ca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	623b      	str	r3, [r7, #32]
   return(result);
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3308      	adds	r3, #8
 8007520:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007524:	633a      	str	r2, [r7, #48]	; 0x30
 8007526:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800752a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e3      	bne.n	8007500 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	60fb      	str	r3, [r7, #12]
   return(result);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0310 	bic.w	r3, r3, #16
 800755e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	69b9      	ldr	r1, [r7, #24]
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	617b      	str	r3, [r7, #20]
   return(result);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e4      	bne.n	800754a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f852 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800758c:	e03f      	b.n	800760e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00e      	beq.n	80075b8 <HAL_UART_IRQHandler+0x560>
 800759a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800759e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d008      	beq.n	80075b8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f80c 	bl	80085ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075b6:	e02d      	b.n	8007614 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00e      	beq.n	80075e2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d008      	beq.n	80075e2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01c      	beq.n	8007612 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
    }
    return;
 80075e0:	e017      	b.n	8007612 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d012      	beq.n	8007614 <HAL_UART_IRQHandler+0x5bc>
 80075ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00c      	beq.n	8007614 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fe5d 	bl	80082ba <UART_EndTransmit_IT>
    return;
 8007600:	e008      	b.n	8007614 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007602:	bf00      	nop
 8007604:	e006      	b.n	8007614 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <HAL_UART_IRQHandler+0x5bc>
      return;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <HAL_UART_IRQHandler+0x5bc>
      return;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007612:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007614:	37e8      	adds	r7, #232	; 0xe8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop

0800761c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007648:	b5b0      	push	{r4, r5, r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	4313      	orrs	r3, r2
 800766a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4bad      	ldr	r3, [pc, #692]	; (8007928 <UART_SetConfig+0x2e0>)
 8007674:	4013      	ands	r3, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	69f9      	ldr	r1, [r7, #28]
 800767c:	430b      	orrs	r3, r1
 800767e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4aa2      	ldr	r2, [pc, #648]	; (800792c <UART_SetConfig+0x2e4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d004      	beq.n	80076b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a99      	ldr	r2, [pc, #612]	; (8007930 <UART_SetConfig+0x2e8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d121      	bne.n	8007712 <UART_SetConfig+0xca>
 80076ce:	4b99      	ldr	r3, [pc, #612]	; (8007934 <UART_SetConfig+0x2ec>)
 80076d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d4:	f003 0303 	and.w	r3, r3, #3
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d817      	bhi.n	800770c <UART_SetConfig+0xc4>
 80076dc:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <UART_SetConfig+0x9c>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	08007701 	.word	0x08007701
 80076ec:	080076fb 	.word	0x080076fb
 80076f0:	08007707 	.word	0x08007707
 80076f4:	2301      	movs	r3, #1
 80076f6:	76fb      	strb	r3, [r7, #27]
 80076f8:	e0e7      	b.n	80078ca <UART_SetConfig+0x282>
 80076fa:	2302      	movs	r3, #2
 80076fc:	76fb      	strb	r3, [r7, #27]
 80076fe:	e0e4      	b.n	80078ca <UART_SetConfig+0x282>
 8007700:	2304      	movs	r3, #4
 8007702:	76fb      	strb	r3, [r7, #27]
 8007704:	e0e1      	b.n	80078ca <UART_SetConfig+0x282>
 8007706:	2308      	movs	r3, #8
 8007708:	76fb      	strb	r3, [r7, #27]
 800770a:	e0de      	b.n	80078ca <UART_SetConfig+0x282>
 800770c:	2310      	movs	r3, #16
 800770e:	76fb      	strb	r3, [r7, #27]
 8007710:	e0db      	b.n	80078ca <UART_SetConfig+0x282>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a88      	ldr	r2, [pc, #544]	; (8007938 <UART_SetConfig+0x2f0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d132      	bne.n	8007782 <UART_SetConfig+0x13a>
 800771c:	4b85      	ldr	r3, [pc, #532]	; (8007934 <UART_SetConfig+0x2ec>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007722:	f003 030c 	and.w	r3, r3, #12
 8007726:	2b0c      	cmp	r3, #12
 8007728:	d828      	bhi.n	800777c <UART_SetConfig+0x134>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <UART_SetConfig+0xe8>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007765 	.word	0x08007765
 8007734:	0800777d 	.word	0x0800777d
 8007738:	0800777d 	.word	0x0800777d
 800773c:	0800777d 	.word	0x0800777d
 8007740:	08007771 	.word	0x08007771
 8007744:	0800777d 	.word	0x0800777d
 8007748:	0800777d 	.word	0x0800777d
 800774c:	0800777d 	.word	0x0800777d
 8007750:	0800776b 	.word	0x0800776b
 8007754:	0800777d 	.word	0x0800777d
 8007758:	0800777d 	.word	0x0800777d
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007777 	.word	0x08007777
 8007764:	2300      	movs	r3, #0
 8007766:	76fb      	strb	r3, [r7, #27]
 8007768:	e0af      	b.n	80078ca <UART_SetConfig+0x282>
 800776a:	2302      	movs	r3, #2
 800776c:	76fb      	strb	r3, [r7, #27]
 800776e:	e0ac      	b.n	80078ca <UART_SetConfig+0x282>
 8007770:	2304      	movs	r3, #4
 8007772:	76fb      	strb	r3, [r7, #27]
 8007774:	e0a9      	b.n	80078ca <UART_SetConfig+0x282>
 8007776:	2308      	movs	r3, #8
 8007778:	76fb      	strb	r3, [r7, #27]
 800777a:	e0a6      	b.n	80078ca <UART_SetConfig+0x282>
 800777c:	2310      	movs	r3, #16
 800777e:	76fb      	strb	r3, [r7, #27]
 8007780:	e0a3      	b.n	80078ca <UART_SetConfig+0x282>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a6d      	ldr	r2, [pc, #436]	; (800793c <UART_SetConfig+0x2f4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d120      	bne.n	80077ce <UART_SetConfig+0x186>
 800778c:	4b69      	ldr	r3, [pc, #420]	; (8007934 <UART_SetConfig+0x2ec>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007792:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007796:	2b30      	cmp	r3, #48	; 0x30
 8007798:	d013      	beq.n	80077c2 <UART_SetConfig+0x17a>
 800779a:	2b30      	cmp	r3, #48	; 0x30
 800779c:	d814      	bhi.n	80077c8 <UART_SetConfig+0x180>
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d009      	beq.n	80077b6 <UART_SetConfig+0x16e>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d810      	bhi.n	80077c8 <UART_SetConfig+0x180>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <UART_SetConfig+0x168>
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d006      	beq.n	80077bc <UART_SetConfig+0x174>
 80077ae:	e00b      	b.n	80077c8 <UART_SetConfig+0x180>
 80077b0:	2300      	movs	r3, #0
 80077b2:	76fb      	strb	r3, [r7, #27]
 80077b4:	e089      	b.n	80078ca <UART_SetConfig+0x282>
 80077b6:	2302      	movs	r3, #2
 80077b8:	76fb      	strb	r3, [r7, #27]
 80077ba:	e086      	b.n	80078ca <UART_SetConfig+0x282>
 80077bc:	2304      	movs	r3, #4
 80077be:	76fb      	strb	r3, [r7, #27]
 80077c0:	e083      	b.n	80078ca <UART_SetConfig+0x282>
 80077c2:	2308      	movs	r3, #8
 80077c4:	76fb      	strb	r3, [r7, #27]
 80077c6:	e080      	b.n	80078ca <UART_SetConfig+0x282>
 80077c8:	2310      	movs	r3, #16
 80077ca:	76fb      	strb	r3, [r7, #27]
 80077cc:	e07d      	b.n	80078ca <UART_SetConfig+0x282>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a5b      	ldr	r2, [pc, #364]	; (8007940 <UART_SetConfig+0x2f8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d120      	bne.n	800781a <UART_SetConfig+0x1d2>
 80077d8:	4b56      	ldr	r3, [pc, #344]	; (8007934 <UART_SetConfig+0x2ec>)
 80077da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077e2:	2bc0      	cmp	r3, #192	; 0xc0
 80077e4:	d013      	beq.n	800780e <UART_SetConfig+0x1c6>
 80077e6:	2bc0      	cmp	r3, #192	; 0xc0
 80077e8:	d814      	bhi.n	8007814 <UART_SetConfig+0x1cc>
 80077ea:	2b80      	cmp	r3, #128	; 0x80
 80077ec:	d009      	beq.n	8007802 <UART_SetConfig+0x1ba>
 80077ee:	2b80      	cmp	r3, #128	; 0x80
 80077f0:	d810      	bhi.n	8007814 <UART_SetConfig+0x1cc>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <UART_SetConfig+0x1b4>
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d006      	beq.n	8007808 <UART_SetConfig+0x1c0>
 80077fa:	e00b      	b.n	8007814 <UART_SetConfig+0x1cc>
 80077fc:	2300      	movs	r3, #0
 80077fe:	76fb      	strb	r3, [r7, #27]
 8007800:	e063      	b.n	80078ca <UART_SetConfig+0x282>
 8007802:	2302      	movs	r3, #2
 8007804:	76fb      	strb	r3, [r7, #27]
 8007806:	e060      	b.n	80078ca <UART_SetConfig+0x282>
 8007808:	2304      	movs	r3, #4
 800780a:	76fb      	strb	r3, [r7, #27]
 800780c:	e05d      	b.n	80078ca <UART_SetConfig+0x282>
 800780e:	2308      	movs	r3, #8
 8007810:	76fb      	strb	r3, [r7, #27]
 8007812:	e05a      	b.n	80078ca <UART_SetConfig+0x282>
 8007814:	2310      	movs	r3, #16
 8007816:	76fb      	strb	r3, [r7, #27]
 8007818:	e057      	b.n	80078ca <UART_SetConfig+0x282>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a49      	ldr	r2, [pc, #292]	; (8007944 <UART_SetConfig+0x2fc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d125      	bne.n	8007870 <UART_SetConfig+0x228>
 8007824:	4b43      	ldr	r3, [pc, #268]	; (8007934 <UART_SetConfig+0x2ec>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007832:	d017      	beq.n	8007864 <UART_SetConfig+0x21c>
 8007834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007838:	d817      	bhi.n	800786a <UART_SetConfig+0x222>
 800783a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800783e:	d00b      	beq.n	8007858 <UART_SetConfig+0x210>
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	d811      	bhi.n	800786a <UART_SetConfig+0x222>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <UART_SetConfig+0x20a>
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d006      	beq.n	800785e <UART_SetConfig+0x216>
 8007850:	e00b      	b.n	800786a <UART_SetConfig+0x222>
 8007852:	2300      	movs	r3, #0
 8007854:	76fb      	strb	r3, [r7, #27]
 8007856:	e038      	b.n	80078ca <UART_SetConfig+0x282>
 8007858:	2302      	movs	r3, #2
 800785a:	76fb      	strb	r3, [r7, #27]
 800785c:	e035      	b.n	80078ca <UART_SetConfig+0x282>
 800785e:	2304      	movs	r3, #4
 8007860:	76fb      	strb	r3, [r7, #27]
 8007862:	e032      	b.n	80078ca <UART_SetConfig+0x282>
 8007864:	2308      	movs	r3, #8
 8007866:	76fb      	strb	r3, [r7, #27]
 8007868:	e02f      	b.n	80078ca <UART_SetConfig+0x282>
 800786a:	2310      	movs	r3, #16
 800786c:	76fb      	strb	r3, [r7, #27]
 800786e:	e02c      	b.n	80078ca <UART_SetConfig+0x282>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2d      	ldr	r2, [pc, #180]	; (800792c <UART_SetConfig+0x2e4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d125      	bne.n	80078c6 <UART_SetConfig+0x27e>
 800787a:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <UART_SetConfig+0x2ec>)
 800787c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007888:	d017      	beq.n	80078ba <UART_SetConfig+0x272>
 800788a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800788e:	d817      	bhi.n	80078c0 <UART_SetConfig+0x278>
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007894:	d00b      	beq.n	80078ae <UART_SetConfig+0x266>
 8007896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800789a:	d811      	bhi.n	80078c0 <UART_SetConfig+0x278>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <UART_SetConfig+0x260>
 80078a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a4:	d006      	beq.n	80078b4 <UART_SetConfig+0x26c>
 80078a6:	e00b      	b.n	80078c0 <UART_SetConfig+0x278>
 80078a8:	2300      	movs	r3, #0
 80078aa:	76fb      	strb	r3, [r7, #27]
 80078ac:	e00d      	b.n	80078ca <UART_SetConfig+0x282>
 80078ae:	2302      	movs	r3, #2
 80078b0:	76fb      	strb	r3, [r7, #27]
 80078b2:	e00a      	b.n	80078ca <UART_SetConfig+0x282>
 80078b4:	2304      	movs	r3, #4
 80078b6:	76fb      	strb	r3, [r7, #27]
 80078b8:	e007      	b.n	80078ca <UART_SetConfig+0x282>
 80078ba:	2308      	movs	r3, #8
 80078bc:	76fb      	strb	r3, [r7, #27]
 80078be:	e004      	b.n	80078ca <UART_SetConfig+0x282>
 80078c0:	2310      	movs	r3, #16
 80078c2:	76fb      	strb	r3, [r7, #27]
 80078c4:	e001      	b.n	80078ca <UART_SetConfig+0x282>
 80078c6:	2310      	movs	r3, #16
 80078c8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <UART_SetConfig+0x2e4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	f040 8087 	bne.w	80079e4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078d6:	7efb      	ldrb	r3, [r7, #27]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d837      	bhi.n	800794c <UART_SetConfig+0x304>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <UART_SetConfig+0x29c>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	08007909 	.word	0x08007909
 80078e8:	0800794d 	.word	0x0800794d
 80078ec:	08007911 	.word	0x08007911
 80078f0:	0800794d 	.word	0x0800794d
 80078f4:	08007917 	.word	0x08007917
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	0800794d 	.word	0x0800794d
 8007900:	0800794d 	.word	0x0800794d
 8007904:	0800791f 	.word	0x0800791f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007908:	f7fc fbe0 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 800790c:	6178      	str	r0, [r7, #20]
        break;
 800790e:	e022      	b.n	8007956 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007910:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <UART_SetConfig+0x300>)
 8007912:	617b      	str	r3, [r7, #20]
        break;
 8007914:	e01f      	b.n	8007956 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007916:	f7fc fb41 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 800791a:	6178      	str	r0, [r7, #20]
        break;
 800791c:	e01b      	b.n	8007956 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800791e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007922:	617b      	str	r3, [r7, #20]
        break;
 8007924:	e017      	b.n	8007956 <UART_SetConfig+0x30e>
 8007926:	bf00      	nop
 8007928:	efff69f3 	.word	0xefff69f3
 800792c:	40008000 	.word	0x40008000
 8007930:	40013800 	.word	0x40013800
 8007934:	40021000 	.word	0x40021000
 8007938:	40004400 	.word	0x40004400
 800793c:	40004800 	.word	0x40004800
 8007940:	40004c00 	.word	0x40004c00
 8007944:	40005000 	.word	0x40005000
 8007948:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	76bb      	strb	r3, [r7, #26]
        break;
 8007954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80f1 	beq.w	8007b40 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	4413      	add	r3, r2
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	429a      	cmp	r2, r3
 800796c:	d305      	bcc.n	800797a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	429a      	cmp	r2, r3
 8007978:	d902      	bls.n	8007980 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	76bb      	strb	r3, [r7, #26]
 800797e:	e0df      	b.n	8007b40 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4618      	mov	r0, r3
 8007984:	f04f 0100 	mov.w	r1, #0
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	020b      	lsls	r3, r1, #8
 8007992:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007996:	0202      	lsls	r2, r0, #8
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	6849      	ldr	r1, [r1, #4]
 800799c:	0849      	lsrs	r1, r1, #1
 800799e:	4608      	mov	r0, r1
 80079a0:	f04f 0100 	mov.w	r1, #0
 80079a4:	1814      	adds	r4, r2, r0
 80079a6:	eb43 0501 	adc.w	r5, r3, r1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	f7f8 fc62 	bl	8000280 <__aeabi_uldivmod>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4613      	mov	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d308      	bcc.n	80079de <UART_SetConfig+0x396>
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d2:	d204      	bcs.n	80079de <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	60da      	str	r2, [r3, #12]
 80079dc:	e0b0      	b.n	8007b40 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	76bb      	strb	r3, [r7, #26]
 80079e2:	e0ad      	b.n	8007b40 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ec:	d15b      	bne.n	8007aa6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80079ee:	7efb      	ldrb	r3, [r7, #27]
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d828      	bhi.n	8007a46 <UART_SetConfig+0x3fe>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <UART_SetConfig+0x3b4>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007a29 	.word	0x08007a29
 8007a04:	08007a31 	.word	0x08007a31
 8007a08:	08007a47 	.word	0x08007a47
 8007a0c:	08007a37 	.word	0x08007a37
 8007a10:	08007a47 	.word	0x08007a47
 8007a14:	08007a47 	.word	0x08007a47
 8007a18:	08007a47 	.word	0x08007a47
 8007a1c:	08007a3f 	.word	0x08007a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a20:	f7fc fb54 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8007a24:	6178      	str	r0, [r7, #20]
        break;
 8007a26:	e013      	b.n	8007a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a28:	f7fc fb66 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8007a2c:	6178      	str	r0, [r7, #20]
        break;
 8007a2e:	e00f      	b.n	8007a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a30:	4b49      	ldr	r3, [pc, #292]	; (8007b58 <UART_SetConfig+0x510>)
 8007a32:	617b      	str	r3, [r7, #20]
        break;
 8007a34:	e00c      	b.n	8007a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a36:	f7fc fab1 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 8007a3a:	6178      	str	r0, [r7, #20]
        break;
 8007a3c:	e008      	b.n	8007a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a42:	617b      	str	r3, [r7, #20]
        break;
 8007a44:	e004      	b.n	8007a50 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	76bb      	strb	r3, [r7, #26]
        break;
 8007a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d074      	beq.n	8007b40 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	005a      	lsls	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	441a      	add	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b0f      	cmp	r3, #15
 8007a70:	d916      	bls.n	8007aa0 <UART_SetConfig+0x458>
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a78:	d212      	bcs.n	8007aa0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f023 030f 	bic.w	r3, r3, #15
 8007a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	89fb      	ldrh	r3, [r7, #14]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	89fa      	ldrh	r2, [r7, #14]
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	e04f      	b.n	8007b40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	76bb      	strb	r3, [r7, #26]
 8007aa4:	e04c      	b.n	8007b40 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aa6:	7efb      	ldrb	r3, [r7, #27]
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d828      	bhi.n	8007afe <UART_SetConfig+0x4b6>
 8007aac:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <UART_SetConfig+0x46c>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007ad9 	.word	0x08007ad9
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae9 	.word	0x08007ae9
 8007ac0:	08007aff 	.word	0x08007aff
 8007ac4:	08007aef 	.word	0x08007aef
 8007ac8:	08007aff 	.word	0x08007aff
 8007acc:	08007aff 	.word	0x08007aff
 8007ad0:	08007aff 	.word	0x08007aff
 8007ad4:	08007af7 	.word	0x08007af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ad8:	f7fc faf8 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8007adc:	6178      	str	r0, [r7, #20]
        break;
 8007ade:	e013      	b.n	8007b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae0:	f7fc fb0a 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8007ae4:	6178      	str	r0, [r7, #20]
        break;
 8007ae6:	e00f      	b.n	8007b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <UART_SetConfig+0x510>)
 8007aea:	617b      	str	r3, [r7, #20]
        break;
 8007aec:	e00c      	b.n	8007b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aee:	f7fc fa55 	bl	8003f9c <HAL_RCC_GetSysClockFreq>
 8007af2:	6178      	str	r0, [r7, #20]
        break;
 8007af4:	e008      	b.n	8007b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007afa:	617b      	str	r3, [r7, #20]
        break;
 8007afc:	e004      	b.n	8007b08 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	76bb      	strb	r3, [r7, #26]
        break;
 8007b06:	bf00      	nop
    }

    if (pclk != 0U)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d018      	beq.n	8007b40 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	085a      	lsrs	r2, r3, #1
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	441a      	add	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b20:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b0f      	cmp	r3, #15
 8007b26:	d909      	bls.n	8007b3c <UART_SetConfig+0x4f4>
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b2e:	d205      	bcs.n	8007b3c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	60da      	str	r2, [r3, #12]
 8007b3a:	e001      	b.n	8007b40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bdb0      	pop	{r4, r5, r7, pc}
 8007b56:	bf00      	nop
 8007b58:	00f42400 	.word	0x00f42400

08007b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01a      	beq.n	8007c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c5a:	d10a      	bne.n	8007c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cb0:	f7f9 fde0 	bl	8001874 <HAL_GetTick>
 8007cb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0308 	and.w	r3, r3, #8
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d10e      	bne.n	8007ce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f82d 	bl	8007d32 <UART_WaitOnFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e023      	b.n	8007d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d10e      	bne.n	8007d0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f817 	bl	8007d32 <UART_WaitOnFlagUntilTimeout>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e00d      	b.n	8007d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b09c      	sub	sp, #112	; 0x70
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d42:	e0a5      	b.n	8007e90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d4a:	f000 80a1 	beq.w	8007e90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d4e:	f7f9 fd91 	bl	8001874 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d302      	bcc.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d13e      	bne.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d78:	667b      	str	r3, [r7, #100]	; 0x64
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	663b      	str	r3, [r7, #96]	; 0x60
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e067      	b.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d04f      	beq.n	8007e90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dfe:	d147      	bne.n	8007e90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e6      	bne.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3308      	adds	r3, #8
 8007e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e5c:	623a      	str	r2, [r7, #32]
 8007e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	69f9      	ldr	r1, [r7, #28]
 8007e62:	6a3a      	ldr	r2, [r7, #32]
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e5      	bne.n	8007e3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e010      	b.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69da      	ldr	r2, [r3, #28]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	f43f af4a 	beq.w	8007d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3770      	adds	r7, #112	; 0x70
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b097      	sub	sp, #92	; 0x5c
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eee:	d10e      	bne.n	8007f0e <UART_Start_Receive_IT+0x52>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d105      	bne.n	8007f04 <UART_Start_Receive_IT+0x48>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f02:	e02d      	b.n	8007f60 <UART_Start_Receive_IT+0xa4>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	22ff      	movs	r2, #255	; 0xff
 8007f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f0c:	e028      	b.n	8007f60 <UART_Start_Receive_IT+0xa4>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <UART_Start_Receive_IT+0x76>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d104      	bne.n	8007f28 <UART_Start_Receive_IT+0x6c>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	22ff      	movs	r2, #255	; 0xff
 8007f22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f26:	e01b      	b.n	8007f60 <UART_Start_Receive_IT+0xa4>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	227f      	movs	r2, #127	; 0x7f
 8007f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f30:	e016      	b.n	8007f60 <UART_Start_Receive_IT+0xa4>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f3a:	d10d      	bne.n	8007f58 <UART_Start_Receive_IT+0x9c>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <UART_Start_Receive_IT+0x92>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	227f      	movs	r2, #127	; 0x7f
 8007f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f4c:	e008      	b.n	8007f60 <UART_Start_Receive_IT+0xa4>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	223f      	movs	r2, #63	; 0x3f
 8007f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f56:	e003      	b.n	8007f60 <UART_Start_Receive_IT+0xa4>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2222      	movs	r2, #34	; 0x22
 8007f6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3308      	adds	r3, #8
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	f043 0301 	orr.w	r3, r3, #1
 8007f84:	657b      	str	r3, [r7, #84]	; 0x54
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007faa:	d107      	bne.n	8007fbc <UART_Start_Receive_IT+0x100>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d103      	bne.n	8007fbc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4a24      	ldr	r2, [pc, #144]	; (8008048 <UART_Start_Receive_IT+0x18c>)
 8007fb8:	665a      	str	r2, [r3, #100]	; 0x64
 8007fba:	e002      	b.n	8007fc2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a23      	ldr	r2, [pc, #140]	; (800804c <UART_Start_Receive_IT+0x190>)
 8007fc0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d019      	beq.n	8008006 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	461a      	mov	r2, r3
 8007fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e6      	bne.n	8007fd2 <UART_Start_Receive_IT+0x116>
 8008004:	e018      	b.n	8008038 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	613b      	str	r3, [r7, #16]
   return(result);
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f043 0320 	orr.w	r3, r3, #32
 800801a:	653b      	str	r3, [r7, #80]	; 0x50
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008024:	623b      	str	r3, [r7, #32]
 8008026:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	69f9      	ldr	r1, [r7, #28]
 800802a:	6a3a      	ldr	r2, [r7, #32]
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	61bb      	str	r3, [r7, #24]
   return(result);
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e6      	bne.n	8008006 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	375c      	adds	r7, #92	; 0x5c
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	0800846f 	.word	0x0800846f
 800804c:	0800830f 	.word	0x0800830f

08008050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b095      	sub	sp, #84	; 0x54
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800806c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008076:	643b      	str	r3, [r7, #64]	; 0x40
 8008078:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800807c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e6      	bne.n	8008058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	61fb      	str	r3, [r7, #28]
   return(result);
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e5      	bne.n	800808a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d118      	bne.n	80080f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f023 0310 	bic.w	r3, r3, #16
 80080da:	647b      	str	r3, [r7, #68]	; 0x44
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6979      	ldr	r1, [r7, #20]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	613b      	str	r3, [r7, #16]
   return(result);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e6      	bne.n	80080c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	665a      	str	r2, [r3, #100]	; 0x64
}
 800810a:	bf00      	nop
 800810c:	3754      	adds	r7, #84	; 0x54
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff fa71 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008142:	b480      	push	{r7}
 8008144:	b08f      	sub	sp, #60	; 0x3c
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800814e:	2b21      	cmp	r3, #33	; 0x21
 8008150:	d14d      	bne.n	80081ee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d132      	bne.n	80081c4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	61fb      	str	r3, [r7, #28]
   return(result);
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800817e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e6      	bne.n	800815e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	60bb      	str	r3, [r7, #8]
   return(result);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a4:	633b      	str	r3, [r7, #48]	; 0x30
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	61bb      	str	r3, [r7, #24]
 80081b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6979      	ldr	r1, [r7, #20]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	613b      	str	r3, [r7, #16]
   return(result);
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e6      	bne.n	8008190 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80081c2:	e014      	b.n	80081ee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c8:	781a      	ldrb	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	b292      	uxth	r2, r2
 80081d0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80081ee:	bf00      	nop
 80081f0:	373c      	adds	r7, #60	; 0x3c
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b091      	sub	sp, #68	; 0x44
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008206:	2b21      	cmp	r3, #33	; 0x21
 8008208:	d151      	bne.n	80082ae <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d132      	bne.n	800827c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	623b      	str	r3, [r7, #32]
   return(result);
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800822a:	63bb      	str	r3, [r7, #56]	; 0x38
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	633b      	str	r3, [r7, #48]	; 0x30
 8008236:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800823a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e6      	bne.n	8008216 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	60fb      	str	r3, [r7, #12]
   return(result);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800825c:	637b      	str	r3, [r7, #52]	; 0x34
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	69b9      	ldr	r1, [r7, #24]
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	617b      	str	r3, [r7, #20]
   return(result);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e6      	bne.n	8008248 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800827a:	e018      	b.n	80082ae <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	881a      	ldrh	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800828e:	b292      	uxth	r2, r2
 8008290:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008296:	1c9a      	adds	r2, r3, #2
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80082ae:	bf00      	nop
 80082b0:	3744      	adds	r7, #68	; 0x44
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b088      	sub	sp, #32
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	6979      	ldr	r1, [r7, #20]
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	613b      	str	r3, [r7, #16]
   return(result);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e6      	bne.n	80082c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7f9 fa31 	bl	8001768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008306:	bf00      	nop
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b096      	sub	sp, #88	; 0x58
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800831c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008324:	2b22      	cmp	r3, #34	; 0x22
 8008326:	f040 8094 	bne.w	8008452 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008330:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008334:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008338:	b2d9      	uxtb	r1, r3
 800833a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800833e:	b2da      	uxtb	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008344:	400a      	ands	r2, r1
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800835a:	b29b      	uxth	r3, r3
 800835c:	3b01      	subs	r3, #1
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800836c:	b29b      	uxth	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d179      	bne.n	8008466 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008386:	653b      	str	r3, [r7, #80]	; 0x50
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
 8008392:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e6      	bne.n	8008372 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3308      	adds	r3, #8
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	623b      	str	r3, [r7, #32]
   return(result);
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	f023 0301 	bic.w	r3, r3, #1
 80083ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083c4:	633a      	str	r2, [r7, #48]	; 0x30
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e5      	bne.n	80083a4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d12e      	bne.n	800844a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0310 	bic.w	r3, r3, #16
 8008406:	64bb      	str	r3, [r7, #72]	; 0x48
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	69b9      	ldr	r1, [r7, #24]
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	617b      	str	r3, [r7, #20]
   return(result);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e6      	bne.n	80083f2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b10      	cmp	r3, #16
 8008430:	d103      	bne.n	800843a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2210      	movs	r2, #16
 8008438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff f8f4 	bl	8007630 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008448:	e00d      	b.n	8008466 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7f9 f9a0 	bl	8001790 <HAL_UART_RxCpltCallback>
}
 8008450:	e009      	b.n	8008466 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	8b1b      	ldrh	r3, [r3, #24]
 8008458:	b29a      	uxth	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0208 	orr.w	r2, r2, #8
 8008462:	b292      	uxth	r2, r2
 8008464:	831a      	strh	r2, [r3, #24]
}
 8008466:	bf00      	nop
 8008468:	3758      	adds	r7, #88	; 0x58
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b096      	sub	sp, #88	; 0x58
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800847c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008484:	2b22      	cmp	r3, #34	; 0x22
 8008486:	f040 8094 	bne.w	80085b2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008490:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008498:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800849a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800849e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084a2:	4013      	ands	r3, r2
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ae:	1c9a      	adds	r2, r3, #2
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d179      	bne.n	80085c6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f0:	643b      	str	r3, [r7, #64]	; 0x40
 80084f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e6      	bne.n	80084d2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3308      	adds	r3, #8
 800850a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	61fb      	str	r3, [r7, #28]
   return(result);
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f023 0301 	bic.w	r3, r3, #1
 800851a:	64bb      	str	r3, [r7, #72]	; 0x48
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008524:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800852a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e5      	bne.n	8008504 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008548:	2b01      	cmp	r3, #1
 800854a:	d12e      	bne.n	80085aa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008570:	61bb      	str	r3, [r7, #24]
 8008572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6979      	ldr	r1, [r7, #20]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	613b      	str	r3, [r7, #16]
   return(result);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e6      	bne.n	8008552 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f003 0310 	and.w	r3, r3, #16
 800858e:	2b10      	cmp	r3, #16
 8008590:	d103      	bne.n	800859a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2210      	movs	r2, #16
 8008598:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff f844 	bl	8007630 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085a8:	e00d      	b.n	80085c6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7f9 f8f0 	bl	8001790 <HAL_UART_RxCpltCallback>
}
 80085b0:	e009      	b.n	80085c6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	8b1b      	ldrh	r3, [r3, #24]
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0208 	orr.w	r2, r2, #8
 80085c2:	b292      	uxth	r2, r2
 80085c4:	831a      	strh	r2, [r3, #24]
}
 80085c6:	bf00      	nop
 80085c8:	3758      	adds	r7, #88	; 0x58
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80085e8:	4b05      	ldr	r3, [pc, #20]	; (8008600 <SysTick_Handler+0x1c>)
 80085ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80085ec:	f000 f990 	bl	8008910 <xTaskGetSchedulerState>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d001      	beq.n	80085fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80085f6:	f000 f9f7 	bl	80089e8 <xPortSysTickHandler>
  }
}
 80085fa:	bf00      	nop
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	e000e010 	.word	0xe000e010

08008604 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	601a      	str	r2, [r3, #0]
}
 8008640:	bf00      	nop
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6892      	ldr	r2, [r2, #8]
 8008662:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6852      	ldr	r2, [r2, #4]
 800866c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d103      	bne.n	8008680 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086aa:	4b4f      	ldr	r3, [pc, #316]	; (80087e8 <xTaskIncrementTick+0x148>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f040 808f 	bne.w	80087d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086b4:	4b4d      	ldr	r3, [pc, #308]	; (80087ec <xTaskIncrementTick+0x14c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3301      	adds	r3, #1
 80086ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086bc:	4a4b      	ldr	r2, [pc, #300]	; (80087ec <xTaskIncrementTick+0x14c>)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d120      	bne.n	800870a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80086c8:	4b49      	ldr	r3, [pc, #292]	; (80087f0 <xTaskIncrementTick+0x150>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <xTaskIncrementTick+0x46>
 80086e8:	4b41      	ldr	r3, [pc, #260]	; (80087f0 <xTaskIncrementTick+0x150>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	4b41      	ldr	r3, [pc, #260]	; (80087f4 <xTaskIncrementTick+0x154>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a3f      	ldr	r2, [pc, #252]	; (80087f0 <xTaskIncrementTick+0x150>)
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	4a3f      	ldr	r2, [pc, #252]	; (80087f4 <xTaskIncrementTick+0x154>)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	4b3e      	ldr	r3, [pc, #248]	; (80087f8 <xTaskIncrementTick+0x158>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3301      	adds	r3, #1
 8008702:	4a3d      	ldr	r2, [pc, #244]	; (80087f8 <xTaskIncrementTick+0x158>)
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	f000 f8e3 	bl	80088d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800870a:	4b3c      	ldr	r3, [pc, #240]	; (80087fc <xTaskIncrementTick+0x15c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	429a      	cmp	r2, r3
 8008712:	d349      	bcc.n	80087a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008714:	4b36      	ldr	r3, [pc, #216]	; (80087f0 <xTaskIncrementTick+0x150>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800871e:	4b37      	ldr	r3, [pc, #220]	; (80087fc <xTaskIncrementTick+0x15c>)
 8008720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008724:	601a      	str	r2, [r3, #0]
					break;
 8008726:	e03f      	b.n	80087a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008728:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <xTaskIncrementTick+0x150>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d203      	bcs.n	8008748 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008740:	4a2e      	ldr	r2, [pc, #184]	; (80087fc <xTaskIncrementTick+0x15c>)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008746:	e02f      	b.n	80087a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3304      	adds	r3, #4
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff ff7d 	bl	800864c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d004      	beq.n	8008764 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	3318      	adds	r3, #24
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff ff74 	bl	800864c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4b25      	ldr	r3, [pc, #148]	; (8008800 <xTaskIncrementTick+0x160>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d903      	bls.n	8008778 <xTaskIncrementTick+0xd8>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	4a22      	ldr	r2, [pc, #136]	; (8008800 <xTaskIncrementTick+0x160>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4a1f      	ldr	r2, [pc, #124]	; (8008804 <xTaskIncrementTick+0x164>)
 8008786:	441a      	add	r2, r3
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	3304      	adds	r3, #4
 800878c:	4619      	mov	r1, r3
 800878e:	4610      	mov	r0, r2
 8008790:	f7ff ff38 	bl	8008604 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008798:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <xTaskIncrementTick+0x168>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879e:	429a      	cmp	r2, r3
 80087a0:	d3b8      	bcc.n	8008714 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80087a2:	2301      	movs	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087a6:	e7b5      	b.n	8008714 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087a8:	4b17      	ldr	r3, [pc, #92]	; (8008808 <xTaskIncrementTick+0x168>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	4915      	ldr	r1, [pc, #84]	; (8008804 <xTaskIncrementTick+0x164>)
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d901      	bls.n	80087c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087c0:	2301      	movs	r3, #1
 80087c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087c4:	4b11      	ldr	r3, [pc, #68]	; (800880c <xTaskIncrementTick+0x16c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d007      	beq.n	80087dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087cc:	2301      	movs	r3, #1
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	e004      	b.n	80087dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087d2:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <xTaskIncrementTick+0x170>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3301      	adds	r3, #1
 80087d8:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <xTaskIncrementTick+0x170>)
 80087da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087dc:	697b      	ldr	r3, [r7, #20]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	2000052c 	.word	0x2000052c
 80087ec:	20000510 	.word	0x20000510
 80087f0:	20000508 	.word	0x20000508
 80087f4:	2000050c 	.word	0x2000050c
 80087f8:	20000524 	.word	0x20000524
 80087fc:	20000528 	.word	0x20000528
 8008800:	20000514 	.word	0x20000514
 8008804:	200000a8 	.word	0x200000a8
 8008808:	200000a4 	.word	0x200000a4
 800880c:	20000520 	.word	0x20000520
 8008810:	2000051c 	.word	0x2000051c

08008814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800881a:	4b28      	ldr	r3, [pc, #160]	; (80088bc <vTaskSwitchContext+0xa8>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008822:	4b27      	ldr	r3, [pc, #156]	; (80088c0 <vTaskSwitchContext+0xac>)
 8008824:	2201      	movs	r2, #1
 8008826:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008828:	e041      	b.n	80088ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800882a:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <vTaskSwitchContext+0xac>)
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008830:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <vTaskSwitchContext+0xb0>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	e010      	b.n	800885a <vTaskSwitchContext+0x46>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <vTaskSwitchContext+0x40>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	607b      	str	r3, [r7, #4]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <vTaskSwitchContext+0x3e>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3b01      	subs	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	491b      	ldr	r1, [pc, #108]	; (80088c8 <vTaskSwitchContext+0xb4>)
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0e4      	beq.n	8008838 <vTaskSwitchContext+0x24>
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4a13      	ldr	r2, [pc, #76]	; (80088c8 <vTaskSwitchContext+0xb4>)
 800887a:	4413      	add	r3, r2
 800887c:	60bb      	str	r3, [r7, #8]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	605a      	str	r2, [r3, #4]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	3308      	adds	r3, #8
 8008890:	429a      	cmp	r2, r3
 8008892:	d104      	bne.n	800889e <vTaskSwitchContext+0x8a>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4a09      	ldr	r2, [pc, #36]	; (80088cc <vTaskSwitchContext+0xb8>)
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	4a06      	ldr	r2, [pc, #24]	; (80088c4 <vTaskSwitchContext+0xb0>)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6013      	str	r3, [r2, #0]
}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	2000052c 	.word	0x2000052c
 80088c0:	20000520 	.word	0x20000520
 80088c4:	20000514 	.word	0x20000514
 80088c8:	200000a8 	.word	0x200000a8
 80088cc:	200000a4 	.word	0x200000a4

080088d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <prvResetNextTaskUnblockTime+0x38>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <prvResetNextTaskUnblockTime+0x3c>)
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088e8:	e008      	b.n	80088fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ea:	4b07      	ldr	r3, [pc, #28]	; (8008908 <prvResetNextTaskUnblockTime+0x38>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4a04      	ldr	r2, [pc, #16]	; (800890c <prvResetNextTaskUnblockTime+0x3c>)
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	20000508 	.word	0x20000508
 800890c:	20000528 	.word	0x20000528

08008910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008916:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <xTaskGetSchedulerState+0x34>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800891e:	2301      	movs	r3, #1
 8008920:	607b      	str	r3, [r7, #4]
 8008922:	e008      	b.n	8008936 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008924:	4b08      	ldr	r3, [pc, #32]	; (8008948 <xTaskGetSchedulerState+0x38>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800892c:	2302      	movs	r3, #2
 800892e:	607b      	str	r3, [r7, #4]
 8008930:	e001      	b.n	8008936 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008932:	2300      	movs	r3, #0
 8008934:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008936:	687b      	ldr	r3, [r7, #4]
	}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	20000518 	.word	0x20000518
 8008948:	2000052c 	.word	0x2000052c
 800894c:	00000000 	.word	0x00000000

08008950 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <pxCurrentTCBConst2>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	6808      	ldr	r0, [r1, #0]
 8008956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	f380 8809 	msr	PSP, r0
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	4770      	bx	lr
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst2>:
 8008970:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
	...

08008980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008980:	f3ef 8009 	mrs	r0, PSP
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <pxCurrentTCBConst>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	f01e 0f10 	tst.w	lr, #16
 8008990:	bf08      	it	eq
 8008992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	6010      	str	r0, [r2, #0]
 800899c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089a4:	f380 8811 	msr	BASEPRI, r0
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f7ff ff30 	bl	8008814 <vTaskSwitchContext>
 80089b4:	f04f 0000 	mov.w	r0, #0
 80089b8:	f380 8811 	msr	BASEPRI, r0
 80089bc:	bc09      	pop	{r0, r3}
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	6808      	ldr	r0, [r1, #0]
 80089c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c6:	f01e 0f10 	tst.w	lr, #16
 80089ca:	bf08      	it	eq
 80089cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089d0:	f380 8809 	msr	PSP, r0
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst>:
 80089e0:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a02:	f7ff fe4d 	bl	80086a0 <xTaskIncrementTick>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <xPortSysTickHandler+0x40>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <atoi>:
 8008a2c:	220a      	movs	r2, #10
 8008a2e:	2100      	movs	r1, #0
 8008a30:	f000 b95a 	b.w	8008ce8 <strtol>

08008a34 <__errno>:
 8008a34:	4b01      	ldr	r3, [pc, #4]	; (8008a3c <__errno+0x8>)
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	20000020 	.word	0x20000020

08008a40 <__libc_init_array>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4d0d      	ldr	r5, [pc, #52]	; (8008a78 <__libc_init_array+0x38>)
 8008a44:	4c0d      	ldr	r4, [pc, #52]	; (8008a7c <__libc_init_array+0x3c>)
 8008a46:	1b64      	subs	r4, r4, r5
 8008a48:	10a4      	asrs	r4, r4, #2
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	d109      	bne.n	8008a64 <__libc_init_array+0x24>
 8008a50:	4d0b      	ldr	r5, [pc, #44]	; (8008a80 <__libc_init_array+0x40>)
 8008a52:	4c0c      	ldr	r4, [pc, #48]	; (8008a84 <__libc_init_array+0x44>)
 8008a54:	f001 fafa 	bl	800a04c <_init>
 8008a58:	1b64      	subs	r4, r4, r5
 8008a5a:	10a4      	asrs	r4, r4, #2
 8008a5c:	2600      	movs	r6, #0
 8008a5e:	42a6      	cmp	r6, r4
 8008a60:	d105      	bne.n	8008a6e <__libc_init_array+0x2e>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a68:	4798      	blx	r3
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7ee      	b.n	8008a4c <__libc_init_array+0xc>
 8008a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a72:	4798      	blx	r3
 8008a74:	3601      	adds	r6, #1
 8008a76:	e7f2      	b.n	8008a5e <__libc_init_array+0x1e>
 8008a78:	0800a354 	.word	0x0800a354
 8008a7c:	0800a354 	.word	0x0800a354
 8008a80:	0800a354 	.word	0x0800a354
 8008a84:	0800a358 	.word	0x0800a358

08008a88 <__itoa>:
 8008a88:	1e93      	subs	r3, r2, #2
 8008a8a:	2b22      	cmp	r3, #34	; 0x22
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	460c      	mov	r4, r1
 8008a90:	d904      	bls.n	8008a9c <__itoa+0x14>
 8008a92:	2300      	movs	r3, #0
 8008a94:	700b      	strb	r3, [r1, #0]
 8008a96:	461c      	mov	r4, r3
 8008a98:	4620      	mov	r0, r4
 8008a9a:	bd10      	pop	{r4, pc}
 8008a9c:	2a0a      	cmp	r2, #10
 8008a9e:	d109      	bne.n	8008ab4 <__itoa+0x2c>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	da07      	bge.n	8008ab4 <__itoa+0x2c>
 8008aa4:	232d      	movs	r3, #45	; 0x2d
 8008aa6:	700b      	strb	r3, [r1, #0]
 8008aa8:	4240      	negs	r0, r0
 8008aaa:	2101      	movs	r1, #1
 8008aac:	4421      	add	r1, r4
 8008aae:	f000 f925 	bl	8008cfc <__utoa>
 8008ab2:	e7f1      	b.n	8008a98 <__itoa+0x10>
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	e7f9      	b.n	8008aac <__itoa+0x24>

08008ab8 <itoa>:
 8008ab8:	f7ff bfe6 	b.w	8008a88 <__itoa>

08008abc <memcpy>:
 8008abc:	440a      	add	r2, r1
 8008abe:	4291      	cmp	r1, r2
 8008ac0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ac4:	d100      	bne.n	8008ac8 <memcpy+0xc>
 8008ac6:	4770      	bx	lr
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad2:	4291      	cmp	r1, r2
 8008ad4:	d1f9      	bne.n	8008aca <memcpy+0xe>
 8008ad6:	bd10      	pop	{r4, pc}

08008ad8 <memset>:
 8008ad8:	4402      	add	r2, r0
 8008ada:	4603      	mov	r3, r0
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d100      	bne.n	8008ae2 <memset+0xa>
 8008ae0:	4770      	bx	lr
 8008ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae6:	e7f9      	b.n	8008adc <memset+0x4>

08008ae8 <siprintf>:
 8008ae8:	b40e      	push	{r1, r2, r3}
 8008aea:	b500      	push	{lr}
 8008aec:	b09c      	sub	sp, #112	; 0x70
 8008aee:	ab1d      	add	r3, sp, #116	; 0x74
 8008af0:	9002      	str	r0, [sp, #8]
 8008af2:	9006      	str	r0, [sp, #24]
 8008af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008af8:	4809      	ldr	r0, [pc, #36]	; (8008b20 <siprintf+0x38>)
 8008afa:	9107      	str	r1, [sp, #28]
 8008afc:	9104      	str	r1, [sp, #16]
 8008afe:	4909      	ldr	r1, [pc, #36]	; (8008b24 <siprintf+0x3c>)
 8008b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b04:	9105      	str	r1, [sp, #20]
 8008b06:	6800      	ldr	r0, [r0, #0]
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	a902      	add	r1, sp, #8
 8008b0c:	f000 fa76 	bl	8008ffc <_svfiprintf_r>
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	b01c      	add	sp, #112	; 0x70
 8008b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b1c:	b003      	add	sp, #12
 8008b1e:	4770      	bx	lr
 8008b20:	20000020 	.word	0x20000020
 8008b24:	ffff0208 	.word	0xffff0208

08008b28 <strtok>:
 8008b28:	4b16      	ldr	r3, [pc, #88]	; (8008b84 <strtok+0x5c>)
 8008b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b2c:	681e      	ldr	r6, [r3, #0]
 8008b2e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008b30:	4605      	mov	r5, r0
 8008b32:	b9fc      	cbnz	r4, 8008b74 <strtok+0x4c>
 8008b34:	2050      	movs	r0, #80	; 0x50
 8008b36:	9101      	str	r1, [sp, #4]
 8008b38:	f000 f952 	bl	8008de0 <malloc>
 8008b3c:	9901      	ldr	r1, [sp, #4]
 8008b3e:	65b0      	str	r0, [r6, #88]	; 0x58
 8008b40:	4602      	mov	r2, r0
 8008b42:	b920      	cbnz	r0, 8008b4e <strtok+0x26>
 8008b44:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <strtok+0x60>)
 8008b46:	4811      	ldr	r0, [pc, #68]	; (8008b8c <strtok+0x64>)
 8008b48:	2157      	movs	r1, #87	; 0x57
 8008b4a:	f000 f919 	bl	8008d80 <__assert_func>
 8008b4e:	e9c0 4400 	strd	r4, r4, [r0]
 8008b52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008b56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008b5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008b5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008b62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008b66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008b6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008b6e:	6184      	str	r4, [r0, #24]
 8008b70:	7704      	strb	r4, [r0, #28]
 8008b72:	6244      	str	r4, [r0, #36]	; 0x24
 8008b74:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008b76:	2301      	movs	r3, #1
 8008b78:	4628      	mov	r0, r5
 8008b7a:	b002      	add	sp, #8
 8008b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b80:	f000 b806 	b.w	8008b90 <__strtok_r>
 8008b84:	20000020 	.word	0x20000020
 8008b88:	0800a0dc 	.word	0x0800a0dc
 8008b8c:	0800a0f3 	.word	0x0800a0f3

08008b90 <__strtok_r>:
 8008b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b92:	b908      	cbnz	r0, 8008b98 <__strtok_r+0x8>
 8008b94:	6810      	ldr	r0, [r2, #0]
 8008b96:	b188      	cbz	r0, 8008bbc <__strtok_r+0x2c>
 8008b98:	4604      	mov	r4, r0
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008ba6:	b91e      	cbnz	r6, 8008bb0 <__strtok_r+0x20>
 8008ba8:	b965      	cbnz	r5, 8008bc4 <__strtok_r+0x34>
 8008baa:	6015      	str	r5, [r2, #0]
 8008bac:	4628      	mov	r0, r5
 8008bae:	e005      	b.n	8008bbc <__strtok_r+0x2c>
 8008bb0:	42b5      	cmp	r5, r6
 8008bb2:	d1f6      	bne.n	8008ba2 <__strtok_r+0x12>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f0      	bne.n	8008b9a <__strtok_r+0xa>
 8008bb8:	6014      	str	r4, [r2, #0]
 8008bba:	7003      	strb	r3, [r0, #0]
 8008bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bbe:	461c      	mov	r4, r3
 8008bc0:	e00c      	b.n	8008bdc <__strtok_r+0x4c>
 8008bc2:	b915      	cbnz	r5, 8008bca <__strtok_r+0x3a>
 8008bc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bc8:	460e      	mov	r6, r1
 8008bca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008bce:	42ab      	cmp	r3, r5
 8008bd0:	d1f7      	bne.n	8008bc2 <__strtok_r+0x32>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f3      	beq.n	8008bbe <__strtok_r+0x2e>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008bdc:	6014      	str	r4, [r2, #0]
 8008bde:	e7ed      	b.n	8008bbc <__strtok_r+0x2c>

08008be0 <_strtol_l.isra.0>:
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be6:	d001      	beq.n	8008bec <_strtol_l.isra.0+0xc>
 8008be8:	2b24      	cmp	r3, #36	; 0x24
 8008bea:	d906      	bls.n	8008bfa <_strtol_l.isra.0+0x1a>
 8008bec:	f7ff ff22 	bl	8008a34 <__errno>
 8008bf0:	2316      	movs	r3, #22
 8008bf2:	6003      	str	r3, [r0, #0]
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfa:	4f3a      	ldr	r7, [pc, #232]	; (8008ce4 <_strtol_l.isra.0+0x104>)
 8008bfc:	468e      	mov	lr, r1
 8008bfe:	4676      	mov	r6, lr
 8008c00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c04:	5de5      	ldrb	r5, [r4, r7]
 8008c06:	f015 0508 	ands.w	r5, r5, #8
 8008c0a:	d1f8      	bne.n	8008bfe <_strtol_l.isra.0+0x1e>
 8008c0c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c0e:	d134      	bne.n	8008c7a <_strtol_l.isra.0+0x9a>
 8008c10:	f89e 4000 	ldrb.w	r4, [lr]
 8008c14:	f04f 0801 	mov.w	r8, #1
 8008c18:	f106 0e02 	add.w	lr, r6, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d05c      	beq.n	8008cda <_strtol_l.isra.0+0xfa>
 8008c20:	2b10      	cmp	r3, #16
 8008c22:	d10c      	bne.n	8008c3e <_strtol_l.isra.0+0x5e>
 8008c24:	2c30      	cmp	r4, #48	; 0x30
 8008c26:	d10a      	bne.n	8008c3e <_strtol_l.isra.0+0x5e>
 8008c28:	f89e 4000 	ldrb.w	r4, [lr]
 8008c2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c30:	2c58      	cmp	r4, #88	; 0x58
 8008c32:	d14d      	bne.n	8008cd0 <_strtol_l.isra.0+0xf0>
 8008c34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f10e 0e02 	add.w	lr, lr, #2
 8008c3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008c42:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008c46:	2600      	movs	r6, #0
 8008c48:	fbbc f9f3 	udiv	r9, ip, r3
 8008c4c:	4635      	mov	r5, r6
 8008c4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c56:	2f09      	cmp	r7, #9
 8008c58:	d818      	bhi.n	8008c8c <_strtol_l.isra.0+0xac>
 8008c5a:	463c      	mov	r4, r7
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	dd24      	ble.n	8008caa <_strtol_l.isra.0+0xca>
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	db1f      	blt.n	8008ca4 <_strtol_l.isra.0+0xc4>
 8008c64:	45a9      	cmp	r9, r5
 8008c66:	d31d      	bcc.n	8008ca4 <_strtol_l.isra.0+0xc4>
 8008c68:	d101      	bne.n	8008c6e <_strtol_l.isra.0+0x8e>
 8008c6a:	45a2      	cmp	sl, r4
 8008c6c:	db1a      	blt.n	8008ca4 <_strtol_l.isra.0+0xc4>
 8008c6e:	fb05 4503 	mla	r5, r5, r3, r4
 8008c72:	2601      	movs	r6, #1
 8008c74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c78:	e7eb      	b.n	8008c52 <_strtol_l.isra.0+0x72>
 8008c7a:	2c2b      	cmp	r4, #43	; 0x2b
 8008c7c:	bf08      	it	eq
 8008c7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008c82:	46a8      	mov	r8, r5
 8008c84:	bf08      	it	eq
 8008c86:	f106 0e02 	addeq.w	lr, r6, #2
 8008c8a:	e7c7      	b.n	8008c1c <_strtol_l.isra.0+0x3c>
 8008c8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008c90:	2f19      	cmp	r7, #25
 8008c92:	d801      	bhi.n	8008c98 <_strtol_l.isra.0+0xb8>
 8008c94:	3c37      	subs	r4, #55	; 0x37
 8008c96:	e7e1      	b.n	8008c5c <_strtol_l.isra.0+0x7c>
 8008c98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008c9c:	2f19      	cmp	r7, #25
 8008c9e:	d804      	bhi.n	8008caa <_strtol_l.isra.0+0xca>
 8008ca0:	3c57      	subs	r4, #87	; 0x57
 8008ca2:	e7db      	b.n	8008c5c <_strtol_l.isra.0+0x7c>
 8008ca4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008ca8:	e7e4      	b.n	8008c74 <_strtol_l.isra.0+0x94>
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	da05      	bge.n	8008cba <_strtol_l.isra.0+0xda>
 8008cae:	2322      	movs	r3, #34	; 0x22
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	4665      	mov	r5, ip
 8008cb4:	b942      	cbnz	r2, 8008cc8 <_strtol_l.isra.0+0xe8>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	e79d      	b.n	8008bf6 <_strtol_l.isra.0+0x16>
 8008cba:	f1b8 0f00 	cmp.w	r8, #0
 8008cbe:	d000      	beq.n	8008cc2 <_strtol_l.isra.0+0xe2>
 8008cc0:	426d      	negs	r5, r5
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	d0f7      	beq.n	8008cb6 <_strtol_l.isra.0+0xd6>
 8008cc6:	b10e      	cbz	r6, 8008ccc <_strtol_l.isra.0+0xec>
 8008cc8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008ccc:	6011      	str	r1, [r2, #0]
 8008cce:	e7f2      	b.n	8008cb6 <_strtol_l.isra.0+0xd6>
 8008cd0:	2430      	movs	r4, #48	; 0x30
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1b3      	bne.n	8008c3e <_strtol_l.isra.0+0x5e>
 8008cd6:	2308      	movs	r3, #8
 8008cd8:	e7b1      	b.n	8008c3e <_strtol_l.isra.0+0x5e>
 8008cda:	2c30      	cmp	r4, #48	; 0x30
 8008cdc:	d0a4      	beq.n	8008c28 <_strtol_l.isra.0+0x48>
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e7ad      	b.n	8008c3e <_strtol_l.isra.0+0x5e>
 8008ce2:	bf00      	nop
 8008ce4:	0800a1b6 	.word	0x0800a1b6

08008ce8 <strtol>:
 8008ce8:	4613      	mov	r3, r2
 8008cea:	460a      	mov	r2, r1
 8008cec:	4601      	mov	r1, r0
 8008cee:	4802      	ldr	r0, [pc, #8]	; (8008cf8 <strtol+0x10>)
 8008cf0:	6800      	ldr	r0, [r0, #0]
 8008cf2:	f7ff bf75 	b.w	8008be0 <_strtol_l.isra.0>
 8008cf6:	bf00      	nop
 8008cf8:	20000020 	.word	0x20000020

08008cfc <__utoa>:
 8008cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfe:	4c1f      	ldr	r4, [pc, #124]	; (8008d7c <__utoa+0x80>)
 8008d00:	b08b      	sub	sp, #44	; 0x2c
 8008d02:	4605      	mov	r5, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	466e      	mov	r6, sp
 8008d08:	f104 0c20 	add.w	ip, r4, #32
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	6861      	ldr	r1, [r4, #4]
 8008d10:	4637      	mov	r7, r6
 8008d12:	c703      	stmia	r7!, {r0, r1}
 8008d14:	3408      	adds	r4, #8
 8008d16:	4564      	cmp	r4, ip
 8008d18:	463e      	mov	r6, r7
 8008d1a:	d1f7      	bne.n	8008d0c <__utoa+0x10>
 8008d1c:	7921      	ldrb	r1, [r4, #4]
 8008d1e:	7139      	strb	r1, [r7, #4]
 8008d20:	1e91      	subs	r1, r2, #2
 8008d22:	6820      	ldr	r0, [r4, #0]
 8008d24:	6038      	str	r0, [r7, #0]
 8008d26:	2922      	cmp	r1, #34	; 0x22
 8008d28:	f04f 0100 	mov.w	r1, #0
 8008d2c:	d904      	bls.n	8008d38 <__utoa+0x3c>
 8008d2e:	7019      	strb	r1, [r3, #0]
 8008d30:	460b      	mov	r3, r1
 8008d32:	4618      	mov	r0, r3
 8008d34:	b00b      	add	sp, #44	; 0x2c
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d38:	1e58      	subs	r0, r3, #1
 8008d3a:	4684      	mov	ip, r0
 8008d3c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008d40:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008d44:	fb02 5617 	mls	r6, r2, r7, r5
 8008d48:	4476      	add	r6, lr
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008d50:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008d54:	462e      	mov	r6, r5
 8008d56:	42b2      	cmp	r2, r6
 8008d58:	f101 0101 	add.w	r1, r1, #1
 8008d5c:	463d      	mov	r5, r7
 8008d5e:	d9ed      	bls.n	8008d3c <__utoa+0x40>
 8008d60:	2200      	movs	r2, #0
 8008d62:	545a      	strb	r2, [r3, r1]
 8008d64:	1919      	adds	r1, r3, r4
 8008d66:	1aa5      	subs	r5, r4, r2
 8008d68:	42aa      	cmp	r2, r5
 8008d6a:	dae2      	bge.n	8008d32 <__utoa+0x36>
 8008d6c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008d70:	780e      	ldrb	r6, [r1, #0]
 8008d72:	7006      	strb	r6, [r0, #0]
 8008d74:	3201      	adds	r2, #1
 8008d76:	f801 5901 	strb.w	r5, [r1], #-1
 8008d7a:	e7f4      	b.n	8008d66 <__utoa+0x6a>
 8008d7c:	0800a154 	.word	0x0800a154

08008d80 <__assert_func>:
 8008d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d82:	4614      	mov	r4, r2
 8008d84:	461a      	mov	r2, r3
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <__assert_func+0x2c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	68d8      	ldr	r0, [r3, #12]
 8008d8e:	b14c      	cbz	r4, 8008da4 <__assert_func+0x24>
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <__assert_func+0x30>)
 8008d92:	9100      	str	r1, [sp, #0]
 8008d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d98:	4906      	ldr	r1, [pc, #24]	; (8008db4 <__assert_func+0x34>)
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	f000 f80e 	bl	8008dbc <fiprintf>
 8008da0:	f000 fdea 	bl	8009978 <abort>
 8008da4:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <__assert_func+0x38>)
 8008da6:	461c      	mov	r4, r3
 8008da8:	e7f3      	b.n	8008d92 <__assert_func+0x12>
 8008daa:	bf00      	nop
 8008dac:	20000020 	.word	0x20000020
 8008db0:	0800a179 	.word	0x0800a179
 8008db4:	0800a186 	.word	0x0800a186
 8008db8:	0800a1b4 	.word	0x0800a1b4

08008dbc <fiprintf>:
 8008dbc:	b40e      	push	{r1, r2, r3}
 8008dbe:	b503      	push	{r0, r1, lr}
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	ab03      	add	r3, sp, #12
 8008dc4:	4805      	ldr	r0, [pc, #20]	; (8008ddc <fiprintf+0x20>)
 8008dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dca:	6800      	ldr	r0, [r0, #0]
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	f000 fa3f 	bl	8009250 <_vfiprintf_r>
 8008dd2:	b002      	add	sp, #8
 8008dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd8:	b003      	add	sp, #12
 8008dda:	4770      	bx	lr
 8008ddc:	20000020 	.word	0x20000020

08008de0 <malloc>:
 8008de0:	4b02      	ldr	r3, [pc, #8]	; (8008dec <malloc+0xc>)
 8008de2:	4601      	mov	r1, r0
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	f000 b853 	b.w	8008e90 <_malloc_r>
 8008dea:	bf00      	nop
 8008dec:	20000020 	.word	0x20000020

08008df0 <_free_r>:
 8008df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df2:	2900      	cmp	r1, #0
 8008df4:	d048      	beq.n	8008e88 <_free_r+0x98>
 8008df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dfa:	9001      	str	r0, [sp, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f1a1 0404 	sub.w	r4, r1, #4
 8008e02:	bfb8      	it	lt
 8008e04:	18e4      	addlt	r4, r4, r3
 8008e06:	f000 fff7 	bl	8009df8 <__malloc_lock>
 8008e0a:	4a20      	ldr	r2, [pc, #128]	; (8008e8c <_free_r+0x9c>)
 8008e0c:	9801      	ldr	r0, [sp, #4]
 8008e0e:	6813      	ldr	r3, [r2, #0]
 8008e10:	4615      	mov	r5, r2
 8008e12:	b933      	cbnz	r3, 8008e22 <_free_r+0x32>
 8008e14:	6063      	str	r3, [r4, #4]
 8008e16:	6014      	str	r4, [r2, #0]
 8008e18:	b003      	add	sp, #12
 8008e1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e1e:	f000 bff1 	b.w	8009e04 <__malloc_unlock>
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	d90b      	bls.n	8008e3e <_free_r+0x4e>
 8008e26:	6821      	ldr	r1, [r4, #0]
 8008e28:	1862      	adds	r2, r4, r1
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bf04      	itt	eq
 8008e2e:	681a      	ldreq	r2, [r3, #0]
 8008e30:	685b      	ldreq	r3, [r3, #4]
 8008e32:	6063      	str	r3, [r4, #4]
 8008e34:	bf04      	itt	eq
 8008e36:	1852      	addeq	r2, r2, r1
 8008e38:	6022      	streq	r2, [r4, #0]
 8008e3a:	602c      	str	r4, [r5, #0]
 8008e3c:	e7ec      	b.n	8008e18 <_free_r+0x28>
 8008e3e:	461a      	mov	r2, r3
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	b10b      	cbz	r3, 8008e48 <_free_r+0x58>
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d9fa      	bls.n	8008e3e <_free_r+0x4e>
 8008e48:	6811      	ldr	r1, [r2, #0]
 8008e4a:	1855      	adds	r5, r2, r1
 8008e4c:	42a5      	cmp	r5, r4
 8008e4e:	d10b      	bne.n	8008e68 <_free_r+0x78>
 8008e50:	6824      	ldr	r4, [r4, #0]
 8008e52:	4421      	add	r1, r4
 8008e54:	1854      	adds	r4, r2, r1
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	6011      	str	r1, [r2, #0]
 8008e5a:	d1dd      	bne.n	8008e18 <_free_r+0x28>
 8008e5c:	681c      	ldr	r4, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	6053      	str	r3, [r2, #4]
 8008e62:	4421      	add	r1, r4
 8008e64:	6011      	str	r1, [r2, #0]
 8008e66:	e7d7      	b.n	8008e18 <_free_r+0x28>
 8008e68:	d902      	bls.n	8008e70 <_free_r+0x80>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	e7d3      	b.n	8008e18 <_free_r+0x28>
 8008e70:	6825      	ldr	r5, [r4, #0]
 8008e72:	1961      	adds	r1, r4, r5
 8008e74:	428b      	cmp	r3, r1
 8008e76:	bf04      	itt	eq
 8008e78:	6819      	ldreq	r1, [r3, #0]
 8008e7a:	685b      	ldreq	r3, [r3, #4]
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	bf04      	itt	eq
 8008e80:	1949      	addeq	r1, r1, r5
 8008e82:	6021      	streq	r1, [r4, #0]
 8008e84:	6054      	str	r4, [r2, #4]
 8008e86:	e7c7      	b.n	8008e18 <_free_r+0x28>
 8008e88:	b003      	add	sp, #12
 8008e8a:	bd30      	pop	{r4, r5, pc}
 8008e8c:	20000530 	.word	0x20000530

08008e90 <_malloc_r>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	1ccd      	adds	r5, r1, #3
 8008e94:	f025 0503 	bic.w	r5, r5, #3
 8008e98:	3508      	adds	r5, #8
 8008e9a:	2d0c      	cmp	r5, #12
 8008e9c:	bf38      	it	cc
 8008e9e:	250c      	movcc	r5, #12
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	db01      	blt.n	8008eaa <_malloc_r+0x1a>
 8008ea6:	42a9      	cmp	r1, r5
 8008ea8:	d903      	bls.n	8008eb2 <_malloc_r+0x22>
 8008eaa:	230c      	movs	r3, #12
 8008eac:	6033      	str	r3, [r6, #0]
 8008eae:	2000      	movs	r0, #0
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb2:	f000 ffa1 	bl	8009df8 <__malloc_lock>
 8008eb6:	4921      	ldr	r1, [pc, #132]	; (8008f3c <_malloc_r+0xac>)
 8008eb8:	680a      	ldr	r2, [r1, #0]
 8008eba:	4614      	mov	r4, r2
 8008ebc:	b99c      	cbnz	r4, 8008ee6 <_malloc_r+0x56>
 8008ebe:	4f20      	ldr	r7, [pc, #128]	; (8008f40 <_malloc_r+0xb0>)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	b923      	cbnz	r3, 8008ece <_malloc_r+0x3e>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f000 fc86 	bl	80097d8 <_sbrk_r>
 8008ecc:	6038      	str	r0, [r7, #0]
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 fc81 	bl	80097d8 <_sbrk_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d123      	bne.n	8008f22 <_malloc_r+0x92>
 8008eda:	230c      	movs	r3, #12
 8008edc:	6033      	str	r3, [r6, #0]
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f000 ff90 	bl	8009e04 <__malloc_unlock>
 8008ee4:	e7e3      	b.n	8008eae <_malloc_r+0x1e>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	1b5b      	subs	r3, r3, r5
 8008eea:	d417      	bmi.n	8008f1c <_malloc_r+0x8c>
 8008eec:	2b0b      	cmp	r3, #11
 8008eee:	d903      	bls.n	8008ef8 <_malloc_r+0x68>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	441c      	add	r4, r3
 8008ef4:	6025      	str	r5, [r4, #0]
 8008ef6:	e004      	b.n	8008f02 <_malloc_r+0x72>
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	42a2      	cmp	r2, r4
 8008efc:	bf0c      	ite	eq
 8008efe:	600b      	streq	r3, [r1, #0]
 8008f00:	6053      	strne	r3, [r2, #4]
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 ff7e 	bl	8009e04 <__malloc_unlock>
 8008f08:	f104 000b 	add.w	r0, r4, #11
 8008f0c:	1d23      	adds	r3, r4, #4
 8008f0e:	f020 0007 	bic.w	r0, r0, #7
 8008f12:	1ac2      	subs	r2, r0, r3
 8008f14:	d0cc      	beq.n	8008eb0 <_malloc_r+0x20>
 8008f16:	1a1b      	subs	r3, r3, r0
 8008f18:	50a3      	str	r3, [r4, r2]
 8008f1a:	e7c9      	b.n	8008eb0 <_malloc_r+0x20>
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	6864      	ldr	r4, [r4, #4]
 8008f20:	e7cc      	b.n	8008ebc <_malloc_r+0x2c>
 8008f22:	1cc4      	adds	r4, r0, #3
 8008f24:	f024 0403 	bic.w	r4, r4, #3
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	d0e3      	beq.n	8008ef4 <_malloc_r+0x64>
 8008f2c:	1a21      	subs	r1, r4, r0
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f000 fc52 	bl	80097d8 <_sbrk_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d1dd      	bne.n	8008ef4 <_malloc_r+0x64>
 8008f38:	e7cf      	b.n	8008eda <_malloc_r+0x4a>
 8008f3a:	bf00      	nop
 8008f3c:	20000530 	.word	0x20000530
 8008f40:	20000534 	.word	0x20000534

08008f44 <__ssputs_r>:
 8008f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f48:	688e      	ldr	r6, [r1, #8]
 8008f4a:	429e      	cmp	r6, r3
 8008f4c:	4682      	mov	sl, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	4690      	mov	r8, r2
 8008f52:	461f      	mov	r7, r3
 8008f54:	d838      	bhi.n	8008fc8 <__ssputs_r+0x84>
 8008f56:	898a      	ldrh	r2, [r1, #12]
 8008f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f5c:	d032      	beq.n	8008fc4 <__ssputs_r+0x80>
 8008f5e:	6825      	ldr	r5, [r4, #0]
 8008f60:	6909      	ldr	r1, [r1, #16]
 8008f62:	eba5 0901 	sub.w	r9, r5, r1
 8008f66:	6965      	ldr	r5, [r4, #20]
 8008f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f70:	3301      	adds	r3, #1
 8008f72:	444b      	add	r3, r9
 8008f74:	106d      	asrs	r5, r5, #1
 8008f76:	429d      	cmp	r5, r3
 8008f78:	bf38      	it	cc
 8008f7a:	461d      	movcc	r5, r3
 8008f7c:	0553      	lsls	r3, r2, #21
 8008f7e:	d531      	bpl.n	8008fe4 <__ssputs_r+0xa0>
 8008f80:	4629      	mov	r1, r5
 8008f82:	f7ff ff85 	bl	8008e90 <_malloc_r>
 8008f86:	4606      	mov	r6, r0
 8008f88:	b950      	cbnz	r0, 8008fa0 <__ssputs_r+0x5c>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	f8ca 3000 	str.w	r3, [sl]
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa0:	6921      	ldr	r1, [r4, #16]
 8008fa2:	464a      	mov	r2, r9
 8008fa4:	f7ff fd8a 	bl	8008abc <memcpy>
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb2:	81a3      	strh	r3, [r4, #12]
 8008fb4:	6126      	str	r6, [r4, #16]
 8008fb6:	6165      	str	r5, [r4, #20]
 8008fb8:	444e      	add	r6, r9
 8008fba:	eba5 0509 	sub.w	r5, r5, r9
 8008fbe:	6026      	str	r6, [r4, #0]
 8008fc0:	60a5      	str	r5, [r4, #8]
 8008fc2:	463e      	mov	r6, r7
 8008fc4:	42be      	cmp	r6, r7
 8008fc6:	d900      	bls.n	8008fca <__ssputs_r+0x86>
 8008fc8:	463e      	mov	r6, r7
 8008fca:	4632      	mov	r2, r6
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	4641      	mov	r1, r8
 8008fd0:	f000 fef8 	bl	8009dc4 <memmove>
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	1b9b      	subs	r3, r3, r6
 8008fda:	4432      	add	r2, r6
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e7db      	b.n	8008f9c <__ssputs_r+0x58>
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	f000 ff13 	bl	8009e10 <_realloc_r>
 8008fea:	4606      	mov	r6, r0
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1e1      	bne.n	8008fb4 <__ssputs_r+0x70>
 8008ff0:	6921      	ldr	r1, [r4, #16]
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	f7ff fefc 	bl	8008df0 <_free_r>
 8008ff8:	e7c7      	b.n	8008f8a <__ssputs_r+0x46>
	...

08008ffc <_svfiprintf_r>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	4698      	mov	r8, r3
 8009002:	898b      	ldrh	r3, [r1, #12]
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	b09d      	sub	sp, #116	; 0x74
 8009008:	4607      	mov	r7, r0
 800900a:	460d      	mov	r5, r1
 800900c:	4614      	mov	r4, r2
 800900e:	d50e      	bpl.n	800902e <_svfiprintf_r+0x32>
 8009010:	690b      	ldr	r3, [r1, #16]
 8009012:	b963      	cbnz	r3, 800902e <_svfiprintf_r+0x32>
 8009014:	2140      	movs	r1, #64	; 0x40
 8009016:	f7ff ff3b 	bl	8008e90 <_malloc_r>
 800901a:	6028      	str	r0, [r5, #0]
 800901c:	6128      	str	r0, [r5, #16]
 800901e:	b920      	cbnz	r0, 800902a <_svfiprintf_r+0x2e>
 8009020:	230c      	movs	r3, #12
 8009022:	603b      	str	r3, [r7, #0]
 8009024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009028:	e0d1      	b.n	80091ce <_svfiprintf_r+0x1d2>
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	616b      	str	r3, [r5, #20]
 800902e:	2300      	movs	r3, #0
 8009030:	9309      	str	r3, [sp, #36]	; 0x24
 8009032:	2320      	movs	r3, #32
 8009034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009038:	f8cd 800c 	str.w	r8, [sp, #12]
 800903c:	2330      	movs	r3, #48	; 0x30
 800903e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091e8 <_svfiprintf_r+0x1ec>
 8009042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009046:	f04f 0901 	mov.w	r9, #1
 800904a:	4623      	mov	r3, r4
 800904c:	469a      	mov	sl, r3
 800904e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009052:	b10a      	cbz	r2, 8009058 <_svfiprintf_r+0x5c>
 8009054:	2a25      	cmp	r2, #37	; 0x25
 8009056:	d1f9      	bne.n	800904c <_svfiprintf_r+0x50>
 8009058:	ebba 0b04 	subs.w	fp, sl, r4
 800905c:	d00b      	beq.n	8009076 <_svfiprintf_r+0x7a>
 800905e:	465b      	mov	r3, fp
 8009060:	4622      	mov	r2, r4
 8009062:	4629      	mov	r1, r5
 8009064:	4638      	mov	r0, r7
 8009066:	f7ff ff6d 	bl	8008f44 <__ssputs_r>
 800906a:	3001      	adds	r0, #1
 800906c:	f000 80aa 	beq.w	80091c4 <_svfiprintf_r+0x1c8>
 8009070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009072:	445a      	add	r2, fp
 8009074:	9209      	str	r2, [sp, #36]	; 0x24
 8009076:	f89a 3000 	ldrb.w	r3, [sl]
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 80a2 	beq.w	80091c4 <_svfiprintf_r+0x1c8>
 8009080:	2300      	movs	r3, #0
 8009082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908a:	f10a 0a01 	add.w	sl, sl, #1
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	9307      	str	r3, [sp, #28]
 8009092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009096:	931a      	str	r3, [sp, #104]	; 0x68
 8009098:	4654      	mov	r4, sl
 800909a:	2205      	movs	r2, #5
 800909c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a0:	4851      	ldr	r0, [pc, #324]	; (80091e8 <_svfiprintf_r+0x1ec>)
 80090a2:	f7f7 f89d 	bl	80001e0 <memchr>
 80090a6:	9a04      	ldr	r2, [sp, #16]
 80090a8:	b9d8      	cbnz	r0, 80090e2 <_svfiprintf_r+0xe6>
 80090aa:	06d0      	lsls	r0, r2, #27
 80090ac:	bf44      	itt	mi
 80090ae:	2320      	movmi	r3, #32
 80090b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b4:	0711      	lsls	r1, r2, #28
 80090b6:	bf44      	itt	mi
 80090b8:	232b      	movmi	r3, #43	; 0x2b
 80090ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090be:	f89a 3000 	ldrb.w	r3, [sl]
 80090c2:	2b2a      	cmp	r3, #42	; 0x2a
 80090c4:	d015      	beq.n	80090f2 <_svfiprintf_r+0xf6>
 80090c6:	9a07      	ldr	r2, [sp, #28]
 80090c8:	4654      	mov	r4, sl
 80090ca:	2000      	movs	r0, #0
 80090cc:	f04f 0c0a 	mov.w	ip, #10
 80090d0:	4621      	mov	r1, r4
 80090d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d6:	3b30      	subs	r3, #48	; 0x30
 80090d8:	2b09      	cmp	r3, #9
 80090da:	d94e      	bls.n	800917a <_svfiprintf_r+0x17e>
 80090dc:	b1b0      	cbz	r0, 800910c <_svfiprintf_r+0x110>
 80090de:	9207      	str	r2, [sp, #28]
 80090e0:	e014      	b.n	800910c <_svfiprintf_r+0x110>
 80090e2:	eba0 0308 	sub.w	r3, r0, r8
 80090e6:	fa09 f303 	lsl.w	r3, r9, r3
 80090ea:	4313      	orrs	r3, r2
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	46a2      	mov	sl, r4
 80090f0:	e7d2      	b.n	8009098 <_svfiprintf_r+0x9c>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	1d19      	adds	r1, r3, #4
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	9103      	str	r1, [sp, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfbb      	ittet	lt
 80090fe:	425b      	neglt	r3, r3
 8009100:	f042 0202 	orrlt.w	r2, r2, #2
 8009104:	9307      	strge	r3, [sp, #28]
 8009106:	9307      	strlt	r3, [sp, #28]
 8009108:	bfb8      	it	lt
 800910a:	9204      	strlt	r2, [sp, #16]
 800910c:	7823      	ldrb	r3, [r4, #0]
 800910e:	2b2e      	cmp	r3, #46	; 0x2e
 8009110:	d10c      	bne.n	800912c <_svfiprintf_r+0x130>
 8009112:	7863      	ldrb	r3, [r4, #1]
 8009114:	2b2a      	cmp	r3, #42	; 0x2a
 8009116:	d135      	bne.n	8009184 <_svfiprintf_r+0x188>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	1d1a      	adds	r2, r3, #4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	9203      	str	r2, [sp, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfb8      	it	lt
 8009124:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009128:	3402      	adds	r4, #2
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091f8 <_svfiprintf_r+0x1fc>
 8009130:	7821      	ldrb	r1, [r4, #0]
 8009132:	2203      	movs	r2, #3
 8009134:	4650      	mov	r0, sl
 8009136:	f7f7 f853 	bl	80001e0 <memchr>
 800913a:	b140      	cbz	r0, 800914e <_svfiprintf_r+0x152>
 800913c:	2340      	movs	r3, #64	; 0x40
 800913e:	eba0 000a 	sub.w	r0, r0, sl
 8009142:	fa03 f000 	lsl.w	r0, r3, r0
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	4303      	orrs	r3, r0
 800914a:	3401      	adds	r4, #1
 800914c:	9304      	str	r3, [sp, #16]
 800914e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009152:	4826      	ldr	r0, [pc, #152]	; (80091ec <_svfiprintf_r+0x1f0>)
 8009154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009158:	2206      	movs	r2, #6
 800915a:	f7f7 f841 	bl	80001e0 <memchr>
 800915e:	2800      	cmp	r0, #0
 8009160:	d038      	beq.n	80091d4 <_svfiprintf_r+0x1d8>
 8009162:	4b23      	ldr	r3, [pc, #140]	; (80091f0 <_svfiprintf_r+0x1f4>)
 8009164:	bb1b      	cbnz	r3, 80091ae <_svfiprintf_r+0x1b2>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	3307      	adds	r3, #7
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	3308      	adds	r3, #8
 8009170:	9303      	str	r3, [sp, #12]
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	4433      	add	r3, r6
 8009176:	9309      	str	r3, [sp, #36]	; 0x24
 8009178:	e767      	b.n	800904a <_svfiprintf_r+0x4e>
 800917a:	fb0c 3202 	mla	r2, ip, r2, r3
 800917e:	460c      	mov	r4, r1
 8009180:	2001      	movs	r0, #1
 8009182:	e7a5      	b.n	80090d0 <_svfiprintf_r+0xd4>
 8009184:	2300      	movs	r3, #0
 8009186:	3401      	adds	r4, #1
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	4619      	mov	r1, r3
 800918c:	f04f 0c0a 	mov.w	ip, #10
 8009190:	4620      	mov	r0, r4
 8009192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009196:	3a30      	subs	r2, #48	; 0x30
 8009198:	2a09      	cmp	r2, #9
 800919a:	d903      	bls.n	80091a4 <_svfiprintf_r+0x1a8>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0c5      	beq.n	800912c <_svfiprintf_r+0x130>
 80091a0:	9105      	str	r1, [sp, #20]
 80091a2:	e7c3      	b.n	800912c <_svfiprintf_r+0x130>
 80091a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091a8:	4604      	mov	r4, r0
 80091aa:	2301      	movs	r3, #1
 80091ac:	e7f0      	b.n	8009190 <_svfiprintf_r+0x194>
 80091ae:	ab03      	add	r3, sp, #12
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	462a      	mov	r2, r5
 80091b4:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <_svfiprintf_r+0x1f8>)
 80091b6:	a904      	add	r1, sp, #16
 80091b8:	4638      	mov	r0, r7
 80091ba:	f3af 8000 	nop.w
 80091be:	1c42      	adds	r2, r0, #1
 80091c0:	4606      	mov	r6, r0
 80091c2:	d1d6      	bne.n	8009172 <_svfiprintf_r+0x176>
 80091c4:	89ab      	ldrh	r3, [r5, #12]
 80091c6:	065b      	lsls	r3, r3, #25
 80091c8:	f53f af2c 	bmi.w	8009024 <_svfiprintf_r+0x28>
 80091cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ce:	b01d      	add	sp, #116	; 0x74
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	ab03      	add	r3, sp, #12
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	462a      	mov	r2, r5
 80091da:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <_svfiprintf_r+0x1f8>)
 80091dc:	a904      	add	r1, sp, #16
 80091de:	4638      	mov	r0, r7
 80091e0:	f000 f9d4 	bl	800958c <_printf_i>
 80091e4:	e7eb      	b.n	80091be <_svfiprintf_r+0x1c2>
 80091e6:	bf00      	nop
 80091e8:	0800a2b6 	.word	0x0800a2b6
 80091ec:	0800a2c0 	.word	0x0800a2c0
 80091f0:	00000000 	.word	0x00000000
 80091f4:	08008f45 	.word	0x08008f45
 80091f8:	0800a2bc 	.word	0x0800a2bc

080091fc <__sfputc_r>:
 80091fc:	6893      	ldr	r3, [r2, #8]
 80091fe:	3b01      	subs	r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	b410      	push	{r4}
 8009204:	6093      	str	r3, [r2, #8]
 8009206:	da08      	bge.n	800921a <__sfputc_r+0x1e>
 8009208:	6994      	ldr	r4, [r2, #24]
 800920a:	42a3      	cmp	r3, r4
 800920c:	db01      	blt.n	8009212 <__sfputc_r+0x16>
 800920e:	290a      	cmp	r1, #10
 8009210:	d103      	bne.n	800921a <__sfputc_r+0x1e>
 8009212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009216:	f000 baef 	b.w	80097f8 <__swbuf_r>
 800921a:	6813      	ldr	r3, [r2, #0]
 800921c:	1c58      	adds	r0, r3, #1
 800921e:	6010      	str	r0, [r2, #0]
 8009220:	7019      	strb	r1, [r3, #0]
 8009222:	4608      	mov	r0, r1
 8009224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009228:	4770      	bx	lr

0800922a <__sfputs_r>:
 800922a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922c:	4606      	mov	r6, r0
 800922e:	460f      	mov	r7, r1
 8009230:	4614      	mov	r4, r2
 8009232:	18d5      	adds	r5, r2, r3
 8009234:	42ac      	cmp	r4, r5
 8009236:	d101      	bne.n	800923c <__sfputs_r+0x12>
 8009238:	2000      	movs	r0, #0
 800923a:	e007      	b.n	800924c <__sfputs_r+0x22>
 800923c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009240:	463a      	mov	r2, r7
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff ffda 	bl	80091fc <__sfputc_r>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d1f3      	bne.n	8009234 <__sfputs_r+0xa>
 800924c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009250 <_vfiprintf_r>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	460d      	mov	r5, r1
 8009256:	b09d      	sub	sp, #116	; 0x74
 8009258:	4614      	mov	r4, r2
 800925a:	4698      	mov	r8, r3
 800925c:	4606      	mov	r6, r0
 800925e:	b118      	cbz	r0, 8009268 <_vfiprintf_r+0x18>
 8009260:	6983      	ldr	r3, [r0, #24]
 8009262:	b90b      	cbnz	r3, 8009268 <_vfiprintf_r+0x18>
 8009264:	f000 fcaa 	bl	8009bbc <__sinit>
 8009268:	4b89      	ldr	r3, [pc, #548]	; (8009490 <_vfiprintf_r+0x240>)
 800926a:	429d      	cmp	r5, r3
 800926c:	d11b      	bne.n	80092a6 <_vfiprintf_r+0x56>
 800926e:	6875      	ldr	r5, [r6, #4]
 8009270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009272:	07d9      	lsls	r1, r3, #31
 8009274:	d405      	bmi.n	8009282 <_vfiprintf_r+0x32>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	059a      	lsls	r2, r3, #22
 800927a:	d402      	bmi.n	8009282 <_vfiprintf_r+0x32>
 800927c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800927e:	f000 fd3b 	bl	8009cf8 <__retarget_lock_acquire_recursive>
 8009282:	89ab      	ldrh	r3, [r5, #12]
 8009284:	071b      	lsls	r3, r3, #28
 8009286:	d501      	bpl.n	800928c <_vfiprintf_r+0x3c>
 8009288:	692b      	ldr	r3, [r5, #16]
 800928a:	b9eb      	cbnz	r3, 80092c8 <_vfiprintf_r+0x78>
 800928c:	4629      	mov	r1, r5
 800928e:	4630      	mov	r0, r6
 8009290:	f000 fb04 	bl	800989c <__swsetup_r>
 8009294:	b1c0      	cbz	r0, 80092c8 <_vfiprintf_r+0x78>
 8009296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009298:	07dc      	lsls	r4, r3, #31
 800929a:	d50e      	bpl.n	80092ba <_vfiprintf_r+0x6a>
 800929c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092a0:	b01d      	add	sp, #116	; 0x74
 80092a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a6:	4b7b      	ldr	r3, [pc, #492]	; (8009494 <_vfiprintf_r+0x244>)
 80092a8:	429d      	cmp	r5, r3
 80092aa:	d101      	bne.n	80092b0 <_vfiprintf_r+0x60>
 80092ac:	68b5      	ldr	r5, [r6, #8]
 80092ae:	e7df      	b.n	8009270 <_vfiprintf_r+0x20>
 80092b0:	4b79      	ldr	r3, [pc, #484]	; (8009498 <_vfiprintf_r+0x248>)
 80092b2:	429d      	cmp	r5, r3
 80092b4:	bf08      	it	eq
 80092b6:	68f5      	ldreq	r5, [r6, #12]
 80092b8:	e7da      	b.n	8009270 <_vfiprintf_r+0x20>
 80092ba:	89ab      	ldrh	r3, [r5, #12]
 80092bc:	0598      	lsls	r0, r3, #22
 80092be:	d4ed      	bmi.n	800929c <_vfiprintf_r+0x4c>
 80092c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c2:	f000 fd1a 	bl	8009cfa <__retarget_lock_release_recursive>
 80092c6:	e7e9      	b.n	800929c <_vfiprintf_r+0x4c>
 80092c8:	2300      	movs	r3, #0
 80092ca:	9309      	str	r3, [sp, #36]	; 0x24
 80092cc:	2320      	movs	r3, #32
 80092ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d6:	2330      	movs	r3, #48	; 0x30
 80092d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800949c <_vfiprintf_r+0x24c>
 80092dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092e0:	f04f 0901 	mov.w	r9, #1
 80092e4:	4623      	mov	r3, r4
 80092e6:	469a      	mov	sl, r3
 80092e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ec:	b10a      	cbz	r2, 80092f2 <_vfiprintf_r+0xa2>
 80092ee:	2a25      	cmp	r2, #37	; 0x25
 80092f0:	d1f9      	bne.n	80092e6 <_vfiprintf_r+0x96>
 80092f2:	ebba 0b04 	subs.w	fp, sl, r4
 80092f6:	d00b      	beq.n	8009310 <_vfiprintf_r+0xc0>
 80092f8:	465b      	mov	r3, fp
 80092fa:	4622      	mov	r2, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	4630      	mov	r0, r6
 8009300:	f7ff ff93 	bl	800922a <__sfputs_r>
 8009304:	3001      	adds	r0, #1
 8009306:	f000 80aa 	beq.w	800945e <_vfiprintf_r+0x20e>
 800930a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800930c:	445a      	add	r2, fp
 800930e:	9209      	str	r2, [sp, #36]	; 0x24
 8009310:	f89a 3000 	ldrb.w	r3, [sl]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 80a2 	beq.w	800945e <_vfiprintf_r+0x20e>
 800931a:	2300      	movs	r3, #0
 800931c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009324:	f10a 0a01 	add.w	sl, sl, #1
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	9307      	str	r3, [sp, #28]
 800932c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009330:	931a      	str	r3, [sp, #104]	; 0x68
 8009332:	4654      	mov	r4, sl
 8009334:	2205      	movs	r2, #5
 8009336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800933a:	4858      	ldr	r0, [pc, #352]	; (800949c <_vfiprintf_r+0x24c>)
 800933c:	f7f6 ff50 	bl	80001e0 <memchr>
 8009340:	9a04      	ldr	r2, [sp, #16]
 8009342:	b9d8      	cbnz	r0, 800937c <_vfiprintf_r+0x12c>
 8009344:	06d1      	lsls	r1, r2, #27
 8009346:	bf44      	itt	mi
 8009348:	2320      	movmi	r3, #32
 800934a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800934e:	0713      	lsls	r3, r2, #28
 8009350:	bf44      	itt	mi
 8009352:	232b      	movmi	r3, #43	; 0x2b
 8009354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009358:	f89a 3000 	ldrb.w	r3, [sl]
 800935c:	2b2a      	cmp	r3, #42	; 0x2a
 800935e:	d015      	beq.n	800938c <_vfiprintf_r+0x13c>
 8009360:	9a07      	ldr	r2, [sp, #28]
 8009362:	4654      	mov	r4, sl
 8009364:	2000      	movs	r0, #0
 8009366:	f04f 0c0a 	mov.w	ip, #10
 800936a:	4621      	mov	r1, r4
 800936c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009370:	3b30      	subs	r3, #48	; 0x30
 8009372:	2b09      	cmp	r3, #9
 8009374:	d94e      	bls.n	8009414 <_vfiprintf_r+0x1c4>
 8009376:	b1b0      	cbz	r0, 80093a6 <_vfiprintf_r+0x156>
 8009378:	9207      	str	r2, [sp, #28]
 800937a:	e014      	b.n	80093a6 <_vfiprintf_r+0x156>
 800937c:	eba0 0308 	sub.w	r3, r0, r8
 8009380:	fa09 f303 	lsl.w	r3, r9, r3
 8009384:	4313      	orrs	r3, r2
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	46a2      	mov	sl, r4
 800938a:	e7d2      	b.n	8009332 <_vfiprintf_r+0xe2>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	1d19      	adds	r1, r3, #4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	9103      	str	r1, [sp, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	bfbb      	ittet	lt
 8009398:	425b      	neglt	r3, r3
 800939a:	f042 0202 	orrlt.w	r2, r2, #2
 800939e:	9307      	strge	r3, [sp, #28]
 80093a0:	9307      	strlt	r3, [sp, #28]
 80093a2:	bfb8      	it	lt
 80093a4:	9204      	strlt	r2, [sp, #16]
 80093a6:	7823      	ldrb	r3, [r4, #0]
 80093a8:	2b2e      	cmp	r3, #46	; 0x2e
 80093aa:	d10c      	bne.n	80093c6 <_vfiprintf_r+0x176>
 80093ac:	7863      	ldrb	r3, [r4, #1]
 80093ae:	2b2a      	cmp	r3, #42	; 0x2a
 80093b0:	d135      	bne.n	800941e <_vfiprintf_r+0x1ce>
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	1d1a      	adds	r2, r3, #4
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	9203      	str	r2, [sp, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	bfb8      	it	lt
 80093be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093c2:	3402      	adds	r4, #2
 80093c4:	9305      	str	r3, [sp, #20]
 80093c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094ac <_vfiprintf_r+0x25c>
 80093ca:	7821      	ldrb	r1, [r4, #0]
 80093cc:	2203      	movs	r2, #3
 80093ce:	4650      	mov	r0, sl
 80093d0:	f7f6 ff06 	bl	80001e0 <memchr>
 80093d4:	b140      	cbz	r0, 80093e8 <_vfiprintf_r+0x198>
 80093d6:	2340      	movs	r3, #64	; 0x40
 80093d8:	eba0 000a 	sub.w	r0, r0, sl
 80093dc:	fa03 f000 	lsl.w	r0, r3, r0
 80093e0:	9b04      	ldr	r3, [sp, #16]
 80093e2:	4303      	orrs	r3, r0
 80093e4:	3401      	adds	r4, #1
 80093e6:	9304      	str	r3, [sp, #16]
 80093e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ec:	482c      	ldr	r0, [pc, #176]	; (80094a0 <_vfiprintf_r+0x250>)
 80093ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093f2:	2206      	movs	r2, #6
 80093f4:	f7f6 fef4 	bl	80001e0 <memchr>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d03f      	beq.n	800947c <_vfiprintf_r+0x22c>
 80093fc:	4b29      	ldr	r3, [pc, #164]	; (80094a4 <_vfiprintf_r+0x254>)
 80093fe:	bb1b      	cbnz	r3, 8009448 <_vfiprintf_r+0x1f8>
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	3307      	adds	r3, #7
 8009404:	f023 0307 	bic.w	r3, r3, #7
 8009408:	3308      	adds	r3, #8
 800940a:	9303      	str	r3, [sp, #12]
 800940c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940e:	443b      	add	r3, r7
 8009410:	9309      	str	r3, [sp, #36]	; 0x24
 8009412:	e767      	b.n	80092e4 <_vfiprintf_r+0x94>
 8009414:	fb0c 3202 	mla	r2, ip, r2, r3
 8009418:	460c      	mov	r4, r1
 800941a:	2001      	movs	r0, #1
 800941c:	e7a5      	b.n	800936a <_vfiprintf_r+0x11a>
 800941e:	2300      	movs	r3, #0
 8009420:	3401      	adds	r4, #1
 8009422:	9305      	str	r3, [sp, #20]
 8009424:	4619      	mov	r1, r3
 8009426:	f04f 0c0a 	mov.w	ip, #10
 800942a:	4620      	mov	r0, r4
 800942c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009430:	3a30      	subs	r2, #48	; 0x30
 8009432:	2a09      	cmp	r2, #9
 8009434:	d903      	bls.n	800943e <_vfiprintf_r+0x1ee>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0c5      	beq.n	80093c6 <_vfiprintf_r+0x176>
 800943a:	9105      	str	r1, [sp, #20]
 800943c:	e7c3      	b.n	80093c6 <_vfiprintf_r+0x176>
 800943e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009442:	4604      	mov	r4, r0
 8009444:	2301      	movs	r3, #1
 8009446:	e7f0      	b.n	800942a <_vfiprintf_r+0x1da>
 8009448:	ab03      	add	r3, sp, #12
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	462a      	mov	r2, r5
 800944e:	4b16      	ldr	r3, [pc, #88]	; (80094a8 <_vfiprintf_r+0x258>)
 8009450:	a904      	add	r1, sp, #16
 8009452:	4630      	mov	r0, r6
 8009454:	f3af 8000 	nop.w
 8009458:	4607      	mov	r7, r0
 800945a:	1c78      	adds	r0, r7, #1
 800945c:	d1d6      	bne.n	800940c <_vfiprintf_r+0x1bc>
 800945e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009460:	07d9      	lsls	r1, r3, #31
 8009462:	d405      	bmi.n	8009470 <_vfiprintf_r+0x220>
 8009464:	89ab      	ldrh	r3, [r5, #12]
 8009466:	059a      	lsls	r2, r3, #22
 8009468:	d402      	bmi.n	8009470 <_vfiprintf_r+0x220>
 800946a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800946c:	f000 fc45 	bl	8009cfa <__retarget_lock_release_recursive>
 8009470:	89ab      	ldrh	r3, [r5, #12]
 8009472:	065b      	lsls	r3, r3, #25
 8009474:	f53f af12 	bmi.w	800929c <_vfiprintf_r+0x4c>
 8009478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800947a:	e711      	b.n	80092a0 <_vfiprintf_r+0x50>
 800947c:	ab03      	add	r3, sp, #12
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	462a      	mov	r2, r5
 8009482:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <_vfiprintf_r+0x258>)
 8009484:	a904      	add	r1, sp, #16
 8009486:	4630      	mov	r0, r6
 8009488:	f000 f880 	bl	800958c <_printf_i>
 800948c:	e7e4      	b.n	8009458 <_vfiprintf_r+0x208>
 800948e:	bf00      	nop
 8009490:	0800a30c 	.word	0x0800a30c
 8009494:	0800a32c 	.word	0x0800a32c
 8009498:	0800a2ec 	.word	0x0800a2ec
 800949c:	0800a2b6 	.word	0x0800a2b6
 80094a0:	0800a2c0 	.word	0x0800a2c0
 80094a4:	00000000 	.word	0x00000000
 80094a8:	0800922b 	.word	0x0800922b
 80094ac:	0800a2bc 	.word	0x0800a2bc

080094b0 <_printf_common>:
 80094b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	4616      	mov	r6, r2
 80094b6:	4699      	mov	r9, r3
 80094b8:	688a      	ldr	r2, [r1, #8]
 80094ba:	690b      	ldr	r3, [r1, #16]
 80094bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094c0:	4293      	cmp	r3, r2
 80094c2:	bfb8      	it	lt
 80094c4:	4613      	movlt	r3, r2
 80094c6:	6033      	str	r3, [r6, #0]
 80094c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094cc:	4607      	mov	r7, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	b10a      	cbz	r2, 80094d6 <_printf_common+0x26>
 80094d2:	3301      	adds	r3, #1
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	0699      	lsls	r1, r3, #26
 80094da:	bf42      	ittt	mi
 80094dc:	6833      	ldrmi	r3, [r6, #0]
 80094de:	3302      	addmi	r3, #2
 80094e0:	6033      	strmi	r3, [r6, #0]
 80094e2:	6825      	ldr	r5, [r4, #0]
 80094e4:	f015 0506 	ands.w	r5, r5, #6
 80094e8:	d106      	bne.n	80094f8 <_printf_common+0x48>
 80094ea:	f104 0a19 	add.w	sl, r4, #25
 80094ee:	68e3      	ldr	r3, [r4, #12]
 80094f0:	6832      	ldr	r2, [r6, #0]
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	42ab      	cmp	r3, r5
 80094f6:	dc26      	bgt.n	8009546 <_printf_common+0x96>
 80094f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094fc:	1e13      	subs	r3, r2, #0
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	bf18      	it	ne
 8009502:	2301      	movne	r3, #1
 8009504:	0692      	lsls	r2, r2, #26
 8009506:	d42b      	bmi.n	8009560 <_printf_common+0xb0>
 8009508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800950c:	4649      	mov	r1, r9
 800950e:	4638      	mov	r0, r7
 8009510:	47c0      	blx	r8
 8009512:	3001      	adds	r0, #1
 8009514:	d01e      	beq.n	8009554 <_printf_common+0xa4>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	68e5      	ldr	r5, [r4, #12]
 800951a:	6832      	ldr	r2, [r6, #0]
 800951c:	f003 0306 	and.w	r3, r3, #6
 8009520:	2b04      	cmp	r3, #4
 8009522:	bf08      	it	eq
 8009524:	1aad      	subeq	r5, r5, r2
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	6922      	ldr	r2, [r4, #16]
 800952a:	bf0c      	ite	eq
 800952c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009530:	2500      	movne	r5, #0
 8009532:	4293      	cmp	r3, r2
 8009534:	bfc4      	itt	gt
 8009536:	1a9b      	subgt	r3, r3, r2
 8009538:	18ed      	addgt	r5, r5, r3
 800953a:	2600      	movs	r6, #0
 800953c:	341a      	adds	r4, #26
 800953e:	42b5      	cmp	r5, r6
 8009540:	d11a      	bne.n	8009578 <_printf_common+0xc8>
 8009542:	2000      	movs	r0, #0
 8009544:	e008      	b.n	8009558 <_printf_common+0xa8>
 8009546:	2301      	movs	r3, #1
 8009548:	4652      	mov	r2, sl
 800954a:	4649      	mov	r1, r9
 800954c:	4638      	mov	r0, r7
 800954e:	47c0      	blx	r8
 8009550:	3001      	adds	r0, #1
 8009552:	d103      	bne.n	800955c <_printf_common+0xac>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955c:	3501      	adds	r5, #1
 800955e:	e7c6      	b.n	80094ee <_printf_common+0x3e>
 8009560:	18e1      	adds	r1, r4, r3
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	2030      	movs	r0, #48	; 0x30
 8009566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800956a:	4422      	add	r2, r4
 800956c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009574:	3302      	adds	r3, #2
 8009576:	e7c7      	b.n	8009508 <_printf_common+0x58>
 8009578:	2301      	movs	r3, #1
 800957a:	4622      	mov	r2, r4
 800957c:	4649      	mov	r1, r9
 800957e:	4638      	mov	r0, r7
 8009580:	47c0      	blx	r8
 8009582:	3001      	adds	r0, #1
 8009584:	d0e6      	beq.n	8009554 <_printf_common+0xa4>
 8009586:	3601      	adds	r6, #1
 8009588:	e7d9      	b.n	800953e <_printf_common+0x8e>
	...

0800958c <_printf_i>:
 800958c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	460c      	mov	r4, r1
 8009592:	4691      	mov	r9, r2
 8009594:	7e27      	ldrb	r7, [r4, #24]
 8009596:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009598:	2f78      	cmp	r7, #120	; 0x78
 800959a:	4680      	mov	r8, r0
 800959c:	469a      	mov	sl, r3
 800959e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095a2:	d807      	bhi.n	80095b4 <_printf_i+0x28>
 80095a4:	2f62      	cmp	r7, #98	; 0x62
 80095a6:	d80a      	bhi.n	80095be <_printf_i+0x32>
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	f000 80d8 	beq.w	800975e <_printf_i+0x1d2>
 80095ae:	2f58      	cmp	r7, #88	; 0x58
 80095b0:	f000 80a3 	beq.w	80096fa <_printf_i+0x16e>
 80095b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095bc:	e03a      	b.n	8009634 <_printf_i+0xa8>
 80095be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095c2:	2b15      	cmp	r3, #21
 80095c4:	d8f6      	bhi.n	80095b4 <_printf_i+0x28>
 80095c6:	a001      	add	r0, pc, #4	; (adr r0, 80095cc <_printf_i+0x40>)
 80095c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009639 	.word	0x08009639
 80095d4:	080095b5 	.word	0x080095b5
 80095d8:	080095b5 	.word	0x080095b5
 80095dc:	080095b5 	.word	0x080095b5
 80095e0:	080095b5 	.word	0x080095b5
 80095e4:	08009639 	.word	0x08009639
 80095e8:	080095b5 	.word	0x080095b5
 80095ec:	080095b5 	.word	0x080095b5
 80095f0:	080095b5 	.word	0x080095b5
 80095f4:	080095b5 	.word	0x080095b5
 80095f8:	08009745 	.word	0x08009745
 80095fc:	08009669 	.word	0x08009669
 8009600:	08009727 	.word	0x08009727
 8009604:	080095b5 	.word	0x080095b5
 8009608:	080095b5 	.word	0x080095b5
 800960c:	08009767 	.word	0x08009767
 8009610:	080095b5 	.word	0x080095b5
 8009614:	08009669 	.word	0x08009669
 8009618:	080095b5 	.word	0x080095b5
 800961c:	080095b5 	.word	0x080095b5
 8009620:	0800972f 	.word	0x0800972f
 8009624:	680b      	ldr	r3, [r1, #0]
 8009626:	1d1a      	adds	r2, r3, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	600a      	str	r2, [r1, #0]
 800962c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009634:	2301      	movs	r3, #1
 8009636:	e0a3      	b.n	8009780 <_printf_i+0x1f4>
 8009638:	6825      	ldr	r5, [r4, #0]
 800963a:	6808      	ldr	r0, [r1, #0]
 800963c:	062e      	lsls	r6, r5, #24
 800963e:	f100 0304 	add.w	r3, r0, #4
 8009642:	d50a      	bpl.n	800965a <_printf_i+0xce>
 8009644:	6805      	ldr	r5, [r0, #0]
 8009646:	600b      	str	r3, [r1, #0]
 8009648:	2d00      	cmp	r5, #0
 800964a:	da03      	bge.n	8009654 <_printf_i+0xc8>
 800964c:	232d      	movs	r3, #45	; 0x2d
 800964e:	426d      	negs	r5, r5
 8009650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009654:	485e      	ldr	r0, [pc, #376]	; (80097d0 <_printf_i+0x244>)
 8009656:	230a      	movs	r3, #10
 8009658:	e019      	b.n	800968e <_printf_i+0x102>
 800965a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800965e:	6805      	ldr	r5, [r0, #0]
 8009660:	600b      	str	r3, [r1, #0]
 8009662:	bf18      	it	ne
 8009664:	b22d      	sxthne	r5, r5
 8009666:	e7ef      	b.n	8009648 <_printf_i+0xbc>
 8009668:	680b      	ldr	r3, [r1, #0]
 800966a:	6825      	ldr	r5, [r4, #0]
 800966c:	1d18      	adds	r0, r3, #4
 800966e:	6008      	str	r0, [r1, #0]
 8009670:	0628      	lsls	r0, r5, #24
 8009672:	d501      	bpl.n	8009678 <_printf_i+0xec>
 8009674:	681d      	ldr	r5, [r3, #0]
 8009676:	e002      	b.n	800967e <_printf_i+0xf2>
 8009678:	0669      	lsls	r1, r5, #25
 800967a:	d5fb      	bpl.n	8009674 <_printf_i+0xe8>
 800967c:	881d      	ldrh	r5, [r3, #0]
 800967e:	4854      	ldr	r0, [pc, #336]	; (80097d0 <_printf_i+0x244>)
 8009680:	2f6f      	cmp	r7, #111	; 0x6f
 8009682:	bf0c      	ite	eq
 8009684:	2308      	moveq	r3, #8
 8009686:	230a      	movne	r3, #10
 8009688:	2100      	movs	r1, #0
 800968a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800968e:	6866      	ldr	r6, [r4, #4]
 8009690:	60a6      	str	r6, [r4, #8]
 8009692:	2e00      	cmp	r6, #0
 8009694:	bfa2      	ittt	ge
 8009696:	6821      	ldrge	r1, [r4, #0]
 8009698:	f021 0104 	bicge.w	r1, r1, #4
 800969c:	6021      	strge	r1, [r4, #0]
 800969e:	b90d      	cbnz	r5, 80096a4 <_printf_i+0x118>
 80096a0:	2e00      	cmp	r6, #0
 80096a2:	d04d      	beq.n	8009740 <_printf_i+0x1b4>
 80096a4:	4616      	mov	r6, r2
 80096a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80096aa:	fb03 5711 	mls	r7, r3, r1, r5
 80096ae:	5dc7      	ldrb	r7, [r0, r7]
 80096b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096b4:	462f      	mov	r7, r5
 80096b6:	42bb      	cmp	r3, r7
 80096b8:	460d      	mov	r5, r1
 80096ba:	d9f4      	bls.n	80096a6 <_printf_i+0x11a>
 80096bc:	2b08      	cmp	r3, #8
 80096be:	d10b      	bne.n	80096d8 <_printf_i+0x14c>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	07df      	lsls	r7, r3, #31
 80096c4:	d508      	bpl.n	80096d8 <_printf_i+0x14c>
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	6861      	ldr	r1, [r4, #4]
 80096ca:	4299      	cmp	r1, r3
 80096cc:	bfde      	ittt	le
 80096ce:	2330      	movle	r3, #48	; 0x30
 80096d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096d4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80096d8:	1b92      	subs	r2, r2, r6
 80096da:	6122      	str	r2, [r4, #16]
 80096dc:	f8cd a000 	str.w	sl, [sp]
 80096e0:	464b      	mov	r3, r9
 80096e2:	aa03      	add	r2, sp, #12
 80096e4:	4621      	mov	r1, r4
 80096e6:	4640      	mov	r0, r8
 80096e8:	f7ff fee2 	bl	80094b0 <_printf_common>
 80096ec:	3001      	adds	r0, #1
 80096ee:	d14c      	bne.n	800978a <_printf_i+0x1fe>
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f4:	b004      	add	sp, #16
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	4835      	ldr	r0, [pc, #212]	; (80097d0 <_printf_i+0x244>)
 80096fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	680e      	ldr	r6, [r1, #0]
 8009704:	061f      	lsls	r7, r3, #24
 8009706:	f856 5b04 	ldr.w	r5, [r6], #4
 800970a:	600e      	str	r6, [r1, #0]
 800970c:	d514      	bpl.n	8009738 <_printf_i+0x1ac>
 800970e:	07d9      	lsls	r1, r3, #31
 8009710:	bf44      	itt	mi
 8009712:	f043 0320 	orrmi.w	r3, r3, #32
 8009716:	6023      	strmi	r3, [r4, #0]
 8009718:	b91d      	cbnz	r5, 8009722 <_printf_i+0x196>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	f023 0320 	bic.w	r3, r3, #32
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	2310      	movs	r3, #16
 8009724:	e7b0      	b.n	8009688 <_printf_i+0xfc>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	f043 0320 	orr.w	r3, r3, #32
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	2378      	movs	r3, #120	; 0x78
 8009730:	4828      	ldr	r0, [pc, #160]	; (80097d4 <_printf_i+0x248>)
 8009732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009736:	e7e3      	b.n	8009700 <_printf_i+0x174>
 8009738:	065e      	lsls	r6, r3, #25
 800973a:	bf48      	it	mi
 800973c:	b2ad      	uxthmi	r5, r5
 800973e:	e7e6      	b.n	800970e <_printf_i+0x182>
 8009740:	4616      	mov	r6, r2
 8009742:	e7bb      	b.n	80096bc <_printf_i+0x130>
 8009744:	680b      	ldr	r3, [r1, #0]
 8009746:	6826      	ldr	r6, [r4, #0]
 8009748:	6960      	ldr	r0, [r4, #20]
 800974a:	1d1d      	adds	r5, r3, #4
 800974c:	600d      	str	r5, [r1, #0]
 800974e:	0635      	lsls	r5, r6, #24
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	d501      	bpl.n	8009758 <_printf_i+0x1cc>
 8009754:	6018      	str	r0, [r3, #0]
 8009756:	e002      	b.n	800975e <_printf_i+0x1d2>
 8009758:	0671      	lsls	r1, r6, #25
 800975a:	d5fb      	bpl.n	8009754 <_printf_i+0x1c8>
 800975c:	8018      	strh	r0, [r3, #0]
 800975e:	2300      	movs	r3, #0
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	4616      	mov	r6, r2
 8009764:	e7ba      	b.n	80096dc <_printf_i+0x150>
 8009766:	680b      	ldr	r3, [r1, #0]
 8009768:	1d1a      	adds	r2, r3, #4
 800976a:	600a      	str	r2, [r1, #0]
 800976c:	681e      	ldr	r6, [r3, #0]
 800976e:	6862      	ldr	r2, [r4, #4]
 8009770:	2100      	movs	r1, #0
 8009772:	4630      	mov	r0, r6
 8009774:	f7f6 fd34 	bl	80001e0 <memchr>
 8009778:	b108      	cbz	r0, 800977e <_printf_i+0x1f2>
 800977a:	1b80      	subs	r0, r0, r6
 800977c:	6060      	str	r0, [r4, #4]
 800977e:	6863      	ldr	r3, [r4, #4]
 8009780:	6123      	str	r3, [r4, #16]
 8009782:	2300      	movs	r3, #0
 8009784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009788:	e7a8      	b.n	80096dc <_printf_i+0x150>
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	4632      	mov	r2, r6
 800978e:	4649      	mov	r1, r9
 8009790:	4640      	mov	r0, r8
 8009792:	47d0      	blx	sl
 8009794:	3001      	adds	r0, #1
 8009796:	d0ab      	beq.n	80096f0 <_printf_i+0x164>
 8009798:	6823      	ldr	r3, [r4, #0]
 800979a:	079b      	lsls	r3, r3, #30
 800979c:	d413      	bmi.n	80097c6 <_printf_i+0x23a>
 800979e:	68e0      	ldr	r0, [r4, #12]
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	4298      	cmp	r0, r3
 80097a4:	bfb8      	it	lt
 80097a6:	4618      	movlt	r0, r3
 80097a8:	e7a4      	b.n	80096f4 <_printf_i+0x168>
 80097aa:	2301      	movs	r3, #1
 80097ac:	4632      	mov	r2, r6
 80097ae:	4649      	mov	r1, r9
 80097b0:	4640      	mov	r0, r8
 80097b2:	47d0      	blx	sl
 80097b4:	3001      	adds	r0, #1
 80097b6:	d09b      	beq.n	80096f0 <_printf_i+0x164>
 80097b8:	3501      	adds	r5, #1
 80097ba:	68e3      	ldr	r3, [r4, #12]
 80097bc:	9903      	ldr	r1, [sp, #12]
 80097be:	1a5b      	subs	r3, r3, r1
 80097c0:	42ab      	cmp	r3, r5
 80097c2:	dcf2      	bgt.n	80097aa <_printf_i+0x21e>
 80097c4:	e7eb      	b.n	800979e <_printf_i+0x212>
 80097c6:	2500      	movs	r5, #0
 80097c8:	f104 0619 	add.w	r6, r4, #25
 80097cc:	e7f5      	b.n	80097ba <_printf_i+0x22e>
 80097ce:	bf00      	nop
 80097d0:	0800a2c7 	.word	0x0800a2c7
 80097d4:	0800a2d8 	.word	0x0800a2d8

080097d8 <_sbrk_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d06      	ldr	r5, [pc, #24]	; (80097f4 <_sbrk_r+0x1c>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	f7f7 fd48 	bl	8001278 <_sbrk>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_sbrk_r+0x1a>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_sbrk_r+0x1a>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20000750 	.word	0x20000750

080097f8 <__swbuf_r>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	460e      	mov	r6, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	4605      	mov	r5, r0
 8009800:	b118      	cbz	r0, 800980a <__swbuf_r+0x12>
 8009802:	6983      	ldr	r3, [r0, #24]
 8009804:	b90b      	cbnz	r3, 800980a <__swbuf_r+0x12>
 8009806:	f000 f9d9 	bl	8009bbc <__sinit>
 800980a:	4b21      	ldr	r3, [pc, #132]	; (8009890 <__swbuf_r+0x98>)
 800980c:	429c      	cmp	r4, r3
 800980e:	d12b      	bne.n	8009868 <__swbuf_r+0x70>
 8009810:	686c      	ldr	r4, [r5, #4]
 8009812:	69a3      	ldr	r3, [r4, #24]
 8009814:	60a3      	str	r3, [r4, #8]
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	071a      	lsls	r2, r3, #28
 800981a:	d52f      	bpl.n	800987c <__swbuf_r+0x84>
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	b36b      	cbz	r3, 800987c <__swbuf_r+0x84>
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	6820      	ldr	r0, [r4, #0]
 8009824:	1ac0      	subs	r0, r0, r3
 8009826:	6963      	ldr	r3, [r4, #20]
 8009828:	b2f6      	uxtb	r6, r6
 800982a:	4283      	cmp	r3, r0
 800982c:	4637      	mov	r7, r6
 800982e:	dc04      	bgt.n	800983a <__swbuf_r+0x42>
 8009830:	4621      	mov	r1, r4
 8009832:	4628      	mov	r0, r5
 8009834:	f000 f92e 	bl	8009a94 <_fflush_r>
 8009838:	bb30      	cbnz	r0, 8009888 <__swbuf_r+0x90>
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	3b01      	subs	r3, #1
 800983e:	60a3      	str	r3, [r4, #8]
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	6022      	str	r2, [r4, #0]
 8009846:	701e      	strb	r6, [r3, #0]
 8009848:	6963      	ldr	r3, [r4, #20]
 800984a:	3001      	adds	r0, #1
 800984c:	4283      	cmp	r3, r0
 800984e:	d004      	beq.n	800985a <__swbuf_r+0x62>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	07db      	lsls	r3, r3, #31
 8009854:	d506      	bpl.n	8009864 <__swbuf_r+0x6c>
 8009856:	2e0a      	cmp	r6, #10
 8009858:	d104      	bne.n	8009864 <__swbuf_r+0x6c>
 800985a:	4621      	mov	r1, r4
 800985c:	4628      	mov	r0, r5
 800985e:	f000 f919 	bl	8009a94 <_fflush_r>
 8009862:	b988      	cbnz	r0, 8009888 <__swbuf_r+0x90>
 8009864:	4638      	mov	r0, r7
 8009866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009868:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <__swbuf_r+0x9c>)
 800986a:	429c      	cmp	r4, r3
 800986c:	d101      	bne.n	8009872 <__swbuf_r+0x7a>
 800986e:	68ac      	ldr	r4, [r5, #8]
 8009870:	e7cf      	b.n	8009812 <__swbuf_r+0x1a>
 8009872:	4b09      	ldr	r3, [pc, #36]	; (8009898 <__swbuf_r+0xa0>)
 8009874:	429c      	cmp	r4, r3
 8009876:	bf08      	it	eq
 8009878:	68ec      	ldreq	r4, [r5, #12]
 800987a:	e7ca      	b.n	8009812 <__swbuf_r+0x1a>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 f80c 	bl	800989c <__swsetup_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	d0cb      	beq.n	8009820 <__swbuf_r+0x28>
 8009888:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800988c:	e7ea      	b.n	8009864 <__swbuf_r+0x6c>
 800988e:	bf00      	nop
 8009890:	0800a30c 	.word	0x0800a30c
 8009894:	0800a32c 	.word	0x0800a32c
 8009898:	0800a2ec 	.word	0x0800a2ec

0800989c <__swsetup_r>:
 800989c:	4b32      	ldr	r3, [pc, #200]	; (8009968 <__swsetup_r+0xcc>)
 800989e:	b570      	push	{r4, r5, r6, lr}
 80098a0:	681d      	ldr	r5, [r3, #0]
 80098a2:	4606      	mov	r6, r0
 80098a4:	460c      	mov	r4, r1
 80098a6:	b125      	cbz	r5, 80098b2 <__swsetup_r+0x16>
 80098a8:	69ab      	ldr	r3, [r5, #24]
 80098aa:	b913      	cbnz	r3, 80098b2 <__swsetup_r+0x16>
 80098ac:	4628      	mov	r0, r5
 80098ae:	f000 f985 	bl	8009bbc <__sinit>
 80098b2:	4b2e      	ldr	r3, [pc, #184]	; (800996c <__swsetup_r+0xd0>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	d10f      	bne.n	80098d8 <__swsetup_r+0x3c>
 80098b8:	686c      	ldr	r4, [r5, #4]
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098c0:	0719      	lsls	r1, r3, #28
 80098c2:	d42c      	bmi.n	800991e <__swsetup_r+0x82>
 80098c4:	06dd      	lsls	r5, r3, #27
 80098c6:	d411      	bmi.n	80098ec <__swsetup_r+0x50>
 80098c8:	2309      	movs	r3, #9
 80098ca:	6033      	str	r3, [r6, #0]
 80098cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d6:	e03e      	b.n	8009956 <__swsetup_r+0xba>
 80098d8:	4b25      	ldr	r3, [pc, #148]	; (8009970 <__swsetup_r+0xd4>)
 80098da:	429c      	cmp	r4, r3
 80098dc:	d101      	bne.n	80098e2 <__swsetup_r+0x46>
 80098de:	68ac      	ldr	r4, [r5, #8]
 80098e0:	e7eb      	b.n	80098ba <__swsetup_r+0x1e>
 80098e2:	4b24      	ldr	r3, [pc, #144]	; (8009974 <__swsetup_r+0xd8>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	bf08      	it	eq
 80098e8:	68ec      	ldreq	r4, [r5, #12]
 80098ea:	e7e6      	b.n	80098ba <__swsetup_r+0x1e>
 80098ec:	0758      	lsls	r0, r3, #29
 80098ee:	d512      	bpl.n	8009916 <__swsetup_r+0x7a>
 80098f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098f2:	b141      	cbz	r1, 8009906 <__swsetup_r+0x6a>
 80098f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f8:	4299      	cmp	r1, r3
 80098fa:	d002      	beq.n	8009902 <__swsetup_r+0x66>
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff fa77 	bl	8008df0 <_free_r>
 8009902:	2300      	movs	r3, #0
 8009904:	6363      	str	r3, [r4, #52]	; 0x34
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	2300      	movs	r3, #0
 8009910:	6063      	str	r3, [r4, #4]
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f043 0308 	orr.w	r3, r3, #8
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	b94b      	cbnz	r3, 8009936 <__swsetup_r+0x9a>
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800992c:	d003      	beq.n	8009936 <__swsetup_r+0x9a>
 800992e:	4621      	mov	r1, r4
 8009930:	4630      	mov	r0, r6
 8009932:	f000 fa07 	bl	8009d44 <__smakebuf_r>
 8009936:	89a0      	ldrh	r0, [r4, #12]
 8009938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800993c:	f010 0301 	ands.w	r3, r0, #1
 8009940:	d00a      	beq.n	8009958 <__swsetup_r+0xbc>
 8009942:	2300      	movs	r3, #0
 8009944:	60a3      	str	r3, [r4, #8]
 8009946:	6963      	ldr	r3, [r4, #20]
 8009948:	425b      	negs	r3, r3
 800994a:	61a3      	str	r3, [r4, #24]
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	b943      	cbnz	r3, 8009962 <__swsetup_r+0xc6>
 8009950:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009954:	d1ba      	bne.n	80098cc <__swsetup_r+0x30>
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	0781      	lsls	r1, r0, #30
 800995a:	bf58      	it	pl
 800995c:	6963      	ldrpl	r3, [r4, #20]
 800995e:	60a3      	str	r3, [r4, #8]
 8009960:	e7f4      	b.n	800994c <__swsetup_r+0xb0>
 8009962:	2000      	movs	r0, #0
 8009964:	e7f7      	b.n	8009956 <__swsetup_r+0xba>
 8009966:	bf00      	nop
 8009968:	20000020 	.word	0x20000020
 800996c:	0800a30c 	.word	0x0800a30c
 8009970:	0800a32c 	.word	0x0800a32c
 8009974:	0800a2ec 	.word	0x0800a2ec

08009978 <abort>:
 8009978:	b508      	push	{r3, lr}
 800997a:	2006      	movs	r0, #6
 800997c:	f000 fa96 	bl	8009eac <raise>
 8009980:	2001      	movs	r0, #1
 8009982:	f7f7 fc01 	bl	8001188 <_exit>
	...

08009988 <__sflush_r>:
 8009988:	898a      	ldrh	r2, [r1, #12]
 800998a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998e:	4605      	mov	r5, r0
 8009990:	0710      	lsls	r0, r2, #28
 8009992:	460c      	mov	r4, r1
 8009994:	d458      	bmi.n	8009a48 <__sflush_r+0xc0>
 8009996:	684b      	ldr	r3, [r1, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	dc05      	bgt.n	80099a8 <__sflush_r+0x20>
 800999c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dc02      	bgt.n	80099a8 <__sflush_r+0x20>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	d0f9      	beq.n	80099a2 <__sflush_r+0x1a>
 80099ae:	2300      	movs	r3, #0
 80099b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099b4:	682f      	ldr	r7, [r5, #0]
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	d032      	beq.n	8009a20 <__sflush_r+0x98>
 80099ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	075a      	lsls	r2, r3, #29
 80099c0:	d505      	bpl.n	80099ce <__sflush_r+0x46>
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	1ac0      	subs	r0, r0, r3
 80099c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099c8:	b10b      	cbz	r3, 80099ce <__sflush_r+0x46>
 80099ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099cc:	1ac0      	subs	r0, r0, r3
 80099ce:	2300      	movs	r3, #0
 80099d0:	4602      	mov	r2, r0
 80099d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099d4:	6a21      	ldr	r1, [r4, #32]
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b0      	blx	r6
 80099da:	1c43      	adds	r3, r0, #1
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	d106      	bne.n	80099ee <__sflush_r+0x66>
 80099e0:	6829      	ldr	r1, [r5, #0]
 80099e2:	291d      	cmp	r1, #29
 80099e4:	d82c      	bhi.n	8009a40 <__sflush_r+0xb8>
 80099e6:	4a2a      	ldr	r2, [pc, #168]	; (8009a90 <__sflush_r+0x108>)
 80099e8:	40ca      	lsrs	r2, r1
 80099ea:	07d6      	lsls	r6, r2, #31
 80099ec:	d528      	bpl.n	8009a40 <__sflush_r+0xb8>
 80099ee:	2200      	movs	r2, #0
 80099f0:	6062      	str	r2, [r4, #4]
 80099f2:	04d9      	lsls	r1, r3, #19
 80099f4:	6922      	ldr	r2, [r4, #16]
 80099f6:	6022      	str	r2, [r4, #0]
 80099f8:	d504      	bpl.n	8009a04 <__sflush_r+0x7c>
 80099fa:	1c42      	adds	r2, r0, #1
 80099fc:	d101      	bne.n	8009a02 <__sflush_r+0x7a>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	b903      	cbnz	r3, 8009a04 <__sflush_r+0x7c>
 8009a02:	6560      	str	r0, [r4, #84]	; 0x54
 8009a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a06:	602f      	str	r7, [r5, #0]
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d0ca      	beq.n	80099a2 <__sflush_r+0x1a>
 8009a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a10:	4299      	cmp	r1, r3
 8009a12:	d002      	beq.n	8009a1a <__sflush_r+0x92>
 8009a14:	4628      	mov	r0, r5
 8009a16:	f7ff f9eb 	bl	8008df0 <_free_r>
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a1e:	e7c1      	b.n	80099a4 <__sflush_r+0x1c>
 8009a20:	6a21      	ldr	r1, [r4, #32]
 8009a22:	2301      	movs	r3, #1
 8009a24:	4628      	mov	r0, r5
 8009a26:	47b0      	blx	r6
 8009a28:	1c41      	adds	r1, r0, #1
 8009a2a:	d1c7      	bne.n	80099bc <__sflush_r+0x34>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0c4      	beq.n	80099bc <__sflush_r+0x34>
 8009a32:	2b1d      	cmp	r3, #29
 8009a34:	d001      	beq.n	8009a3a <__sflush_r+0xb2>
 8009a36:	2b16      	cmp	r3, #22
 8009a38:	d101      	bne.n	8009a3e <__sflush_r+0xb6>
 8009a3a:	602f      	str	r7, [r5, #0]
 8009a3c:	e7b1      	b.n	80099a2 <__sflush_r+0x1a>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	e7ad      	b.n	80099a4 <__sflush_r+0x1c>
 8009a48:	690f      	ldr	r7, [r1, #16]
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	d0a9      	beq.n	80099a2 <__sflush_r+0x1a>
 8009a4e:	0793      	lsls	r3, r2, #30
 8009a50:	680e      	ldr	r6, [r1, #0]
 8009a52:	bf08      	it	eq
 8009a54:	694b      	ldreq	r3, [r1, #20]
 8009a56:	600f      	str	r7, [r1, #0]
 8009a58:	bf18      	it	ne
 8009a5a:	2300      	movne	r3, #0
 8009a5c:	eba6 0807 	sub.w	r8, r6, r7
 8009a60:	608b      	str	r3, [r1, #8]
 8009a62:	f1b8 0f00 	cmp.w	r8, #0
 8009a66:	dd9c      	ble.n	80099a2 <__sflush_r+0x1a>
 8009a68:	6a21      	ldr	r1, [r4, #32]
 8009a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a6c:	4643      	mov	r3, r8
 8009a6e:	463a      	mov	r2, r7
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b0      	blx	r6
 8009a74:	2800      	cmp	r0, #0
 8009a76:	dc06      	bgt.n	8009a86 <__sflush_r+0xfe>
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a84:	e78e      	b.n	80099a4 <__sflush_r+0x1c>
 8009a86:	4407      	add	r7, r0
 8009a88:	eba8 0800 	sub.w	r8, r8, r0
 8009a8c:	e7e9      	b.n	8009a62 <__sflush_r+0xda>
 8009a8e:	bf00      	nop
 8009a90:	20400001 	.word	0x20400001

08009a94 <_fflush_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	690b      	ldr	r3, [r1, #16]
 8009a98:	4605      	mov	r5, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	b913      	cbnz	r3, 8009aa4 <_fflush_r+0x10>
 8009a9e:	2500      	movs	r5, #0
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	b118      	cbz	r0, 8009aae <_fflush_r+0x1a>
 8009aa6:	6983      	ldr	r3, [r0, #24]
 8009aa8:	b90b      	cbnz	r3, 8009aae <_fflush_r+0x1a>
 8009aaa:	f000 f887 	bl	8009bbc <__sinit>
 8009aae:	4b14      	ldr	r3, [pc, #80]	; (8009b00 <_fflush_r+0x6c>)
 8009ab0:	429c      	cmp	r4, r3
 8009ab2:	d11b      	bne.n	8009aec <_fflush_r+0x58>
 8009ab4:	686c      	ldr	r4, [r5, #4]
 8009ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0ef      	beq.n	8009a9e <_fflush_r+0xa>
 8009abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ac0:	07d0      	lsls	r0, r2, #31
 8009ac2:	d404      	bmi.n	8009ace <_fflush_r+0x3a>
 8009ac4:	0599      	lsls	r1, r3, #22
 8009ac6:	d402      	bmi.n	8009ace <_fflush_r+0x3a>
 8009ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aca:	f000 f915 	bl	8009cf8 <__retarget_lock_acquire_recursive>
 8009ace:	4628      	mov	r0, r5
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	f7ff ff59 	bl	8009988 <__sflush_r>
 8009ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad8:	07da      	lsls	r2, r3, #31
 8009ada:	4605      	mov	r5, r0
 8009adc:	d4e0      	bmi.n	8009aa0 <_fflush_r+0xc>
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	059b      	lsls	r3, r3, #22
 8009ae2:	d4dd      	bmi.n	8009aa0 <_fflush_r+0xc>
 8009ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ae6:	f000 f908 	bl	8009cfa <__retarget_lock_release_recursive>
 8009aea:	e7d9      	b.n	8009aa0 <_fflush_r+0xc>
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <_fflush_r+0x70>)
 8009aee:	429c      	cmp	r4, r3
 8009af0:	d101      	bne.n	8009af6 <_fflush_r+0x62>
 8009af2:	68ac      	ldr	r4, [r5, #8]
 8009af4:	e7df      	b.n	8009ab6 <_fflush_r+0x22>
 8009af6:	4b04      	ldr	r3, [pc, #16]	; (8009b08 <_fflush_r+0x74>)
 8009af8:	429c      	cmp	r4, r3
 8009afa:	bf08      	it	eq
 8009afc:	68ec      	ldreq	r4, [r5, #12]
 8009afe:	e7da      	b.n	8009ab6 <_fflush_r+0x22>
 8009b00:	0800a30c 	.word	0x0800a30c
 8009b04:	0800a32c 	.word	0x0800a32c
 8009b08:	0800a2ec 	.word	0x0800a2ec

08009b0c <std>:
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	b510      	push	{r4, lr}
 8009b10:	4604      	mov	r4, r0
 8009b12:	e9c0 3300 	strd	r3, r3, [r0]
 8009b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b1a:	6083      	str	r3, [r0, #8]
 8009b1c:	8181      	strh	r1, [r0, #12]
 8009b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b20:	81c2      	strh	r2, [r0, #14]
 8009b22:	6183      	str	r3, [r0, #24]
 8009b24:	4619      	mov	r1, r3
 8009b26:	2208      	movs	r2, #8
 8009b28:	305c      	adds	r0, #92	; 0x5c
 8009b2a:	f7fe ffd5 	bl	8008ad8 <memset>
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <std+0x38>)
 8009b30:	6263      	str	r3, [r4, #36]	; 0x24
 8009b32:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <std+0x3c>)
 8009b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <std+0x40>)
 8009b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b3a:	4b05      	ldr	r3, [pc, #20]	; (8009b50 <std+0x44>)
 8009b3c:	6224      	str	r4, [r4, #32]
 8009b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	bf00      	nop
 8009b44:	08009ee5 	.word	0x08009ee5
 8009b48:	08009f07 	.word	0x08009f07
 8009b4c:	08009f3f 	.word	0x08009f3f
 8009b50:	08009f63 	.word	0x08009f63

08009b54 <_cleanup_r>:
 8009b54:	4901      	ldr	r1, [pc, #4]	; (8009b5c <_cleanup_r+0x8>)
 8009b56:	f000 b8af 	b.w	8009cb8 <_fwalk_reent>
 8009b5a:	bf00      	nop
 8009b5c:	08009a95 	.word	0x08009a95

08009b60 <__sfmoreglue>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	1e4a      	subs	r2, r1, #1
 8009b64:	2568      	movs	r5, #104	; 0x68
 8009b66:	4355      	muls	r5, r2
 8009b68:	460e      	mov	r6, r1
 8009b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b6e:	f7ff f98f 	bl	8008e90 <_malloc_r>
 8009b72:	4604      	mov	r4, r0
 8009b74:	b140      	cbz	r0, 8009b88 <__sfmoreglue+0x28>
 8009b76:	2100      	movs	r1, #0
 8009b78:	e9c0 1600 	strd	r1, r6, [r0]
 8009b7c:	300c      	adds	r0, #12
 8009b7e:	60a0      	str	r0, [r4, #8]
 8009b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b84:	f7fe ffa8 	bl	8008ad8 <memset>
 8009b88:	4620      	mov	r0, r4
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}

08009b8c <__sfp_lock_acquire>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sfp_lock_acquire+0x8>)
 8009b8e:	f000 b8b3 	b.w	8009cf8 <__retarget_lock_acquire_recursive>
 8009b92:	bf00      	nop
 8009b94:	2000074c 	.word	0x2000074c

08009b98 <__sfp_lock_release>:
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__sfp_lock_release+0x8>)
 8009b9a:	f000 b8ae 	b.w	8009cfa <__retarget_lock_release_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	2000074c 	.word	0x2000074c

08009ba4 <__sinit_lock_acquire>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__sinit_lock_acquire+0x8>)
 8009ba6:	f000 b8a7 	b.w	8009cf8 <__retarget_lock_acquire_recursive>
 8009baa:	bf00      	nop
 8009bac:	20000747 	.word	0x20000747

08009bb0 <__sinit_lock_release>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__sinit_lock_release+0x8>)
 8009bb2:	f000 b8a2 	b.w	8009cfa <__retarget_lock_release_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20000747 	.word	0x20000747

08009bbc <__sinit>:
 8009bbc:	b510      	push	{r4, lr}
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	f7ff fff0 	bl	8009ba4 <__sinit_lock_acquire>
 8009bc4:	69a3      	ldr	r3, [r4, #24]
 8009bc6:	b11b      	cbz	r3, 8009bd0 <__sinit+0x14>
 8009bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bcc:	f7ff bff0 	b.w	8009bb0 <__sinit_lock_release>
 8009bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8009bd6:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <__sinit+0x68>)
 8009bd8:	4a13      	ldr	r2, [pc, #76]	; (8009c28 <__sinit+0x6c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	bf04      	itt	eq
 8009be2:	2301      	moveq	r3, #1
 8009be4:	61a3      	streq	r3, [r4, #24]
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 f820 	bl	8009c2c <__sfp>
 8009bec:	6060      	str	r0, [r4, #4]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f81c 	bl	8009c2c <__sfp>
 8009bf4:	60a0      	str	r0, [r4, #8]
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 f818 	bl	8009c2c <__sfp>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	60e0      	str	r0, [r4, #12]
 8009c00:	2104      	movs	r1, #4
 8009c02:	6860      	ldr	r0, [r4, #4]
 8009c04:	f7ff ff82 	bl	8009b0c <std>
 8009c08:	68a0      	ldr	r0, [r4, #8]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	2109      	movs	r1, #9
 8009c0e:	f7ff ff7d 	bl	8009b0c <std>
 8009c12:	68e0      	ldr	r0, [r4, #12]
 8009c14:	2202      	movs	r2, #2
 8009c16:	2112      	movs	r1, #18
 8009c18:	f7ff ff78 	bl	8009b0c <std>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	61a3      	str	r3, [r4, #24]
 8009c20:	e7d2      	b.n	8009bc8 <__sinit+0xc>
 8009c22:	bf00      	nop
 8009c24:	0800a0d8 	.word	0x0800a0d8
 8009c28:	08009b55 	.word	0x08009b55

08009c2c <__sfp>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	4607      	mov	r7, r0
 8009c30:	f7ff ffac 	bl	8009b8c <__sfp_lock_acquire>
 8009c34:	4b1e      	ldr	r3, [pc, #120]	; (8009cb0 <__sfp+0x84>)
 8009c36:	681e      	ldr	r6, [r3, #0]
 8009c38:	69b3      	ldr	r3, [r6, #24]
 8009c3a:	b913      	cbnz	r3, 8009c42 <__sfp+0x16>
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7ff ffbd 	bl	8009bbc <__sinit>
 8009c42:	3648      	adds	r6, #72	; 0x48
 8009c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	d503      	bpl.n	8009c54 <__sfp+0x28>
 8009c4c:	6833      	ldr	r3, [r6, #0]
 8009c4e:	b30b      	cbz	r3, 8009c94 <__sfp+0x68>
 8009c50:	6836      	ldr	r6, [r6, #0]
 8009c52:	e7f7      	b.n	8009c44 <__sfp+0x18>
 8009c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c58:	b9d5      	cbnz	r5, 8009c90 <__sfp+0x64>
 8009c5a:	4b16      	ldr	r3, [pc, #88]	; (8009cb4 <__sfp+0x88>)
 8009c5c:	60e3      	str	r3, [r4, #12]
 8009c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c62:	6665      	str	r5, [r4, #100]	; 0x64
 8009c64:	f000 f847 	bl	8009cf6 <__retarget_lock_init_recursive>
 8009c68:	f7ff ff96 	bl	8009b98 <__sfp_lock_release>
 8009c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c74:	6025      	str	r5, [r4, #0]
 8009c76:	61a5      	str	r5, [r4, #24]
 8009c78:	2208      	movs	r2, #8
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c80:	f7fe ff2a 	bl	8008ad8 <memset>
 8009c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c90:	3468      	adds	r4, #104	; 0x68
 8009c92:	e7d9      	b.n	8009c48 <__sfp+0x1c>
 8009c94:	2104      	movs	r1, #4
 8009c96:	4638      	mov	r0, r7
 8009c98:	f7ff ff62 	bl	8009b60 <__sfmoreglue>
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	6030      	str	r0, [r6, #0]
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d1d5      	bne.n	8009c50 <__sfp+0x24>
 8009ca4:	f7ff ff78 	bl	8009b98 <__sfp_lock_release>
 8009ca8:	230c      	movs	r3, #12
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	e7ee      	b.n	8009c8c <__sfp+0x60>
 8009cae:	bf00      	nop
 8009cb0:	0800a0d8 	.word	0x0800a0d8
 8009cb4:	ffff0001 	.word	0xffff0001

08009cb8 <_fwalk_reent>:
 8009cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	4688      	mov	r8, r1
 8009cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cc4:	2700      	movs	r7, #0
 8009cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cca:	f1b9 0901 	subs.w	r9, r9, #1
 8009cce:	d505      	bpl.n	8009cdc <_fwalk_reent+0x24>
 8009cd0:	6824      	ldr	r4, [r4, #0]
 8009cd2:	2c00      	cmp	r4, #0
 8009cd4:	d1f7      	bne.n	8009cc6 <_fwalk_reent+0xe>
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cdc:	89ab      	ldrh	r3, [r5, #12]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d907      	bls.n	8009cf2 <_fwalk_reent+0x3a>
 8009ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	d003      	beq.n	8009cf2 <_fwalk_reent+0x3a>
 8009cea:	4629      	mov	r1, r5
 8009cec:	4630      	mov	r0, r6
 8009cee:	47c0      	blx	r8
 8009cf0:	4307      	orrs	r7, r0
 8009cf2:	3568      	adds	r5, #104	; 0x68
 8009cf4:	e7e9      	b.n	8009cca <_fwalk_reent+0x12>

08009cf6 <__retarget_lock_init_recursive>:
 8009cf6:	4770      	bx	lr

08009cf8 <__retarget_lock_acquire_recursive>:
 8009cf8:	4770      	bx	lr

08009cfa <__retarget_lock_release_recursive>:
 8009cfa:	4770      	bx	lr

08009cfc <__swhatbuf_r>:
 8009cfc:	b570      	push	{r4, r5, r6, lr}
 8009cfe:	460e      	mov	r6, r1
 8009d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d04:	2900      	cmp	r1, #0
 8009d06:	b096      	sub	sp, #88	; 0x58
 8009d08:	4614      	mov	r4, r2
 8009d0a:	461d      	mov	r5, r3
 8009d0c:	da07      	bge.n	8009d1e <__swhatbuf_r+0x22>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	89b3      	ldrh	r3, [r6, #12]
 8009d14:	061a      	lsls	r2, r3, #24
 8009d16:	d410      	bmi.n	8009d3a <__swhatbuf_r+0x3e>
 8009d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d1c:	e00e      	b.n	8009d3c <__swhatbuf_r+0x40>
 8009d1e:	466a      	mov	r2, sp
 8009d20:	f000 f946 	bl	8009fb0 <_fstat_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	dbf2      	blt.n	8009d0e <__swhatbuf_r+0x12>
 8009d28:	9a01      	ldr	r2, [sp, #4]
 8009d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d32:	425a      	negs	r2, r3
 8009d34:	415a      	adcs	r2, r3
 8009d36:	602a      	str	r2, [r5, #0]
 8009d38:	e7ee      	b.n	8009d18 <__swhatbuf_r+0x1c>
 8009d3a:	2340      	movs	r3, #64	; 0x40
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	b016      	add	sp, #88	; 0x58
 8009d42:	bd70      	pop	{r4, r5, r6, pc}

08009d44 <__smakebuf_r>:
 8009d44:	898b      	ldrh	r3, [r1, #12]
 8009d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d48:	079d      	lsls	r5, r3, #30
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	d507      	bpl.n	8009d60 <__smakebuf_r+0x1c>
 8009d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	6123      	str	r3, [r4, #16]
 8009d58:	2301      	movs	r3, #1
 8009d5a:	6163      	str	r3, [r4, #20]
 8009d5c:	b002      	add	sp, #8
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	ab01      	add	r3, sp, #4
 8009d62:	466a      	mov	r2, sp
 8009d64:	f7ff ffca 	bl	8009cfc <__swhatbuf_r>
 8009d68:	9900      	ldr	r1, [sp, #0]
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f7ff f88f 	bl	8008e90 <_malloc_r>
 8009d72:	b948      	cbnz	r0, 8009d88 <__smakebuf_r+0x44>
 8009d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d78:	059a      	lsls	r2, r3, #22
 8009d7a:	d4ef      	bmi.n	8009d5c <__smakebuf_r+0x18>
 8009d7c:	f023 0303 	bic.w	r3, r3, #3
 8009d80:	f043 0302 	orr.w	r3, r3, #2
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	e7e3      	b.n	8009d50 <__smakebuf_r+0xc>
 8009d88:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <__smakebuf_r+0x7c>)
 8009d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	6020      	str	r0, [r4, #0]
 8009d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	9b00      	ldr	r3, [sp, #0]
 8009d98:	6163      	str	r3, [r4, #20]
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	6120      	str	r0, [r4, #16]
 8009d9e:	b15b      	cbz	r3, 8009db8 <__smakebuf_r+0x74>
 8009da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009da4:	4630      	mov	r0, r6
 8009da6:	f000 f915 	bl	8009fd4 <_isatty_r>
 8009daa:	b128      	cbz	r0, 8009db8 <__smakebuf_r+0x74>
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	f023 0303 	bic.w	r3, r3, #3
 8009db2:	f043 0301 	orr.w	r3, r3, #1
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	89a0      	ldrh	r0, [r4, #12]
 8009dba:	4305      	orrs	r5, r0
 8009dbc:	81a5      	strh	r5, [r4, #12]
 8009dbe:	e7cd      	b.n	8009d5c <__smakebuf_r+0x18>
 8009dc0:	08009b55 	.word	0x08009b55

08009dc4 <memmove>:
 8009dc4:	4288      	cmp	r0, r1
 8009dc6:	b510      	push	{r4, lr}
 8009dc8:	eb01 0402 	add.w	r4, r1, r2
 8009dcc:	d902      	bls.n	8009dd4 <memmove+0x10>
 8009dce:	4284      	cmp	r4, r0
 8009dd0:	4623      	mov	r3, r4
 8009dd2:	d807      	bhi.n	8009de4 <memmove+0x20>
 8009dd4:	1e43      	subs	r3, r0, #1
 8009dd6:	42a1      	cmp	r1, r4
 8009dd8:	d008      	beq.n	8009dec <memmove+0x28>
 8009dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009de2:	e7f8      	b.n	8009dd6 <memmove+0x12>
 8009de4:	4402      	add	r2, r0
 8009de6:	4601      	mov	r1, r0
 8009de8:	428a      	cmp	r2, r1
 8009dea:	d100      	bne.n	8009dee <memmove+0x2a>
 8009dec:	bd10      	pop	{r4, pc}
 8009dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009df6:	e7f7      	b.n	8009de8 <memmove+0x24>

08009df8 <__malloc_lock>:
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <__malloc_lock+0x8>)
 8009dfa:	f7ff bf7d 	b.w	8009cf8 <__retarget_lock_acquire_recursive>
 8009dfe:	bf00      	nop
 8009e00:	20000748 	.word	0x20000748

08009e04 <__malloc_unlock>:
 8009e04:	4801      	ldr	r0, [pc, #4]	; (8009e0c <__malloc_unlock+0x8>)
 8009e06:	f7ff bf78 	b.w	8009cfa <__retarget_lock_release_recursive>
 8009e0a:	bf00      	nop
 8009e0c:	20000748 	.word	0x20000748

08009e10 <_realloc_r>:
 8009e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e12:	4607      	mov	r7, r0
 8009e14:	4614      	mov	r4, r2
 8009e16:	460e      	mov	r6, r1
 8009e18:	b921      	cbnz	r1, 8009e24 <_realloc_r+0x14>
 8009e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e1e:	4611      	mov	r1, r2
 8009e20:	f7ff b836 	b.w	8008e90 <_malloc_r>
 8009e24:	b922      	cbnz	r2, 8009e30 <_realloc_r+0x20>
 8009e26:	f7fe ffe3 	bl	8008df0 <_free_r>
 8009e2a:	4625      	mov	r5, r4
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e30:	f000 f8f2 	bl	800a018 <_malloc_usable_size_r>
 8009e34:	42a0      	cmp	r0, r4
 8009e36:	d20f      	bcs.n	8009e58 <_realloc_r+0x48>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	f7ff f828 	bl	8008e90 <_malloc_r>
 8009e40:	4605      	mov	r5, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0f2      	beq.n	8009e2c <_realloc_r+0x1c>
 8009e46:	4631      	mov	r1, r6
 8009e48:	4622      	mov	r2, r4
 8009e4a:	f7fe fe37 	bl	8008abc <memcpy>
 8009e4e:	4631      	mov	r1, r6
 8009e50:	4638      	mov	r0, r7
 8009e52:	f7fe ffcd 	bl	8008df0 <_free_r>
 8009e56:	e7e9      	b.n	8009e2c <_realloc_r+0x1c>
 8009e58:	4635      	mov	r5, r6
 8009e5a:	e7e7      	b.n	8009e2c <_realloc_r+0x1c>

08009e5c <_raise_r>:
 8009e5c:	291f      	cmp	r1, #31
 8009e5e:	b538      	push	{r3, r4, r5, lr}
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	d904      	bls.n	8009e70 <_raise_r+0x14>
 8009e66:	2316      	movs	r3, #22
 8009e68:	6003      	str	r3, [r0, #0]
 8009e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e72:	b112      	cbz	r2, 8009e7a <_raise_r+0x1e>
 8009e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e78:	b94b      	cbnz	r3, 8009e8e <_raise_r+0x32>
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 f830 	bl	8009ee0 <_getpid_r>
 8009e80:	462a      	mov	r2, r5
 8009e82:	4601      	mov	r1, r0
 8009e84:	4620      	mov	r0, r4
 8009e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e8a:	f000 b817 	b.w	8009ebc <_kill_r>
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d00a      	beq.n	8009ea8 <_raise_r+0x4c>
 8009e92:	1c59      	adds	r1, r3, #1
 8009e94:	d103      	bne.n	8009e9e <_raise_r+0x42>
 8009e96:	2316      	movs	r3, #22
 8009e98:	6003      	str	r3, [r0, #0]
 8009e9a:	2001      	movs	r0, #1
 8009e9c:	e7e7      	b.n	8009e6e <_raise_r+0x12>
 8009e9e:	2400      	movs	r4, #0
 8009ea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	4798      	blx	r3
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	e7e0      	b.n	8009e6e <_raise_r+0x12>

08009eac <raise>:
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <raise+0xc>)
 8009eae:	4601      	mov	r1, r0
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	f7ff bfd3 	b.w	8009e5c <_raise_r>
 8009eb6:	bf00      	nop
 8009eb8:	20000020 	.word	0x20000020

08009ebc <_kill_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	4d07      	ldr	r5, [pc, #28]	; (8009edc <_kill_r+0x20>)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	f7f7 f94d 	bl	8001168 <_kill>
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	d102      	bne.n	8009ed8 <_kill_r+0x1c>
 8009ed2:	682b      	ldr	r3, [r5, #0]
 8009ed4:	b103      	cbz	r3, 8009ed8 <_kill_r+0x1c>
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	bd38      	pop	{r3, r4, r5, pc}
 8009eda:	bf00      	nop
 8009edc:	20000750 	.word	0x20000750

08009ee0 <_getpid_r>:
 8009ee0:	f7f7 b93a 	b.w	8001158 <_getpid>

08009ee4 <__sread>:
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eec:	f000 f89c 	bl	800a028 <_read_r>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	bfab      	itete	ge
 8009ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ef8:	181b      	addge	r3, r3, r0
 8009efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009efe:	bfac      	ite	ge
 8009f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f02:	81a3      	strhlt	r3, [r4, #12]
 8009f04:	bd10      	pop	{r4, pc}

08009f06 <__swrite>:
 8009f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0a:	461f      	mov	r7, r3
 8009f0c:	898b      	ldrh	r3, [r1, #12]
 8009f0e:	05db      	lsls	r3, r3, #23
 8009f10:	4605      	mov	r5, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	4616      	mov	r6, r2
 8009f16:	d505      	bpl.n	8009f24 <__swrite+0x1e>
 8009f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f000 f868 	bl	8009ff4 <_lseek_r>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	4632      	mov	r2, r6
 8009f32:	463b      	mov	r3, r7
 8009f34:	4628      	mov	r0, r5
 8009f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f3a:	f000 b817 	b.w	8009f6c <_write_r>

08009f3e <__sseek>:
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	460c      	mov	r4, r1
 8009f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f46:	f000 f855 	bl	8009ff4 <_lseek_r>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	bf15      	itete	ne
 8009f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f5a:	81a3      	strheq	r3, [r4, #12]
 8009f5c:	bf18      	it	ne
 8009f5e:	81a3      	strhne	r3, [r4, #12]
 8009f60:	bd10      	pop	{r4, pc}

08009f62 <__sclose>:
 8009f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f66:	f000 b813 	b.w	8009f90 <_close_r>
	...

08009f6c <_write_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d07      	ldr	r5, [pc, #28]	; (8009f8c <_write_r+0x20>)
 8009f70:	4604      	mov	r4, r0
 8009f72:	4608      	mov	r0, r1
 8009f74:	4611      	mov	r1, r2
 8009f76:	2200      	movs	r2, #0
 8009f78:	602a      	str	r2, [r5, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f7f7 f92b 	bl	80011d6 <_write>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_write_r+0x1e>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_write_r+0x1e>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20000750 	.word	0x20000750

08009f90 <_close_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d06      	ldr	r5, [pc, #24]	; (8009fac <_close_r+0x1c>)
 8009f94:	2300      	movs	r3, #0
 8009f96:	4604      	mov	r4, r0
 8009f98:	4608      	mov	r0, r1
 8009f9a:	602b      	str	r3, [r5, #0]
 8009f9c:	f7f7 f937 	bl	800120e <_close>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_close_r+0x1a>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_close_r+0x1a>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	20000750 	.word	0x20000750

08009fb0 <_fstat_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d07      	ldr	r5, [pc, #28]	; (8009fd0 <_fstat_r+0x20>)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	4611      	mov	r1, r2
 8009fbc:	602b      	str	r3, [r5, #0]
 8009fbe:	f7f7 f932 	bl	8001226 <_fstat>
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	d102      	bne.n	8009fcc <_fstat_r+0x1c>
 8009fc6:	682b      	ldr	r3, [r5, #0]
 8009fc8:	b103      	cbz	r3, 8009fcc <_fstat_r+0x1c>
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	bd38      	pop	{r3, r4, r5, pc}
 8009fce:	bf00      	nop
 8009fd0:	20000750 	.word	0x20000750

08009fd4 <_isatty_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4d06      	ldr	r5, [pc, #24]	; (8009ff0 <_isatty_r+0x1c>)
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4604      	mov	r4, r0
 8009fdc:	4608      	mov	r0, r1
 8009fde:	602b      	str	r3, [r5, #0]
 8009fe0:	f7f7 f931 	bl	8001246 <_isatty>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_isatty_r+0x1a>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_isatty_r+0x1a>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20000750 	.word	0x20000750

08009ff4 <_lseek_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d07      	ldr	r5, [pc, #28]	; (800a014 <_lseek_r+0x20>)
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	2200      	movs	r2, #0
 800a000:	602a      	str	r2, [r5, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	f7f7 f92a 	bl	800125c <_lseek>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_lseek_r+0x1e>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_lseek_r+0x1e>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	20000750 	.word	0x20000750

0800a018 <_malloc_usable_size_r>:
 800a018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a01c:	1f18      	subs	r0, r3, #4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bfbc      	itt	lt
 800a022:	580b      	ldrlt	r3, [r1, r0]
 800a024:	18c0      	addlt	r0, r0, r3
 800a026:	4770      	bx	lr

0800a028 <_read_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d07      	ldr	r5, [pc, #28]	; (800a048 <_read_r+0x20>)
 800a02c:	4604      	mov	r4, r0
 800a02e:	4608      	mov	r0, r1
 800a030:	4611      	mov	r1, r2
 800a032:	2200      	movs	r2, #0
 800a034:	602a      	str	r2, [r5, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	f7f7 f8b0 	bl	800119c <_read>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_read_r+0x1e>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_read_r+0x1e>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	20000750 	.word	0x20000750

0800a04c <_init>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr

0800a058 <_fini>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr
