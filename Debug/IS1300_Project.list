
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08008e74  08008e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009160  08009160  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009168  08009168  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000084  080091f4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  080091f4  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028632  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d1  00000000  00000000  000486e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  0004cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  0004eb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d2c6  00000000  00000000  00050680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000226c0  00000000  00000000  0007d946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011aec8  00000000  00000000  000a0006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001baece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000884c  00000000  00000000  001baf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e5c 	.word	0x08008e5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08008e5c 	.word	0x08008e5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe0>)
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_ADC1_Init+0xe4>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005fc:	f001 fa56 	bl	8001aac <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000606:	f000 fa19 	bl	8000a3c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000616:	f002 faa3 	bl	8002b60 <HAL_ADCEx_MultiModeConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fa0c 	bl	8000a3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_ADC1_Init+0xe8>)
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2306      	movs	r3, #6
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000630:	237f      	movs	r3, #127	; 0x7f
 8000632:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000642:	f001 fd29 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800064c:	f000 f9f6 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000538 	.word	0x20000538
 800065c:	50040000 	.word	0x50040000
 8000660:	43210000 	.word	0x43210000

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f007 f92f 	bl	80078e8 <memset>
  if(adcHandle->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_ADC_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d146      	bne.n	8000722 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800069a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fca1 	bl	800400c <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006d0:	f000 f9b4 	bl	8000a3c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_ADC_MspInit+0xd0>)
 800071e:	f002 fc31 	bl	8002f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000722:	bf00      	nop
 8000724:	37b0      	adds	r7, #176	; 0xb0
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	50040000 	.word	0x50040000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <adc_read_pot>:
 * @brief Reads the analog voltage of the potentimeter located on the shield
 * and returns a digital conversion.
 * @param None.
 * @retval The current voltage level.
 */
uint16_t adc_read_pot() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800073c:	4806      	ldr	r0, [pc, #24]	; (8000758 <adc_read_pot+0x20>)
 800073e:	f001 fb0b 	bl	8001d58 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8000742:	2101      	movs	r1, #1
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <adc_read_pot+0x20>)
 8000746:	f001 fbc1 	bl	8001ecc <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 800074a:	4803      	ldr	r0, [pc, #12]	; (8000758 <adc_read_pot+0x20>)
 800074c:	f001 fc96 	bl	800207c <HAL_ADC_GetValue>
 8000750:	4603      	mov	r3, r0
 8000752:	b29b      	uxth	r3, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000538 	.word	0x20000538

0800075c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b48      	ldr	r3, [pc, #288]	; (8000894 <MX_GPIO_Init+0x138>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a47      	ldr	r2, [pc, #284]	; (8000894 <MX_GPIO_Init+0x138>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b45      	ldr	r3, [pc, #276]	; (8000894 <MX_GPIO_Init+0x138>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <MX_GPIO_Init+0x138>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a41      	ldr	r2, [pc, #260]	; (8000894 <MX_GPIO_Init+0x138>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b3f      	ldr	r3, [pc, #252]	; (8000894 <MX_GPIO_Init+0x138>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b3c      	ldr	r3, [pc, #240]	; (8000894 <MX_GPIO_Init+0x138>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a3b      	ldr	r2, [pc, #236]	; (8000894 <MX_GPIO_Init+0x138>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b39      	ldr	r3, [pc, #228]	; (8000894 <MX_GPIO_Init+0x138>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b36      	ldr	r3, [pc, #216]	; (8000894 <MX_GPIO_Init+0x138>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a35      	ldr	r2, [pc, #212]	; (8000894 <MX_GPIO_Init+0x138>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <MX_GPIO_Init+0x138>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_GPIO_Init+0x138>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_GPIO_Init+0x138>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0x138>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f002 fd71 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80007fc:	4826      	ldr	r0, [pc, #152]	; (8000898 <MX_GPIO_Init+0x13c>)
 80007fe:	f002 fd6b 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f002 fd64 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	481c      	ldr	r0, [pc, #112]	; (8000898 <MX_GPIO_Init+0x13c>)
 8000828:	f002 fbac 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082c:	230c      	movs	r3, #12
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083c:	2307      	movs	r3, #7
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f002 fb9b 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800084e:	f248 0320 	movw	r3, #32800	; 0x8020
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f002 fb8b 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin;
 800086e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0x13c>)
 8000888:	f002 fb7c 	bl	8002f84 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	; 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000800 	.word	0x48000800

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a2:	f000 fe95 	bl	80015d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f863 	bl	8000970 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f7ff ff57 	bl	800075c <MX_GPIO_Init>
  MX_UART5_Init();
 80008ae:	f000 fd2d 	bl	800130c <MX_UART5_Init>
  MX_SPI2_Init();
 80008b2:	f000 f9df 	bl	8000c74 <MX_SPI2_Init>
  MX_RTC_Init();
 80008b6:	f000 f8c7 	bl	8000a48 <MX_RTC_Init>
  MX_ADC1_Init();
 80008ba:	f7ff fe5d 	bl	8000578 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    display_init();
 80008be:	f000 fb21 	bl	8000f04 <display_init>
    uint8_t time[8];
    uart_transmit((uint8_t*)"set time HH:MM:SS\r\n", 19);
 80008c2:	2113      	movs	r1, #19
 80008c4:	4827      	ldr	r0, [pc, #156]	; (8000964 <main+0xc8>)
 80008c6:	f000 fde5 	bl	8001494 <uart_transmit>
    HAL_Delay(1);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 fec0 	bl	8001650 <HAL_Delay>
    uart_receive(time, 8);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2108      	movs	r1, #8
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fe02 	bl	80014e0 <uart_receive>
    HAL_Delay(2000);
 80008dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e0:	f000 feb6 	bl	8001650 <HAL_Delay>
    rtc_set_time(time);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f945 	bl	8000b78 <rtc_set_time>

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80008ee:	217f      	movs	r1, #127	; 0x7f
 80008f0:	481d      	ldr	r0, [pc, #116]	; (8000968 <main+0xcc>)
 80008f2:	f002 f8d5 	bl	8002aa0 <HAL_ADCEx_Calibration_Start>

    uint8_t current_time[8];
    uint16_t voltage;
    while (1) {
	voltage = adc_read_pot(voltage);
 80008f6:	8bfb      	ldrh	r3, [r7, #30]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff1d 	bl	8000738 <adc_read_pot>
 80008fe:	4603      	mov	r3, r0
 8000900:	83fb      	strh	r3, [r7, #30]
	rtc_get_time(current_time);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f97a 	bl	8000c00 <rtc_get_time>

	char vol_str[5];
	itoa(voltage, vol_str, 10);
 800090c:	8bfb      	ldrh	r3, [r7, #30]
 800090e:	1d39      	adds	r1, r7, #4
 8000910:	220a      	movs	r2, #10
 8000912:	4618      	mov	r0, r3
 8000914:	f006 ffd8 	bl	80078c8 <itoa>

	display_write_line(current_time, 8, 1);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fb44 	bl	8000fae <display_write_line>
	HAL_Delay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fe92 	bl	8001650 <HAL_Delay>
	display_write_line((uint8_t*)vol_str, strlen((char*)vol_str), 2);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fc4e 	bl	80001d0 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b2d9      	uxtb	r1, r3
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2202      	movs	r2, #2
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fb36 	bl	8000fae <display_write_line>

	uart_transmit((uint8_t*)vol_str, 4);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fda4 	bl	8001494 <uart_transmit>
	HAL_Delay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fe7f 	bl	8001650 <HAL_Delay>
	uart_transmit((uint8_t*)"\r\n", 2);
 8000952:	2102      	movs	r1, #2
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <main+0xd0>)
 8000956:	f000 fd9d 	bl	8001494 <uart_transmit>

	HAL_Delay(998);
 800095a:	f240 30e6 	movw	r0, #998	; 0x3e6
 800095e:	f000 fe77 	bl	8001650 <HAL_Delay>
    while (1) {
 8000962:	e7c8      	b.n	80008f6 <main+0x5a>
 8000964:	08008e74 	.word	0x08008e74
 8000968:	20000538 	.word	0x20000538
 800096c:	08008e88 	.word	0x08008e88

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b096      	sub	sp, #88	; 0x58
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2244      	movs	r2, #68	; 0x44
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f006 ffb2 	bl	80078e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000996:	f002 fcc5 	bl	8003324 <HAL_PWREx_ControlVoltageScaling>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009a0:	f000 f84c 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009a4:	230a      	movs	r3, #10
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2310      	movs	r3, #16
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009b2:	2301      	movs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ba:	2302      	movs	r3, #2
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009be:	2301      	movs	r3, #1
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009c2:	230a      	movs	r3, #10
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c6:	2307      	movs	r3, #7
 80009c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fcfa 	bl	80033d0 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80009e2:	f000 f82b 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2303      	movs	r3, #3
 80009ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	2104      	movs	r1, #4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 f8cc 	bl	8003b9c <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 f817 	bl	8000a3c <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3758      	adds	r7, #88	; 0x58
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2a:	f000 fdf1 	bl	8001610 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40012c00 	.word	0x40012c00

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a62:	4a26      	ldr	r2, [pc, #152]	; (8000afc <MX_RTC_Init+0xb4>)
 8000a64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a6e:	227f      	movs	r2, #127	; 0x7f
 8000a70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a90:	4819      	ldr	r0, [pc, #100]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000a92:	f003 ff77 	bl	8004984 <HAL_RTC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f7ff ffce 	bl	8000a3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480f      	ldr	r0, [pc, #60]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000abc:	f003 ffdd 	bl	8004a7a <HAL_RTC_SetTime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ac6:	f7ff ffb9 	bl	8000a3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000aca:	2303      	movs	r3, #3
 8000acc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8000ad2:	2322      	movs	r3, #34	; 0x22
 8000ad4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8000ad6:	2321      	movs	r3, #33	; 0x21
 8000ad8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	2201      	movs	r2, #1
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_RTC_Init+0xb0>)
 8000ae2:	f004 f8c3 	bl	8004c6c <HAL_RTC_SetDate>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000aec:	f7ff ffa6 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000059c 	.word	0x2000059c
 8000afc:	40002800 	.word	0x40002800

08000b00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0a4      	sub	sp, #144	; 0x90
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2288      	movs	r2, #136	; 0x88
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f006 fee9 	bl	80078e8 <memset>
  if(rtcHandle->Instance==RTC)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_RTC_MspInit+0x5c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d118      	bne.n	8000b52 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fa6a 	bl	800400c <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b3e:	f7ff ff7d 	bl	8000a3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_RTC_MspInit+0x60>)
 8000b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <HAL_RTC_MspInit+0x60>)
 8000b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b52:	bf00      	nop
 8000b54:	3790      	adds	r7, #144	; 0x90
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40002800 	.word	0x40002800
 8000b60:	40021000 	.word	0x40021000

08000b64 <RTC_Error>:
/**
 * @brief Error function called upon error generated
 * during exeuction of RTC functions.
 * @note Activates the LD2 led on the Nucleo board and loops infinitely.
 */
void RTC_Error() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f002 fbb2 	bl	80032d8 <HAL_GPIO_WritePin>
    while (1) {}
 8000b74:	e7fe      	b.n	8000b74 <RTC_Error+0x10>
	...

08000b78 <rtc_set_time>:
/**
 * @brief Real Time Clock (RTC) function to set the RTC time.
 * @param tstr: time string of format "hh:mm:ss".
 * @retval None.
 */
void rtc_set_time(uint8_t tstr[]) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <rtc_set_time+0x80>)
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, del); //tokenize tstr on given delimiter
 8000b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f006 fece 	bl	8007938 <strtok>
 8000b9c:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000b9e:	6a38      	ldr	r0, [r7, #32]
 8000ba0:	f006 fe4c 	bl	800783c <atoi>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 8000baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bac:	2000      	movs	r0, #0
 8000bae:	f006 fec3 	bl	8007938 <strtok>
 8000bb2:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 8000bb4:	6a38      	ldr	r0, [r7, #32]
 8000bb6:	f006 fe41 	bl	800783c <atoi>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f006 feb8 	bl	8007938 <strtok>
 8000bc8:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 8000bca:	6a38      	ldr	r0, [r7, #32]
 8000bcc:	f006 fe36 	bl	800783c <atoi>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	73bb      	strb	r3, [r7, #14]

    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <rtc_set_time+0x84>)
 8000be0:	f003 ff4b 	bl	8004a7a <HAL_RTC_SetTime>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <rtc_set_time+0x76>
	RTC_Error();
 8000bea:	f7ff ffbb 	bl	8000b64 <RTC_Error>
    }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	08008e8c 	.word	0x08008e8c
 8000bfc:	2000059c 	.word	0x2000059c

08000c00 <rtc_get_time>:
  * @brief Real Time Clock (RTC) function to get the current time.
  * @param buffer: buffer to store the current time.
  * @note GetDate() is called to properly retreive the time.
  * @retval None.
  */
void rtc_get_time(uint8_t buffer[]) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <rtc_get_time+0x6c>)
 8000c26:	f003 ffc5 	bl	8004bb4 <HAL_RTC_GetTime>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <rtc_get_time+0x34>
	RTC_Error();
 8000c30:	f7ff ff98 	bl	8000b64 <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <rtc_get_time+0x6c>)
 8000c3e:	f004 f89c 	bl	8004d7a <HAL_RTC_GetDate>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <rtc_get_time+0x4c>
	RTC_Error();
 8000c48:	f7ff ff8c 	bl	8000b64 <RTC_Error>
    }

    sprintf((char*)buffer, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000c4c:	7b3b      	ldrb	r3, [r7, #12]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	7b7b      	ldrb	r3, [r7, #13]
 8000c52:	4619      	mov	r1, r3
 8000c54:	7bbb      	ldrb	r3, [r7, #14]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	4905      	ldr	r1, [pc, #20]	; (8000c70 <rtc_get_time+0x70>)
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f006 fe4b 	bl	80078f8 <siprintf>
}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000059c 	.word	0x2000059c
 8000c70:	08008e90 	.word	0x08008e90

08000c74 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 0 */
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <MX_SPI2_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000c88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c8c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000c90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000ca4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cac:	2230      	movs	r2, #48	; 0x30
 8000cae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_SPI2_Init+0x74>)
 8000cd6:	f004 f96f 	bl	8004fb8 <HAL_SPI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f7ff feac 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200005c0 	.word	0x200005c0
 8000cec:	40003800 	.word	0x40003800

08000cf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <HAL_SPI_MspInit+0xb4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d144      	bne.n	8000d9c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */
  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_SPI_MspInit+0xb8>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <HAL_SPI_MspInit+0xbc>)
 8000d76:	f002 f905 	bl	8002f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <HAL_SPI_MspInit+0xc0>)
 8000d98:	f002 f8f4 	bl	8002f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */
  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40003800 	.word	0x40003800
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000400 	.word	0x48000400

08000db4 <SPI_Error>:
/**
 * @brief Error function that handles any error produced while
 * using SPI communication.
 * @note Enables LD2 LED on the Nucleo board and loops infinitely.
 */
void SPI_Error() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2120      	movs	r1, #32
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f002 fa8a 	bl	80032d8 <HAL_GPIO_WritePin>
    while(1) {}
 8000dc4:	e7fe      	b.n	8000dc4 <SPI_Error+0x10>
	...

08000dc8 <set_startbyte>:
  * @param nibble: the sequence to set.
  * @note  nibble in format of "0|RS|R/W|1" (MSB first representation).
  * Placed at bits 4-7 in the startbyte.
  * @retval None
  */
void set_startbyte(uint8_t nibble) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
    instr[0] = ((instr[0] & 0x0F) | (nibble << 4));
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <set_startbyte+0x34>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	b25a      	sxtb	r2, r3
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <set_startbyte+0x34>)
 8000dec:	701a      	strb	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000

08000e00 <set_byte>:
  * to follow convention.
  * @param byte: the byte to set up transmission for
  * @note LSB first ordering in the instruction array instr[].
  * @retval None
  */
void set_byte(uint8_t byte) {
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
    instr[1] = (byte & 0x0F);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <set_byte+0x2c>)
 8000e14:	705a      	strb	r2, [r3, #1]
    instr[2] = ((byte & 0xF0) >> 4);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <set_byte+0x2c>)
 8000e1e:	709a      	strb	r2, [r3, #2]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000000 	.word	0x20000000

08000e30 <display_set_backlight>:

/**
 * @brief This functions sets the backlight color of the display.
 * @param color: color mapped to an integer used in the switch statement below.
 */
void display_set_backlight(uint8_t color) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
    switch(color) {
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d013      	beq.n	8000e68 <display_set_backlight+0x38>
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	dc18      	bgt.n	8000e76 <display_set_backlight+0x46>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <display_set_backlight+0x1e>
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d006      	beq.n	8000e5a <display_set_backlight+0x2a>
	  break;
	case 2:
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
	  break;
    }
}
 8000e4c:	e013      	b.n	8000e76 <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Red_Backlight_GPIO_Port, Red_Backlight_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	480b      	ldr	r0, [pc, #44]	; (8000e80 <display_set_backlight+0x50>)
 8000e54:	f002 fa40 	bl	80032d8 <HAL_GPIO_WritePin>
	  break;
 8000e58:	e00d      	b.n	8000e76 <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(White_Backlight_GPIO_Port, White_Backlight_Pin, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <display_set_backlight+0x50>)
 8000e62:	f002 fa39 	bl	80032d8 <HAL_GPIO_WritePin>
	  break;
 8000e66:	e006      	b.n	8000e76 <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <display_set_backlight+0x50>)
 8000e70:	f002 fa32 	bl	80032d8 <HAL_GPIO_WritePin>
	  break;
 8000e74:	bf00      	nop
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	48000800 	.word	0x48000800

08000e84 <display_hw_reset>:

/**
 * @brief Before using the display it should be reset by toggling the
 * Disp_Reset pin: high->low->high with sufficient delays in between.
 */
void display_hw_reset() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000e88:	2005      	movs	r0, #5
 8000e8a:	f000 fbe1 	bl	8001650 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f002 fa1e 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000e9c:	200a      	movs	r0, #10
 8000e9e:	f000 fbd7 	bl	8001650 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f002 fa14 	bl	80032d8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 fbcd 	bl	8001650 <HAL_Delay>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <send>:

/**
 * @brief sends the current data in the instructions array instr[] over SPI.
 */
void send() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    if (HAL_SPI_Transmit(&hspi2, (uint8_t*)instr, 3, 50) != HAL_OK) {
 8000ec0:	2332      	movs	r3, #50	; 0x32
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4905      	ldr	r1, [pc, #20]	; (8000edc <send+0x20>)
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <send+0x24>)
 8000ec8:	f004 f919 	bl	80050fe <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <send+0x1a>
	SPI_Error();
 8000ed2:	f7ff ff6f 	bl	8000db4 <SPI_Error>
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	200005c0 	.word	0x200005c0

08000ee4 <display_clear>:

/**
 * @brief Sets all segments of the display to 20H, i.e. invisible character.
 */
void display_clear() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    set_startbyte(RS0_RW0);
 8000ee8:	2301      	movs	r3, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff6c 	bl	8000dc8 <set_startbyte>
    set_byte(CLEAR_DISPLAY);
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff83 	bl	8000e00 <set_byte>
    send();
 8000efa:	f7ff ffdf 	bl	8000ebc <send>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <display_init>:

/**
 * @brief Initialization routine to set up the running conditions for the display.
 * @note Sequence needed is predefined. Hardware reset required beforehand.
 */
void display_init() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

    display_hw_reset();
 8000f0a:	f7ff ffbb 	bl	8000e84 <display_hw_reset>

    display_set_backlight(WHITE);
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff8d 	bl	8000e30 <display_set_backlight>

    set_startbyte(RS0_RW0);
 8000f16:	2301      	movs	r3, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff55 	bl	8000dc8 <set_startbyte>
    for (int i = 0; i < 11; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e00e      	b.n	8000f42 <display_init+0x3e>
	set_byte(init_seq[i]);
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <display_init+0x50>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff67 	bl	8000e00 <set_byte>
	send();
 8000f32:	f7ff ffc3 	bl	8000ebc <send>
	HAL_Delay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fb8a 	bl	8001650 <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0a      	cmp	r3, #10
 8000f46:	dded      	ble.n	8000f24 <display_init+0x20>
    }

    display_clear();
 8000f48:	f7ff ffcc 	bl	8000ee4 <display_clear>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000004 	.word	0x20000004

08000f58 <display_set_line>:

/**
 * @brief Instructs the display to target the line specified.
 * @param line: the line to target, 1, 2, 3 or 4.
 */
void display_set_line(uint8_t line) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
    set_byte(DDRAM_L[line - 1]);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <display_set_line+0x24>)
 8000f68:	5cd3      	ldrb	r3, [r2, r3]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff48 	bl	8000e00 <set_byte>
    send();
 8000f70:	f7ff ffa4 	bl	8000ebc <send>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	08008ea0 	.word	0x08008ea0

08000f80 <display_write>:

/**
 * @brief writes the current instruction loaded to the display.
 * @param the data to send.
 */
void display_write(uint8_t data) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS1_RW0);
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff1b 	bl	8000dc8 <set_startbyte>
    set_byte(data);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff33 	bl	8000e00 <set_byte>
    send();
 8000f9a:	f7ff ff8f 	bl	8000ebc <send>
    set_startbyte(RS0_RW0);
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff11 	bl	8000dc8 <set_startbyte>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <display_write_line>:
 * @brief Receives a buffer to write to the display.
 * @param buf: the buffer of data to send.
 * @param len: length of the buffer.
 * @param line: the line of the display to target.
 */
void display_write_line(uint8_t *buf, uint8_t len, uint8_t line) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	70fb      	strb	r3, [r7, #3]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	70bb      	strb	r3, [r7, #2]
    display_set_line(line);
 8000fbe:	78bb      	ldrb	r3, [r7, #2]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffc9 	bl	8000f58 <display_set_line>

    uint8_t i = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
    while (i < len) {
 8000fca:	e00c      	b.n	8000fe6 <display_write_line+0x38>
	display_write(buf[i++]);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	73fa      	strb	r2, [r7, #15]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffd0 	bl	8000f80 <display_write>
	HAL_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f000 fb35 	bl	8001650 <HAL_Delay>
    while (i < len) {
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3ee      	bcc.n	8000fcc <display_write_line+0x1e>
    }

    while (i < 10) { //set remaining segments to blank (0x20)
 8000fee:	e005      	b.n	8000ffc <display_write_line+0x4e>
	display_write((uint8_t) 0x20);
 8000ff0:	2020      	movs	r0, #32
 8000ff2:	f7ff ffc5 	bl	8000f80 <display_write>
	i++;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
    while (i < 10) { //set remaining segments to blank (0x20)
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	d9f6      	bls.n	8000ff0 <display_write_line+0x42>
    }
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_MspInit+0x4c>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_MspInit+0x4c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6613      	str	r3, [r2, #96]	; 0x60
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_MspInit+0x4c>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_MspInit+0x4c>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_MspInit+0x4c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_MspInit+0x4c>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	210f      	movs	r1, #15
 8001046:	f06f 0001 	mvn.w	r0, #1
 800104a:	f001 fef1 	bl	8002e30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	2019      	movs	r0, #25
 8001072:	f001 fedd 	bl	8002e30 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001076:	2019      	movs	r0, #25
 8001078:	f001 fef6 	bl	8002e68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_InitTick+0x9c>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_InitTick+0x9c>)
 8001082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001086:	6613      	str	r3, [r2, #96]	; 0x60
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_InitTick+0x9c>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001094:	f107 0210 	add.w	r2, r7, #16
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 ff22 	bl	8003ee8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010a4:	f002 ff0a 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 80010a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_InitTick+0xa0>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	0c9b      	lsrs	r3, r3, #18
 80010b4:	3b01      	subs	r3, #1
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_InitTick+0xa4>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_InitTick+0xa8>)
 80010bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_InitTick+0xa4>)
 80010c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_InitTick+0xa4>)
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_InitTick+0xa4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_InitTick+0xa4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_InitTick+0xa4>)
 80010da:	f004 fae3 	bl	80056a4 <HAL_TIM_Base_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <HAL_InitTick+0xa4>)
 80010e6:	f004 fb3f 	bl	8005768 <HAL_TIM_Base_Start_IT>
 80010ea:	4603      	mov	r3, r0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3730      	adds	r7, #48	; 0x30
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	431bde83 	.word	0x431bde83
 8001100:	20000624 	.word	0x20000624
 8001104:	40012c00 	.word	0x40012c00

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800113a:	f004 fb85 	bl	8005848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000624 	.word	0x20000624

08001148 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <UART5_IRQHandler+0x10>)
 800114e:	f004 fe8d 	bl	8005e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000670 	.word	0x20000670

0800115c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_kill>:

int _kill(int pid, int sig)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001176:	f006 fb65 	bl	8007844 <__errno>
 800117a:	4603      	mov	r3, r0
 800117c:	2216      	movs	r2, #22
 800117e:	601a      	str	r2, [r3, #0]
	return -1;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_exit>:

void _exit (int status)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffe7 	bl	800116c <_kill>
	while (1) {}		/* Make sure we hang here */
 800119e:	e7fe      	b.n	800119e <_exit+0x12>

080011a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e00a      	b.n	80011c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011b2:	f3af 8000 	nop.w
 80011b6:	4601      	mov	r1, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbf0      	blt.n	80011b2 <_read+0x12>
	}

return len;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	e009      	b.n	8001200 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	60ba      	str	r2, [r7, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	dbf1      	blt.n	80011ec <_write+0x12>
	}
	return len;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_close>:

int _close(int file)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123a:	605a      	str	r2, [r3, #4]
	return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_isatty>:

int _isatty(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	return 1;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001284:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <_sbrk+0x5c>)
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <_sbrk+0x60>)
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <_sbrk+0x64>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <_sbrk+0x68>)
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d207      	bcs.n	80012bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ac:	f006 faca 	bl	8007844 <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20018000 	.word	0x20018000
 80012dc:	00000400 	.word	0x00000400
 80012e0:	200000a0 	.word	0x200000a0
 80012e4:	20000708 	.word	0x20000708

080012e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_UART5_Init+0x58>)
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <MX_UART5_Init+0x5c>)
 8001314:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_UART5_Init+0x58>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_UART5_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_UART5_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_UART5_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_UART5_Init+0x58>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_UART5_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_UART5_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_UART5_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_UART5_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_UART5_Init+0x58>)
 8001350:	f004 fc7a 	bl	8005c48 <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800135a:	f7ff fb6f 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000670 	.word	0x20000670
 8001368:	40005000 	.word	0x40005000

0800136c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0ac      	sub	sp, #176	; 0xb0
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2288      	movs	r2, #136	; 0x88
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f006 faab 	bl	80078e8 <memset>
  if(uartHandle->Instance==UART5)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a36      	ldr	r2, [pc, #216]	; (8001470 <HAL_UART_MspInit+0x104>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d164      	bne.n	8001466 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800139c:	2310      	movs	r3, #16
 800139e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fe2f 	bl	800400c <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013b4:	f7ff fb42 	bl	8000a3c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013c2:	6593      	str	r3, [r2, #88]	; 0x58
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013ee:	f043 0308 	orr.w	r3, r3, #8
 80013f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_UART_MspInit+0x108>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800141a:	2308      	movs	r3, #8
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001424:	4619      	mov	r1, r3
 8001426:	4814      	ldr	r0, [pc, #80]	; (8001478 <HAL_UART_MspInit+0x10c>)
 8001428:	f001 fdac 	bl	8002f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800142c:	2304      	movs	r3, #4
 800142e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001444:	2308      	movs	r3, #8
 8001446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800144e:	4619      	mov	r1, r3
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <HAL_UART_MspInit+0x110>)
 8001452:	f001 fd97 	bl	8002f84 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	2035      	movs	r0, #53	; 0x35
 800145c:	f001 fce8 	bl	8002e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001460:	2035      	movs	r0, #53	; 0x35
 8001462:	f001 fd01 	bl	8002e68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	37b0      	adds	r7, #176	; 0xb0
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40005000 	.word	0x40005000
 8001474:	40021000 	.word	0x40021000
 8001478:	48000800 	.word	0x48000800
 800147c:	48000c00 	.word	0x48000c00

08001480 <UART_Error>:
/**
 * @brief Error function called upon error generated
 * during UART communication.
 * @note Enables the LD2 LED on the Nucleo board and loops infinitely.
 */
void UART_Error(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2120      	movs	r1, #32
 8001488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148c:	f001 ff24 	bl	80032d8 <HAL_GPIO_WritePin>
    while (1) {}
 8001490:	e7fe      	b.n	8001490 <UART_Error+0x10>
	...

08001494 <uart_transmit>:
  * @param size: amount of bytes to transmit.
  * @note Starting the interrupt handler for transmitting.
  * Not allowed to receive if transmission not finished.
  * @retval None
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
    if (UartDoneR == SET) {
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <uart_transmit+0x40>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d110      	bne.n	80014ca <uart_transmit+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <uart_transmit+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <uart_transmit+0x44>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	461a      	mov	r2, r3
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <uart_transmit+0x48>)
 80014bc:	f004 fc12 	bl	8005ce4 <HAL_UART_Transmit_IT>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <uart_transmit+0x36>
	    UART_Error();
 80014c6:	f7ff ffdb 	bl	8001480 <UART_Error>
	}
    }
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000015 	.word	0x20000015
 80014d8:	20000014 	.word	0x20000014
 80014dc:	20000670 	.word	0x20000670

080014e0 <uart_receive>:
  * @param size: amount of bytes to receive.
  * @note Starting the interrupt handler for receiving.
  * Not allowed to transmit if reception not finished.
  * @retval None.
  */
void uart_receive(uint8_t buffer[], uint16_t size) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
    if (UartDoneT == SET) {
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <uart_receive+0x40>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d110      	bne.n	8001516 <uart_receive+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <uart_receive+0x44>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <uart_receive+0x40>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4808      	ldr	r0, [pc, #32]	; (8001528 <uart_receive+0x48>)
 8001508:	f004 fc5a 	bl	8005dc0 <HAL_UART_Receive_IT>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <uart_receive+0x36>
	    UART_Error();
 8001512:	f7ff ffb5 	bl	8001480 <UART_Error>
	}
    }
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000014 	.word	0x20000014
 8001524:	20000015 	.word	0x20000015
 8001528:	20000670 	.word	0x20000670

0800152c <HAL_UART_TxCpltCallback>:
  * @brief UART transfer completion callback.
  * @param UartHandle: UART handle to use.
  * @note Reporting that the tranmission over UART is complete.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_UART_TxCpltCallback+0x20>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
    UartDoneR = SET;
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_UART_TxCpltCallback+0x24>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	20000014 	.word	0x20000014
 8001550:	20000015 	.word	0x20000015

08001554 <HAL_UART_RxCpltCallback>:
* @brief UART reception completion callback.
* @param UartHandle: UART handle to use.
* @note Reporting that the reception over UART is complete.
* @retval None.
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    UartDoneR = SET;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_UART_RxCpltCallback+0x20>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
    UartDoneT = SET;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_UART_RxCpltCallback+0x24>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000015 	.word	0x20000015
 8001578:	20000014 	.word	0x20000014

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001580:	f7ff feb2 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f006 f951 	bl	8007850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7ff f975 	bl	800089c <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80015c0:	08009170 	.word	0x08009170
  ldr r2, =_sbss
 80015c4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80015c8:	20000708 	.word	0x20000708

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_Init+0x3c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_Init+0x3c>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f001 fc17 	bl	8002e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ec:	200f      	movs	r0, #15
 80015ee:	f7ff fd35 	bl	800105c <HAL_InitTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	e001      	b.n	8001602 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fe:	f7ff fd05 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001602:	79fb      	ldrb	r3, [r7, #7]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000001c 	.word	0x2000001c
 8001634:	200006f4 	.word	0x200006f4

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200006f4 	.word	0x200006f4

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000001c 	.word	0x2000001c

08001698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	609a      	str	r2, [r3, #8]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	609a      	str	r2, [r3, #8]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3360      	adds	r3, #96	; 0x60
 8001712:	461a      	mov	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <LL_ADC_SetOffset+0x44>)
 8001722:	4013      	ands	r3, r2
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	4313      	orrs	r3, r2
 8001730:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001738:	bf00      	nop
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	03fff000 	.word	0x03fff000

08001748 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3360      	adds	r3, #96	; 0x60
 8001756:	461a      	mov	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3360      	adds	r3, #96	; 0x60
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800179e:	bf00      	nop
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3330      	adds	r3, #48	; 0x30
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	211f      	movs	r1, #31
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	0e9b      	lsrs	r3, r3, #26
 8001808:	f003 011f 	and.w	r1, r3, #31
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3314      	adds	r3, #20
 8001838:	461a      	mov	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	0e5b      	lsrs	r3, r3, #25
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	4413      	add	r3, r2
 8001846:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	0d1b      	lsrs	r3, r3, #20
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2107      	movs	r1, #7
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	401a      	ands	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	0d1b      	lsrs	r3, r3, #20
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0318 	and.w	r3, r3, #24
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018a4:	40d9      	lsrs	r1, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	400b      	ands	r3, r1
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	431a      	orrs	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	0007ffff 	.word	0x0007ffff

080018c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 031f 	and.w	r3, r3, #31
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001910:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6093      	str	r3, [r2, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001938:	d101      	bne.n	800193e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800195c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001960:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001988:	d101      	bne.n	800198e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d8:	f043 0202 	orr.w	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <LL_ADC_IsEnabled+0x18>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <LL_ADC_IsEnabled+0x1a>
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d101      	bne.n	8001a2a <LL_ADC_IsDisableOngoing+0x18>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_ADC_IsDisableOngoing+0x1a>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4c:	f043 0204 	orr.w	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d101      	bne.n	8001a78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d101      	bne.n	8001a9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e136      	b.n	8001d34 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7fe fdc5 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff19 	bl	8001924 <LL_ADC_IsDeepPowerDownEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff feff 	bl	8001900 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff34 	bl	8001974 <LL_ADC_IsInternalRegulatorEnabled>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d115      	bne.n	8001b3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff18 	bl	800194c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b1c:	4b87      	ldr	r3, [pc, #540]	; (8001d3c <HAL_ADC_Init+0x290>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	4a87      	ldr	r2, [pc, #540]	; (8001d40 <HAL_ADC_Init+0x294>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff16 	bl	8001974 <LL_ADC_IsInternalRegulatorEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10d      	bne.n	8001b6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f043 0210 	orr.w	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff76 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8001b74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 80cf 	bne.w	8001d22 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80cb 	bne.w	8001d22 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b94:	f043 0202 	orr.w	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff23 	bl	80019ec <LL_ADC_IsEnabled>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d115      	bne.n	8001bd8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bac:	4865      	ldr	r0, [pc, #404]	; (8001d44 <HAL_ADC_Init+0x298>)
 8001bae:	f7ff ff1d 	bl	80019ec <LL_ADC_IsEnabled>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4864      	ldr	r0, [pc, #400]	; (8001d48 <HAL_ADC_Init+0x29c>)
 8001bb6:	f7ff ff19 	bl	80019ec <LL_ADC_IsEnabled>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	431c      	orrs	r4, r3
 8001bbe:	4863      	ldr	r0, [pc, #396]	; (8001d4c <HAL_ADC_Init+0x2a0>)
 8001bc0:	f7ff ff14 	bl	80019ec <LL_ADC_IsEnabled>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	485f      	ldr	r0, [pc, #380]	; (8001d50 <HAL_ADC_Init+0x2a4>)
 8001bd4:	f7ff fd60 	bl	8001698 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e5b      	ldrb	r3, [r3, #25]
 8001bdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001be8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	045b      	lsls	r3, r3, #17
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_ADC_Init+0x2a8>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff09 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8001c4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff16 	bl	8001a86 <LL_ADC_INJ_IsConversionOngoing>
 8001c5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d13d      	bne.n	8001cde <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d13a      	bne.n	8001cde <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c6c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c84:	f023 0302 	bic.w	r3, r3, #2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d118      	bne.n	8001cce <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cb2:	4311      	orrs	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	e007      	b.n	8001cde <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10c      	bne.n	8001d00 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f023 010f 	bic.w	r1, r3, #15
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfe:	e007      	b.n	8001d10 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020f 	bic.w	r2, r2, #15
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	f023 0303 	bic.w	r3, r3, #3
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d20:	e007      	b.n	8001d32 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	50040000 	.word	0x50040000
 8001d48:	50040100 	.word	0x50040100
 8001d4c:	50040200 	.word	0x50040200
 8001d50:	50040300 	.word	0x50040300
 8001d54:	fff0c007 	.word	0xfff0c007

08001d58 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d60:	4857      	ldr	r0, [pc, #348]	; (8001ec0 <HAL_ADC_Start+0x168>)
 8001d62:	f7ff fdb1 	bl	80018c8 <LL_ADC_GetMultimode>
 8001d66:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe77 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 809c 	bne.w	8001eb2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_Start+0x30>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e097      	b.n	8001eb8 <HAL_ADC_Start+0x160>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fd71 	bl	8002878 <ADC_Enable>
 8001d96:	4603      	mov	r3, r0
 8001d98:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 8083 	bne.w	8001ea8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <HAL_ADC_Start+0x16c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d002      	beq.n	8001dc6 <HAL_ADC_Start+0x6e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_Start+0x70>
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_ADC_Start+0x170>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d002      	beq.n	8001dd6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	f023 0206 	bic.w	r2, r3, #6
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	221c      	movs	r2, #28
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_ADC_Start+0x16c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d002      	beq.n	8001e24 <HAL_ADC_Start+0xcc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e000      	b.n	8001e26 <HAL_ADC_Start+0xce>
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_ADC_Start+0x170>)
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d008      	beq.n	8001e40 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d114      	bne.n	8001e6a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fde8 	bl	8001a38 <LL_ADC_REG_StartConversion>
 8001e68:	e025      	b.n	8001eb6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_ADC_Start+0x16c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d002      	beq.n	8001e86 <HAL_ADC_Start+0x12e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_Start+0x130>
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_ADC_Start+0x170>)
 8001e88:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00f      	beq.n	8001eb6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea6:	e006      	b.n	8001eb6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001eb0:	e001      	b.n	8001eb6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	50040300 	.word	0x50040300
 8001ec4:	50040100 	.word	0x50040100
 8001ec8:	50040000 	.word	0x50040000

08001ecc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed6:	4866      	ldr	r0, [pc, #408]	; (8002070 <HAL_ADC_PollForConversion+0x1a4>)
 8001ed8:	f7ff fcf6 	bl	80018c8 <LL_ADC_GetMultimode>
 8001edc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d102      	bne.n	8001eec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e02a      	b.n	8001f42 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d002      	beq.n	8001efe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b09      	cmp	r3, #9
 8001efc:	d111      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0a4      	b.n	8002066 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f20:	e00f      	b.n	8001f42 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f22:	4853      	ldr	r0, [pc, #332]	; (8002070 <HAL_ADC_PollForConversion+0x1a4>)
 8001f24:	f7ff fcde 	bl	80018e4 <LL_ADC_GetMultiDMATransfer>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f043 0220 	orr.w	r2, r3, #32
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e093      	b.n	8002066 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f3e:	2304      	movs	r3, #4
 8001f40:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f42:	f7ff fb79 	bl	8001638 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f48:	e021      	b.n	8001f8e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f50:	d01d      	beq.n	8001f8e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f52:	f7ff fb71 	bl	8001638 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <HAL_ADC_PollForConversion+0x9c>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d112      	bne.n	8001f8e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10b      	bne.n	8001f8e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f043 0204 	orr.w	r2, r3, #4
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e06b      	b.n	8002066 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0d6      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fbfc 	bl	80017aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01c      	beq.n	8001ff2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e5b      	ldrb	r3, [r3, #25]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d118      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d111      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_ADC_PollForConversion+0x1a8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d002      	beq.n	8002002 <HAL_ADC_PollForConversion+0x136>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e000      	b.n	8002004 <HAL_ADC_PollForConversion+0x138>
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_ADC_PollForConversion+0x1ac>)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4293      	cmp	r3, r2
 800200a:	d008      	beq.n	800201e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d002      	beq.n	800201e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b09      	cmp	r3, #9
 800201c:	d104      	bne.n	8002028 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	e00c      	b.n	8002042 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <HAL_ADC_PollForConversion+0x1a8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d002      	beq.n	8002038 <HAL_ADC_PollForConversion+0x16c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e000      	b.n	800203a <HAL_ADC_PollForConversion+0x16e>
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_ADC_PollForConversion+0x1ac>)
 800203a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d104      	bne.n	8002052 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2208      	movs	r2, #8
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e008      	b.n	8002064 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	220c      	movs	r2, #12
 8002062:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	50040300 	.word	0x50040300
 8002074:	50040100 	.word	0x50040100
 8002078:	50040000 	.word	0x50040000

0800207c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0b6      	sub	sp, #216	; 0xd8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x22>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e3c7      	b.n	800284a <HAL_ADC_ConfigChannel+0x7b2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fcca 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 83a8 	bne.w	8002824 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d824      	bhi.n	8002126 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	3b02      	subs	r3, #2
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d81b      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x86>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <HAL_ADC_ConfigChannel+0x54>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	080020fd 	.word	0x080020fd
 80020f0:	08002105 	.word	0x08002105
 80020f4:	0800210d 	.word	0x0800210d
 80020f8:	08002115 	.word	0x08002115
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	220c      	movs	r2, #12
 8002100:	605a      	str	r2, [r3, #4]
          break;
 8002102:	e011      	b.n	8002128 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2212      	movs	r2, #18
 8002108:	605a      	str	r2, [r3, #4]
          break;
 800210a:	e00d      	b.n	8002128 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2218      	movs	r2, #24
 8002110:	605a      	str	r2, [r3, #4]
          break;
 8002112:	e009      	b.n	8002128 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211a:	605a      	str	r2, [r3, #4]
          break;
 800211c:	e004      	b.n	8002128 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2206      	movs	r2, #6
 8002122:	605a      	str	r2, [r3, #4]
          break;
 8002124:	e000      	b.n	8002128 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002126:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	f7ff fb4b 	bl	80017d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fc8e 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8002144:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fc9a 	bl	8001a86 <LL_ADC_INJ_IsConversionOngoing>
 8002152:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002156:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 81a6 	bne.w	80024ac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 81a1 	bne.w	80024ac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	461a      	mov	r2, r3
 8002178:	f7ff fb56 	bl	8001828 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d00a      	beq.n	80021b4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021ae:	f7ff faa7 	bl	8001700 <LL_ADC_SetOffset>
 80021b2:	e17b      	b.n	80024ac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fac4 	bl	8001748 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x148>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fab9 	bl	8001748 <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	f003 021f 	and.w	r2, r3, #31
 80021de:	e01e      	b.n	800221e <HAL_ADC_ConfigChannel+0x186>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff faae 	bl	8001748 <LL_ADC_GetOffsetChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e004      	b.n	800221c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x19e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	e018      	b.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800224a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e004      	b.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800225e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fa7d 	bl	8001774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fa61 	bl	8001748 <LL_ADC_GetOffsetChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x20e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fa56 	bl	8001748 <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	e01e      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x24c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fa4b 	bl	8001748 <LL_ADC_GetOffsetChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022d4:	2320      	movs	r3, #32
 80022d6:	e004      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x264>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	e018      	b.n	800232e <HAL_ADC_ConfigChannel+0x296>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002310:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e004      	b.n	800232e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800232e:	429a      	cmp	r2, r3
 8002330:	d106      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	2101      	movs	r1, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fa1a 	bl	8001774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f9fe 	bl	8001748 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_ADC_ConfigChannel+0x2d4>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2102      	movs	r1, #2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f9f3 	bl	8001748 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	e01e      	b.n	80023aa <HAL_ADC_ConfigChannel+0x312>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2102      	movs	r1, #2
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f9e8 	bl	8001748 <LL_ADC_GetOffsetChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800238a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800238e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e004      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800239e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x32a>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	e016      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x358>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e004      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d106      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f9b9 	bl	8001774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2103      	movs	r1, #3
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f99d 	bl	8001748 <LL_ADC_GetOffsetChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_ADC_ConfigChannel+0x396>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2103      	movs	r1, #3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f992 	bl	8001748 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	e017      	b.n	800245e <HAL_ADC_ConfigChannel+0x3c6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2103      	movs	r1, #3
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f987 	bl	8001748 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002448:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800244a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e003      	b.n	800245c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x3de>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	e011      	b.n	800249a <HAL_ADC_ConfigChannel+0x402>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002486:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800248e:	2320      	movs	r3, #32
 8002490:	e003      	b.n	800249a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249a:	429a      	cmp	r2, r3
 800249c:	d106      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2200      	movs	r2, #0
 80024a4:	2103      	movs	r1, #3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f964 	bl	8001774 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa9b 	bl	80019ec <LL_ADC_IsEnabled>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 813f 	bne.w	800273c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f7ff f9d8 	bl	8001880 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a8e      	ldr	r2, [pc, #568]	; (8002710 <HAL_ADC_ConfigChannel+0x678>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	f040 8130 	bne.w	800273c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x46c>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	bf94      	ite	ls
 80024fc:	2301      	movls	r3, #1
 80024fe:	2300      	movhi	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e019      	b.n	8002538 <HAL_ADC_ConfigChannel+0x4a0>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002514:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e003      	b.n	8002528 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2b09      	cmp	r3, #9
 8002530:	bf94      	ite	ls
 8002532:	2301      	movls	r3, #1
 8002534:	2300      	movhi	r3, #0
 8002536:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002538:	2b00      	cmp	r3, #0
 800253a:	d079      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x4c0>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	3301      	adds	r3, #1
 8002550:	069b      	lsls	r3, r3, #26
 8002552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002556:	e015      	b.n	8002584 <HAL_ADC_ConfigChannel+0x4ec>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002568:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e003      	b.n	800257c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	069b      	lsls	r3, r3, #26
 8002580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x50c>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	e017      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x53c>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	ea42 0103 	orr.w	r1, r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x562>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	3301      	adds	r3, #1
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	051b      	lsls	r3, r3, #20
 80025f8:	e018      	b.n	800262c <HAL_ADC_ConfigChannel+0x594>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800260c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e003      	b.n	800261e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800262c:	430b      	orrs	r3, r1
 800262e:	e080      	b.n	8002732 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002638:	2b00      	cmp	r3, #0
 800263a:	d107      	bne.n	800264c <HAL_ADC_ConfigChannel+0x5b4>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	3301      	adds	r3, #1
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264a:	e015      	b.n	8002678 <HAL_ADC_ConfigChannel+0x5e0>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e003      	b.n	8002670 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	069b      	lsls	r3, r3, #26
 8002674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x600>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	e017      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x630>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	61fb      	str	r3, [r7, #28]
  return result;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	ea42 0103 	orr.w	r1, r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x65c>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	3301      	adds	r3, #1
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	3b1e      	subs	r3, #30
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f2:	e01d      	b.n	8002730 <HAL_ADC_ConfigChannel+0x698>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	613b      	str	r3, [r7, #16]
  return result;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800270c:	2320      	movs	r3, #32
 800270e:	e005      	b.n	800271c <HAL_ADC_ConfigChannel+0x684>
 8002710:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f003 021f 	and.w	r2, r3, #31
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	3b1e      	subs	r3, #30
 800272a:	051b      	lsls	r3, r3, #20
 800272c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002730:	430b      	orrs	r3, r1
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6892      	ldr	r2, [r2, #8]
 8002736:	4619      	mov	r1, r3
 8002738:	f7ff f876 	bl	8001828 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b44      	ldr	r3, [pc, #272]	; (8002854 <HAL_ADC_ConfigChannel+0x7bc>)
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d07a      	beq.n	800283e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002748:	4843      	ldr	r0, [pc, #268]	; (8002858 <HAL_ADC_ConfigChannel+0x7c0>)
 800274a:	f7fe ffcb 	bl	80016e4 <LL_ADC_GetCommonPathInternalCh>
 800274e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a41      	ldr	r2, [pc, #260]	; (800285c <HAL_ADC_ConfigChannel+0x7c4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d12c      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800275c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d126      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <HAL_ADC_ConfigChannel+0x7c8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_ADC_ConfigChannel+0x6e4>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <HAL_ADC_ConfigChannel+0x7cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d15d      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002784:	4619      	mov	r1, r3
 8002786:	4834      	ldr	r0, [pc, #208]	; (8002858 <HAL_ADC_ConfigChannel+0x7c0>)
 8002788:	f7fe ff99 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278c:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_ADC_ConfigChannel+0x7d0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	4a36      	ldr	r2, [pc, #216]	; (800286c <HAL_ADC_ConfigChannel+0x7d4>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027a6:	e002      	b.n	80027ae <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b4:	e040      	b.n	8002838 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2d      	ldr	r2, [pc, #180]	; (8002870 <HAL_ADC_ConfigChannel+0x7d8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d118      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x75a>
 80027c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d112      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_ADC_ConfigChannel+0x7c8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x748>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_ADC_ConfigChannel+0x7cc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d12d      	bne.n	800283c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e8:	4619      	mov	r1, r3
 80027ea:	481b      	ldr	r0, [pc, #108]	; (8002858 <HAL_ADC_ConfigChannel+0x7c0>)
 80027ec:	f7fe ff67 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f0:	e024      	b.n	800283c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_ADC_ConfigChannel+0x7dc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d120      	bne.n	800283e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11a      	bne.n	800283e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_ADC_ConfigChannel+0x7c8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d115      	bne.n	800283e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002812:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800281a:	4619      	mov	r1, r3
 800281c:	480e      	ldr	r0, [pc, #56]	; (8002858 <HAL_ADC_ConfigChannel+0x7c0>)
 800281e:	f7fe ff4e 	bl	80016be <LL_ADC_SetCommonPathInternalCh>
 8002822:	e00c      	b.n	800283e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002836:	e002      	b.n	800283e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002838:	bf00      	nop
 800283a:	e000      	b.n	800283e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800283c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002846:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800284a:	4618      	mov	r0, r3
 800284c:	37d8      	adds	r7, #216	; 0xd8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	80080000 	.word	0x80080000
 8002858:	50040300 	.word	0x50040300
 800285c:	c7520000 	.word	0xc7520000
 8002860:	50040000 	.word	0x50040000
 8002864:	50040200 	.word	0x50040200
 8002868:	20000010 	.word	0x20000010
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	cb840000 	.word	0xcb840000
 8002874:	80000001 	.word	0x80000001

08002878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f8b1 	bl	80019ec <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d14d      	bne.n	800292c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <ADC_Enable+0xc0>)
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f043 0210 	orr.w	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e039      	b.n	800292e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f86c 	bl	800199c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028c4:	f7fe feb8 	bl	8001638 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ca:	e028      	b.n	800291e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f88b 	bl	80019ec <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f85b 	bl	800199c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028e6:	f7fe fea7 	bl	8001638 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d914      	bls.n	800291e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d00d      	beq.n	800291e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d1cf      	bne.n	80028cc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	8000003f 	.word	0x8000003f

0800293c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f862 	bl	8001a12 <LL_ADC_IsDisableOngoing>
 800294e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff f849 	bl	80019ec <LL_ADC_IsEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d047      	beq.n	80029f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d144      	bne.n	80029f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030d 	and.w	r3, r3, #13
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10c      	bne.n	800298e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f823 	bl	80019c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2203      	movs	r2, #3
 8002984:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002986:	f7fe fe57 	bl	8001638 <HAL_GetTick>
 800298a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800298c:	e029      	b.n	80029e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f043 0210 	orr.w	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e023      	b.n	80029f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029aa:	f7fe fe45 	bl	8001638 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d914      	bls.n	80029e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00d      	beq.n	80029e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f043 0210 	orr.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1dc      	bne.n	80029aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <LL_ADC_IsEnabled>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <LL_ADC_IsEnabled+0x18>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <LL_ADC_IsEnabled+0x1a>
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_StartCalibration>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a66:	d101      	bne.n	8002a6c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_REG_IsConversionOngoing>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d101      	bne.n	8002a92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_ADCEx_Calibration_Start+0x1c>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e04d      	b.n	8002b58 <HAL_ADCEx_Calibration_Start+0xb8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff39 	bl	800293c <ADC_Disable>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d136      	bne.n	8002b42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002adc:	f023 0302 	bic.w	r3, r3, #2
 8002ae0:	f043 0202 	orr.w	r2, r3, #2
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff96 	bl	8002a20 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002af4:	e014      	b.n	8002b20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3301      	adds	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002b02:	d30d      	bcc.n	8002b20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f023 0312 	bic.w	r3, r3, #18
 8002b0c:	f043 0210 	orr.w	r2, r3, #16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e01b      	b.n	8002b58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff94 	bl	8002a52 <LL_ADC_IsCalibrationOnGoing>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e2      	bne.n	8002af6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f023 0303 	bic.w	r3, r3, #3
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b40:	e005      	b.n	8002b4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f043 0210 	orr.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b09f      	sub	sp, #124	; 0x7c
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e093      	b.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b86:	2300      	movs	r3, #0
 8002b88:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a47      	ldr	r2, [pc, #284]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d102      	bne.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	e001      	b.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e072      	b.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff59 	bl	8002a7a <LL_ADC_REG_IsConversionOngoing>
 8002bc8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff53 	bl	8002a7a <LL_ADC_REG_IsConversionOngoing>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d154      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d151      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002be0:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002be2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d02c      	beq.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bfe:	035b      	lsls	r3, r3, #13
 8002c00:	430b      	orrs	r3, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c08:	4829      	ldr	r0, [pc, #164]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c0a:	f7ff fef6 	bl	80029fa <LL_ADC_IsEnabled>
 8002c0e:	4604      	mov	r4, r0
 8002c10:	4828      	ldr	r0, [pc, #160]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c12:	f7ff fef2 	bl	80029fa <LL_ADC_IsEnabled>
 8002c16:	4603      	mov	r3, r0
 8002c18:	431c      	orrs	r4, r3
 8002c1a:	4828      	ldr	r0, [pc, #160]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c1c:	f7ff feed 	bl	80029fa <LL_ADC_IsEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4323      	orrs	r3, r4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d137      	bne.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c30:	f023 030f 	bic.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	6811      	ldr	r1, [r2, #0]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c42:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c44:	e028      	b.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c52:	4817      	ldr	r0, [pc, #92]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c54:	f7ff fed1 	bl	80029fa <LL_ADC_IsEnabled>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4816      	ldr	r0, [pc, #88]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c5c:	f7ff fecd 	bl	80029fa <LL_ADC_IsEnabled>
 8002c60:	4603      	mov	r3, r0
 8002c62:	431c      	orrs	r4, r3
 8002c64:	4815      	ldr	r0, [pc, #84]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c66:	f7ff fec8 	bl	80029fa <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4323      	orrs	r3, r4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d112      	bne.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c7a:	f023 030f 	bic.w	r3, r3, #15
 8002c7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c82:	e009      	b.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c96:	e000      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ca2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	377c      	adds	r7, #124	; 0x7c
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd90      	pop	{r4, r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	50040000 	.word	0x50040000
 8002cb4:	50040100 	.word	0x50040100
 8002cb8:	50040300 	.word	0x50040300
 8002cbc:	50040200 	.word	0x50040200

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4907      	ldr	r1, [pc, #28]	; (8002d5c <__NVIC_EnableIRQ+0x38>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db0a      	blt.n	8002d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	490c      	ldr	r1, [pc, #48]	; (8002dac <__NVIC_SetPriority+0x4c>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d88:	e00a      	b.n	8002da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4908      	ldr	r1, [pc, #32]	; (8002db0 <__NVIC_SetPriority+0x50>)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	3b04      	subs	r3, #4
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	761a      	strb	r2, [r3, #24]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f1c3 0307 	rsb	r3, r3, #7
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf28      	it	cs
 8002dd2:	2304      	movcs	r3, #4
 8002dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d902      	bls.n	8002de4 <NVIC_EncodePriority+0x30>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3b03      	subs	r3, #3
 8002de2:	e000      	b.n	8002de6 <NVIC_EncodePriority+0x32>
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43d9      	mvns	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	4313      	orrs	r3, r2
         );
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	; 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff4c 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e42:	f7ff ff61 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	6978      	ldr	r0, [r7, #20]
 8002e4e:	f7ff ffb1 	bl	8002db4 <NVIC_EncodePriority>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff80 	bl	8002d60 <__NVIC_SetPriority>
}
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff54 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d008      	beq.n	8002eae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e022      	b.n	8002ef4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 020e 	bic.w	r2, r2, #14
 8002ebc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f003 021c 	and.w	r2, r3, #28
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d005      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	e029      	b.n	8002f78 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020e 	bic.w	r2, r2, #14
 8002f32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f003 021c 	and.w	r2, r3, #28
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
    }
  }
  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f92:	e17f      	b.n	8003294 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8171 	beq.w	800328e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d005      	beq.n	8002fc4 <HAL_GPIO_Init+0x40>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d130      	bne.n	8003026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 0201 	and.w	r2, r3, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b03      	cmp	r3, #3
 8003030:	d118      	bne.n	8003064 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003038:	2201      	movs	r2, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0201 	and.w	r2, r3, #1
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b03      	cmp	r3, #3
 800306e:	d017      	beq.n	80030a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d123      	bne.n	80030f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	6939      	ldr	r1, [r7, #16]
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80ac 	beq.w	800328e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	4b5f      	ldr	r3, [pc, #380]	; (80032b4 <HAL_GPIO_Init+0x330>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	4a5e      	ldr	r2, [pc, #376]	; (80032b4 <HAL_GPIO_Init+0x330>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6613      	str	r3, [r2, #96]	; 0x60
 8003142:	4b5c      	ldr	r3, [pc, #368]	; (80032b4 <HAL_GPIO_Init+0x330>)
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800314e:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_GPIO_Init+0x334>)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	220f      	movs	r2, #15
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003178:	d025      	beq.n	80031c6 <HAL_GPIO_Init+0x242>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4f      	ldr	r2, [pc, #316]	; (80032bc <HAL_GPIO_Init+0x338>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01f      	beq.n	80031c2 <HAL_GPIO_Init+0x23e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <HAL_GPIO_Init+0x33c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d019      	beq.n	80031be <HAL_GPIO_Init+0x23a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4d      	ldr	r2, [pc, #308]	; (80032c4 <HAL_GPIO_Init+0x340>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_GPIO_Init+0x236>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4c      	ldr	r2, [pc, #304]	; (80032c8 <HAL_GPIO_Init+0x344>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00d      	beq.n	80031b6 <HAL_GPIO_Init+0x232>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4b      	ldr	r2, [pc, #300]	; (80032cc <HAL_GPIO_Init+0x348>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d007      	beq.n	80031b2 <HAL_GPIO_Init+0x22e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <HAL_GPIO_Init+0x34c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_GPIO_Init+0x22a>
 80031aa:	2306      	movs	r3, #6
 80031ac:	e00c      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e00a      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031b2:	2305      	movs	r3, #5
 80031b4:	e008      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x244>
 80031c6:	2300      	movs	r3, #0
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031d8:	4937      	ldr	r1, [pc, #220]	; (80032b8 <HAL_GPIO_Init+0x334>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_GPIO_Init+0x350>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800320a:	4a32      	ldr	r2, [pc, #200]	; (80032d4 <HAL_GPIO_Init+0x350>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003210:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_GPIO_Init+0x350>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003234:	4a27      	ldr	r2, [pc, #156]	; (80032d4 <HAL_GPIO_Init+0x350>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_GPIO_Init+0x350>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800325e:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <HAL_GPIO_Init+0x350>)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_GPIO_Init+0x350>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003288:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <HAL_GPIO_Init+0x350>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f ae78 	bne.w	8002f94 <HAL_GPIO_Init+0x10>
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010000 	.word	0x40010000
 80032bc:	48000400 	.word	0x48000400
 80032c0:	48000800 	.word	0x48000800
 80032c4:	48000c00 	.word	0x48000c00
 80032c8:	48001000 	.word	0x48001000
 80032cc:	48001400 	.word	0x48001400
 80032d0:	48001800 	.word	0x48001800
 80032d4:	40010400 	.word	0x40010400

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_PWREx_GetVoltageRange+0x18>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40007000 	.word	0x40007000

08003324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d130      	bne.n	8003396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003340:	d038      	beq.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2232      	movs	r2, #50	; 0x32
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003368:	e002      	b.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3b01      	subs	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337c:	d102      	bne.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f2      	bne.n	800336a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d110      	bne.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e00f      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d007      	beq.n	80033b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033a4:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40007000 	.word	0x40007000
 80033c8:	20000010 	.word	0x20000010
 80033cc:	431bde83 	.word	0x431bde83

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e3d4      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4ba1      	ldr	r3, [pc, #644]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ec:	4b9e      	ldr	r3, [pc, #632]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80e4 	beq.w	80035cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_RCC_OscConfig+0x4a>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	f040 808b 	bne.w	8003528 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b01      	cmp	r3, #1
 8003416:	f040 8087 	bne.w	8003528 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800341a:	4b93      	ldr	r3, [pc, #588]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_RCC_OscConfig+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e3ac      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	4b8c      	ldr	r3, [pc, #560]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <HAL_RCC_OscConfig+0x7c>
 8003442:	4b89      	ldr	r3, [pc, #548]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344a:	e005      	b.n	8003458 <HAL_RCC_OscConfig+0x88>
 800344c:	4b86      	ldr	r3, [pc, #536]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003458:	4293      	cmp	r3, r2
 800345a:	d223      	bcs.n	80034a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd73 	bl	8003f4c <RCC_SetFlashLatencyFromMSIRange>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e38d      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003470:	4b7d      	ldr	r3, [pc, #500]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7c      	ldr	r2, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003476:	f043 0308 	orr.w	r3, r3, #8
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4977      	ldr	r1, [pc, #476]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	4972      	ldr	r1, [pc, #456]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
 80034a2:	e025      	b.n	80034f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a4:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6f      	ldr	r2, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80034aa:	f043 0308 	orr.w	r3, r3, #8
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	496a      	ldr	r1, [pc, #424]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c2:	4b69      	ldr	r3, [pc, #420]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	4965      	ldr	r1, [pc, #404]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fd33 	bl	8003f4c <RCC_SetFlashLatencyFromMSIRange>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e34d      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f0:	f000 fc36 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	495a      	ldr	r1, [pc, #360]	; (800366c <HAL_RCC_OscConfig+0x29c>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
 800350c:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_RCC_OscConfig+0x2a0>)
 800350e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003510:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCC_OscConfig+0x2a4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd fda1 	bl	800105c <HAL_InitTick>
 800351a:	4603      	mov	r3, r0
 800351c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d052      	beq.n	80035ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	e331      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d032      	beq.n	8003596 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003530:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800353c:	f7fe f87c 	bl	8001638 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003544:	f7fe f878 	bl	8001638 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e31a      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003556:	4b44      	ldr	r3, [pc, #272]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003568:	f043 0308 	orr.w	r3, r3, #8
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	493b      	ldr	r1, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	4936      	ldr	r1, [pc, #216]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
 8003594:	e01a      	b.n	80035cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a33      	ldr	r2, [pc, #204]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035a2:	f7fe f849 	bl	8001638 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035aa:	f7fe f845 	bl	8001638 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e2e7      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x1da>
 80035c8:	e000      	b.n	80035cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d074      	beq.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x21a>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	d10e      	bne.n	8003602 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d10b      	bne.n	8003602 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d064      	beq.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d160      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e2c4      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x24a>
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e01d      	b.n	8003656 <HAL_RCC_OscConfig+0x286>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003622:	d10c      	bne.n	800363e <HAL_RCC_OscConfig+0x26e>
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800362a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e00b      	b.n	8003656 <HAL_RCC_OscConfig+0x286>
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a06      	ldr	r2, [pc, #24]	; (8003668 <HAL_RCC_OscConfig+0x298>)
 8003650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003654:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01c      	beq.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd ffeb 	bl	8001638 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003664:	e011      	b.n	800368a <HAL_RCC_OscConfig+0x2ba>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	08008ea4 	.word	0x08008ea4
 8003670:	20000010 	.word	0x20000010
 8003674:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fd ffde 	bl	8001638 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e280      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368a:	4baf      	ldr	r3, [pc, #700]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x2a8>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd ffce 	bl	8001638 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fd ffca 	bl	8001638 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e26c      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b2:	4ba5      	ldr	r3, [pc, #660]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2d0>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d060      	beq.n	8003790 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x310>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d119      	bne.n	800370e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d116      	bne.n	800370e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e0:	4b99      	ldr	r3, [pc, #612]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_OscConfig+0x328>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e249      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b93      	ldr	r3, [pc, #588]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	4990      	ldr	r1, [pc, #576]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370c:	e040      	b.n	8003790 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003716:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a8b      	ldr	r2, [pc, #556]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd ff89 	bl	8001638 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7fd ff85 	bl	8001638 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e227      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373c:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b7f      	ldr	r3, [pc, #508]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	497c      	ldr	r1, [pc, #496]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
 800375c:	e018      	b.n	8003790 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b7a      	ldr	r3, [pc, #488]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a79      	ldr	r2, [pc, #484]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fd ff65 	bl	8001638 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003772:	f7fd ff61 	bl	8001638 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e203      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003784:	4b70      	ldr	r3, [pc, #448]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f0      	bne.n	8003772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03c      	beq.n	8003816 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01c      	beq.n	80037de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037aa:	4a67      	ldr	r2, [pc, #412]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fd ff40 	bl	8001638 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037bc:	f7fd ff3c 	bl	8001638 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1de      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ce:	4b5e      	ldr	r3, [pc, #376]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ef      	beq.n	80037bc <HAL_RCC_OscConfig+0x3ec>
 80037dc:	e01b      	b.n	8003816 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037de:	4b5a      	ldr	r3, [pc, #360]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80037e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7fd ff23 	bl	8001638 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f6:	f7fd ff1f 	bl	8001638 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1c1      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003808:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ef      	bne.n	80037f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80a6 	beq.w	8003970 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003828:	4b47      	ldr	r3, [pc, #284]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003834:	4b44      	ldr	r3, [pc, #272]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	4a43      	ldr	r2, [pc, #268]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	6593      	str	r3, [r2, #88]	; 0x58
 8003840:	4b41      	ldr	r3, [pc, #260]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003850:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_RCC_OscConfig+0x57c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d118      	bne.n	800388e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x57c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3a      	ldr	r2, [pc, #232]	; (800394c <HAL_RCC_OscConfig+0x57c>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003868:	f7fd fee6 	bl	8001638 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd fee2 	bl	8001638 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e184      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_RCC_OscConfig+0x57c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d108      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4d8>
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a6:	e024      	b.n	80038f2 <HAL_RCC_OscConfig+0x522>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d110      	bne.n	80038d2 <HAL_RCC_OscConfig+0x502>
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	4a24      	ldr	r2, [pc, #144]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038b8:	f043 0304 	orr.w	r3, r3, #4
 80038bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c0:	4b21      	ldr	r3, [pc, #132]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	4a20      	ldr	r2, [pc, #128]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d0:	e00f      	b.n	80038f2 <HAL_RCC_OscConfig+0x522>
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e2:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fa:	f7fd fe9d 	bl	8001638 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003900:	e00a      	b.n	8003918 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fd fe99 	bl	8001638 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e139      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_OscConfig+0x578>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ed      	beq.n	8003902 <HAL_RCC_OscConfig+0x532>
 8003926:	e01a      	b.n	800395e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7fd fe86 	bl	8001638 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800392e:	e00f      	b.n	8003950 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd fe82 	bl	8001638 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d906      	bls.n	8003950 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e122      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003950:	4b90      	ldr	r3, [pc, #576]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e8      	bne.n	8003930 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800395e:	7ffb      	ldrb	r3, [r7, #31]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b8b      	ldr	r3, [pc, #556]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	4a8a      	ldr	r2, [pc, #552]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8108 	beq.w	8003b8a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	2b02      	cmp	r3, #2
 8003980:	f040 80d0 	bne.w	8003b24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003984:	4b83      	ldr	r3, [pc, #524]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	429a      	cmp	r2, r3
 8003996:	d130      	bne.n	80039fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	3b01      	subs	r3, #1
 80039a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d127      	bne.n	80039fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d11f      	bne.n	80039fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c4:	2a07      	cmp	r2, #7
 80039c6:	bf14      	ite	ne
 80039c8:	2201      	movne	r2, #1
 80039ca:	2200      	moveq	r2, #0
 80039cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	3b01      	subs	r3, #1
 80039e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d109      	bne.n	80039fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	3b01      	subs	r3, #1
 80039f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d06e      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d069      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a00:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b7      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a1c:	4b5d      	ldr	r3, [pc, #372]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5c      	ldr	r2, [pc, #368]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a28:	f7fd fe06 	bl	8001638 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd fe02 	bl	8001638 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0a4      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a42:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a4e:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <HAL_RCC_OscConfig+0x7c8>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a68:	0212      	lsls	r2, r2, #8
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a70:	0852      	lsrs	r2, r2, #1
 8003a72:	3a01      	subs	r2, #1
 8003a74:	0552      	lsls	r2, r2, #21
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a7c:	0852      	lsrs	r2, r2, #1
 8003a7e:	3a01      	subs	r2, #1
 8003a80:	0652      	lsls	r2, r2, #25
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a88:	0912      	lsrs	r2, r2, #4
 8003a8a:	0452      	lsls	r2, r2, #17
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	4941      	ldr	r1, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a94:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3e      	ldr	r2, [pc, #248]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa0:	4b3c      	ldr	r3, [pc, #240]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aac:	f7fd fdc4 	bl	8001638 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fd fdc0 	bl	8001638 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e062      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac6:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad2:	e05a      	b.n	8003b8a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e059      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad8:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d152      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003afc:	f7fd fd9c 	bl	8001638 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd fd98 	bl	8001638 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e03a      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x734>
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d02d      	beq.n	8003b86 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b36:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b48:	f023 0303 	bic.w	r3, r3, #3
 8003b4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fd6b 	bl	8001638 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b66:	f7fd fd67 	bl	8001638 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e009      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_OscConfig+0x7c4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x796>
 8003b84:	e001      	b.n	8003b8a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	f99d808c 	.word	0xf99d808c

08003b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0c8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d910      	bls.n	8003be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 0207 	bic.w	r2, r3, #7
 8003bc6:	4961      	ldr	r1, [pc, #388]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0b0      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d04c      	beq.n	8003c86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d121      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e09e      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d115      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e092      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c24:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e086      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e07e      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 0203 	bic.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	493f      	ldr	r1, [pc, #252]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c56:	f7fd fcef 	bl	8001638 <HAL_GetTick>
 8003c5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5e:	f7fd fceb 	bl	8001638 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e066      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 020c 	and.w	r2, r3, #12
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d1eb      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	492c      	ldr	r1, [pc, #176]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d210      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 0207 	bic.w	r2, r3, #7
 8003cba:	4924      	ldr	r1, [pc, #144]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e036      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4918      	ldr	r1, [pc, #96]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4910      	ldr	r1, [pc, #64]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d12:	f000 f825 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	490c      	ldr	r1, [pc, #48]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd f990 	bl	800105c <HAL_InitTick>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d40:	7afb      	ldrb	r3, [r7, #11]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08008ea4 	.word	0x08008ea4
 8003d58:	20000010 	.word	0x20000010
 8003d5c:	20000018 	.word	0x20000018

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d121      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d11e      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d102      	bne.n	8003dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e004      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003de4:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d134      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d003      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0xac>
 8003e04:	e005      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e08:	617b      	str	r3, [r7, #20]
      break;
 8003e0a:	e005      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e0e:	617b      	str	r3, [r7, #20]
      break;
 8003e10:	e002      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	3301      	adds	r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	fb02 f203 	mul.w	r2, r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	0e5b      	lsrs	r3, r3, #25
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e58:	69bb      	ldr	r3, [r7, #24]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08008ebc 	.word	0x08008ebc
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000010 	.word	0x20000010

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e94:	f7ff fff0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	08008eb4 	.word	0x08008eb4

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ec0:	f7ff ffda 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0adb      	lsrs	r3, r3, #11
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	08008eb4 	.word	0x08008eb4

08003ee8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ef8:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_RCC_GetClockConfig+0x60>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0207 	and.w	r2, r3, #7
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40022000 	.word	0x40022000

08003f4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f58:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f64:	f7ff f9d0 	bl	8003308 <HAL_PWREx_GetVoltageRange>
 8003f68:	6178      	str	r0, [r7, #20]
 8003f6a:	e014      	b.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	4a24      	ldr	r2, [pc, #144]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f76:	6593      	str	r3, [r2, #88]	; 0x58
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f84:	f7ff f9c0 	bl	8003308 <HAL_PWREx_GetVoltageRange>
 8003f88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d10b      	bne.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b80      	cmp	r3, #128	; 0x80
 8003fa2:	d919      	bls.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fa8:	d902      	bls.n	8003fb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003faa:	2302      	movs	r3, #2
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	e013      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e010      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d902      	bls.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e00a      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d102      	bne.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fc8:	2302      	movs	r3, #2
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e004      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d101      	bne.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 0207 	bic.w	r2, r3, #7
 8003fe0:	4909      	ldr	r1, [pc, #36]	; (8004008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d001      	beq.n	8003ffa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	40022000 	.word	0x40022000

0800400c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004014:	2300      	movs	r3, #0
 8004016:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004018:	2300      	movs	r3, #0
 800401a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004024:	2b00      	cmp	r3, #0
 8004026:	d041      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800402c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004030:	d02a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004032:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004036:	d824      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004038:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800403c:	d008      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800403e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004042:	d81e      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404c:	d010      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800404e:	e018      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004050:	4b86      	ldr	r3, [pc, #536]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a85      	ldr	r2, [pc, #532]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800405c:	e015      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fabb 	bl	80045e0 <RCCEx_PLLSAI1_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800406e:	e00c      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3320      	adds	r3, #32
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fba6 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	74fb      	strb	r3, [r7, #19]
      break;
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004090:	4b76      	ldr	r3, [pc, #472]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409e:	4973      	ldr	r1, [pc, #460]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040a6:	e001      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d041      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040c0:	d02a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040c6:	d824      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040cc:	d008      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040d2:	d81e      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040dc:	d010      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040de:	e018      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040e0:	4b62      	ldr	r3, [pc, #392]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a61      	ldr	r2, [pc, #388]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040ec:	e015      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fa73 	bl	80045e0 <RCCEx_PLLSAI1_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040fe:	e00c      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3320      	adds	r3, #32
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fb5e 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	74fb      	strb	r3, [r7, #19]
      break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004120:	4b52      	ldr	r3, [pc, #328]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800412e:	494f      	ldr	r1, [pc, #316]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004136:	e001      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a0 	beq.w	800428a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	4a40      	ldr	r2, [pc, #256]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416e:	6593      	str	r3, [r2, #88]	; 0x58
 8004170:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417c:	2301      	movs	r3, #1
 800417e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004180:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3a      	ldr	r2, [pc, #232]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800418c:	f7fd fa54 	bl	8001638 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004192:	e009      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004194:	f7fd fa50 	bl	8001638 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d902      	bls.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	74fb      	strb	r3, [r7, #19]
        break;
 80041a6:	e005      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041a8:	4b31      	ldr	r3, [pc, #196]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ef      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d15c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ba:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01f      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d019      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	4a20      	ldr	r2, [pc, #128]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fd fa0f 	bl	8001638 <HAL_GetTick>
 800421a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421c:	e00b      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fd fa0b 	bl	8001638 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d902      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	74fb      	strb	r3, [r7, #19]
            break;
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ec      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10c      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	4904      	ldr	r1, [pc, #16]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004262:	e009      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	74bb      	strb	r3, [r7, #18]
 8004268:	e006      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004278:	7c7b      	ldrb	r3, [r7, #17]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b9e      	ldr	r3, [pc, #632]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	4a9d      	ldr	r2, [pc, #628]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004296:	4b98      	ldr	r3, [pc, #608]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f023 0203 	bic.w	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	4994      	ldr	r1, [pc, #592]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042b8:	4b8f      	ldr	r3, [pc, #572]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f023 020c 	bic.w	r2, r3, #12
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	498c      	ldr	r1, [pc, #560]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042da:	4b87      	ldr	r3, [pc, #540]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	4983      	ldr	r1, [pc, #524]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042fc:	4b7e      	ldr	r3, [pc, #504]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	497b      	ldr	r1, [pc, #492]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800431e:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432c:	4972      	ldr	r1, [pc, #456]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004340:	4b6d      	ldr	r3, [pc, #436]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	496a      	ldr	r1, [pc, #424]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	4961      	ldr	r1, [pc, #388]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004384:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004392:	4959      	ldr	r1, [pc, #356]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a6:	4b54      	ldr	r3, [pc, #336]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b4:	4950      	ldr	r1, [pc, #320]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	4948      	ldr	r1, [pc, #288]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ea:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	493f      	ldr	r1, [pc, #252]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d028      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800440c:	4b3a      	ldr	r3, [pc, #232]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441a:	4937      	ldr	r1, [pc, #220]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800442a:	d106      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4a31      	ldr	r2, [pc, #196]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004436:	60d3      	str	r3, [r2, #12]
 8004438:	e011      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004442:	d10c      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	2101      	movs	r1, #1
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f8c8 	bl	80045e0 <RCCEx_PLLSAI1_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d028      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800446a:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	491f      	ldr	r1, [pc, #124]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004488:	d106      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004494:	60d3      	str	r3, [r2, #12]
 8004496:	e011      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a0:	d10c      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2101      	movs	r1, #1
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f899 	bl	80045e0 <RCCEx_PLLSAI1_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b2:	7cfb      	ldrb	r3, [r7, #19]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d02b      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d6:	4908      	ldr	r1, [pc, #32]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044e6:	d109      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a02      	ldr	r2, [pc, #8]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f2:	60d3      	str	r3, [r2, #12]
 80044f4:	e014      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004504:	d10c      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f867 	bl	80045e0 <RCCEx_PLLSAI1_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452c:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800453a:	4928      	ldr	r1, [pc, #160]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454a:	d10d      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f844 	bl	80045e0 <RCCEx_PLLSAI1_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455c:	7cfb      	ldrb	r3, [r7, #19]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d014      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	74bb      	strb	r3, [r7, #18]
 8004566:	e011      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800456c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004570:	d10c      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3320      	adds	r3, #32
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 f925 	bl	80047c8 <RCCEx_PLLSAI2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004582:	7cfb      	ldrb	r3, [r7, #19]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004598:	4b10      	ldr	r3, [pc, #64]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a6:	490d      	ldr	r1, [pc, #52]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	4904      	ldr	r1, [pc, #16]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000

080045e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ee:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d018      	beq.n	800462c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045fa:	4b72      	ldr	r3, [pc, #456]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d10d      	bne.n	8004626 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
       ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004612:	4b6c      	ldr	r3, [pc, #432]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
       ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d047      	beq.n	80046b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e044      	b.n	80046b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d018      	beq.n	8004666 <RCCEx_PLLSAI1_Config+0x86>
 8004634:	2b03      	cmp	r3, #3
 8004636:	d825      	bhi.n	8004684 <RCCEx_PLLSAI1_Config+0xa4>
 8004638:	2b01      	cmp	r3, #1
 800463a:	d002      	beq.n	8004642 <RCCEx_PLLSAI1_Config+0x62>
 800463c:	2b02      	cmp	r3, #2
 800463e:	d009      	beq.n	8004654 <RCCEx_PLLSAI1_Config+0x74>
 8004640:	e020      	b.n	8004684 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004642:	4b60      	ldr	r3, [pc, #384]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11d      	bne.n	800468a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004652:	e01a      	b.n	800468a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004654:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d116      	bne.n	800468e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004664:	e013      	b.n	800468e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004666:	4b57      	ldr	r3, [pc, #348]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004672:	4b54      	ldr	r3, [pc, #336]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004682:	e006      	b.n	8004692 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e004      	b.n	8004694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004692:	bf00      	nop
    }

    if(status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800469a:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	430b      	orrs	r3, r1
 80046b0:	4944      	ldr	r1, [pc, #272]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d17d      	bne.n	80047b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046bc:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fc ffb6 	bl	8001638 <HAL_GetTick>
 80046cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ce:	e009      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d0:	f7fc ffb2 	bl	8001638 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
        break;
 80046e2:	e005      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e4:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d160      	bne.n	80047b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046fc:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	0211      	lsls	r1, r2, #8
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68d2      	ldr	r2, [r2, #12]
 8004712:	0912      	lsrs	r2, r2, #4
 8004714:	0452      	lsls	r2, r2, #17
 8004716:	430a      	orrs	r2, r1
 8004718:	492a      	ldr	r1, [pc, #168]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]
 800471e:	e027      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d112      	bne.n	800474c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004726:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800472e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	0211      	lsls	r1, r2, #8
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6912      	ldr	r2, [r2, #16]
 800473c:	0852      	lsrs	r2, r2, #1
 800473e:	3a01      	subs	r2, #1
 8004740:	0552      	lsls	r2, r2, #21
 8004742:	430a      	orrs	r2, r1
 8004744:	491f      	ldr	r1, [pc, #124]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]
 800474a:	e011      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6892      	ldr	r2, [r2, #8]
 800475c:	0211      	lsls	r1, r2, #8
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6952      	ldr	r2, [r2, #20]
 8004762:	0852      	lsrs	r2, r2, #1
 8004764:	3a01      	subs	r2, #1
 8004766:	0652      	lsls	r2, r2, #25
 8004768:	430a      	orrs	r2, r1
 800476a:	4916      	ldr	r1, [pc, #88]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800477a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fc ff5c 	bl	8001638 <HAL_GetTick>
 8004780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004782:	e009      	b.n	8004798 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004784:	f7fc ff58 	bl	8001638 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	73fb      	strb	r3, [r7, #15]
          break;
 8004796:	e005      	b.n	80047a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	4904      	ldr	r1, [pc, #16]	; (80047c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000

080047c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047d6:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d018      	beq.n	8004814 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0203 	and.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d10d      	bne.n	800480e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
       ||
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047fa:	4b61      	ldr	r3, [pc, #388]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
       ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d047      	beq.n	800489e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
 8004812:	e044      	b.n	800489e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d018      	beq.n	800484e <RCCEx_PLLSAI2_Config+0x86>
 800481c:	2b03      	cmp	r3, #3
 800481e:	d825      	bhi.n	800486c <RCCEx_PLLSAI2_Config+0xa4>
 8004820:	2b01      	cmp	r3, #1
 8004822:	d002      	beq.n	800482a <RCCEx_PLLSAI2_Config+0x62>
 8004824:	2b02      	cmp	r3, #2
 8004826:	d009      	beq.n	800483c <RCCEx_PLLSAI2_Config+0x74>
 8004828:	e020      	b.n	800486c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800482a:	4b55      	ldr	r3, [pc, #340]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11d      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483a:	e01a      	b.n	8004872 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800483c:	4b50      	ldr	r3, [pc, #320]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004844:	2b00      	cmp	r3, #0
 8004846:	d116      	bne.n	8004876 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484c:	e013      	b.n	8004876 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800484e:	4b4c      	ldr	r3, [pc, #304]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800485a:	4b49      	ldr	r3, [pc, #292]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800486a:	e006      	b.n	800487a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      break;
 8004870:	e004      	b.n	800487c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004872:	bf00      	nop
 8004874:	e002      	b.n	800487c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004876:	bf00      	nop
 8004878:	e000      	b.n	800487c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800487a:	bf00      	nop
    }

    if(status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10d      	bne.n	800489e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004882:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	430b      	orrs	r3, r1
 8004898:	4939      	ldr	r1, [pc, #228]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d167      	bne.n	8004974 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048a4:	4b36      	ldr	r3, [pc, #216]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a35      	ldr	r2, [pc, #212]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fc fec2 	bl	8001638 <HAL_GetTick>
 80048b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048b6:	e009      	b.n	80048cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048b8:	f7fc febe 	bl	8001638 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d902      	bls.n	80048cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ca:	e005      	b.n	80048d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ef      	bne.n	80048b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d14a      	bne.n	8004974 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d111      	bne.n	8004908 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048e4:	4b26      	ldr	r3, [pc, #152]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	0211      	lsls	r1, r2, #8
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68d2      	ldr	r2, [r2, #12]
 80048fa:	0912      	lsrs	r2, r2, #4
 80048fc:	0452      	lsls	r2, r2, #17
 80048fe:	430a      	orrs	r2, r1
 8004900:	491f      	ldr	r1, [pc, #124]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	614b      	str	r3, [r1, #20]
 8004906:	e011      	b.n	800492c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004910:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	0211      	lsls	r1, r2, #8
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6912      	ldr	r2, [r2, #16]
 800491e:	0852      	lsrs	r2, r2, #1
 8004920:	3a01      	subs	r2, #1
 8004922:	0652      	lsls	r2, r2, #25
 8004924:	430a      	orrs	r2, r1
 8004926:	4916      	ldr	r1, [pc, #88]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a13      	ldr	r2, [pc, #76]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fc fe7e 	bl	8001638 <HAL_GetTick>
 800493c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800493e:	e009      	b.n	8004954 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004940:	f7fc fe7a 	bl	8001638 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d902      	bls.n	8004954 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	73fb      	strb	r3, [r7, #15]
          break;
 8004952:	e005      	b.n	8004960 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0ef      	beq.n	8004940 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	4904      	ldr	r1, [pc, #16]	; (8004980 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004970:	4313      	orrs	r3, r2
 8004972:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d06c      	beq.n	8004a70 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc f8a8 	bl	8000b00 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	22ca      	movs	r2, #202	; 0xca
 80049be:	625a      	str	r2, [r3, #36]	; 0x24
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2253      	movs	r2, #83	; 0x53
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fa49 	bl	8004e60 <RTC_EnterInitMode>
 80049ce:	4603      	mov	r3, r0
 80049d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d14b      	bne.n	8004a70 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ea:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6919      	ldr	r1, [r3, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	041a      	lsls	r2, r3, #16
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fa4d 	bl	8004ec8 <RTC_ExitInitMode>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11b      	bne.n	8004a70 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0203 	bic.w	r2, r2, #3
 8004a46:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	22ff      	movs	r2, #255	; 0xff
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a7a:	b590      	push	{r4, r7, lr}
 8004a7c:	b087      	sub	sp, #28
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_RTC_SetTime+0x1a>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e08b      	b.n	8004bac <HAL_RTC_SetTime+0x132>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	22ca      	movs	r2, #202	; 0xca
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2253      	movs	r2, #83	; 0x53
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f9d3 	bl	8004e60 <RTC_EnterInitMode>
 8004aba:	4603      	mov	r3, r0
 8004abc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d163      	bne.n	8004b8c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d126      	bne.n	8004b18 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa2e 	bl	8004f44 <RTC_ByteToBcd2>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fa27 	bl	8004f44 <RTC_ByteToBcd2>
 8004af6:	4603      	mov	r3, r0
 8004af8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004afa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	789b      	ldrb	r3, [r3, #2]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fa1f 	bl	8004f44 <RTC_ByteToBcd2>
 8004b06:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b08:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	78db      	ldrb	r3, [r3, #3]
 8004b10:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e018      	b.n	8004b4a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b38:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b3e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	78db      	ldrb	r3, [r3, #3]
 8004b44:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b58:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6899      	ldr	r1, [r3, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f9a0 	bl	8004ec8 <RTC_ExitInitMode>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	22ff      	movs	r2, #255	; 0xff
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004be2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004be6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	0d9b      	lsrs	r3, r3, #22
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11a      	bne.n	8004c62 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f9a7 	bl	8004f84 <RTC_Bcd2ToByte>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f99e 	bl	8004f84 <RTC_Bcd2ToByte>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	789b      	ldrb	r3, [r3, #2]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f995 	bl	8004f84 <RTC_Bcd2ToByte>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_RTC_SetDate+0x1a>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e075      	b.n	8004d72 <HAL_RTC_SetDate+0x106>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10e      	bne.n	8004cba <HAL_RTC_SetDate+0x4e>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	f023 0310 	bic.w	r3, r3, #16
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	330a      	adds	r3, #10
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11c      	bne.n	8004cfa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	78db      	ldrb	r3, [r3, #3]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f93d 	bl	8004f44 <RTC_ByteToBcd2>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f936 	bl	8004f44 <RTC_ByteToBcd2>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004cdc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	789b      	ldrb	r3, [r3, #2]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f92e 	bl	8004f44 <RTC_ByteToBcd2>
 8004ce8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e00e      	b.n	8004d18 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	78db      	ldrb	r3, [r3, #3]
 8004cfe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	785b      	ldrb	r3, [r3, #1]
 8004d04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004d06:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004d0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	22ca      	movs	r2, #202	; 0xca
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2253      	movs	r2, #83	; 0x53
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f899 	bl	8004e60 <RTC_EnterInitMode>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10c      	bne.n	8004d52 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d46:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f8bd 	bl	8004ec8 <RTC_ExitInitMode>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004d5a:	7cfb      	ldrb	r3, [r7, #19]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd90      	pop	{r4, r7, pc}

08004d7a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d94:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	0b5b      	lsrs	r3, r3, #13
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11a      	bne.n	8004e0a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f8d3 	bl	8004f84 <RTC_Bcd2ToByte>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f8ca 	bl	8004f84 <RTC_Bcd2ToByte>
 8004df0:	4603      	mov	r3, r0
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	789b      	ldrb	r3, [r3, #2]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f8c1 	bl	8004f84 <RTC_Bcd2ToByte>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e2a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004e2c:	f7fc fc04 	bl	8001638 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e32:	e009      	b.n	8004e48 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e34:	f7fc fc00 	bl	8001638 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e42:	d901      	bls.n	8004e48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e007      	b.n	8004e58 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d120      	bne.n	8004ebc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e84:	f7fc fbd8 	bl	8001638 <HAL_GetTick>
 8004e88:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e8a:	e00d      	b.n	8004ea8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e8c:	f7fc fbd4 	bl	8001638 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9a:	d905      	bls.n	8004ea8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <RTC_EnterInitMode+0x5c>
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d1e7      	bne.n	8004e8c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <RTC_ExitInitMode+0x78>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <RTC_ExitInitMode+0x78>)
 8004eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ede:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <RTC_ExitInitMode+0x78>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff91 	bl	8004e14 <HAL_RTC_WaitForSynchro>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01e      	beq.n	8004f36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2203      	movs	r2, #3
 8004efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e017      	b.n	8004f36 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <RTC_ExitInitMode+0x78>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4a0d      	ldr	r2, [pc, #52]	; (8004f40 <RTC_ExitInitMode+0x78>)
 8004f0c:	f023 0320 	bic.w	r3, r3, #32
 8004f10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff7e 	bl	8004e14 <HAL_RTC_WaitForSynchro>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2203      	movs	r2, #3
 8004f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <RTC_ExitInitMode+0x78>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <RTC_ExitInitMode+0x78>)
 8004f30:	f043 0320 	orr.w	r3, r3, #32
 8004f34:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40002800 	.word	0x40002800

08004f44 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004f56:	e005      	b.n	8004f64 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	3b0a      	subs	r3, #10
 8004f62:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004f64:	7afb      	ldrb	r3, [r7, #11]
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	d8f6      	bhi.n	8004f58 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	7afb      	ldrb	r3, [r7, #11]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	b2db      	uxtb	r3, r3
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	4413      	add	r3, r2
 8004faa:	b2db      	uxtb	r3, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e095      	b.n	80050f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d108      	bne.n	8004fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fda:	d009      	beq.n	8004ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	61da      	str	r2, [r3, #28]
 8004fe2:	e005      	b.n	8004ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fb fe70 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005026:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005030:	d902      	bls.n	8005038 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e002      	b.n	800503e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800503c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005046:	d007      	beq.n	8005058 <HAL_SPI_Init+0xa0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005050:	d002      	beq.n	8005058 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	ea42 0103 	orr.w	r1, r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	0c1b      	lsrs	r3, r3, #16
 80050b4:	f003 0204 	and.w	r2, r3, #4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050d4:	ea42 0103 	orr.w	r1, r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b088      	sub	sp, #32
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_SPI_Transmit+0x22>
 800511c:	2302      	movs	r3, #2
 800511e:	e158      	b.n	80053d2 <HAL_SPI_Transmit+0x2d4>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005128:	f7fc fa86 	bl	8001638 <HAL_GetTick>
 800512c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800513e:	2302      	movs	r3, #2
 8005140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005142:	e13d      	b.n	80053c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_SPI_Transmit+0x52>
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005154:	e134      	b.n	80053c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2203      	movs	r2, #3
 800515a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a0:	d10f      	bne.n	80051c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d007      	beq.n	80051e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051e8:	d94b      	bls.n	8005282 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_Transmit+0xfa>
 80051f2:	8afb      	ldrh	r3, [r7, #22]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d13e      	bne.n	8005276 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800521c:	e02b      	b.n	8005276 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b02      	cmp	r3, #2
 800522a:	d112      	bne.n	8005252 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	1c9a      	adds	r2, r3, #2
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005250:	e011      	b.n	8005276 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005252:	f7fc f9f1 	bl	8001638 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d803      	bhi.n	800526a <HAL_SPI_Transmit+0x16c>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005268:	d102      	bne.n	8005270 <HAL_SPI_Transmit+0x172>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005274:	e0a4      	b.n	80053c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ce      	bne.n	800521e <HAL_SPI_Transmit+0x120>
 8005280:	e07c      	b.n	800537c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_SPI_Transmit+0x192>
 800528a:	8afb      	ldrh	r3, [r7, #22]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d170      	bne.n	8005372 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b01      	cmp	r3, #1
 8005298:	d912      	bls.n	80052c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	881a      	ldrh	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	1c9a      	adds	r2, r3, #2
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b02      	subs	r3, #2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052be:	e058      	b.n	8005372 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80052e6:	e044      	b.n	8005372 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d12b      	bne.n	800534e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d912      	bls.n	8005326 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	1c9a      	adds	r2, r3, #2
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b02      	subs	r3, #2
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005324:	e025      	b.n	8005372 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	7812      	ldrb	r2, [r2, #0]
 8005332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800534c:	e011      	b.n	8005372 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534e:	f7fc f973 	bl	8001638 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d803      	bhi.n	8005366 <HAL_SPI_Transmit+0x268>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005364:	d102      	bne.n	800536c <HAL_SPI_Transmit+0x26e>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005370:	e026      	b.n	80053c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1b5      	bne.n	80052e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f949 	bl	8005618 <SPI_EndRxTxTransaction>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e000      	b.n	80053c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80053be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053ec:	f7fc f924 	bl	8001638 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	4413      	add	r3, r2
 80053fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053fc:	f7fc f91c 	bl	8001638 <HAL_GetTick>
 8005400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	015b      	lsls	r3, r3, #5
 8005408:	0d1b      	lsrs	r3, r3, #20
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	fb02 f303 	mul.w	r3, r2, r3
 8005410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005412:	e054      	b.n	80054be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800541a:	d050      	beq.n	80054be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800541c:	f7fc f90c 	bl	8001638 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	429a      	cmp	r2, r3
 800542a:	d902      	bls.n	8005432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d13d      	bne.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544a:	d111      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005454:	d004      	beq.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d107      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005478:	d10f      	bne.n	800549a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e017      	b.n	80054de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d19b      	bne.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000010 	.word	0x20000010

080054ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054fe:	f7fc f89b 	bl	8001638 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	4413      	add	r3, r2
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800550e:	f7fc f893 	bl	8001638 <HAL_GetTick>
 8005512:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800551c:	4b3d      	ldr	r3, [pc, #244]	; (8005614 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	00da      	lsls	r2, r3, #3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	0d1b      	lsrs	r3, r3, #20
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005534:	e060      	b.n	80055f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800553c:	d107      	bne.n	800554e <SPI_WaitFifoStateUntilTimeout+0x62>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800554c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005554:	d050      	beq.n	80055f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005556:	f7fc f86f 	bl	8001638 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005562:	429a      	cmp	r2, r3
 8005564:	d902      	bls.n	800556c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d13d      	bne.n	80055e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800557a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005584:	d111      	bne.n	80055aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558e:	d004      	beq.n	800559a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005598:	d107      	bne.n	80055aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b2:	d10f      	bne.n	80055d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e010      	b.n	800560a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4013      	ands	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d196      	bne.n	8005536 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3728      	adds	r7, #40	; 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000010 	.word	0x20000010

08005618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff ff5b 	bl	80054ec <SPI_WaitFifoStateUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e027      	b.n	800569c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	2180      	movs	r1, #128	; 0x80
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff fec0 	bl	80053dc <SPI_WaitFlagStateUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e014      	b.n	800569c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2200      	movs	r2, #0
 800567a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff ff34 	bl	80054ec <SPI_WaitFifoStateUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e000      	b.n	800569c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e049      	b.n	800574a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f841 	bl	8005752 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f000 f9f8 	bl	8005ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e04f      	b.n	8005820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <HAL_TIM_Base_Start_IT+0xc4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01d      	beq.n	80057de <HAL_TIM_Base_Start_IT+0x76>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d018      	beq.n	80057de <HAL_TIM_Base_Start_IT+0x76>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <HAL_TIM_Base_Start_IT+0xc8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_TIM_Base_Start_IT+0x76>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <HAL_TIM_Base_Start_IT+0xcc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_TIM_Base_Start_IT+0x76>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <HAL_TIM_Base_Start_IT+0xd0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_TIM_Base_Start_IT+0x76>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1b      	ldr	r2, [pc, #108]	; (800583c <HAL_TIM_Base_Start_IT+0xd4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_TIM_Base_Start_IT+0x76>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a19      	ldr	r2, [pc, #100]	; (8005840 <HAL_TIM_Base_Start_IT+0xd8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d115      	bne.n	800580a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	4b17      	ldr	r3, [pc, #92]	; (8005844 <HAL_TIM_Base_Start_IT+0xdc>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b06      	cmp	r3, #6
 80057ee:	d015      	beq.n	800581c <HAL_TIM_Base_Start_IT+0xb4>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f6:	d011      	beq.n	800581c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	e008      	b.n	800581c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e000      	b.n	800581e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40012c00 	.word	0x40012c00
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800
 8005838:	40000c00 	.word	0x40000c00
 800583c:	40013400 	.word	0x40013400
 8005840:	40014000 	.word	0x40014000
 8005844:	00010007 	.word	0x00010007

08005848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d122      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d11b      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0202 	mvn.w	r2, #2
 8005874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f905 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f8f7 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f908 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0204 	mvn.w	r2, #4
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8db 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8cd 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8de 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b08      	cmp	r3, #8
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0208 	mvn.w	r2, #8
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8b1 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f8a3 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8b4 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0210 	mvn.w	r2, #16
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2208      	movs	r2, #8
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f887 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f879 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f88a 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb f826 	bl	8000a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f914 	bl	8005c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a06:	d10e      	bne.n	8005a26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d107      	bne.n	8005a26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f907 	bl	8005c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d10e      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d107      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f838 	bl	8005ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d10e      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d107      	bne.n	8005a7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f06f 0220 	mvn.w	r2, #32
 8005a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f8c7 	bl	8005c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a40      	ldr	r2, [pc, #256]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d00f      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3d      	ldr	r2, [pc, #244]	; (8005bf0 <TIM_Base_SetConfig+0x118>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3c      	ldr	r2, [pc, #240]	; (8005bf4 <TIM_Base_SetConfig+0x11c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3b      	ldr	r2, [pc, #236]	; (8005bf8 <TIM_Base_SetConfig+0x120>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3a      	ldr	r2, [pc, #232]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01f      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d01b      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <TIM_Base_SetConfig+0x118>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d017      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <TIM_Base_SetConfig+0x11c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <TIM_Base_SetConfig+0x120>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <TIM_Base_SetConfig+0x128>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <TIM_Base_SetConfig+0x130>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a10      	ldr	r2, [pc, #64]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00f      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a12      	ldr	r2, [pc, #72]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00b      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <TIM_Base_SetConfig+0x128>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <TIM_Base_SetConfig+0x130>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d103      	bne.n	8005bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	615a      	str	r2, [r3, #20]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40000c00 	.word	0x40000c00
 8005bfc:	40013400 	.word	0x40013400
 8005c00:	40014000 	.word	0x40014000
 8005c04:	40014400 	.word	0x40014400
 8005c08:	40014800 	.word	0x40014800

08005c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e040      	b.n	8005cdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fb fb7e 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2224      	movs	r2, #36	; 0x24
 8005c74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fbe8 	bl	800645c <UART_SetConfig>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e022      	b.n	8005cdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fe66 	bl	8006970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 feed 	bl	8006ab4 <UART_CheckIdleState>
 8005cda:	4603      	mov	r3, r0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b08b      	sub	sp, #44	; 0x2c
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d156      	bne.n	8005da8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_UART_Transmit_IT+0x22>
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e04f      	b.n	8005daa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_UART_Transmit_IT+0x34>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e048      	b.n	8005daa <HAL_UART_Transmit_IT+0xc6>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	88fa      	ldrh	r2, [r7, #6]
 8005d2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	88fa      	ldrh	r2, [r7, #6]
 8005d32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2221      	movs	r2, #33	; 0x21
 8005d48:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d107      	bne.n	8005d64 <HAL_UART_Transmit_IT+0x80>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d103      	bne.n	8005d64 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <HAL_UART_Transmit_IT+0xd4>)
 8005d60:	669a      	str	r2, [r3, #104]	; 0x68
 8005d62:	e002      	b.n	8005d6a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a15      	ldr	r2, [pc, #84]	; (8005dbc <HAL_UART_Transmit_IT+0xd8>)
 8005d68:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	69f9      	ldr	r1, [r7, #28]
 8005d96:	6a3a      	ldr	r2, [r7, #32]
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e6      	bne.n	8005d72 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	372c      	adds	r7, #44	; 0x2c
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	0800700f 	.word	0x0800700f
 8005dbc:	08006f57 	.word	0x08006f57

08005dc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d142      	bne.n	8005e5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_UART_Receive_IT+0x22>
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e03b      	b.n	8005e5e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_UART_Receive_IT+0x34>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e034      	b.n	8005e5e <HAL_UART_Receive_IT+0x9e>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <HAL_UART_Receive_IT+0xa8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d01f      	beq.n	8005e4c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	613b      	str	r3, [r7, #16]
   return(result);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	69f9      	ldr	r1, [r7, #28]
 8005e3e:	6a3a      	ldr	r2, [r7, #32]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 ff3c 	bl	8006cd0 <UART_Start_Receive_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40008000 	.word	0x40008000

08005e6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b0ba      	sub	sp, #232	; 0xe8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e96:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d115      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00f      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 82a6 	beq.w	8006416 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
      }
      return;
 8005ed2:	e2a0      	b.n	8006416 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8117 	beq.w	800610c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005eea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005eee:	4b85      	ldr	r3, [pc, #532]	; (8006104 <HAL_UART_IRQHandler+0x298>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 810a 	beq.w	800610c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d011      	beq.n	8005f28 <HAL_UART_IRQHandler+0xbc>
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2201      	movs	r2, #1
 8005f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d011      	beq.n	8005f58 <HAL_UART_IRQHandler+0xec>
 8005f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2202      	movs	r2, #2
 8005f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f4e:	f043 0204 	orr.w	r2, r3, #4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d011      	beq.n	8005f88 <HAL_UART_IRQHandler+0x11c>
 8005f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2204      	movs	r2, #4
 8005f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7e:	f043 0202 	orr.w	r2, r3, #2
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d105      	bne.n	8005fac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fba:	f043 0208 	orr.w	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d012      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x18a>
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 820c 	beq.w	800641a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800600e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006030:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d005      	beq.n	800604e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006046:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800604a:	2b00      	cmp	r3, #0
 800604c:	d04f      	beq.n	80060ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 ff08 	bl	8006e64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d141      	bne.n	80060e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800607c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3308      	adds	r3, #8
 800608a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800608e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800609a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1d9      	bne.n	8006062 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d013      	beq.n	80060de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a13      	ldr	r2, [pc, #76]	; (8006108 <HAL_UART_IRQHandler+0x29c>)
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fc ff1c 	bl	8002f00 <HAL_DMA_Abort_IT>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d017      	beq.n	80060fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	e00f      	b.n	80060fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f9a6 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	e00b      	b.n	80060fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9a2 	bl	8006430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	e007      	b.n	80060fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f99e 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80060fc:	e18d      	b.n	800641a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fe:	bf00      	nop
    return;
 8006100:	e18b      	b.n	800641a <HAL_UART_IRQHandler+0x5ae>
 8006102:	bf00      	nop
 8006104:	04000120 	.word	0x04000120
 8006108:	08006f2b 	.word	0x08006f2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 8146 	bne.w	80063a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0310 	and.w	r3, r3, #16
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 813f 	beq.w	80063a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8138 	beq.w	80063a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2210      	movs	r2, #16
 8006138:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	f040 80b4 	bne.w	80062b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006156:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 815f 	beq.w	800641e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800616a:	429a      	cmp	r2, r3
 800616c:	f080 8157 	bcs.w	800641e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 8085 	bne.w	8006296 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1da      	bne.n	800618c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3308      	adds	r3, #8
 80061dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3308      	adds	r3, #8
 80061f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800620c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e1      	bne.n	80061d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3308      	adds	r3, #8
 8006218:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800623c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e3      	bne.n	8006212 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006266:	f023 0310 	bic.w	r3, r3, #16
 800626a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006278:	65bb      	str	r3, [r7, #88]	; 0x58
 800627a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800627e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e4      	bne.n	8006256 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	4618      	mov	r0, r3
 8006292:	f7fc fdf7 	bl	8002e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8ca 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062b0:	e0b5      	b.n	800641e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80a7 	beq.w	8006422 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80062d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80a2 	beq.w	8006422 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006300:	647b      	str	r3, [r7, #68]	; 0x44
 8006302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e4      	bne.n	80062de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	623b      	str	r3, [r7, #32]
   return(result);
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006338:	633a      	str	r2, [r7, #48]	; 0x30
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800633e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e3      	bne.n	8006314 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60fb      	str	r3, [r7, #12]
   return(result);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0310 	bic.w	r3, r3, #16
 8006372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	617b      	str	r3, [r7, #20]
   return(result);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e4      	bne.n	800635e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f852 	bl	8006444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063a0:	e03f      	b.n	8006422 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00e      	beq.n	80063cc <HAL_UART_IRQHandler+0x560>
 80063ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 f80c 	bl	80073e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ca:	e02d      	b.n	8006428 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00e      	beq.n	80063f6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01c      	beq.n	8006426 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
    }
    return;
 80063f4:	e017      	b.n	8006426 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d012      	beq.n	8006428 <HAL_UART_IRQHandler+0x5bc>
 8006402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fe5d 	bl	80070ce <UART_EndTransmit_IT>
    return;
 8006414:	e008      	b.n	8006428 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006416:	bf00      	nop
 8006418:	e006      	b.n	8006428 <HAL_UART_IRQHandler+0x5bc>
    return;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <HAL_UART_IRQHandler+0x5bc>
      return;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006426:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006428:	37e8      	adds	r7, #232	; 0xe8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop

08006430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800645c:	b5b0      	push	{r4, r5, r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	4313      	orrs	r3, r2
 800647e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4bad      	ldr	r3, [pc, #692]	; (800673c <UART_SetConfig+0x2e0>)
 8006488:	4013      	ands	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	69f9      	ldr	r1, [r7, #28]
 8006490:	430b      	orrs	r3, r1
 8006492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4aa2      	ldr	r2, [pc, #648]	; (8006740 <UART_SetConfig+0x2e4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d004      	beq.n	80064c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	69fa      	ldr	r2, [r7, #28]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a99      	ldr	r2, [pc, #612]	; (8006744 <UART_SetConfig+0x2e8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d121      	bne.n	8006526 <UART_SetConfig+0xca>
 80064e2:	4b99      	ldr	r3, [pc, #612]	; (8006748 <UART_SetConfig+0x2ec>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d817      	bhi.n	8006520 <UART_SetConfig+0xc4>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <UART_SetConfig+0x9c>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006509 	.word	0x08006509
 80064fc:	08006515 	.word	0x08006515
 8006500:	0800650f 	.word	0x0800650f
 8006504:	0800651b 	.word	0x0800651b
 8006508:	2301      	movs	r3, #1
 800650a:	76fb      	strb	r3, [r7, #27]
 800650c:	e0e7      	b.n	80066de <UART_SetConfig+0x282>
 800650e:	2302      	movs	r3, #2
 8006510:	76fb      	strb	r3, [r7, #27]
 8006512:	e0e4      	b.n	80066de <UART_SetConfig+0x282>
 8006514:	2304      	movs	r3, #4
 8006516:	76fb      	strb	r3, [r7, #27]
 8006518:	e0e1      	b.n	80066de <UART_SetConfig+0x282>
 800651a:	2308      	movs	r3, #8
 800651c:	76fb      	strb	r3, [r7, #27]
 800651e:	e0de      	b.n	80066de <UART_SetConfig+0x282>
 8006520:	2310      	movs	r3, #16
 8006522:	76fb      	strb	r3, [r7, #27]
 8006524:	e0db      	b.n	80066de <UART_SetConfig+0x282>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a88      	ldr	r2, [pc, #544]	; (800674c <UART_SetConfig+0x2f0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d132      	bne.n	8006596 <UART_SetConfig+0x13a>
 8006530:	4b85      	ldr	r3, [pc, #532]	; (8006748 <UART_SetConfig+0x2ec>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b0c      	cmp	r3, #12
 800653c:	d828      	bhi.n	8006590 <UART_SetConfig+0x134>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0xe8>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006579 	.word	0x08006579
 8006548:	08006591 	.word	0x08006591
 800654c:	08006591 	.word	0x08006591
 8006550:	08006591 	.word	0x08006591
 8006554:	08006585 	.word	0x08006585
 8006558:	08006591 	.word	0x08006591
 800655c:	08006591 	.word	0x08006591
 8006560:	08006591 	.word	0x08006591
 8006564:	0800657f 	.word	0x0800657f
 8006568:	08006591 	.word	0x08006591
 800656c:	08006591 	.word	0x08006591
 8006570:	08006591 	.word	0x08006591
 8006574:	0800658b 	.word	0x0800658b
 8006578:	2300      	movs	r3, #0
 800657a:	76fb      	strb	r3, [r7, #27]
 800657c:	e0af      	b.n	80066de <UART_SetConfig+0x282>
 800657e:	2302      	movs	r3, #2
 8006580:	76fb      	strb	r3, [r7, #27]
 8006582:	e0ac      	b.n	80066de <UART_SetConfig+0x282>
 8006584:	2304      	movs	r3, #4
 8006586:	76fb      	strb	r3, [r7, #27]
 8006588:	e0a9      	b.n	80066de <UART_SetConfig+0x282>
 800658a:	2308      	movs	r3, #8
 800658c:	76fb      	strb	r3, [r7, #27]
 800658e:	e0a6      	b.n	80066de <UART_SetConfig+0x282>
 8006590:	2310      	movs	r3, #16
 8006592:	76fb      	strb	r3, [r7, #27]
 8006594:	e0a3      	b.n	80066de <UART_SetConfig+0x282>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6d      	ldr	r2, [pc, #436]	; (8006750 <UART_SetConfig+0x2f4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d120      	bne.n	80065e2 <UART_SetConfig+0x186>
 80065a0:	4b69      	ldr	r3, [pc, #420]	; (8006748 <UART_SetConfig+0x2ec>)
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065aa:	2b30      	cmp	r3, #48	; 0x30
 80065ac:	d013      	beq.n	80065d6 <UART_SetConfig+0x17a>
 80065ae:	2b30      	cmp	r3, #48	; 0x30
 80065b0:	d814      	bhi.n	80065dc <UART_SetConfig+0x180>
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d009      	beq.n	80065ca <UART_SetConfig+0x16e>
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d810      	bhi.n	80065dc <UART_SetConfig+0x180>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <UART_SetConfig+0x168>
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d006      	beq.n	80065d0 <UART_SetConfig+0x174>
 80065c2:	e00b      	b.n	80065dc <UART_SetConfig+0x180>
 80065c4:	2300      	movs	r3, #0
 80065c6:	76fb      	strb	r3, [r7, #27]
 80065c8:	e089      	b.n	80066de <UART_SetConfig+0x282>
 80065ca:	2302      	movs	r3, #2
 80065cc:	76fb      	strb	r3, [r7, #27]
 80065ce:	e086      	b.n	80066de <UART_SetConfig+0x282>
 80065d0:	2304      	movs	r3, #4
 80065d2:	76fb      	strb	r3, [r7, #27]
 80065d4:	e083      	b.n	80066de <UART_SetConfig+0x282>
 80065d6:	2308      	movs	r3, #8
 80065d8:	76fb      	strb	r3, [r7, #27]
 80065da:	e080      	b.n	80066de <UART_SetConfig+0x282>
 80065dc:	2310      	movs	r3, #16
 80065de:	76fb      	strb	r3, [r7, #27]
 80065e0:	e07d      	b.n	80066de <UART_SetConfig+0x282>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a5b      	ldr	r2, [pc, #364]	; (8006754 <UART_SetConfig+0x2f8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d120      	bne.n	800662e <UART_SetConfig+0x1d2>
 80065ec:	4b56      	ldr	r3, [pc, #344]	; (8006748 <UART_SetConfig+0x2ec>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065f6:	2bc0      	cmp	r3, #192	; 0xc0
 80065f8:	d013      	beq.n	8006622 <UART_SetConfig+0x1c6>
 80065fa:	2bc0      	cmp	r3, #192	; 0xc0
 80065fc:	d814      	bhi.n	8006628 <UART_SetConfig+0x1cc>
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d009      	beq.n	8006616 <UART_SetConfig+0x1ba>
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d810      	bhi.n	8006628 <UART_SetConfig+0x1cc>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <UART_SetConfig+0x1b4>
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d006      	beq.n	800661c <UART_SetConfig+0x1c0>
 800660e:	e00b      	b.n	8006628 <UART_SetConfig+0x1cc>
 8006610:	2300      	movs	r3, #0
 8006612:	76fb      	strb	r3, [r7, #27]
 8006614:	e063      	b.n	80066de <UART_SetConfig+0x282>
 8006616:	2302      	movs	r3, #2
 8006618:	76fb      	strb	r3, [r7, #27]
 800661a:	e060      	b.n	80066de <UART_SetConfig+0x282>
 800661c:	2304      	movs	r3, #4
 800661e:	76fb      	strb	r3, [r7, #27]
 8006620:	e05d      	b.n	80066de <UART_SetConfig+0x282>
 8006622:	2308      	movs	r3, #8
 8006624:	76fb      	strb	r3, [r7, #27]
 8006626:	e05a      	b.n	80066de <UART_SetConfig+0x282>
 8006628:	2310      	movs	r3, #16
 800662a:	76fb      	strb	r3, [r7, #27]
 800662c:	e057      	b.n	80066de <UART_SetConfig+0x282>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a49      	ldr	r2, [pc, #292]	; (8006758 <UART_SetConfig+0x2fc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d125      	bne.n	8006684 <UART_SetConfig+0x228>
 8006638:	4b43      	ldr	r3, [pc, #268]	; (8006748 <UART_SetConfig+0x2ec>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006646:	d017      	beq.n	8006678 <UART_SetConfig+0x21c>
 8006648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664c:	d817      	bhi.n	800667e <UART_SetConfig+0x222>
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	d00b      	beq.n	800666c <UART_SetConfig+0x210>
 8006654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006658:	d811      	bhi.n	800667e <UART_SetConfig+0x222>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <UART_SetConfig+0x20a>
 800665e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006662:	d006      	beq.n	8006672 <UART_SetConfig+0x216>
 8006664:	e00b      	b.n	800667e <UART_SetConfig+0x222>
 8006666:	2300      	movs	r3, #0
 8006668:	76fb      	strb	r3, [r7, #27]
 800666a:	e038      	b.n	80066de <UART_SetConfig+0x282>
 800666c:	2302      	movs	r3, #2
 800666e:	76fb      	strb	r3, [r7, #27]
 8006670:	e035      	b.n	80066de <UART_SetConfig+0x282>
 8006672:	2304      	movs	r3, #4
 8006674:	76fb      	strb	r3, [r7, #27]
 8006676:	e032      	b.n	80066de <UART_SetConfig+0x282>
 8006678:	2308      	movs	r3, #8
 800667a:	76fb      	strb	r3, [r7, #27]
 800667c:	e02f      	b.n	80066de <UART_SetConfig+0x282>
 800667e:	2310      	movs	r3, #16
 8006680:	76fb      	strb	r3, [r7, #27]
 8006682:	e02c      	b.n	80066de <UART_SetConfig+0x282>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2d      	ldr	r2, [pc, #180]	; (8006740 <UART_SetConfig+0x2e4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d125      	bne.n	80066da <UART_SetConfig+0x27e>
 800668e:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <UART_SetConfig+0x2ec>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800669c:	d017      	beq.n	80066ce <UART_SetConfig+0x272>
 800669e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a2:	d817      	bhi.n	80066d4 <UART_SetConfig+0x278>
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a8:	d00b      	beq.n	80066c2 <UART_SetConfig+0x266>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ae:	d811      	bhi.n	80066d4 <UART_SetConfig+0x278>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <UART_SetConfig+0x260>
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b8:	d006      	beq.n	80066c8 <UART_SetConfig+0x26c>
 80066ba:	e00b      	b.n	80066d4 <UART_SetConfig+0x278>
 80066bc:	2300      	movs	r3, #0
 80066be:	76fb      	strb	r3, [r7, #27]
 80066c0:	e00d      	b.n	80066de <UART_SetConfig+0x282>
 80066c2:	2302      	movs	r3, #2
 80066c4:	76fb      	strb	r3, [r7, #27]
 80066c6:	e00a      	b.n	80066de <UART_SetConfig+0x282>
 80066c8:	2304      	movs	r3, #4
 80066ca:	76fb      	strb	r3, [r7, #27]
 80066cc:	e007      	b.n	80066de <UART_SetConfig+0x282>
 80066ce:	2308      	movs	r3, #8
 80066d0:	76fb      	strb	r3, [r7, #27]
 80066d2:	e004      	b.n	80066de <UART_SetConfig+0x282>
 80066d4:	2310      	movs	r3, #16
 80066d6:	76fb      	strb	r3, [r7, #27]
 80066d8:	e001      	b.n	80066de <UART_SetConfig+0x282>
 80066da:	2310      	movs	r3, #16
 80066dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a17      	ldr	r2, [pc, #92]	; (8006740 <UART_SetConfig+0x2e4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	f040 8087 	bne.w	80067f8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066ea:	7efb      	ldrb	r3, [r7, #27]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d837      	bhi.n	8006760 <UART_SetConfig+0x304>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x29c>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800671d 	.word	0x0800671d
 80066fc:	08006761 	.word	0x08006761
 8006700:	08006725 	.word	0x08006725
 8006704:	08006761 	.word	0x08006761
 8006708:	0800672b 	.word	0x0800672b
 800670c:	08006761 	.word	0x08006761
 8006710:	08006761 	.word	0x08006761
 8006714:	08006761 	.word	0x08006761
 8006718:	08006733 	.word	0x08006733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800671c:	f7fd fbb8 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8006720:	6178      	str	r0, [r7, #20]
        break;
 8006722:	e022      	b.n	800676a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <UART_SetConfig+0x300>)
 8006726:	617b      	str	r3, [r7, #20]
        break;
 8006728:	e01f      	b.n	800676a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800672a:	f7fd fb19 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 800672e:	6178      	str	r0, [r7, #20]
        break;
 8006730:	e01b      	b.n	800676a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006736:	617b      	str	r3, [r7, #20]
        break;
 8006738:	e017      	b.n	800676a <UART_SetConfig+0x30e>
 800673a:	bf00      	nop
 800673c:	efff69f3 	.word	0xefff69f3
 8006740:	40008000 	.word	0x40008000
 8006744:	40013800 	.word	0x40013800
 8006748:	40021000 	.word	0x40021000
 800674c:	40004400 	.word	0x40004400
 8006750:	40004800 	.word	0x40004800
 8006754:	40004c00 	.word	0x40004c00
 8006758:	40005000 	.word	0x40005000
 800675c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	76bb      	strb	r3, [r7, #26]
        break;
 8006768:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80f1 	beq.w	8006954 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	4413      	add	r3, r2
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	429a      	cmp	r2, r3
 8006780:	d305      	bcc.n	800678e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	429a      	cmp	r2, r3
 800678c:	d902      	bls.n	8006794 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	76bb      	strb	r3, [r7, #26]
 8006792:	e0df      	b.n	8006954 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4618      	mov	r0, r3
 8006798:	f04f 0100 	mov.w	r1, #0
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	020b      	lsls	r3, r1, #8
 80067a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067aa:	0202      	lsls	r2, r0, #8
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	6849      	ldr	r1, [r1, #4]
 80067b0:	0849      	lsrs	r1, r1, #1
 80067b2:	4608      	mov	r0, r1
 80067b4:	f04f 0100 	mov.w	r1, #0
 80067b8:	1814      	adds	r4, r2, r0
 80067ba:	eb43 0501 	adc.w	r5, r3, r1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	4620      	mov	r0, r4
 80067ca:	4629      	mov	r1, r5
 80067cc:	f7f9 fd58 	bl	8000280 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4613      	mov	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067de:	d308      	bcc.n	80067f2 <UART_SetConfig+0x396>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e6:	d204      	bcs.n	80067f2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	60da      	str	r2, [r3, #12]
 80067f0:	e0b0      	b.n	8006954 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	76bb      	strb	r3, [r7, #26]
 80067f6:	e0ad      	b.n	8006954 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006800:	d15b      	bne.n	80068ba <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006802:	7efb      	ldrb	r3, [r7, #27]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d828      	bhi.n	800685a <UART_SetConfig+0x3fe>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x3b4>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006835 	.word	0x08006835
 8006814:	0800683d 	.word	0x0800683d
 8006818:	08006845 	.word	0x08006845
 800681c:	0800685b 	.word	0x0800685b
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800685b 	.word	0x0800685b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fd fb2c 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8006838:	6178      	str	r0, [r7, #20]
        break;
 800683a:	e013      	b.n	8006864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fd fb3e 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8006840:	6178      	str	r0, [r7, #20]
        break;
 8006842:	e00f      	b.n	8006864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b49      	ldr	r3, [pc, #292]	; (800696c <UART_SetConfig+0x510>)
 8006846:	617b      	str	r3, [r7, #20]
        break;
 8006848:	e00c      	b.n	8006864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fd fa89 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 800684e:	6178      	str	r0, [r7, #20]
        break;
 8006850:	e008      	b.n	8006864 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	617b      	str	r3, [r7, #20]
        break;
 8006858:	e004      	b.n	8006864 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	76bb      	strb	r3, [r7, #26]
        break;
 8006862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d074      	beq.n	8006954 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	005a      	lsls	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b0f      	cmp	r3, #15
 8006884:	d916      	bls.n	80068b4 <UART_SetConfig+0x458>
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688c:	d212      	bcs.n	80068b4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f023 030f 	bic.w	r3, r3, #15
 8006896:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	b29b      	uxth	r3, r3
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	89fb      	ldrh	r3, [r7, #14]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	89fa      	ldrh	r2, [r7, #14]
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	e04f      	b.n	8006954 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	76bb      	strb	r3, [r7, #26]
 80068b8:	e04c      	b.n	8006954 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ba:	7efb      	ldrb	r3, [r7, #27]
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d828      	bhi.n	8006912 <UART_SetConfig+0x4b6>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <UART_SetConfig+0x46c>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	08006913 	.word	0x08006913
 80068d8:	08006903 	.word	0x08006903
 80068dc:	08006913 	.word	0x08006913
 80068e0:	08006913 	.word	0x08006913
 80068e4:	08006913 	.word	0x08006913
 80068e8:	0800690b 	.word	0x0800690b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ec:	f7fd fad0 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 80068f0:	6178      	str	r0, [r7, #20]
        break;
 80068f2:	e013      	b.n	800691c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f4:	f7fd fae2 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 80068f8:	6178      	str	r0, [r7, #20]
        break;
 80068fa:	e00f      	b.n	800691c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068fc:	4b1b      	ldr	r3, [pc, #108]	; (800696c <UART_SetConfig+0x510>)
 80068fe:	617b      	str	r3, [r7, #20]
        break;
 8006900:	e00c      	b.n	800691c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006902:	f7fd fa2d 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8006906:	6178      	str	r0, [r7, #20]
        break;
 8006908:	e008      	b.n	800691c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690e:	617b      	str	r3, [r7, #20]
        break;
 8006910:	e004      	b.n	800691c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	76bb      	strb	r3, [r7, #26]
        break;
 800691a:	bf00      	nop
    }

    if (pclk != 0U)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d018      	beq.n	8006954 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	085a      	lsrs	r2, r3, #1
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	441a      	add	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b0f      	cmp	r3, #15
 800693a:	d909      	bls.n	8006950 <UART_SetConfig+0x4f4>
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006942:	d205      	bcs.n	8006950 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60da      	str	r2, [r3, #12]
 800694e:	e001      	b.n	8006954 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006960:	7ebb      	ldrb	r3, [r7, #26]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bdb0      	pop	{r4, r5, r7, pc}
 800696a:	bf00      	nop
 800696c:	00f42400 	.word	0x00f42400

08006970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01a      	beq.n	8006a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6e:	d10a      	bne.n	8006a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ac4:	f7fa fdb8 	bl	8001638 <HAL_GetTick>
 8006ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d10e      	bne.n	8006af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f82d 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e023      	b.n	8006b3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d10e      	bne.n	8006b22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f817 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e00d      	b.n	8006b3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b09c      	sub	sp, #112	; 0x70
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b56:	e0a5      	b.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b5e:	f000 80a1 	beq.w	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b62:	f7fa fd69 	bl	8001638 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d13e      	bne.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e6      	bne.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bca:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e5      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e067      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d04f      	beq.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c12:	d147      	bne.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e6      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f023 0301 	bic.w	r3, r3, #1
 8006c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c70:	623a      	str	r2, [r7, #32]
 8006c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	69f9      	ldr	r1, [r7, #28]
 8006c76:	6a3a      	ldr	r2, [r7, #32]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e5      	bne.n	8006c50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e010      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4013      	ands	r3, r2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	f43f af4a 	beq.w	8006b58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3770      	adds	r7, #112	; 0x70
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b097      	sub	sp, #92	; 0x5c
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	88fa      	ldrh	r2, [r7, #6]
 8006cf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d02:	d10e      	bne.n	8006d22 <UART_Start_Receive_IT+0x52>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <UART_Start_Receive_IT+0x48>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d16:	e02d      	b.n	8006d74 <UART_Start_Receive_IT+0xa4>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	22ff      	movs	r2, #255	; 0xff
 8006d1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d20:	e028      	b.n	8006d74 <UART_Start_Receive_IT+0xa4>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10d      	bne.n	8006d46 <UART_Start_Receive_IT+0x76>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <UART_Start_Receive_IT+0x6c>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	22ff      	movs	r2, #255	; 0xff
 8006d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d3a:	e01b      	b.n	8006d74 <UART_Start_Receive_IT+0xa4>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	227f      	movs	r2, #127	; 0x7f
 8006d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d44:	e016      	b.n	8006d74 <UART_Start_Receive_IT+0xa4>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4e:	d10d      	bne.n	8006d6c <UART_Start_Receive_IT+0x9c>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <UART_Start_Receive_IT+0x92>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	227f      	movs	r2, #127	; 0x7f
 8006d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d60:	e008      	b.n	8006d74 <UART_Start_Receive_IT+0xa4>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	223f      	movs	r2, #63	; 0x3f
 8006d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d6a:	e003      	b.n	8006d74 <UART_Start_Receive_IT+0xa4>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2222      	movs	r2, #34	; 0x22
 8006d80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	657b      	str	r3, [r7, #84]	; 0x54
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006da2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006da4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e5      	bne.n	8006d82 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbe:	d107      	bne.n	8006dd0 <UART_Start_Receive_IT+0x100>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d103      	bne.n	8006dd0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a24      	ldr	r2, [pc, #144]	; (8006e5c <UART_Start_Receive_IT+0x18c>)
 8006dcc:	665a      	str	r2, [r3, #100]	; 0x64
 8006dce:	e002      	b.n	8006dd6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4a23      	ldr	r2, [pc, #140]	; (8006e60 <UART_Start_Receive_IT+0x190>)
 8006dd4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d019      	beq.n	8006e1a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
 8006e06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e6      	bne.n	8006de6 <UART_Start_Receive_IT+0x116>
 8006e18:	e018      	b.n	8006e4c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	613b      	str	r3, [r7, #16]
   return(result);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f043 0320 	orr.w	r3, r3, #32
 8006e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e38:	623b      	str	r3, [r7, #32]
 8006e3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	69f9      	ldr	r1, [r7, #28]
 8006e3e:	6a3a      	ldr	r2, [r7, #32]
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e6      	bne.n	8006e1a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	375c      	adds	r7, #92	; 0x5c
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	08007283 	.word	0x08007283
 8006e60:	08007123 	.word	0x08007123

08006e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b095      	sub	sp, #84	; 0x54
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e92:	e841 2300 	strex	r3, r2, [r1]
 8006e96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1e6      	bne.n	8006e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f023 0301 	bic.w	r3, r3, #1
 8006eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3308      	adds	r3, #8
 8006ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e5      	bne.n	8006e9e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d118      	bne.n	8006f0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	647b      	str	r3, [r7, #68]	; 0x44
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6979      	ldr	r1, [r7, #20]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	613b      	str	r3, [r7, #16]
   return(result);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006f1e:	bf00      	nop
 8006f20:	3754      	adds	r7, #84	; 0x54
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff fa71 	bl	8006430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b08f      	sub	sp, #60	; 0x3c
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f62:	2b21      	cmp	r3, #33	; 0x21
 8006f64:	d14d      	bne.n	8007002 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d132      	bne.n	8006fd8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e6      	bne.n	8006f72 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6979      	ldr	r1, [r7, #20]
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e6      	bne.n	8006fa4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006fd6:	e014      	b.n	8007002 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007002:	bf00      	nop
 8007004:	373c      	adds	r7, #60	; 0x3c
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800700e:	b480      	push	{r7}
 8007010:	b091      	sub	sp, #68	; 0x44
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	2b21      	cmp	r3, #33	; 0x21
 800701c:	d151      	bne.n	80070c2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d132      	bne.n	8007090 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	623b      	str	r3, [r7, #32]
   return(result);
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	633b      	str	r3, [r7, #48]	; 0x30
 800704a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800704e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e6      	bne.n	800702a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	60fb      	str	r3, [r7, #12]
   return(result);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	69b9      	ldr	r1, [r7, #24]
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	617b      	str	r3, [r7, #20]
   return(result);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e6      	bne.n	800705c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800708e:	e018      	b.n	80070c2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007098:	881a      	ldrh	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a2:	b292      	uxth	r2, r2
 80070a4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80070c2:	bf00      	nop
 80070c4:	3744      	adds	r7, #68	; 0x44
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b088      	sub	sp, #32
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	e853 3f00 	ldrex	r3, [r3]
 80070e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6979      	ldr	r1, [r7, #20]
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	613b      	str	r3, [r7, #16]
   return(result);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e6      	bne.n	80070d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fa fa09 	bl	800152c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800711a:	bf00      	nop
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b096      	sub	sp, #88	; 0x58
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007130:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007138:	2b22      	cmp	r3, #34	; 0x22
 800713a:	f040 8094 	bne.w	8007266 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007144:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007148:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800714c:	b2d9      	uxtb	r1, r3
 800714e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007152:	b2da      	uxtb	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007158:	400a      	ands	r2, r1
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800716e:	b29b      	uxth	r3, r3
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d179      	bne.n	800727a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800719a:	653b      	str	r3, [r7, #80]	; 0x50
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a4:	647b      	str	r3, [r7, #68]	; 0x44
 80071a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e6      	bne.n	8007186 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	623b      	str	r3, [r7, #32]
   return(result);
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	f023 0301 	bic.w	r3, r3, #1
 80071ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071d8:	633a      	str	r2, [r7, #48]	; 0x30
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d12e      	bne.n	800725e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	60fb      	str	r3, [r7, #12]
   return(result);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0310 	bic.w	r3, r3, #16
 800721a:	64bb      	str	r3, [r7, #72]	; 0x48
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	69b9      	ldr	r1, [r7, #24]
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	617b      	str	r3, [r7, #20]
   return(result);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e6      	bne.n	8007206 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b10      	cmp	r3, #16
 8007244:	d103      	bne.n	800724e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2210      	movs	r2, #16
 800724c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff f8f4 	bl	8006444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800725c:	e00d      	b.n	800727a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fa f978 	bl	8001554 <HAL_UART_RxCpltCallback>
}
 8007264:	e009      	b.n	800727a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	8b1b      	ldrh	r3, [r3, #24]
 800726c:	b29a      	uxth	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0208 	orr.w	r2, r2, #8
 8007276:	b292      	uxth	r2, r2
 8007278:	831a      	strh	r2, [r3, #24]
}
 800727a:	bf00      	nop
 800727c:	3758      	adds	r7, #88	; 0x58
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b096      	sub	sp, #88	; 0x58
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007290:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007298:	2b22      	cmp	r3, #34	; 0x22
 800729a:	f040 8094 	bne.w	80073c6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80072ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80072b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072b6:	4013      	ands	r3, r2
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d179      	bne.n	80073da <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007304:	643b      	str	r3, [r7, #64]	; 0x40
 8007306:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800730a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e6      	bne.n	80072e6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	61fb      	str	r3, [r7, #28]
   return(result);
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f023 0301 	bic.w	r3, r3, #1
 800732e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800733e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e5      	bne.n	8007318 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735c:	2b01      	cmp	r3, #1
 800735e:	d12e      	bne.n	80073be <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	60bb      	str	r3, [r7, #8]
   return(result);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f023 0310 	bic.w	r3, r3, #16
 800737a:	647b      	str	r3, [r7, #68]	; 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6979      	ldr	r1, [r7, #20]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	613b      	str	r3, [r7, #16]
   return(result);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f003 0310 	and.w	r3, r3, #16
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d103      	bne.n	80073ae <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2210      	movs	r2, #16
 80073ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff f844 	bl	8006444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073bc:	e00d      	b.n	80073da <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fa f8c8 	bl	8001554 <HAL_UART_RxCpltCallback>
}
 80073c4:	e009      	b.n	80073da <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	8b1b      	ldrh	r3, [r3, #24]
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0208 	orr.w	r2, r2, #8
 80073d6:	b292      	uxth	r2, r2
 80073d8:	831a      	strh	r2, [r3, #24]
}
 80073da:	bf00      	nop
 80073dc:	3758      	adds	r7, #88	; 0x58
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <SysTick_Handler+0x1c>)
 80073fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007400:	f000 f990 	bl	8007724 <xTaskGetSchedulerState>
 8007404:	4603      	mov	r3, r0
 8007406:	2b01      	cmp	r3, #1
 8007408:	d001      	beq.n	800740e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800740a:	f000 f9f5 	bl	80077f8 <xPortSysTickHandler>
  }
}
 800740e:	bf00      	nop
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	e000e010 	.word	0xe000e010

08007418 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
}
 8007454:	bf00      	nop
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6892      	ldr	r2, [r2, #8]
 8007476:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6852      	ldr	r2, [r2, #4]
 8007480:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	429a      	cmp	r2, r3
 800748a:	d103      	bne.n	8007494 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	1e5a      	subs	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074be:	4b4f      	ldr	r3, [pc, #316]	; (80075fc <xTaskIncrementTick+0x148>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 808f 	bne.w	80075e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074c8:	4b4d      	ldr	r3, [pc, #308]	; (8007600 <xTaskIncrementTick+0x14c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074d0:	4a4b      	ldr	r2, [pc, #300]	; (8007600 <xTaskIncrementTick+0x14c>)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d120      	bne.n	800751e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80074dc:	4b49      	ldr	r3, [pc, #292]	; (8007604 <xTaskIncrementTick+0x150>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <xTaskIncrementTick+0x46>
 80074fc:	4b41      	ldr	r3, [pc, #260]	; (8007604 <xTaskIncrementTick+0x150>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	4b41      	ldr	r3, [pc, #260]	; (8007608 <xTaskIncrementTick+0x154>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a3f      	ldr	r2, [pc, #252]	; (8007604 <xTaskIncrementTick+0x150>)
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	4a3f      	ldr	r2, [pc, #252]	; (8007608 <xTaskIncrementTick+0x154>)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	4b3e      	ldr	r3, [pc, #248]	; (800760c <xTaskIncrementTick+0x158>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a3d      	ldr	r2, [pc, #244]	; (800760c <xTaskIncrementTick+0x158>)
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	f000 f8e3 	bl	80076e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800751e:	4b3c      	ldr	r3, [pc, #240]	; (8007610 <xTaskIncrementTick+0x15c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	429a      	cmp	r2, r3
 8007526:	d349      	bcc.n	80075bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007528:	4b36      	ldr	r3, [pc, #216]	; (8007604 <xTaskIncrementTick+0x150>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007532:	4b37      	ldr	r3, [pc, #220]	; (8007610 <xTaskIncrementTick+0x15c>)
 8007534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007538:	601a      	str	r2, [r3, #0]
					break;
 800753a:	e03f      	b.n	80075bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753c:	4b31      	ldr	r3, [pc, #196]	; (8007604 <xTaskIncrementTick+0x150>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	429a      	cmp	r2, r3
 8007552:	d203      	bcs.n	800755c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007554:	4a2e      	ldr	r2, [pc, #184]	; (8007610 <xTaskIncrementTick+0x15c>)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800755a:	e02f      	b.n	80075bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ff7d 	bl	8007460 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	3318      	adds	r3, #24
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff ff74 	bl	8007460 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	4b25      	ldr	r3, [pc, #148]	; (8007614 <xTaskIncrementTick+0x160>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d903      	bls.n	800758c <xTaskIncrementTick+0xd8>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	4a22      	ldr	r2, [pc, #136]	; (8007614 <xTaskIncrementTick+0x160>)
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	4613      	mov	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <xTaskIncrementTick+0x164>)
 800759a:	441a      	add	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	3304      	adds	r3, #4
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f7ff ff38 	bl	8007418 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ac:	4b1b      	ldr	r3, [pc, #108]	; (800761c <xTaskIncrementTick+0x168>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d3b8      	bcc.n	8007528 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075b6:	2301      	movs	r3, #1
 80075b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ba:	e7b5      	b.n	8007528 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075bc:	4b17      	ldr	r3, [pc, #92]	; (800761c <xTaskIncrementTick+0x168>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c2:	4915      	ldr	r1, [pc, #84]	; (8007618 <xTaskIncrementTick+0x164>)
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d901      	bls.n	80075d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075d8:	4b11      	ldr	r3, [pc, #68]	; (8007620 <xTaskIncrementTick+0x16c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e004      	b.n	80075f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075e6:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <xTaskIncrementTick+0x170>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <xTaskIncrementTick+0x170>)
 80075ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075f0:	697b      	ldr	r3, [r7, #20]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	2000052c 	.word	0x2000052c
 8007600:	20000510 	.word	0x20000510
 8007604:	20000508 	.word	0x20000508
 8007608:	2000050c 	.word	0x2000050c
 800760c:	20000524 	.word	0x20000524
 8007610:	20000528 	.word	0x20000528
 8007614:	20000514 	.word	0x20000514
 8007618:	200000a8 	.word	0x200000a8
 800761c:	200000a4 	.word	0x200000a4
 8007620:	20000520 	.word	0x20000520
 8007624:	2000051c 	.word	0x2000051c

08007628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800762e:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <vTaskSwitchContext+0xa8>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007636:	4b27      	ldr	r3, [pc, #156]	; (80076d4 <vTaskSwitchContext+0xac>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800763c:	e041      	b.n	80076c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800763e:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <vTaskSwitchContext+0xac>)
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007644:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <vTaskSwitchContext+0xb0>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e010      	b.n	800766e <vTaskSwitchContext+0x46>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <vTaskSwitchContext+0x40>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	607b      	str	r3, [r7, #4]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <vTaskSwitchContext+0x3e>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3b01      	subs	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	491b      	ldr	r1, [pc, #108]	; (80076dc <vTaskSwitchContext+0xb4>)
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	440b      	add	r3, r1
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0e4      	beq.n	800764c <vTaskSwitchContext+0x24>
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4a13      	ldr	r2, [pc, #76]	; (80076dc <vTaskSwitchContext+0xb4>)
 800768e:	4413      	add	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	605a      	str	r2, [r3, #4]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	3308      	adds	r3, #8
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d104      	bne.n	80076b2 <vTaskSwitchContext+0x8a>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	605a      	str	r2, [r3, #4]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <vTaskSwitchContext+0xb8>)
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	4a06      	ldr	r2, [pc, #24]	; (80076d8 <vTaskSwitchContext+0xb0>)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6013      	str	r3, [r2, #0]
}
 80076c2:	bf00      	nop
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	2000052c 	.word	0x2000052c
 80076d4:	20000520 	.word	0x20000520
 80076d8:	20000514 	.word	0x20000514
 80076dc:	200000a8 	.word	0x200000a8
 80076e0:	200000a4 	.word	0x200000a4

080076e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ea:	4b0c      	ldr	r3, [pc, #48]	; (800771c <prvResetNextTaskUnblockTime+0x38>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <prvResetNextTaskUnblockTime+0x3c>)
 80076f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076fc:	e008      	b.n	8007710 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <prvResetNextTaskUnblockTime+0x38>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	4a04      	ldr	r2, [pc, #16]	; (8007720 <prvResetNextTaskUnblockTime+0x3c>)
 800770e:	6013      	str	r3, [r2, #0]
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000508 	.word	0x20000508
 8007720:	20000528 	.word	0x20000528

08007724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800772a:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <xTaskGetSchedulerState+0x34>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007732:	2301      	movs	r3, #1
 8007734:	607b      	str	r3, [r7, #4]
 8007736:	e008      	b.n	800774a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007738:	4b08      	ldr	r3, [pc, #32]	; (800775c <xTaskGetSchedulerState+0x38>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007740:	2302      	movs	r3, #2
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	e001      	b.n	800774a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800774a:	687b      	ldr	r3, [r7, #4]
	}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	20000518 	.word	0x20000518
 800775c:	2000052c 	.word	0x2000052c

08007760 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <pxCurrentTCBConst2>)
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	6808      	ldr	r0, [r1, #0]
 8007766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f380 8809 	msr	PSP, r0
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8811 	msr	BASEPRI, r0
 800777a:	4770      	bx	lr
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst2>:
 8007780:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
	...

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f01e 0f10 	tst.w	lr, #16
 80077a0:	bf08      	it	eq
 80077a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077b4:	f380 8811 	msr	BASEPRI, r0
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f7ff ff32 	bl	8007628 <vTaskSwitchContext>
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f380 8811 	msr	BASEPRI, r0
 80077cc:	bc09      	pop	{r0, r3}
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	6808      	ldr	r0, [r1, #0]
 80077d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	f01e 0f10 	tst.w	lr, #16
 80077da:	bf08      	it	eq
 80077dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077e0:	f380 8809 	msr	PSP, r0
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst>:
 80077f0:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007812:	f7ff fe4f 	bl	80074b4 <xTaskIncrementTick>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <xPortSysTickHandler+0x40>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800782e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <atoi>:
 800783c:	220a      	movs	r2, #10
 800783e:	2100      	movs	r1, #0
 8007840:	f000 b95a 	b.w	8007af8 <strtol>

08007844 <__errno>:
 8007844:	4b01      	ldr	r3, [pc, #4]	; (800784c <__errno+0x8>)
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	20000020 	.word	0x20000020

08007850 <__libc_init_array>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	4d0d      	ldr	r5, [pc, #52]	; (8007888 <__libc_init_array+0x38>)
 8007854:	4c0d      	ldr	r4, [pc, #52]	; (800788c <__libc_init_array+0x3c>)
 8007856:	1b64      	subs	r4, r4, r5
 8007858:	10a4      	asrs	r4, r4, #2
 800785a:	2600      	movs	r6, #0
 800785c:	42a6      	cmp	r6, r4
 800785e:	d109      	bne.n	8007874 <__libc_init_array+0x24>
 8007860:	4d0b      	ldr	r5, [pc, #44]	; (8007890 <__libc_init_array+0x40>)
 8007862:	4c0c      	ldr	r4, [pc, #48]	; (8007894 <__libc_init_array+0x44>)
 8007864:	f001 fafa 	bl	8008e5c <_init>
 8007868:	1b64      	subs	r4, r4, r5
 800786a:	10a4      	asrs	r4, r4, #2
 800786c:	2600      	movs	r6, #0
 800786e:	42a6      	cmp	r6, r4
 8007870:	d105      	bne.n	800787e <__libc_init_array+0x2e>
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	f855 3b04 	ldr.w	r3, [r5], #4
 8007878:	4798      	blx	r3
 800787a:	3601      	adds	r6, #1
 800787c:	e7ee      	b.n	800785c <__libc_init_array+0xc>
 800787e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007882:	4798      	blx	r3
 8007884:	3601      	adds	r6, #1
 8007886:	e7f2      	b.n	800786e <__libc_init_array+0x1e>
 8007888:	08009168 	.word	0x08009168
 800788c:	08009168 	.word	0x08009168
 8007890:	08009168 	.word	0x08009168
 8007894:	0800916c 	.word	0x0800916c

08007898 <__itoa>:
 8007898:	1e93      	subs	r3, r2, #2
 800789a:	2b22      	cmp	r3, #34	; 0x22
 800789c:	b510      	push	{r4, lr}
 800789e:	460c      	mov	r4, r1
 80078a0:	d904      	bls.n	80078ac <__itoa+0x14>
 80078a2:	2300      	movs	r3, #0
 80078a4:	700b      	strb	r3, [r1, #0]
 80078a6:	461c      	mov	r4, r3
 80078a8:	4620      	mov	r0, r4
 80078aa:	bd10      	pop	{r4, pc}
 80078ac:	2a0a      	cmp	r2, #10
 80078ae:	d109      	bne.n	80078c4 <__itoa+0x2c>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	da07      	bge.n	80078c4 <__itoa+0x2c>
 80078b4:	232d      	movs	r3, #45	; 0x2d
 80078b6:	700b      	strb	r3, [r1, #0]
 80078b8:	4240      	negs	r0, r0
 80078ba:	2101      	movs	r1, #1
 80078bc:	4421      	add	r1, r4
 80078be:	f000 f925 	bl	8007b0c <__utoa>
 80078c2:	e7f1      	b.n	80078a8 <__itoa+0x10>
 80078c4:	2100      	movs	r1, #0
 80078c6:	e7f9      	b.n	80078bc <__itoa+0x24>

080078c8 <itoa>:
 80078c8:	f7ff bfe6 	b.w	8007898 <__itoa>

080078cc <memcpy>:
 80078cc:	440a      	add	r2, r1
 80078ce:	4291      	cmp	r1, r2
 80078d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078d4:	d100      	bne.n	80078d8 <memcpy+0xc>
 80078d6:	4770      	bx	lr
 80078d8:	b510      	push	{r4, lr}
 80078da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e2:	4291      	cmp	r1, r2
 80078e4:	d1f9      	bne.n	80078da <memcpy+0xe>
 80078e6:	bd10      	pop	{r4, pc}

080078e8 <memset>:
 80078e8:	4402      	add	r2, r0
 80078ea:	4603      	mov	r3, r0
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d100      	bne.n	80078f2 <memset+0xa>
 80078f0:	4770      	bx	lr
 80078f2:	f803 1b01 	strb.w	r1, [r3], #1
 80078f6:	e7f9      	b.n	80078ec <memset+0x4>

080078f8 <siprintf>:
 80078f8:	b40e      	push	{r1, r2, r3}
 80078fa:	b500      	push	{lr}
 80078fc:	b09c      	sub	sp, #112	; 0x70
 80078fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007900:	9002      	str	r0, [sp, #8]
 8007902:	9006      	str	r0, [sp, #24]
 8007904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007908:	4809      	ldr	r0, [pc, #36]	; (8007930 <siprintf+0x38>)
 800790a:	9107      	str	r1, [sp, #28]
 800790c:	9104      	str	r1, [sp, #16]
 800790e:	4909      	ldr	r1, [pc, #36]	; (8007934 <siprintf+0x3c>)
 8007910:	f853 2b04 	ldr.w	r2, [r3], #4
 8007914:	9105      	str	r1, [sp, #20]
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	a902      	add	r1, sp, #8
 800791c:	f000 fa76 	bl	8007e0c <_svfiprintf_r>
 8007920:	9b02      	ldr	r3, [sp, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	b01c      	add	sp, #112	; 0x70
 8007928:	f85d eb04 	ldr.w	lr, [sp], #4
 800792c:	b003      	add	sp, #12
 800792e:	4770      	bx	lr
 8007930:	20000020 	.word	0x20000020
 8007934:	ffff0208 	.word	0xffff0208

08007938 <strtok>:
 8007938:	4b16      	ldr	r3, [pc, #88]	; (8007994 <strtok+0x5c>)
 800793a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800793c:	681e      	ldr	r6, [r3, #0]
 800793e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007940:	4605      	mov	r5, r0
 8007942:	b9fc      	cbnz	r4, 8007984 <strtok+0x4c>
 8007944:	2050      	movs	r0, #80	; 0x50
 8007946:	9101      	str	r1, [sp, #4]
 8007948:	f000 f952 	bl	8007bf0 <malloc>
 800794c:	9901      	ldr	r1, [sp, #4]
 800794e:	65b0      	str	r0, [r6, #88]	; 0x58
 8007950:	4602      	mov	r2, r0
 8007952:	b920      	cbnz	r0, 800795e <strtok+0x26>
 8007954:	4b10      	ldr	r3, [pc, #64]	; (8007998 <strtok+0x60>)
 8007956:	4811      	ldr	r0, [pc, #68]	; (800799c <strtok+0x64>)
 8007958:	2157      	movs	r1, #87	; 0x57
 800795a:	f000 f919 	bl	8007b90 <__assert_func>
 800795e:	e9c0 4400 	strd	r4, r4, [r0]
 8007962:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007966:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800796a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800796e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007972:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007976:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800797a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800797e:	6184      	str	r4, [r0, #24]
 8007980:	7704      	strb	r4, [r0, #28]
 8007982:	6244      	str	r4, [r0, #36]	; 0x24
 8007984:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007986:	2301      	movs	r3, #1
 8007988:	4628      	mov	r0, r5
 800798a:	b002      	add	sp, #8
 800798c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007990:	f000 b806 	b.w	80079a0 <__strtok_r>
 8007994:	20000020 	.word	0x20000020
 8007998:	08008ef0 	.word	0x08008ef0
 800799c:	08008f07 	.word	0x08008f07

080079a0 <__strtok_r>:
 80079a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a2:	b908      	cbnz	r0, 80079a8 <__strtok_r+0x8>
 80079a4:	6810      	ldr	r0, [r2, #0]
 80079a6:	b188      	cbz	r0, 80079cc <__strtok_r+0x2c>
 80079a8:	4604      	mov	r4, r0
 80079aa:	4620      	mov	r0, r4
 80079ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079b0:	460f      	mov	r7, r1
 80079b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079b6:	b91e      	cbnz	r6, 80079c0 <__strtok_r+0x20>
 80079b8:	b965      	cbnz	r5, 80079d4 <__strtok_r+0x34>
 80079ba:	6015      	str	r5, [r2, #0]
 80079bc:	4628      	mov	r0, r5
 80079be:	e005      	b.n	80079cc <__strtok_r+0x2c>
 80079c0:	42b5      	cmp	r5, r6
 80079c2:	d1f6      	bne.n	80079b2 <__strtok_r+0x12>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f0      	bne.n	80079aa <__strtok_r+0xa>
 80079c8:	6014      	str	r4, [r2, #0]
 80079ca:	7003      	strb	r3, [r0, #0]
 80079cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ce:	461c      	mov	r4, r3
 80079d0:	e00c      	b.n	80079ec <__strtok_r+0x4c>
 80079d2:	b915      	cbnz	r5, 80079da <__strtok_r+0x3a>
 80079d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079d8:	460e      	mov	r6, r1
 80079da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079de:	42ab      	cmp	r3, r5
 80079e0:	d1f7      	bne.n	80079d2 <__strtok_r+0x32>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0f3      	beq.n	80079ce <__strtok_r+0x2e>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80079ec:	6014      	str	r4, [r2, #0]
 80079ee:	e7ed      	b.n	80079cc <__strtok_r+0x2c>

080079f0 <_strtol_l.isra.0>:
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f6:	d001      	beq.n	80079fc <_strtol_l.isra.0+0xc>
 80079f8:	2b24      	cmp	r3, #36	; 0x24
 80079fa:	d906      	bls.n	8007a0a <_strtol_l.isra.0+0x1a>
 80079fc:	f7ff ff22 	bl	8007844 <__errno>
 8007a00:	2316      	movs	r3, #22
 8007a02:	6003      	str	r3, [r0, #0]
 8007a04:	2000      	movs	r0, #0
 8007a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0a:	4f3a      	ldr	r7, [pc, #232]	; (8007af4 <_strtol_l.isra.0+0x104>)
 8007a0c:	468e      	mov	lr, r1
 8007a0e:	4676      	mov	r6, lr
 8007a10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007a14:	5de5      	ldrb	r5, [r4, r7]
 8007a16:	f015 0508 	ands.w	r5, r5, #8
 8007a1a:	d1f8      	bne.n	8007a0e <_strtol_l.isra.0+0x1e>
 8007a1c:	2c2d      	cmp	r4, #45	; 0x2d
 8007a1e:	d134      	bne.n	8007a8a <_strtol_l.isra.0+0x9a>
 8007a20:	f89e 4000 	ldrb.w	r4, [lr]
 8007a24:	f04f 0801 	mov.w	r8, #1
 8007a28:	f106 0e02 	add.w	lr, r6, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d05c      	beq.n	8007aea <_strtol_l.isra.0+0xfa>
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d10c      	bne.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007a34:	2c30      	cmp	r4, #48	; 0x30
 8007a36:	d10a      	bne.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007a38:	f89e 4000 	ldrb.w	r4, [lr]
 8007a3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a40:	2c58      	cmp	r4, #88	; 0x58
 8007a42:	d14d      	bne.n	8007ae0 <_strtol_l.isra.0+0xf0>
 8007a44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007a48:	2310      	movs	r3, #16
 8007a4a:	f10e 0e02 	add.w	lr, lr, #2
 8007a4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007a52:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007a56:	2600      	movs	r6, #0
 8007a58:	fbbc f9f3 	udiv	r9, ip, r3
 8007a5c:	4635      	mov	r5, r6
 8007a5e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007a66:	2f09      	cmp	r7, #9
 8007a68:	d818      	bhi.n	8007a9c <_strtol_l.isra.0+0xac>
 8007a6a:	463c      	mov	r4, r7
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	dd24      	ble.n	8007aba <_strtol_l.isra.0+0xca>
 8007a70:	2e00      	cmp	r6, #0
 8007a72:	db1f      	blt.n	8007ab4 <_strtol_l.isra.0+0xc4>
 8007a74:	45a9      	cmp	r9, r5
 8007a76:	d31d      	bcc.n	8007ab4 <_strtol_l.isra.0+0xc4>
 8007a78:	d101      	bne.n	8007a7e <_strtol_l.isra.0+0x8e>
 8007a7a:	45a2      	cmp	sl, r4
 8007a7c:	db1a      	blt.n	8007ab4 <_strtol_l.isra.0+0xc4>
 8007a7e:	fb05 4503 	mla	r5, r5, r3, r4
 8007a82:	2601      	movs	r6, #1
 8007a84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007a88:	e7eb      	b.n	8007a62 <_strtol_l.isra.0+0x72>
 8007a8a:	2c2b      	cmp	r4, #43	; 0x2b
 8007a8c:	bf08      	it	eq
 8007a8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007a92:	46a8      	mov	r8, r5
 8007a94:	bf08      	it	eq
 8007a96:	f106 0e02 	addeq.w	lr, r6, #2
 8007a9a:	e7c7      	b.n	8007a2c <_strtol_l.isra.0+0x3c>
 8007a9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007aa0:	2f19      	cmp	r7, #25
 8007aa2:	d801      	bhi.n	8007aa8 <_strtol_l.isra.0+0xb8>
 8007aa4:	3c37      	subs	r4, #55	; 0x37
 8007aa6:	e7e1      	b.n	8007a6c <_strtol_l.isra.0+0x7c>
 8007aa8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007aac:	2f19      	cmp	r7, #25
 8007aae:	d804      	bhi.n	8007aba <_strtol_l.isra.0+0xca>
 8007ab0:	3c57      	subs	r4, #87	; 0x57
 8007ab2:	e7db      	b.n	8007a6c <_strtol_l.isra.0+0x7c>
 8007ab4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007ab8:	e7e4      	b.n	8007a84 <_strtol_l.isra.0+0x94>
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	da05      	bge.n	8007aca <_strtol_l.isra.0+0xda>
 8007abe:	2322      	movs	r3, #34	; 0x22
 8007ac0:	6003      	str	r3, [r0, #0]
 8007ac2:	4665      	mov	r5, ip
 8007ac4:	b942      	cbnz	r2, 8007ad8 <_strtol_l.isra.0+0xe8>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e79d      	b.n	8007a06 <_strtol_l.isra.0+0x16>
 8007aca:	f1b8 0f00 	cmp.w	r8, #0
 8007ace:	d000      	beq.n	8007ad2 <_strtol_l.isra.0+0xe2>
 8007ad0:	426d      	negs	r5, r5
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	d0f7      	beq.n	8007ac6 <_strtol_l.isra.0+0xd6>
 8007ad6:	b10e      	cbz	r6, 8007adc <_strtol_l.isra.0+0xec>
 8007ad8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8007adc:	6011      	str	r1, [r2, #0]
 8007ade:	e7f2      	b.n	8007ac6 <_strtol_l.isra.0+0xd6>
 8007ae0:	2430      	movs	r4, #48	; 0x30
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1b3      	bne.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	e7b1      	b.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007aea:	2c30      	cmp	r4, #48	; 0x30
 8007aec:	d0a4      	beq.n	8007a38 <_strtol_l.isra.0+0x48>
 8007aee:	230a      	movs	r3, #10
 8007af0:	e7ad      	b.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007af2:	bf00      	nop
 8007af4:	08008fca 	.word	0x08008fca

08007af8 <strtol>:
 8007af8:	4613      	mov	r3, r2
 8007afa:	460a      	mov	r2, r1
 8007afc:	4601      	mov	r1, r0
 8007afe:	4802      	ldr	r0, [pc, #8]	; (8007b08 <strtol+0x10>)
 8007b00:	6800      	ldr	r0, [r0, #0]
 8007b02:	f7ff bf75 	b.w	80079f0 <_strtol_l.isra.0>
 8007b06:	bf00      	nop
 8007b08:	20000020 	.word	0x20000020

08007b0c <__utoa>:
 8007b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0e:	4c1f      	ldr	r4, [pc, #124]	; (8007b8c <__utoa+0x80>)
 8007b10:	b08b      	sub	sp, #44	; 0x2c
 8007b12:	4605      	mov	r5, r0
 8007b14:	460b      	mov	r3, r1
 8007b16:	466e      	mov	r6, sp
 8007b18:	f104 0c20 	add.w	ip, r4, #32
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	6861      	ldr	r1, [r4, #4]
 8007b20:	4637      	mov	r7, r6
 8007b22:	c703      	stmia	r7!, {r0, r1}
 8007b24:	3408      	adds	r4, #8
 8007b26:	4564      	cmp	r4, ip
 8007b28:	463e      	mov	r6, r7
 8007b2a:	d1f7      	bne.n	8007b1c <__utoa+0x10>
 8007b2c:	7921      	ldrb	r1, [r4, #4]
 8007b2e:	7139      	strb	r1, [r7, #4]
 8007b30:	1e91      	subs	r1, r2, #2
 8007b32:	6820      	ldr	r0, [r4, #0]
 8007b34:	6038      	str	r0, [r7, #0]
 8007b36:	2922      	cmp	r1, #34	; 0x22
 8007b38:	f04f 0100 	mov.w	r1, #0
 8007b3c:	d904      	bls.n	8007b48 <__utoa+0x3c>
 8007b3e:	7019      	strb	r1, [r3, #0]
 8007b40:	460b      	mov	r3, r1
 8007b42:	4618      	mov	r0, r3
 8007b44:	b00b      	add	sp, #44	; 0x2c
 8007b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b48:	1e58      	subs	r0, r3, #1
 8007b4a:	4684      	mov	ip, r0
 8007b4c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007b50:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007b54:	fb02 5617 	mls	r6, r2, r7, r5
 8007b58:	4476      	add	r6, lr
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007b60:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007b64:	462e      	mov	r6, r5
 8007b66:	42b2      	cmp	r2, r6
 8007b68:	f101 0101 	add.w	r1, r1, #1
 8007b6c:	463d      	mov	r5, r7
 8007b6e:	d9ed      	bls.n	8007b4c <__utoa+0x40>
 8007b70:	2200      	movs	r2, #0
 8007b72:	545a      	strb	r2, [r3, r1]
 8007b74:	1919      	adds	r1, r3, r4
 8007b76:	1aa5      	subs	r5, r4, r2
 8007b78:	42aa      	cmp	r2, r5
 8007b7a:	dae2      	bge.n	8007b42 <__utoa+0x36>
 8007b7c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007b80:	780e      	ldrb	r6, [r1, #0]
 8007b82:	7006      	strb	r6, [r0, #0]
 8007b84:	3201      	adds	r2, #1
 8007b86:	f801 5901 	strb.w	r5, [r1], #-1
 8007b8a:	e7f4      	b.n	8007b76 <__utoa+0x6a>
 8007b8c:	08008f68 	.word	0x08008f68

08007b90 <__assert_func>:
 8007b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b92:	4614      	mov	r4, r2
 8007b94:	461a      	mov	r2, r3
 8007b96:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <__assert_func+0x2c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	68d8      	ldr	r0, [r3, #12]
 8007b9e:	b14c      	cbz	r4, 8007bb4 <__assert_func+0x24>
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <__assert_func+0x30>)
 8007ba2:	9100      	str	r1, [sp, #0]
 8007ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ba8:	4906      	ldr	r1, [pc, #24]	; (8007bc4 <__assert_func+0x34>)
 8007baa:	462b      	mov	r3, r5
 8007bac:	f000 f80e 	bl	8007bcc <fiprintf>
 8007bb0:	f000 fdea 	bl	8008788 <abort>
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <__assert_func+0x38>)
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	e7f3      	b.n	8007ba2 <__assert_func+0x12>
 8007bba:	bf00      	nop
 8007bbc:	20000020 	.word	0x20000020
 8007bc0:	08008f8d 	.word	0x08008f8d
 8007bc4:	08008f9a 	.word	0x08008f9a
 8007bc8:	08008fc8 	.word	0x08008fc8

08007bcc <fiprintf>:
 8007bcc:	b40e      	push	{r1, r2, r3}
 8007bce:	b503      	push	{r0, r1, lr}
 8007bd0:	4601      	mov	r1, r0
 8007bd2:	ab03      	add	r3, sp, #12
 8007bd4:	4805      	ldr	r0, [pc, #20]	; (8007bec <fiprintf+0x20>)
 8007bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bda:	6800      	ldr	r0, [r0, #0]
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	f000 fa3f 	bl	8008060 <_vfiprintf_r>
 8007be2:	b002      	add	sp, #8
 8007be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be8:	b003      	add	sp, #12
 8007bea:	4770      	bx	lr
 8007bec:	20000020 	.word	0x20000020

08007bf0 <malloc>:
 8007bf0:	4b02      	ldr	r3, [pc, #8]	; (8007bfc <malloc+0xc>)
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f000 b853 	b.w	8007ca0 <_malloc_r>
 8007bfa:	bf00      	nop
 8007bfc:	20000020 	.word	0x20000020

08007c00 <_free_r>:
 8007c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c02:	2900      	cmp	r1, #0
 8007c04:	d048      	beq.n	8007c98 <_free_r+0x98>
 8007c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c0a:	9001      	str	r0, [sp, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c12:	bfb8      	it	lt
 8007c14:	18e4      	addlt	r4, r4, r3
 8007c16:	f000 fff7 	bl	8008c08 <__malloc_lock>
 8007c1a:	4a20      	ldr	r2, [pc, #128]	; (8007c9c <_free_r+0x9c>)
 8007c1c:	9801      	ldr	r0, [sp, #4]
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	4615      	mov	r5, r2
 8007c22:	b933      	cbnz	r3, 8007c32 <_free_r+0x32>
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	6014      	str	r4, [r2, #0]
 8007c28:	b003      	add	sp, #12
 8007c2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c2e:	f000 bff1 	b.w	8008c14 <__malloc_unlock>
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	d90b      	bls.n	8007c4e <_free_r+0x4e>
 8007c36:	6821      	ldr	r1, [r4, #0]
 8007c38:	1862      	adds	r2, r4, r1
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bf04      	itt	eq
 8007c3e:	681a      	ldreq	r2, [r3, #0]
 8007c40:	685b      	ldreq	r3, [r3, #4]
 8007c42:	6063      	str	r3, [r4, #4]
 8007c44:	bf04      	itt	eq
 8007c46:	1852      	addeq	r2, r2, r1
 8007c48:	6022      	streq	r2, [r4, #0]
 8007c4a:	602c      	str	r4, [r5, #0]
 8007c4c:	e7ec      	b.n	8007c28 <_free_r+0x28>
 8007c4e:	461a      	mov	r2, r3
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	b10b      	cbz	r3, 8007c58 <_free_r+0x58>
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	d9fa      	bls.n	8007c4e <_free_r+0x4e>
 8007c58:	6811      	ldr	r1, [r2, #0]
 8007c5a:	1855      	adds	r5, r2, r1
 8007c5c:	42a5      	cmp	r5, r4
 8007c5e:	d10b      	bne.n	8007c78 <_free_r+0x78>
 8007c60:	6824      	ldr	r4, [r4, #0]
 8007c62:	4421      	add	r1, r4
 8007c64:	1854      	adds	r4, r2, r1
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	6011      	str	r1, [r2, #0]
 8007c6a:	d1dd      	bne.n	8007c28 <_free_r+0x28>
 8007c6c:	681c      	ldr	r4, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	6053      	str	r3, [r2, #4]
 8007c72:	4421      	add	r1, r4
 8007c74:	6011      	str	r1, [r2, #0]
 8007c76:	e7d7      	b.n	8007c28 <_free_r+0x28>
 8007c78:	d902      	bls.n	8007c80 <_free_r+0x80>
 8007c7a:	230c      	movs	r3, #12
 8007c7c:	6003      	str	r3, [r0, #0]
 8007c7e:	e7d3      	b.n	8007c28 <_free_r+0x28>
 8007c80:	6825      	ldr	r5, [r4, #0]
 8007c82:	1961      	adds	r1, r4, r5
 8007c84:	428b      	cmp	r3, r1
 8007c86:	bf04      	itt	eq
 8007c88:	6819      	ldreq	r1, [r3, #0]
 8007c8a:	685b      	ldreq	r3, [r3, #4]
 8007c8c:	6063      	str	r3, [r4, #4]
 8007c8e:	bf04      	itt	eq
 8007c90:	1949      	addeq	r1, r1, r5
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	6054      	str	r4, [r2, #4]
 8007c96:	e7c7      	b.n	8007c28 <_free_r+0x28>
 8007c98:	b003      	add	sp, #12
 8007c9a:	bd30      	pop	{r4, r5, pc}
 8007c9c:	20000530 	.word	0x20000530

08007ca0 <_malloc_r>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	1ccd      	adds	r5, r1, #3
 8007ca4:	f025 0503 	bic.w	r5, r5, #3
 8007ca8:	3508      	adds	r5, #8
 8007caa:	2d0c      	cmp	r5, #12
 8007cac:	bf38      	it	cc
 8007cae:	250c      	movcc	r5, #12
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	db01      	blt.n	8007cba <_malloc_r+0x1a>
 8007cb6:	42a9      	cmp	r1, r5
 8007cb8:	d903      	bls.n	8007cc2 <_malloc_r+0x22>
 8007cba:	230c      	movs	r3, #12
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc2:	f000 ffa1 	bl	8008c08 <__malloc_lock>
 8007cc6:	4921      	ldr	r1, [pc, #132]	; (8007d4c <_malloc_r+0xac>)
 8007cc8:	680a      	ldr	r2, [r1, #0]
 8007cca:	4614      	mov	r4, r2
 8007ccc:	b99c      	cbnz	r4, 8007cf6 <_malloc_r+0x56>
 8007cce:	4f20      	ldr	r7, [pc, #128]	; (8007d50 <_malloc_r+0xb0>)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	b923      	cbnz	r3, 8007cde <_malloc_r+0x3e>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f000 fc86 	bl	80085e8 <_sbrk_r>
 8007cdc:	6038      	str	r0, [r7, #0]
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 fc81 	bl	80085e8 <_sbrk_r>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	d123      	bne.n	8007d32 <_malloc_r+0x92>
 8007cea:	230c      	movs	r3, #12
 8007cec:	6033      	str	r3, [r6, #0]
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f000 ff90 	bl	8008c14 <__malloc_unlock>
 8007cf4:	e7e3      	b.n	8007cbe <_malloc_r+0x1e>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	1b5b      	subs	r3, r3, r5
 8007cfa:	d417      	bmi.n	8007d2c <_malloc_r+0x8c>
 8007cfc:	2b0b      	cmp	r3, #11
 8007cfe:	d903      	bls.n	8007d08 <_malloc_r+0x68>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	441c      	add	r4, r3
 8007d04:	6025      	str	r5, [r4, #0]
 8007d06:	e004      	b.n	8007d12 <_malloc_r+0x72>
 8007d08:	6863      	ldr	r3, [r4, #4]
 8007d0a:	42a2      	cmp	r2, r4
 8007d0c:	bf0c      	ite	eq
 8007d0e:	600b      	streq	r3, [r1, #0]
 8007d10:	6053      	strne	r3, [r2, #4]
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 ff7e 	bl	8008c14 <__malloc_unlock>
 8007d18:	f104 000b 	add.w	r0, r4, #11
 8007d1c:	1d23      	adds	r3, r4, #4
 8007d1e:	f020 0007 	bic.w	r0, r0, #7
 8007d22:	1ac2      	subs	r2, r0, r3
 8007d24:	d0cc      	beq.n	8007cc0 <_malloc_r+0x20>
 8007d26:	1a1b      	subs	r3, r3, r0
 8007d28:	50a3      	str	r3, [r4, r2]
 8007d2a:	e7c9      	b.n	8007cc0 <_malloc_r+0x20>
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	6864      	ldr	r4, [r4, #4]
 8007d30:	e7cc      	b.n	8007ccc <_malloc_r+0x2c>
 8007d32:	1cc4      	adds	r4, r0, #3
 8007d34:	f024 0403 	bic.w	r4, r4, #3
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d0e3      	beq.n	8007d04 <_malloc_r+0x64>
 8007d3c:	1a21      	subs	r1, r4, r0
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 fc52 	bl	80085e8 <_sbrk_r>
 8007d44:	3001      	adds	r0, #1
 8007d46:	d1dd      	bne.n	8007d04 <_malloc_r+0x64>
 8007d48:	e7cf      	b.n	8007cea <_malloc_r+0x4a>
 8007d4a:	bf00      	nop
 8007d4c:	20000530 	.word	0x20000530
 8007d50:	20000534 	.word	0x20000534

08007d54 <__ssputs_r>:
 8007d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	688e      	ldr	r6, [r1, #8]
 8007d5a:	429e      	cmp	r6, r3
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	4690      	mov	r8, r2
 8007d62:	461f      	mov	r7, r3
 8007d64:	d838      	bhi.n	8007dd8 <__ssputs_r+0x84>
 8007d66:	898a      	ldrh	r2, [r1, #12]
 8007d68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d6c:	d032      	beq.n	8007dd4 <__ssputs_r+0x80>
 8007d6e:	6825      	ldr	r5, [r4, #0]
 8007d70:	6909      	ldr	r1, [r1, #16]
 8007d72:	eba5 0901 	sub.w	r9, r5, r1
 8007d76:	6965      	ldr	r5, [r4, #20]
 8007d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d80:	3301      	adds	r3, #1
 8007d82:	444b      	add	r3, r9
 8007d84:	106d      	asrs	r5, r5, #1
 8007d86:	429d      	cmp	r5, r3
 8007d88:	bf38      	it	cc
 8007d8a:	461d      	movcc	r5, r3
 8007d8c:	0553      	lsls	r3, r2, #21
 8007d8e:	d531      	bpl.n	8007df4 <__ssputs_r+0xa0>
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7ff ff85 	bl	8007ca0 <_malloc_r>
 8007d96:	4606      	mov	r6, r0
 8007d98:	b950      	cbnz	r0, 8007db0 <__ssputs_r+0x5c>
 8007d9a:	230c      	movs	r3, #12
 8007d9c:	f8ca 3000 	str.w	r3, [sl]
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db0:	6921      	ldr	r1, [r4, #16]
 8007db2:	464a      	mov	r2, r9
 8007db4:	f7ff fd8a 	bl	80078cc <memcpy>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	6126      	str	r6, [r4, #16]
 8007dc6:	6165      	str	r5, [r4, #20]
 8007dc8:	444e      	add	r6, r9
 8007dca:	eba5 0509 	sub.w	r5, r5, r9
 8007dce:	6026      	str	r6, [r4, #0]
 8007dd0:	60a5      	str	r5, [r4, #8]
 8007dd2:	463e      	mov	r6, r7
 8007dd4:	42be      	cmp	r6, r7
 8007dd6:	d900      	bls.n	8007dda <__ssputs_r+0x86>
 8007dd8:	463e      	mov	r6, r7
 8007dda:	4632      	mov	r2, r6
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	4641      	mov	r1, r8
 8007de0:	f000 fef8 	bl	8008bd4 <memmove>
 8007de4:	68a3      	ldr	r3, [r4, #8]
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	1b9b      	subs	r3, r3, r6
 8007dea:	4432      	add	r2, r6
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6022      	str	r2, [r4, #0]
 8007df0:	2000      	movs	r0, #0
 8007df2:	e7db      	b.n	8007dac <__ssputs_r+0x58>
 8007df4:	462a      	mov	r2, r5
 8007df6:	f000 ff13 	bl	8008c20 <_realloc_r>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d1e1      	bne.n	8007dc4 <__ssputs_r+0x70>
 8007e00:	6921      	ldr	r1, [r4, #16]
 8007e02:	4650      	mov	r0, sl
 8007e04:	f7ff fefc 	bl	8007c00 <_free_r>
 8007e08:	e7c7      	b.n	8007d9a <__ssputs_r+0x46>
	...

08007e0c <_svfiprintf_r>:
 8007e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	4698      	mov	r8, r3
 8007e12:	898b      	ldrh	r3, [r1, #12]
 8007e14:	061b      	lsls	r3, r3, #24
 8007e16:	b09d      	sub	sp, #116	; 0x74
 8007e18:	4607      	mov	r7, r0
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	4614      	mov	r4, r2
 8007e1e:	d50e      	bpl.n	8007e3e <_svfiprintf_r+0x32>
 8007e20:	690b      	ldr	r3, [r1, #16]
 8007e22:	b963      	cbnz	r3, 8007e3e <_svfiprintf_r+0x32>
 8007e24:	2140      	movs	r1, #64	; 0x40
 8007e26:	f7ff ff3b 	bl	8007ca0 <_malloc_r>
 8007e2a:	6028      	str	r0, [r5, #0]
 8007e2c:	6128      	str	r0, [r5, #16]
 8007e2e:	b920      	cbnz	r0, 8007e3a <_svfiprintf_r+0x2e>
 8007e30:	230c      	movs	r3, #12
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e38:	e0d1      	b.n	8007fde <_svfiprintf_r+0x1d2>
 8007e3a:	2340      	movs	r3, #64	; 0x40
 8007e3c:	616b      	str	r3, [r5, #20]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	2320      	movs	r3, #32
 8007e44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e4c:	2330      	movs	r3, #48	; 0x30
 8007e4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ff8 <_svfiprintf_r+0x1ec>
 8007e52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e56:	f04f 0901 	mov.w	r9, #1
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	469a      	mov	sl, r3
 8007e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e62:	b10a      	cbz	r2, 8007e68 <_svfiprintf_r+0x5c>
 8007e64:	2a25      	cmp	r2, #37	; 0x25
 8007e66:	d1f9      	bne.n	8007e5c <_svfiprintf_r+0x50>
 8007e68:	ebba 0b04 	subs.w	fp, sl, r4
 8007e6c:	d00b      	beq.n	8007e86 <_svfiprintf_r+0x7a>
 8007e6e:	465b      	mov	r3, fp
 8007e70:	4622      	mov	r2, r4
 8007e72:	4629      	mov	r1, r5
 8007e74:	4638      	mov	r0, r7
 8007e76:	f7ff ff6d 	bl	8007d54 <__ssputs_r>
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f000 80aa 	beq.w	8007fd4 <_svfiprintf_r+0x1c8>
 8007e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e82:	445a      	add	r2, fp
 8007e84:	9209      	str	r2, [sp, #36]	; 0x24
 8007e86:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 80a2 	beq.w	8007fd4 <_svfiprintf_r+0x1c8>
 8007e90:	2300      	movs	r3, #0
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e9a:	f10a 0a01 	add.w	sl, sl, #1
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea8:	4654      	mov	r4, sl
 8007eaa:	2205      	movs	r2, #5
 8007eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb0:	4851      	ldr	r0, [pc, #324]	; (8007ff8 <_svfiprintf_r+0x1ec>)
 8007eb2:	f7f8 f995 	bl	80001e0 <memchr>
 8007eb6:	9a04      	ldr	r2, [sp, #16]
 8007eb8:	b9d8      	cbnz	r0, 8007ef2 <_svfiprintf_r+0xe6>
 8007eba:	06d0      	lsls	r0, r2, #27
 8007ebc:	bf44      	itt	mi
 8007ebe:	2320      	movmi	r3, #32
 8007ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec4:	0711      	lsls	r1, r2, #28
 8007ec6:	bf44      	itt	mi
 8007ec8:	232b      	movmi	r3, #43	; 0x2b
 8007eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ece:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed4:	d015      	beq.n	8007f02 <_svfiprintf_r+0xf6>
 8007ed6:	9a07      	ldr	r2, [sp, #28]
 8007ed8:	4654      	mov	r4, sl
 8007eda:	2000      	movs	r0, #0
 8007edc:	f04f 0c0a 	mov.w	ip, #10
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee6:	3b30      	subs	r3, #48	; 0x30
 8007ee8:	2b09      	cmp	r3, #9
 8007eea:	d94e      	bls.n	8007f8a <_svfiprintf_r+0x17e>
 8007eec:	b1b0      	cbz	r0, 8007f1c <_svfiprintf_r+0x110>
 8007eee:	9207      	str	r2, [sp, #28]
 8007ef0:	e014      	b.n	8007f1c <_svfiprintf_r+0x110>
 8007ef2:	eba0 0308 	sub.w	r3, r0, r8
 8007ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	46a2      	mov	sl, r4
 8007f00:	e7d2      	b.n	8007ea8 <_svfiprintf_r+0x9c>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	9103      	str	r1, [sp, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bfbb      	ittet	lt
 8007f0e:	425b      	neglt	r3, r3
 8007f10:	f042 0202 	orrlt.w	r2, r2, #2
 8007f14:	9307      	strge	r3, [sp, #28]
 8007f16:	9307      	strlt	r3, [sp, #28]
 8007f18:	bfb8      	it	lt
 8007f1a:	9204      	strlt	r2, [sp, #16]
 8007f1c:	7823      	ldrb	r3, [r4, #0]
 8007f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f20:	d10c      	bne.n	8007f3c <_svfiprintf_r+0x130>
 8007f22:	7863      	ldrb	r3, [r4, #1]
 8007f24:	2b2a      	cmp	r3, #42	; 0x2a
 8007f26:	d135      	bne.n	8007f94 <_svfiprintf_r+0x188>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1d1a      	adds	r2, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9203      	str	r2, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfb8      	it	lt
 8007f34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f38:	3402      	adds	r4, #2
 8007f3a:	9305      	str	r3, [sp, #20]
 8007f3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008008 <_svfiprintf_r+0x1fc>
 8007f40:	7821      	ldrb	r1, [r4, #0]
 8007f42:	2203      	movs	r2, #3
 8007f44:	4650      	mov	r0, sl
 8007f46:	f7f8 f94b 	bl	80001e0 <memchr>
 8007f4a:	b140      	cbz	r0, 8007f5e <_svfiprintf_r+0x152>
 8007f4c:	2340      	movs	r3, #64	; 0x40
 8007f4e:	eba0 000a 	sub.w	r0, r0, sl
 8007f52:	fa03 f000 	lsl.w	r0, r3, r0
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	4303      	orrs	r3, r0
 8007f5a:	3401      	adds	r4, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f62:	4826      	ldr	r0, [pc, #152]	; (8007ffc <_svfiprintf_r+0x1f0>)
 8007f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f68:	2206      	movs	r2, #6
 8007f6a:	f7f8 f939 	bl	80001e0 <memchr>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d038      	beq.n	8007fe4 <_svfiprintf_r+0x1d8>
 8007f72:	4b23      	ldr	r3, [pc, #140]	; (8008000 <_svfiprintf_r+0x1f4>)
 8007f74:	bb1b      	cbnz	r3, 8007fbe <_svfiprintf_r+0x1b2>
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	3307      	adds	r3, #7
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	3308      	adds	r3, #8
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f84:	4433      	add	r3, r6
 8007f86:	9309      	str	r3, [sp, #36]	; 0x24
 8007f88:	e767      	b.n	8007e5a <_svfiprintf_r+0x4e>
 8007f8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f8e:	460c      	mov	r4, r1
 8007f90:	2001      	movs	r0, #1
 8007f92:	e7a5      	b.n	8007ee0 <_svfiprintf_r+0xd4>
 8007f94:	2300      	movs	r3, #0
 8007f96:	3401      	adds	r4, #1
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f04f 0c0a 	mov.w	ip, #10
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa6:	3a30      	subs	r2, #48	; 0x30
 8007fa8:	2a09      	cmp	r2, #9
 8007faa:	d903      	bls.n	8007fb4 <_svfiprintf_r+0x1a8>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0c5      	beq.n	8007f3c <_svfiprintf_r+0x130>
 8007fb0:	9105      	str	r1, [sp, #20]
 8007fb2:	e7c3      	b.n	8007f3c <_svfiprintf_r+0x130>
 8007fb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb8:	4604      	mov	r4, r0
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e7f0      	b.n	8007fa0 <_svfiprintf_r+0x194>
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <_svfiprintf_r+0x1f8>)
 8007fc6:	a904      	add	r1, sp, #16
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f3af 8000 	nop.w
 8007fce:	1c42      	adds	r2, r0, #1
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	d1d6      	bne.n	8007f82 <_svfiprintf_r+0x176>
 8007fd4:	89ab      	ldrh	r3, [r5, #12]
 8007fd6:	065b      	lsls	r3, r3, #25
 8007fd8:	f53f af2c 	bmi.w	8007e34 <_svfiprintf_r+0x28>
 8007fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fde:	b01d      	add	sp, #116	; 0x74
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b06      	ldr	r3, [pc, #24]	; (8008004 <_svfiprintf_r+0x1f8>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f000 f9d4 	bl	800839c <_printf_i>
 8007ff4:	e7eb      	b.n	8007fce <_svfiprintf_r+0x1c2>
 8007ff6:	bf00      	nop
 8007ff8:	080090ca 	.word	0x080090ca
 8007ffc:	080090d4 	.word	0x080090d4
 8008000:	00000000 	.word	0x00000000
 8008004:	08007d55 	.word	0x08007d55
 8008008:	080090d0 	.word	0x080090d0

0800800c <__sfputc_r>:
 800800c:	6893      	ldr	r3, [r2, #8]
 800800e:	3b01      	subs	r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	b410      	push	{r4}
 8008014:	6093      	str	r3, [r2, #8]
 8008016:	da08      	bge.n	800802a <__sfputc_r+0x1e>
 8008018:	6994      	ldr	r4, [r2, #24]
 800801a:	42a3      	cmp	r3, r4
 800801c:	db01      	blt.n	8008022 <__sfputc_r+0x16>
 800801e:	290a      	cmp	r1, #10
 8008020:	d103      	bne.n	800802a <__sfputc_r+0x1e>
 8008022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008026:	f000 baef 	b.w	8008608 <__swbuf_r>
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	1c58      	adds	r0, r3, #1
 800802e:	6010      	str	r0, [r2, #0]
 8008030:	7019      	strb	r1, [r3, #0]
 8008032:	4608      	mov	r0, r1
 8008034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008038:	4770      	bx	lr

0800803a <__sfputs_r>:
 800803a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803c:	4606      	mov	r6, r0
 800803e:	460f      	mov	r7, r1
 8008040:	4614      	mov	r4, r2
 8008042:	18d5      	adds	r5, r2, r3
 8008044:	42ac      	cmp	r4, r5
 8008046:	d101      	bne.n	800804c <__sfputs_r+0x12>
 8008048:	2000      	movs	r0, #0
 800804a:	e007      	b.n	800805c <__sfputs_r+0x22>
 800804c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008050:	463a      	mov	r2, r7
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ffda 	bl	800800c <__sfputc_r>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d1f3      	bne.n	8008044 <__sfputs_r+0xa>
 800805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008060 <_vfiprintf_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	460d      	mov	r5, r1
 8008066:	b09d      	sub	sp, #116	; 0x74
 8008068:	4614      	mov	r4, r2
 800806a:	4698      	mov	r8, r3
 800806c:	4606      	mov	r6, r0
 800806e:	b118      	cbz	r0, 8008078 <_vfiprintf_r+0x18>
 8008070:	6983      	ldr	r3, [r0, #24]
 8008072:	b90b      	cbnz	r3, 8008078 <_vfiprintf_r+0x18>
 8008074:	f000 fcaa 	bl	80089cc <__sinit>
 8008078:	4b89      	ldr	r3, [pc, #548]	; (80082a0 <_vfiprintf_r+0x240>)
 800807a:	429d      	cmp	r5, r3
 800807c:	d11b      	bne.n	80080b6 <_vfiprintf_r+0x56>
 800807e:	6875      	ldr	r5, [r6, #4]
 8008080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008082:	07d9      	lsls	r1, r3, #31
 8008084:	d405      	bmi.n	8008092 <_vfiprintf_r+0x32>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	059a      	lsls	r2, r3, #22
 800808a:	d402      	bmi.n	8008092 <_vfiprintf_r+0x32>
 800808c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800808e:	f000 fd3b 	bl	8008b08 <__retarget_lock_acquire_recursive>
 8008092:	89ab      	ldrh	r3, [r5, #12]
 8008094:	071b      	lsls	r3, r3, #28
 8008096:	d501      	bpl.n	800809c <_vfiprintf_r+0x3c>
 8008098:	692b      	ldr	r3, [r5, #16]
 800809a:	b9eb      	cbnz	r3, 80080d8 <_vfiprintf_r+0x78>
 800809c:	4629      	mov	r1, r5
 800809e:	4630      	mov	r0, r6
 80080a0:	f000 fb04 	bl	80086ac <__swsetup_r>
 80080a4:	b1c0      	cbz	r0, 80080d8 <_vfiprintf_r+0x78>
 80080a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080a8:	07dc      	lsls	r4, r3, #31
 80080aa:	d50e      	bpl.n	80080ca <_vfiprintf_r+0x6a>
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080b0:	b01d      	add	sp, #116	; 0x74
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b6:	4b7b      	ldr	r3, [pc, #492]	; (80082a4 <_vfiprintf_r+0x244>)
 80080b8:	429d      	cmp	r5, r3
 80080ba:	d101      	bne.n	80080c0 <_vfiprintf_r+0x60>
 80080bc:	68b5      	ldr	r5, [r6, #8]
 80080be:	e7df      	b.n	8008080 <_vfiprintf_r+0x20>
 80080c0:	4b79      	ldr	r3, [pc, #484]	; (80082a8 <_vfiprintf_r+0x248>)
 80080c2:	429d      	cmp	r5, r3
 80080c4:	bf08      	it	eq
 80080c6:	68f5      	ldreq	r5, [r6, #12]
 80080c8:	e7da      	b.n	8008080 <_vfiprintf_r+0x20>
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	0598      	lsls	r0, r3, #22
 80080ce:	d4ed      	bmi.n	80080ac <_vfiprintf_r+0x4c>
 80080d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d2:	f000 fd1a 	bl	8008b0a <__retarget_lock_release_recursive>
 80080d6:	e7e9      	b.n	80080ac <_vfiprintf_r+0x4c>
 80080d8:	2300      	movs	r3, #0
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
 80080dc:	2320      	movs	r3, #32
 80080de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e6:	2330      	movs	r3, #48	; 0x30
 80080e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082ac <_vfiprintf_r+0x24c>
 80080ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f0:	f04f 0901 	mov.w	r9, #1
 80080f4:	4623      	mov	r3, r4
 80080f6:	469a      	mov	sl, r3
 80080f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080fc:	b10a      	cbz	r2, 8008102 <_vfiprintf_r+0xa2>
 80080fe:	2a25      	cmp	r2, #37	; 0x25
 8008100:	d1f9      	bne.n	80080f6 <_vfiprintf_r+0x96>
 8008102:	ebba 0b04 	subs.w	fp, sl, r4
 8008106:	d00b      	beq.n	8008120 <_vfiprintf_r+0xc0>
 8008108:	465b      	mov	r3, fp
 800810a:	4622      	mov	r2, r4
 800810c:	4629      	mov	r1, r5
 800810e:	4630      	mov	r0, r6
 8008110:	f7ff ff93 	bl	800803a <__sfputs_r>
 8008114:	3001      	adds	r0, #1
 8008116:	f000 80aa 	beq.w	800826e <_vfiprintf_r+0x20e>
 800811a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811c:	445a      	add	r2, fp
 800811e:	9209      	str	r2, [sp, #36]	; 0x24
 8008120:	f89a 3000 	ldrb.w	r3, [sl]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80a2 	beq.w	800826e <_vfiprintf_r+0x20e>
 800812a:	2300      	movs	r3, #0
 800812c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008134:	f10a 0a01 	add.w	sl, sl, #1
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	9307      	str	r3, [sp, #28]
 800813c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008140:	931a      	str	r3, [sp, #104]	; 0x68
 8008142:	4654      	mov	r4, sl
 8008144:	2205      	movs	r2, #5
 8008146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814a:	4858      	ldr	r0, [pc, #352]	; (80082ac <_vfiprintf_r+0x24c>)
 800814c:	f7f8 f848 	bl	80001e0 <memchr>
 8008150:	9a04      	ldr	r2, [sp, #16]
 8008152:	b9d8      	cbnz	r0, 800818c <_vfiprintf_r+0x12c>
 8008154:	06d1      	lsls	r1, r2, #27
 8008156:	bf44      	itt	mi
 8008158:	2320      	movmi	r3, #32
 800815a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800815e:	0713      	lsls	r3, r2, #28
 8008160:	bf44      	itt	mi
 8008162:	232b      	movmi	r3, #43	; 0x2b
 8008164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008168:	f89a 3000 	ldrb.w	r3, [sl]
 800816c:	2b2a      	cmp	r3, #42	; 0x2a
 800816e:	d015      	beq.n	800819c <_vfiprintf_r+0x13c>
 8008170:	9a07      	ldr	r2, [sp, #28]
 8008172:	4654      	mov	r4, sl
 8008174:	2000      	movs	r0, #0
 8008176:	f04f 0c0a 	mov.w	ip, #10
 800817a:	4621      	mov	r1, r4
 800817c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008180:	3b30      	subs	r3, #48	; 0x30
 8008182:	2b09      	cmp	r3, #9
 8008184:	d94e      	bls.n	8008224 <_vfiprintf_r+0x1c4>
 8008186:	b1b0      	cbz	r0, 80081b6 <_vfiprintf_r+0x156>
 8008188:	9207      	str	r2, [sp, #28]
 800818a:	e014      	b.n	80081b6 <_vfiprintf_r+0x156>
 800818c:	eba0 0308 	sub.w	r3, r0, r8
 8008190:	fa09 f303 	lsl.w	r3, r9, r3
 8008194:	4313      	orrs	r3, r2
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	46a2      	mov	sl, r4
 800819a:	e7d2      	b.n	8008142 <_vfiprintf_r+0xe2>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	1d19      	adds	r1, r3, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	9103      	str	r1, [sp, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bfbb      	ittet	lt
 80081a8:	425b      	neglt	r3, r3
 80081aa:	f042 0202 	orrlt.w	r2, r2, #2
 80081ae:	9307      	strge	r3, [sp, #28]
 80081b0:	9307      	strlt	r3, [sp, #28]
 80081b2:	bfb8      	it	lt
 80081b4:	9204      	strlt	r2, [sp, #16]
 80081b6:	7823      	ldrb	r3, [r4, #0]
 80081b8:	2b2e      	cmp	r3, #46	; 0x2e
 80081ba:	d10c      	bne.n	80081d6 <_vfiprintf_r+0x176>
 80081bc:	7863      	ldrb	r3, [r4, #1]
 80081be:	2b2a      	cmp	r3, #42	; 0x2a
 80081c0:	d135      	bne.n	800822e <_vfiprintf_r+0x1ce>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	1d1a      	adds	r2, r3, #4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	9203      	str	r2, [sp, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfb8      	it	lt
 80081ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081d2:	3402      	adds	r4, #2
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082bc <_vfiprintf_r+0x25c>
 80081da:	7821      	ldrb	r1, [r4, #0]
 80081dc:	2203      	movs	r2, #3
 80081de:	4650      	mov	r0, sl
 80081e0:	f7f7 fffe 	bl	80001e0 <memchr>
 80081e4:	b140      	cbz	r0, 80081f8 <_vfiprintf_r+0x198>
 80081e6:	2340      	movs	r3, #64	; 0x40
 80081e8:	eba0 000a 	sub.w	r0, r0, sl
 80081ec:	fa03 f000 	lsl.w	r0, r3, r0
 80081f0:	9b04      	ldr	r3, [sp, #16]
 80081f2:	4303      	orrs	r3, r0
 80081f4:	3401      	adds	r4, #1
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fc:	482c      	ldr	r0, [pc, #176]	; (80082b0 <_vfiprintf_r+0x250>)
 80081fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008202:	2206      	movs	r2, #6
 8008204:	f7f7 ffec 	bl	80001e0 <memchr>
 8008208:	2800      	cmp	r0, #0
 800820a:	d03f      	beq.n	800828c <_vfiprintf_r+0x22c>
 800820c:	4b29      	ldr	r3, [pc, #164]	; (80082b4 <_vfiprintf_r+0x254>)
 800820e:	bb1b      	cbnz	r3, 8008258 <_vfiprintf_r+0x1f8>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	3307      	adds	r3, #7
 8008214:	f023 0307 	bic.w	r3, r3, #7
 8008218:	3308      	adds	r3, #8
 800821a:	9303      	str	r3, [sp, #12]
 800821c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821e:	443b      	add	r3, r7
 8008220:	9309      	str	r3, [sp, #36]	; 0x24
 8008222:	e767      	b.n	80080f4 <_vfiprintf_r+0x94>
 8008224:	fb0c 3202 	mla	r2, ip, r2, r3
 8008228:	460c      	mov	r4, r1
 800822a:	2001      	movs	r0, #1
 800822c:	e7a5      	b.n	800817a <_vfiprintf_r+0x11a>
 800822e:	2300      	movs	r3, #0
 8008230:	3401      	adds	r4, #1
 8008232:	9305      	str	r3, [sp, #20]
 8008234:	4619      	mov	r1, r3
 8008236:	f04f 0c0a 	mov.w	ip, #10
 800823a:	4620      	mov	r0, r4
 800823c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008240:	3a30      	subs	r2, #48	; 0x30
 8008242:	2a09      	cmp	r2, #9
 8008244:	d903      	bls.n	800824e <_vfiprintf_r+0x1ee>
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0c5      	beq.n	80081d6 <_vfiprintf_r+0x176>
 800824a:	9105      	str	r1, [sp, #20]
 800824c:	e7c3      	b.n	80081d6 <_vfiprintf_r+0x176>
 800824e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008252:	4604      	mov	r4, r0
 8008254:	2301      	movs	r3, #1
 8008256:	e7f0      	b.n	800823a <_vfiprintf_r+0x1da>
 8008258:	ab03      	add	r3, sp, #12
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	462a      	mov	r2, r5
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <_vfiprintf_r+0x258>)
 8008260:	a904      	add	r1, sp, #16
 8008262:	4630      	mov	r0, r6
 8008264:	f3af 8000 	nop.w
 8008268:	4607      	mov	r7, r0
 800826a:	1c78      	adds	r0, r7, #1
 800826c:	d1d6      	bne.n	800821c <_vfiprintf_r+0x1bc>
 800826e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008270:	07d9      	lsls	r1, r3, #31
 8008272:	d405      	bmi.n	8008280 <_vfiprintf_r+0x220>
 8008274:	89ab      	ldrh	r3, [r5, #12]
 8008276:	059a      	lsls	r2, r3, #22
 8008278:	d402      	bmi.n	8008280 <_vfiprintf_r+0x220>
 800827a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800827c:	f000 fc45 	bl	8008b0a <__retarget_lock_release_recursive>
 8008280:	89ab      	ldrh	r3, [r5, #12]
 8008282:	065b      	lsls	r3, r3, #25
 8008284:	f53f af12 	bmi.w	80080ac <_vfiprintf_r+0x4c>
 8008288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828a:	e711      	b.n	80080b0 <_vfiprintf_r+0x50>
 800828c:	ab03      	add	r3, sp, #12
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	462a      	mov	r2, r5
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <_vfiprintf_r+0x258>)
 8008294:	a904      	add	r1, sp, #16
 8008296:	4630      	mov	r0, r6
 8008298:	f000 f880 	bl	800839c <_printf_i>
 800829c:	e7e4      	b.n	8008268 <_vfiprintf_r+0x208>
 800829e:	bf00      	nop
 80082a0:	08009120 	.word	0x08009120
 80082a4:	08009140 	.word	0x08009140
 80082a8:	08009100 	.word	0x08009100
 80082ac:	080090ca 	.word	0x080090ca
 80082b0:	080090d4 	.word	0x080090d4
 80082b4:	00000000 	.word	0x00000000
 80082b8:	0800803b 	.word	0x0800803b
 80082bc:	080090d0 	.word	0x080090d0

080082c0 <_printf_common>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	4616      	mov	r6, r2
 80082c6:	4699      	mov	r9, r3
 80082c8:	688a      	ldr	r2, [r1, #8]
 80082ca:	690b      	ldr	r3, [r1, #16]
 80082cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082d0:	4293      	cmp	r3, r2
 80082d2:	bfb8      	it	lt
 80082d4:	4613      	movlt	r3, r2
 80082d6:	6033      	str	r3, [r6, #0]
 80082d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082dc:	4607      	mov	r7, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	b10a      	cbz	r2, 80082e6 <_printf_common+0x26>
 80082e2:	3301      	adds	r3, #1
 80082e4:	6033      	str	r3, [r6, #0]
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	0699      	lsls	r1, r3, #26
 80082ea:	bf42      	ittt	mi
 80082ec:	6833      	ldrmi	r3, [r6, #0]
 80082ee:	3302      	addmi	r3, #2
 80082f0:	6033      	strmi	r3, [r6, #0]
 80082f2:	6825      	ldr	r5, [r4, #0]
 80082f4:	f015 0506 	ands.w	r5, r5, #6
 80082f8:	d106      	bne.n	8008308 <_printf_common+0x48>
 80082fa:	f104 0a19 	add.w	sl, r4, #25
 80082fe:	68e3      	ldr	r3, [r4, #12]
 8008300:	6832      	ldr	r2, [r6, #0]
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	42ab      	cmp	r3, r5
 8008306:	dc26      	bgt.n	8008356 <_printf_common+0x96>
 8008308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800830c:	1e13      	subs	r3, r2, #0
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	bf18      	it	ne
 8008312:	2301      	movne	r3, #1
 8008314:	0692      	lsls	r2, r2, #26
 8008316:	d42b      	bmi.n	8008370 <_printf_common+0xb0>
 8008318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800831c:	4649      	mov	r1, r9
 800831e:	4638      	mov	r0, r7
 8008320:	47c0      	blx	r8
 8008322:	3001      	adds	r0, #1
 8008324:	d01e      	beq.n	8008364 <_printf_common+0xa4>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	68e5      	ldr	r5, [r4, #12]
 800832a:	6832      	ldr	r2, [r6, #0]
 800832c:	f003 0306 	and.w	r3, r3, #6
 8008330:	2b04      	cmp	r3, #4
 8008332:	bf08      	it	eq
 8008334:	1aad      	subeq	r5, r5, r2
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	6922      	ldr	r2, [r4, #16]
 800833a:	bf0c      	ite	eq
 800833c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008340:	2500      	movne	r5, #0
 8008342:	4293      	cmp	r3, r2
 8008344:	bfc4      	itt	gt
 8008346:	1a9b      	subgt	r3, r3, r2
 8008348:	18ed      	addgt	r5, r5, r3
 800834a:	2600      	movs	r6, #0
 800834c:	341a      	adds	r4, #26
 800834e:	42b5      	cmp	r5, r6
 8008350:	d11a      	bne.n	8008388 <_printf_common+0xc8>
 8008352:	2000      	movs	r0, #0
 8008354:	e008      	b.n	8008368 <_printf_common+0xa8>
 8008356:	2301      	movs	r3, #1
 8008358:	4652      	mov	r2, sl
 800835a:	4649      	mov	r1, r9
 800835c:	4638      	mov	r0, r7
 800835e:	47c0      	blx	r8
 8008360:	3001      	adds	r0, #1
 8008362:	d103      	bne.n	800836c <_printf_common+0xac>
 8008364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836c:	3501      	adds	r5, #1
 800836e:	e7c6      	b.n	80082fe <_printf_common+0x3e>
 8008370:	18e1      	adds	r1, r4, r3
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	2030      	movs	r0, #48	; 0x30
 8008376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800837a:	4422      	add	r2, r4
 800837c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008384:	3302      	adds	r3, #2
 8008386:	e7c7      	b.n	8008318 <_printf_common+0x58>
 8008388:	2301      	movs	r3, #1
 800838a:	4622      	mov	r2, r4
 800838c:	4649      	mov	r1, r9
 800838e:	4638      	mov	r0, r7
 8008390:	47c0      	blx	r8
 8008392:	3001      	adds	r0, #1
 8008394:	d0e6      	beq.n	8008364 <_printf_common+0xa4>
 8008396:	3601      	adds	r6, #1
 8008398:	e7d9      	b.n	800834e <_printf_common+0x8e>
	...

0800839c <_printf_i>:
 800839c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	460c      	mov	r4, r1
 80083a2:	4691      	mov	r9, r2
 80083a4:	7e27      	ldrb	r7, [r4, #24]
 80083a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083a8:	2f78      	cmp	r7, #120	; 0x78
 80083aa:	4680      	mov	r8, r0
 80083ac:	469a      	mov	sl, r3
 80083ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083b2:	d807      	bhi.n	80083c4 <_printf_i+0x28>
 80083b4:	2f62      	cmp	r7, #98	; 0x62
 80083b6:	d80a      	bhi.n	80083ce <_printf_i+0x32>
 80083b8:	2f00      	cmp	r7, #0
 80083ba:	f000 80d8 	beq.w	800856e <_printf_i+0x1d2>
 80083be:	2f58      	cmp	r7, #88	; 0x58
 80083c0:	f000 80a3 	beq.w	800850a <_printf_i+0x16e>
 80083c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083cc:	e03a      	b.n	8008444 <_printf_i+0xa8>
 80083ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083d2:	2b15      	cmp	r3, #21
 80083d4:	d8f6      	bhi.n	80083c4 <_printf_i+0x28>
 80083d6:	a001      	add	r0, pc, #4	; (adr r0, 80083dc <_printf_i+0x40>)
 80083d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083dc:	08008435 	.word	0x08008435
 80083e0:	08008449 	.word	0x08008449
 80083e4:	080083c5 	.word	0x080083c5
 80083e8:	080083c5 	.word	0x080083c5
 80083ec:	080083c5 	.word	0x080083c5
 80083f0:	080083c5 	.word	0x080083c5
 80083f4:	08008449 	.word	0x08008449
 80083f8:	080083c5 	.word	0x080083c5
 80083fc:	080083c5 	.word	0x080083c5
 8008400:	080083c5 	.word	0x080083c5
 8008404:	080083c5 	.word	0x080083c5
 8008408:	08008555 	.word	0x08008555
 800840c:	08008479 	.word	0x08008479
 8008410:	08008537 	.word	0x08008537
 8008414:	080083c5 	.word	0x080083c5
 8008418:	080083c5 	.word	0x080083c5
 800841c:	08008577 	.word	0x08008577
 8008420:	080083c5 	.word	0x080083c5
 8008424:	08008479 	.word	0x08008479
 8008428:	080083c5 	.word	0x080083c5
 800842c:	080083c5 	.word	0x080083c5
 8008430:	0800853f 	.word	0x0800853f
 8008434:	680b      	ldr	r3, [r1, #0]
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	600a      	str	r2, [r1, #0]
 800843c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008444:	2301      	movs	r3, #1
 8008446:	e0a3      	b.n	8008590 <_printf_i+0x1f4>
 8008448:	6825      	ldr	r5, [r4, #0]
 800844a:	6808      	ldr	r0, [r1, #0]
 800844c:	062e      	lsls	r6, r5, #24
 800844e:	f100 0304 	add.w	r3, r0, #4
 8008452:	d50a      	bpl.n	800846a <_printf_i+0xce>
 8008454:	6805      	ldr	r5, [r0, #0]
 8008456:	600b      	str	r3, [r1, #0]
 8008458:	2d00      	cmp	r5, #0
 800845a:	da03      	bge.n	8008464 <_printf_i+0xc8>
 800845c:	232d      	movs	r3, #45	; 0x2d
 800845e:	426d      	negs	r5, r5
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008464:	485e      	ldr	r0, [pc, #376]	; (80085e0 <_printf_i+0x244>)
 8008466:	230a      	movs	r3, #10
 8008468:	e019      	b.n	800849e <_printf_i+0x102>
 800846a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800846e:	6805      	ldr	r5, [r0, #0]
 8008470:	600b      	str	r3, [r1, #0]
 8008472:	bf18      	it	ne
 8008474:	b22d      	sxthne	r5, r5
 8008476:	e7ef      	b.n	8008458 <_printf_i+0xbc>
 8008478:	680b      	ldr	r3, [r1, #0]
 800847a:	6825      	ldr	r5, [r4, #0]
 800847c:	1d18      	adds	r0, r3, #4
 800847e:	6008      	str	r0, [r1, #0]
 8008480:	0628      	lsls	r0, r5, #24
 8008482:	d501      	bpl.n	8008488 <_printf_i+0xec>
 8008484:	681d      	ldr	r5, [r3, #0]
 8008486:	e002      	b.n	800848e <_printf_i+0xf2>
 8008488:	0669      	lsls	r1, r5, #25
 800848a:	d5fb      	bpl.n	8008484 <_printf_i+0xe8>
 800848c:	881d      	ldrh	r5, [r3, #0]
 800848e:	4854      	ldr	r0, [pc, #336]	; (80085e0 <_printf_i+0x244>)
 8008490:	2f6f      	cmp	r7, #111	; 0x6f
 8008492:	bf0c      	ite	eq
 8008494:	2308      	moveq	r3, #8
 8008496:	230a      	movne	r3, #10
 8008498:	2100      	movs	r1, #0
 800849a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800849e:	6866      	ldr	r6, [r4, #4]
 80084a0:	60a6      	str	r6, [r4, #8]
 80084a2:	2e00      	cmp	r6, #0
 80084a4:	bfa2      	ittt	ge
 80084a6:	6821      	ldrge	r1, [r4, #0]
 80084a8:	f021 0104 	bicge.w	r1, r1, #4
 80084ac:	6021      	strge	r1, [r4, #0]
 80084ae:	b90d      	cbnz	r5, 80084b4 <_printf_i+0x118>
 80084b0:	2e00      	cmp	r6, #0
 80084b2:	d04d      	beq.n	8008550 <_printf_i+0x1b4>
 80084b4:	4616      	mov	r6, r2
 80084b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80084ba:	fb03 5711 	mls	r7, r3, r1, r5
 80084be:	5dc7      	ldrb	r7, [r0, r7]
 80084c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084c4:	462f      	mov	r7, r5
 80084c6:	42bb      	cmp	r3, r7
 80084c8:	460d      	mov	r5, r1
 80084ca:	d9f4      	bls.n	80084b6 <_printf_i+0x11a>
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d10b      	bne.n	80084e8 <_printf_i+0x14c>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	07df      	lsls	r7, r3, #31
 80084d4:	d508      	bpl.n	80084e8 <_printf_i+0x14c>
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	6861      	ldr	r1, [r4, #4]
 80084da:	4299      	cmp	r1, r3
 80084dc:	bfde      	ittt	le
 80084de:	2330      	movle	r3, #48	; 0x30
 80084e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084e4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80084e8:	1b92      	subs	r2, r2, r6
 80084ea:	6122      	str	r2, [r4, #16]
 80084ec:	f8cd a000 	str.w	sl, [sp]
 80084f0:	464b      	mov	r3, r9
 80084f2:	aa03      	add	r2, sp, #12
 80084f4:	4621      	mov	r1, r4
 80084f6:	4640      	mov	r0, r8
 80084f8:	f7ff fee2 	bl	80082c0 <_printf_common>
 80084fc:	3001      	adds	r0, #1
 80084fe:	d14c      	bne.n	800859a <_printf_i+0x1fe>
 8008500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008504:	b004      	add	sp, #16
 8008506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850a:	4835      	ldr	r0, [pc, #212]	; (80085e0 <_printf_i+0x244>)
 800850c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	680e      	ldr	r6, [r1, #0]
 8008514:	061f      	lsls	r7, r3, #24
 8008516:	f856 5b04 	ldr.w	r5, [r6], #4
 800851a:	600e      	str	r6, [r1, #0]
 800851c:	d514      	bpl.n	8008548 <_printf_i+0x1ac>
 800851e:	07d9      	lsls	r1, r3, #31
 8008520:	bf44      	itt	mi
 8008522:	f043 0320 	orrmi.w	r3, r3, #32
 8008526:	6023      	strmi	r3, [r4, #0]
 8008528:	b91d      	cbnz	r5, 8008532 <_printf_i+0x196>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	f023 0320 	bic.w	r3, r3, #32
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	2310      	movs	r3, #16
 8008534:	e7b0      	b.n	8008498 <_printf_i+0xfc>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f043 0320 	orr.w	r3, r3, #32
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	2378      	movs	r3, #120	; 0x78
 8008540:	4828      	ldr	r0, [pc, #160]	; (80085e4 <_printf_i+0x248>)
 8008542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008546:	e7e3      	b.n	8008510 <_printf_i+0x174>
 8008548:	065e      	lsls	r6, r3, #25
 800854a:	bf48      	it	mi
 800854c:	b2ad      	uxthmi	r5, r5
 800854e:	e7e6      	b.n	800851e <_printf_i+0x182>
 8008550:	4616      	mov	r6, r2
 8008552:	e7bb      	b.n	80084cc <_printf_i+0x130>
 8008554:	680b      	ldr	r3, [r1, #0]
 8008556:	6826      	ldr	r6, [r4, #0]
 8008558:	6960      	ldr	r0, [r4, #20]
 800855a:	1d1d      	adds	r5, r3, #4
 800855c:	600d      	str	r5, [r1, #0]
 800855e:	0635      	lsls	r5, r6, #24
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	d501      	bpl.n	8008568 <_printf_i+0x1cc>
 8008564:	6018      	str	r0, [r3, #0]
 8008566:	e002      	b.n	800856e <_printf_i+0x1d2>
 8008568:	0671      	lsls	r1, r6, #25
 800856a:	d5fb      	bpl.n	8008564 <_printf_i+0x1c8>
 800856c:	8018      	strh	r0, [r3, #0]
 800856e:	2300      	movs	r3, #0
 8008570:	6123      	str	r3, [r4, #16]
 8008572:	4616      	mov	r6, r2
 8008574:	e7ba      	b.n	80084ec <_printf_i+0x150>
 8008576:	680b      	ldr	r3, [r1, #0]
 8008578:	1d1a      	adds	r2, r3, #4
 800857a:	600a      	str	r2, [r1, #0]
 800857c:	681e      	ldr	r6, [r3, #0]
 800857e:	6862      	ldr	r2, [r4, #4]
 8008580:	2100      	movs	r1, #0
 8008582:	4630      	mov	r0, r6
 8008584:	f7f7 fe2c 	bl	80001e0 <memchr>
 8008588:	b108      	cbz	r0, 800858e <_printf_i+0x1f2>
 800858a:	1b80      	subs	r0, r0, r6
 800858c:	6060      	str	r0, [r4, #4]
 800858e:	6863      	ldr	r3, [r4, #4]
 8008590:	6123      	str	r3, [r4, #16]
 8008592:	2300      	movs	r3, #0
 8008594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008598:	e7a8      	b.n	80084ec <_printf_i+0x150>
 800859a:	6923      	ldr	r3, [r4, #16]
 800859c:	4632      	mov	r2, r6
 800859e:	4649      	mov	r1, r9
 80085a0:	4640      	mov	r0, r8
 80085a2:	47d0      	blx	sl
 80085a4:	3001      	adds	r0, #1
 80085a6:	d0ab      	beq.n	8008500 <_printf_i+0x164>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	079b      	lsls	r3, r3, #30
 80085ac:	d413      	bmi.n	80085d6 <_printf_i+0x23a>
 80085ae:	68e0      	ldr	r0, [r4, #12]
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	4298      	cmp	r0, r3
 80085b4:	bfb8      	it	lt
 80085b6:	4618      	movlt	r0, r3
 80085b8:	e7a4      	b.n	8008504 <_printf_i+0x168>
 80085ba:	2301      	movs	r3, #1
 80085bc:	4632      	mov	r2, r6
 80085be:	4649      	mov	r1, r9
 80085c0:	4640      	mov	r0, r8
 80085c2:	47d0      	blx	sl
 80085c4:	3001      	adds	r0, #1
 80085c6:	d09b      	beq.n	8008500 <_printf_i+0x164>
 80085c8:	3501      	adds	r5, #1
 80085ca:	68e3      	ldr	r3, [r4, #12]
 80085cc:	9903      	ldr	r1, [sp, #12]
 80085ce:	1a5b      	subs	r3, r3, r1
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	dcf2      	bgt.n	80085ba <_printf_i+0x21e>
 80085d4:	e7eb      	b.n	80085ae <_printf_i+0x212>
 80085d6:	2500      	movs	r5, #0
 80085d8:	f104 0619 	add.w	r6, r4, #25
 80085dc:	e7f5      	b.n	80085ca <_printf_i+0x22e>
 80085de:	bf00      	nop
 80085e0:	080090db 	.word	0x080090db
 80085e4:	080090ec 	.word	0x080090ec

080085e8 <_sbrk_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4d06      	ldr	r5, [pc, #24]	; (8008604 <_sbrk_r+0x1c>)
 80085ec:	2300      	movs	r3, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	f7f8 fe42 	bl	800127c <_sbrk>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_sbrk_r+0x1a>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_sbrk_r+0x1a>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	20000704 	.word	0x20000704

08008608 <__swbuf_r>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	460e      	mov	r6, r1
 800860c:	4614      	mov	r4, r2
 800860e:	4605      	mov	r5, r0
 8008610:	b118      	cbz	r0, 800861a <__swbuf_r+0x12>
 8008612:	6983      	ldr	r3, [r0, #24]
 8008614:	b90b      	cbnz	r3, 800861a <__swbuf_r+0x12>
 8008616:	f000 f9d9 	bl	80089cc <__sinit>
 800861a:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <__swbuf_r+0x98>)
 800861c:	429c      	cmp	r4, r3
 800861e:	d12b      	bne.n	8008678 <__swbuf_r+0x70>
 8008620:	686c      	ldr	r4, [r5, #4]
 8008622:	69a3      	ldr	r3, [r4, #24]
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	071a      	lsls	r2, r3, #28
 800862a:	d52f      	bpl.n	800868c <__swbuf_r+0x84>
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	b36b      	cbz	r3, 800868c <__swbuf_r+0x84>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	1ac0      	subs	r0, r0, r3
 8008636:	6963      	ldr	r3, [r4, #20]
 8008638:	b2f6      	uxtb	r6, r6
 800863a:	4283      	cmp	r3, r0
 800863c:	4637      	mov	r7, r6
 800863e:	dc04      	bgt.n	800864a <__swbuf_r+0x42>
 8008640:	4621      	mov	r1, r4
 8008642:	4628      	mov	r0, r5
 8008644:	f000 f92e 	bl	80088a4 <_fflush_r>
 8008648:	bb30      	cbnz	r0, 8008698 <__swbuf_r+0x90>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	3b01      	subs	r3, #1
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	6022      	str	r2, [r4, #0]
 8008656:	701e      	strb	r6, [r3, #0]
 8008658:	6963      	ldr	r3, [r4, #20]
 800865a:	3001      	adds	r0, #1
 800865c:	4283      	cmp	r3, r0
 800865e:	d004      	beq.n	800866a <__swbuf_r+0x62>
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	07db      	lsls	r3, r3, #31
 8008664:	d506      	bpl.n	8008674 <__swbuf_r+0x6c>
 8008666:	2e0a      	cmp	r6, #10
 8008668:	d104      	bne.n	8008674 <__swbuf_r+0x6c>
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f919 	bl	80088a4 <_fflush_r>
 8008672:	b988      	cbnz	r0, 8008698 <__swbuf_r+0x90>
 8008674:	4638      	mov	r0, r7
 8008676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <__swbuf_r+0x9c>)
 800867a:	429c      	cmp	r4, r3
 800867c:	d101      	bne.n	8008682 <__swbuf_r+0x7a>
 800867e:	68ac      	ldr	r4, [r5, #8]
 8008680:	e7cf      	b.n	8008622 <__swbuf_r+0x1a>
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <__swbuf_r+0xa0>)
 8008684:	429c      	cmp	r4, r3
 8008686:	bf08      	it	eq
 8008688:	68ec      	ldreq	r4, [r5, #12]
 800868a:	e7ca      	b.n	8008622 <__swbuf_r+0x1a>
 800868c:	4621      	mov	r1, r4
 800868e:	4628      	mov	r0, r5
 8008690:	f000 f80c 	bl	80086ac <__swsetup_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	d0cb      	beq.n	8008630 <__swbuf_r+0x28>
 8008698:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800869c:	e7ea      	b.n	8008674 <__swbuf_r+0x6c>
 800869e:	bf00      	nop
 80086a0:	08009120 	.word	0x08009120
 80086a4:	08009140 	.word	0x08009140
 80086a8:	08009100 	.word	0x08009100

080086ac <__swsetup_r>:
 80086ac:	4b32      	ldr	r3, [pc, #200]	; (8008778 <__swsetup_r+0xcc>)
 80086ae:	b570      	push	{r4, r5, r6, lr}
 80086b0:	681d      	ldr	r5, [r3, #0]
 80086b2:	4606      	mov	r6, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	b125      	cbz	r5, 80086c2 <__swsetup_r+0x16>
 80086b8:	69ab      	ldr	r3, [r5, #24]
 80086ba:	b913      	cbnz	r3, 80086c2 <__swsetup_r+0x16>
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 f985 	bl	80089cc <__sinit>
 80086c2:	4b2e      	ldr	r3, [pc, #184]	; (800877c <__swsetup_r+0xd0>)
 80086c4:	429c      	cmp	r4, r3
 80086c6:	d10f      	bne.n	80086e8 <__swsetup_r+0x3c>
 80086c8:	686c      	ldr	r4, [r5, #4]
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086d0:	0719      	lsls	r1, r3, #28
 80086d2:	d42c      	bmi.n	800872e <__swsetup_r+0x82>
 80086d4:	06dd      	lsls	r5, r3, #27
 80086d6:	d411      	bmi.n	80086fc <__swsetup_r+0x50>
 80086d8:	2309      	movs	r3, #9
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e6:	e03e      	b.n	8008766 <__swsetup_r+0xba>
 80086e8:	4b25      	ldr	r3, [pc, #148]	; (8008780 <__swsetup_r+0xd4>)
 80086ea:	429c      	cmp	r4, r3
 80086ec:	d101      	bne.n	80086f2 <__swsetup_r+0x46>
 80086ee:	68ac      	ldr	r4, [r5, #8]
 80086f0:	e7eb      	b.n	80086ca <__swsetup_r+0x1e>
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <__swsetup_r+0xd8>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	bf08      	it	eq
 80086f8:	68ec      	ldreq	r4, [r5, #12]
 80086fa:	e7e6      	b.n	80086ca <__swsetup_r+0x1e>
 80086fc:	0758      	lsls	r0, r3, #29
 80086fe:	d512      	bpl.n	8008726 <__swsetup_r+0x7a>
 8008700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008702:	b141      	cbz	r1, 8008716 <__swsetup_r+0x6a>
 8008704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008708:	4299      	cmp	r1, r3
 800870a:	d002      	beq.n	8008712 <__swsetup_r+0x66>
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff fa77 	bl	8007c00 <_free_r>
 8008712:	2300      	movs	r3, #0
 8008714:	6363      	str	r3, [r4, #52]	; 0x34
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	2300      	movs	r3, #0
 8008720:	6063      	str	r3, [r4, #4]
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f043 0308 	orr.w	r3, r3, #8
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	6923      	ldr	r3, [r4, #16]
 8008730:	b94b      	cbnz	r3, 8008746 <__swsetup_r+0x9a>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873c:	d003      	beq.n	8008746 <__swsetup_r+0x9a>
 800873e:	4621      	mov	r1, r4
 8008740:	4630      	mov	r0, r6
 8008742:	f000 fa07 	bl	8008b54 <__smakebuf_r>
 8008746:	89a0      	ldrh	r0, [r4, #12]
 8008748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800874c:	f010 0301 	ands.w	r3, r0, #1
 8008750:	d00a      	beq.n	8008768 <__swsetup_r+0xbc>
 8008752:	2300      	movs	r3, #0
 8008754:	60a3      	str	r3, [r4, #8]
 8008756:	6963      	ldr	r3, [r4, #20]
 8008758:	425b      	negs	r3, r3
 800875a:	61a3      	str	r3, [r4, #24]
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	b943      	cbnz	r3, 8008772 <__swsetup_r+0xc6>
 8008760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008764:	d1ba      	bne.n	80086dc <__swsetup_r+0x30>
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	0781      	lsls	r1, r0, #30
 800876a:	bf58      	it	pl
 800876c:	6963      	ldrpl	r3, [r4, #20]
 800876e:	60a3      	str	r3, [r4, #8]
 8008770:	e7f4      	b.n	800875c <__swsetup_r+0xb0>
 8008772:	2000      	movs	r0, #0
 8008774:	e7f7      	b.n	8008766 <__swsetup_r+0xba>
 8008776:	bf00      	nop
 8008778:	20000020 	.word	0x20000020
 800877c:	08009120 	.word	0x08009120
 8008780:	08009140 	.word	0x08009140
 8008784:	08009100 	.word	0x08009100

08008788 <abort>:
 8008788:	b508      	push	{r3, lr}
 800878a:	2006      	movs	r0, #6
 800878c:	f000 fa96 	bl	8008cbc <raise>
 8008790:	2001      	movs	r0, #1
 8008792:	f7f8 fcfb 	bl	800118c <_exit>
	...

08008798 <__sflush_r>:
 8008798:	898a      	ldrh	r2, [r1, #12]
 800879a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879e:	4605      	mov	r5, r0
 80087a0:	0710      	lsls	r0, r2, #28
 80087a2:	460c      	mov	r4, r1
 80087a4:	d458      	bmi.n	8008858 <__sflush_r+0xc0>
 80087a6:	684b      	ldr	r3, [r1, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc05      	bgt.n	80087b8 <__sflush_r+0x20>
 80087ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	dc02      	bgt.n	80087b8 <__sflush_r+0x20>
 80087b2:	2000      	movs	r0, #0
 80087b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ba:	2e00      	cmp	r6, #0
 80087bc:	d0f9      	beq.n	80087b2 <__sflush_r+0x1a>
 80087be:	2300      	movs	r3, #0
 80087c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087c4:	682f      	ldr	r7, [r5, #0]
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	d032      	beq.n	8008830 <__sflush_r+0x98>
 80087ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	075a      	lsls	r2, r3, #29
 80087d0:	d505      	bpl.n	80087de <__sflush_r+0x46>
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	1ac0      	subs	r0, r0, r3
 80087d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087d8:	b10b      	cbz	r3, 80087de <__sflush_r+0x46>
 80087da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087dc:	1ac0      	subs	r0, r0, r3
 80087de:	2300      	movs	r3, #0
 80087e0:	4602      	mov	r2, r0
 80087e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	4628      	mov	r0, r5
 80087e8:	47b0      	blx	r6
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	d106      	bne.n	80087fe <__sflush_r+0x66>
 80087f0:	6829      	ldr	r1, [r5, #0]
 80087f2:	291d      	cmp	r1, #29
 80087f4:	d82c      	bhi.n	8008850 <__sflush_r+0xb8>
 80087f6:	4a2a      	ldr	r2, [pc, #168]	; (80088a0 <__sflush_r+0x108>)
 80087f8:	40ca      	lsrs	r2, r1
 80087fa:	07d6      	lsls	r6, r2, #31
 80087fc:	d528      	bpl.n	8008850 <__sflush_r+0xb8>
 80087fe:	2200      	movs	r2, #0
 8008800:	6062      	str	r2, [r4, #4]
 8008802:	04d9      	lsls	r1, r3, #19
 8008804:	6922      	ldr	r2, [r4, #16]
 8008806:	6022      	str	r2, [r4, #0]
 8008808:	d504      	bpl.n	8008814 <__sflush_r+0x7c>
 800880a:	1c42      	adds	r2, r0, #1
 800880c:	d101      	bne.n	8008812 <__sflush_r+0x7a>
 800880e:	682b      	ldr	r3, [r5, #0]
 8008810:	b903      	cbnz	r3, 8008814 <__sflush_r+0x7c>
 8008812:	6560      	str	r0, [r4, #84]	; 0x54
 8008814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008816:	602f      	str	r7, [r5, #0]
 8008818:	2900      	cmp	r1, #0
 800881a:	d0ca      	beq.n	80087b2 <__sflush_r+0x1a>
 800881c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <__sflush_r+0x92>
 8008824:	4628      	mov	r0, r5
 8008826:	f7ff f9eb 	bl	8007c00 <_free_r>
 800882a:	2000      	movs	r0, #0
 800882c:	6360      	str	r0, [r4, #52]	; 0x34
 800882e:	e7c1      	b.n	80087b4 <__sflush_r+0x1c>
 8008830:	6a21      	ldr	r1, [r4, #32]
 8008832:	2301      	movs	r3, #1
 8008834:	4628      	mov	r0, r5
 8008836:	47b0      	blx	r6
 8008838:	1c41      	adds	r1, r0, #1
 800883a:	d1c7      	bne.n	80087cc <__sflush_r+0x34>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0c4      	beq.n	80087cc <__sflush_r+0x34>
 8008842:	2b1d      	cmp	r3, #29
 8008844:	d001      	beq.n	800884a <__sflush_r+0xb2>
 8008846:	2b16      	cmp	r3, #22
 8008848:	d101      	bne.n	800884e <__sflush_r+0xb6>
 800884a:	602f      	str	r7, [r5, #0]
 800884c:	e7b1      	b.n	80087b2 <__sflush_r+0x1a>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	e7ad      	b.n	80087b4 <__sflush_r+0x1c>
 8008858:	690f      	ldr	r7, [r1, #16]
 800885a:	2f00      	cmp	r7, #0
 800885c:	d0a9      	beq.n	80087b2 <__sflush_r+0x1a>
 800885e:	0793      	lsls	r3, r2, #30
 8008860:	680e      	ldr	r6, [r1, #0]
 8008862:	bf08      	it	eq
 8008864:	694b      	ldreq	r3, [r1, #20]
 8008866:	600f      	str	r7, [r1, #0]
 8008868:	bf18      	it	ne
 800886a:	2300      	movne	r3, #0
 800886c:	eba6 0807 	sub.w	r8, r6, r7
 8008870:	608b      	str	r3, [r1, #8]
 8008872:	f1b8 0f00 	cmp.w	r8, #0
 8008876:	dd9c      	ble.n	80087b2 <__sflush_r+0x1a>
 8008878:	6a21      	ldr	r1, [r4, #32]
 800887a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800887c:	4643      	mov	r3, r8
 800887e:	463a      	mov	r2, r7
 8008880:	4628      	mov	r0, r5
 8008882:	47b0      	blx	r6
 8008884:	2800      	cmp	r0, #0
 8008886:	dc06      	bgt.n	8008896 <__sflush_r+0xfe>
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008894:	e78e      	b.n	80087b4 <__sflush_r+0x1c>
 8008896:	4407      	add	r7, r0
 8008898:	eba8 0800 	sub.w	r8, r8, r0
 800889c:	e7e9      	b.n	8008872 <__sflush_r+0xda>
 800889e:	bf00      	nop
 80088a0:	20400001 	.word	0x20400001

080088a4 <_fflush_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	690b      	ldr	r3, [r1, #16]
 80088a8:	4605      	mov	r5, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	b913      	cbnz	r3, 80088b4 <_fflush_r+0x10>
 80088ae:	2500      	movs	r5, #0
 80088b0:	4628      	mov	r0, r5
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	b118      	cbz	r0, 80088be <_fflush_r+0x1a>
 80088b6:	6983      	ldr	r3, [r0, #24]
 80088b8:	b90b      	cbnz	r3, 80088be <_fflush_r+0x1a>
 80088ba:	f000 f887 	bl	80089cc <__sinit>
 80088be:	4b14      	ldr	r3, [pc, #80]	; (8008910 <_fflush_r+0x6c>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	d11b      	bne.n	80088fc <_fflush_r+0x58>
 80088c4:	686c      	ldr	r4, [r5, #4]
 80088c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0ef      	beq.n	80088ae <_fflush_r+0xa>
 80088ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088d0:	07d0      	lsls	r0, r2, #31
 80088d2:	d404      	bmi.n	80088de <_fflush_r+0x3a>
 80088d4:	0599      	lsls	r1, r3, #22
 80088d6:	d402      	bmi.n	80088de <_fflush_r+0x3a>
 80088d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088da:	f000 f915 	bl	8008b08 <__retarget_lock_acquire_recursive>
 80088de:	4628      	mov	r0, r5
 80088e0:	4621      	mov	r1, r4
 80088e2:	f7ff ff59 	bl	8008798 <__sflush_r>
 80088e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088e8:	07da      	lsls	r2, r3, #31
 80088ea:	4605      	mov	r5, r0
 80088ec:	d4e0      	bmi.n	80088b0 <_fflush_r+0xc>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	059b      	lsls	r3, r3, #22
 80088f2:	d4dd      	bmi.n	80088b0 <_fflush_r+0xc>
 80088f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f6:	f000 f908 	bl	8008b0a <__retarget_lock_release_recursive>
 80088fa:	e7d9      	b.n	80088b0 <_fflush_r+0xc>
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <_fflush_r+0x70>)
 80088fe:	429c      	cmp	r4, r3
 8008900:	d101      	bne.n	8008906 <_fflush_r+0x62>
 8008902:	68ac      	ldr	r4, [r5, #8]
 8008904:	e7df      	b.n	80088c6 <_fflush_r+0x22>
 8008906:	4b04      	ldr	r3, [pc, #16]	; (8008918 <_fflush_r+0x74>)
 8008908:	429c      	cmp	r4, r3
 800890a:	bf08      	it	eq
 800890c:	68ec      	ldreq	r4, [r5, #12]
 800890e:	e7da      	b.n	80088c6 <_fflush_r+0x22>
 8008910:	08009120 	.word	0x08009120
 8008914:	08009140 	.word	0x08009140
 8008918:	08009100 	.word	0x08009100

0800891c <std>:
 800891c:	2300      	movs	r3, #0
 800891e:	b510      	push	{r4, lr}
 8008920:	4604      	mov	r4, r0
 8008922:	e9c0 3300 	strd	r3, r3, [r0]
 8008926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800892a:	6083      	str	r3, [r0, #8]
 800892c:	8181      	strh	r1, [r0, #12]
 800892e:	6643      	str	r3, [r0, #100]	; 0x64
 8008930:	81c2      	strh	r2, [r0, #14]
 8008932:	6183      	str	r3, [r0, #24]
 8008934:	4619      	mov	r1, r3
 8008936:	2208      	movs	r2, #8
 8008938:	305c      	adds	r0, #92	; 0x5c
 800893a:	f7fe ffd5 	bl	80078e8 <memset>
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <std+0x38>)
 8008940:	6263      	str	r3, [r4, #36]	; 0x24
 8008942:	4b05      	ldr	r3, [pc, #20]	; (8008958 <std+0x3c>)
 8008944:	62a3      	str	r3, [r4, #40]	; 0x28
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <std+0x40>)
 8008948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800894a:	4b05      	ldr	r3, [pc, #20]	; (8008960 <std+0x44>)
 800894c:	6224      	str	r4, [r4, #32]
 800894e:	6323      	str	r3, [r4, #48]	; 0x30
 8008950:	bd10      	pop	{r4, pc}
 8008952:	bf00      	nop
 8008954:	08008cf5 	.word	0x08008cf5
 8008958:	08008d17 	.word	0x08008d17
 800895c:	08008d4f 	.word	0x08008d4f
 8008960:	08008d73 	.word	0x08008d73

08008964 <_cleanup_r>:
 8008964:	4901      	ldr	r1, [pc, #4]	; (800896c <_cleanup_r+0x8>)
 8008966:	f000 b8af 	b.w	8008ac8 <_fwalk_reent>
 800896a:	bf00      	nop
 800896c:	080088a5 	.word	0x080088a5

08008970 <__sfmoreglue>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	1e4a      	subs	r2, r1, #1
 8008974:	2568      	movs	r5, #104	; 0x68
 8008976:	4355      	muls	r5, r2
 8008978:	460e      	mov	r6, r1
 800897a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800897e:	f7ff f98f 	bl	8007ca0 <_malloc_r>
 8008982:	4604      	mov	r4, r0
 8008984:	b140      	cbz	r0, 8008998 <__sfmoreglue+0x28>
 8008986:	2100      	movs	r1, #0
 8008988:	e9c0 1600 	strd	r1, r6, [r0]
 800898c:	300c      	adds	r0, #12
 800898e:	60a0      	str	r0, [r4, #8]
 8008990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008994:	f7fe ffa8 	bl	80078e8 <memset>
 8008998:	4620      	mov	r0, r4
 800899a:	bd70      	pop	{r4, r5, r6, pc}

0800899c <__sfp_lock_acquire>:
 800899c:	4801      	ldr	r0, [pc, #4]	; (80089a4 <__sfp_lock_acquire+0x8>)
 800899e:	f000 b8b3 	b.w	8008b08 <__retarget_lock_acquire_recursive>
 80089a2:	bf00      	nop
 80089a4:	20000700 	.word	0x20000700

080089a8 <__sfp_lock_release>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__sfp_lock_release+0x8>)
 80089aa:	f000 b8ae 	b.w	8008b0a <__retarget_lock_release_recursive>
 80089ae:	bf00      	nop
 80089b0:	20000700 	.word	0x20000700

080089b4 <__sinit_lock_acquire>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__sinit_lock_acquire+0x8>)
 80089b6:	f000 b8a7 	b.w	8008b08 <__retarget_lock_acquire_recursive>
 80089ba:	bf00      	nop
 80089bc:	200006fb 	.word	0x200006fb

080089c0 <__sinit_lock_release>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__sinit_lock_release+0x8>)
 80089c2:	f000 b8a2 	b.w	8008b0a <__retarget_lock_release_recursive>
 80089c6:	bf00      	nop
 80089c8:	200006fb 	.word	0x200006fb

080089cc <__sinit>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	4604      	mov	r4, r0
 80089d0:	f7ff fff0 	bl	80089b4 <__sinit_lock_acquire>
 80089d4:	69a3      	ldr	r3, [r4, #24]
 80089d6:	b11b      	cbz	r3, 80089e0 <__sinit+0x14>
 80089d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089dc:	f7ff bff0 	b.w	80089c0 <__sinit_lock_release>
 80089e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089e4:	6523      	str	r3, [r4, #80]	; 0x50
 80089e6:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <__sinit+0x68>)
 80089e8:	4a13      	ldr	r2, [pc, #76]	; (8008a38 <__sinit+0x6c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	bf04      	itt	eq
 80089f2:	2301      	moveq	r3, #1
 80089f4:	61a3      	streq	r3, [r4, #24]
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 f820 	bl	8008a3c <__sfp>
 80089fc:	6060      	str	r0, [r4, #4]
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 f81c 	bl	8008a3c <__sfp>
 8008a04:	60a0      	str	r0, [r4, #8]
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f818 	bl	8008a3c <__sfp>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	60e0      	str	r0, [r4, #12]
 8008a10:	2104      	movs	r1, #4
 8008a12:	6860      	ldr	r0, [r4, #4]
 8008a14:	f7ff ff82 	bl	800891c <std>
 8008a18:	68a0      	ldr	r0, [r4, #8]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	2109      	movs	r1, #9
 8008a1e:	f7ff ff7d 	bl	800891c <std>
 8008a22:	68e0      	ldr	r0, [r4, #12]
 8008a24:	2202      	movs	r2, #2
 8008a26:	2112      	movs	r1, #18
 8008a28:	f7ff ff78 	bl	800891c <std>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	61a3      	str	r3, [r4, #24]
 8008a30:	e7d2      	b.n	80089d8 <__sinit+0xc>
 8008a32:	bf00      	nop
 8008a34:	08008eec 	.word	0x08008eec
 8008a38:	08008965 	.word	0x08008965

08008a3c <__sfp>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	4607      	mov	r7, r0
 8008a40:	f7ff ffac 	bl	800899c <__sfp_lock_acquire>
 8008a44:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <__sfp+0x84>)
 8008a46:	681e      	ldr	r6, [r3, #0]
 8008a48:	69b3      	ldr	r3, [r6, #24]
 8008a4a:	b913      	cbnz	r3, 8008a52 <__sfp+0x16>
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7ff ffbd 	bl	80089cc <__sinit>
 8008a52:	3648      	adds	r6, #72	; 0x48
 8008a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	d503      	bpl.n	8008a64 <__sfp+0x28>
 8008a5c:	6833      	ldr	r3, [r6, #0]
 8008a5e:	b30b      	cbz	r3, 8008aa4 <__sfp+0x68>
 8008a60:	6836      	ldr	r6, [r6, #0]
 8008a62:	e7f7      	b.n	8008a54 <__sfp+0x18>
 8008a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a68:	b9d5      	cbnz	r5, 8008aa0 <__sfp+0x64>
 8008a6a:	4b16      	ldr	r3, [pc, #88]	; (8008ac4 <__sfp+0x88>)
 8008a6c:	60e3      	str	r3, [r4, #12]
 8008a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a72:	6665      	str	r5, [r4, #100]	; 0x64
 8008a74:	f000 f847 	bl	8008b06 <__retarget_lock_init_recursive>
 8008a78:	f7ff ff96 	bl	80089a8 <__sfp_lock_release>
 8008a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a84:	6025      	str	r5, [r4, #0]
 8008a86:	61a5      	str	r5, [r4, #24]
 8008a88:	2208      	movs	r2, #8
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a90:	f7fe ff2a 	bl	80078e8 <memset>
 8008a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa0:	3468      	adds	r4, #104	; 0x68
 8008aa2:	e7d9      	b.n	8008a58 <__sfp+0x1c>
 8008aa4:	2104      	movs	r1, #4
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f7ff ff62 	bl	8008970 <__sfmoreglue>
 8008aac:	4604      	mov	r4, r0
 8008aae:	6030      	str	r0, [r6, #0]
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d1d5      	bne.n	8008a60 <__sfp+0x24>
 8008ab4:	f7ff ff78 	bl	80089a8 <__sfp_lock_release>
 8008ab8:	230c      	movs	r3, #12
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	e7ee      	b.n	8008a9c <__sfp+0x60>
 8008abe:	bf00      	nop
 8008ac0:	08008eec 	.word	0x08008eec
 8008ac4:	ffff0001 	.word	0xffff0001

08008ac8 <_fwalk_reent>:
 8008ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008acc:	4606      	mov	r6, r0
 8008ace:	4688      	mov	r8, r1
 8008ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ad4:	2700      	movs	r7, #0
 8008ad6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ada:	f1b9 0901 	subs.w	r9, r9, #1
 8008ade:	d505      	bpl.n	8008aec <_fwalk_reent+0x24>
 8008ae0:	6824      	ldr	r4, [r4, #0]
 8008ae2:	2c00      	cmp	r4, #0
 8008ae4:	d1f7      	bne.n	8008ad6 <_fwalk_reent+0xe>
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aec:	89ab      	ldrh	r3, [r5, #12]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d907      	bls.n	8008b02 <_fwalk_reent+0x3a>
 8008af2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008af6:	3301      	adds	r3, #1
 8008af8:	d003      	beq.n	8008b02 <_fwalk_reent+0x3a>
 8008afa:	4629      	mov	r1, r5
 8008afc:	4630      	mov	r0, r6
 8008afe:	47c0      	blx	r8
 8008b00:	4307      	orrs	r7, r0
 8008b02:	3568      	adds	r5, #104	; 0x68
 8008b04:	e7e9      	b.n	8008ada <_fwalk_reent+0x12>

08008b06 <__retarget_lock_init_recursive>:
 8008b06:	4770      	bx	lr

08008b08 <__retarget_lock_acquire_recursive>:
 8008b08:	4770      	bx	lr

08008b0a <__retarget_lock_release_recursive>:
 8008b0a:	4770      	bx	lr

08008b0c <__swhatbuf_r>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	460e      	mov	r6, r1
 8008b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b14:	2900      	cmp	r1, #0
 8008b16:	b096      	sub	sp, #88	; 0x58
 8008b18:	4614      	mov	r4, r2
 8008b1a:	461d      	mov	r5, r3
 8008b1c:	da07      	bge.n	8008b2e <__swhatbuf_r+0x22>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	89b3      	ldrh	r3, [r6, #12]
 8008b24:	061a      	lsls	r2, r3, #24
 8008b26:	d410      	bmi.n	8008b4a <__swhatbuf_r+0x3e>
 8008b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b2c:	e00e      	b.n	8008b4c <__swhatbuf_r+0x40>
 8008b2e:	466a      	mov	r2, sp
 8008b30:	f000 f946 	bl	8008dc0 <_fstat_r>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	dbf2      	blt.n	8008b1e <__swhatbuf_r+0x12>
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b42:	425a      	negs	r2, r3
 8008b44:	415a      	adcs	r2, r3
 8008b46:	602a      	str	r2, [r5, #0]
 8008b48:	e7ee      	b.n	8008b28 <__swhatbuf_r+0x1c>
 8008b4a:	2340      	movs	r3, #64	; 0x40
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	b016      	add	sp, #88	; 0x58
 8008b52:	bd70      	pop	{r4, r5, r6, pc}

08008b54 <__smakebuf_r>:
 8008b54:	898b      	ldrh	r3, [r1, #12]
 8008b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b58:	079d      	lsls	r5, r3, #30
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	d507      	bpl.n	8008b70 <__smakebuf_r+0x1c>
 8008b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	6163      	str	r3, [r4, #20]
 8008b6c:	b002      	add	sp, #8
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	ab01      	add	r3, sp, #4
 8008b72:	466a      	mov	r2, sp
 8008b74:	f7ff ffca 	bl	8008b0c <__swhatbuf_r>
 8008b78:	9900      	ldr	r1, [sp, #0]
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f7ff f88f 	bl	8007ca0 <_malloc_r>
 8008b82:	b948      	cbnz	r0, 8008b98 <__smakebuf_r+0x44>
 8008b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b88:	059a      	lsls	r2, r3, #22
 8008b8a:	d4ef      	bmi.n	8008b6c <__smakebuf_r+0x18>
 8008b8c:	f023 0303 	bic.w	r3, r3, #3
 8008b90:	f043 0302 	orr.w	r3, r3, #2
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	e7e3      	b.n	8008b60 <__smakebuf_r+0xc>
 8008b98:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <__smakebuf_r+0x7c>)
 8008b9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	6020      	str	r0, [r4, #0]
 8008ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	6163      	str	r3, [r4, #20]
 8008baa:	9b01      	ldr	r3, [sp, #4]
 8008bac:	6120      	str	r0, [r4, #16]
 8008bae:	b15b      	cbz	r3, 8008bc8 <__smakebuf_r+0x74>
 8008bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f000 f915 	bl	8008de4 <_isatty_r>
 8008bba:	b128      	cbz	r0, 8008bc8 <__smakebuf_r+0x74>
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	89a0      	ldrh	r0, [r4, #12]
 8008bca:	4305      	orrs	r5, r0
 8008bcc:	81a5      	strh	r5, [r4, #12]
 8008bce:	e7cd      	b.n	8008b6c <__smakebuf_r+0x18>
 8008bd0:	08008965 	.word	0x08008965

08008bd4 <memmove>:
 8008bd4:	4288      	cmp	r0, r1
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	eb01 0402 	add.w	r4, r1, r2
 8008bdc:	d902      	bls.n	8008be4 <memmove+0x10>
 8008bde:	4284      	cmp	r4, r0
 8008be0:	4623      	mov	r3, r4
 8008be2:	d807      	bhi.n	8008bf4 <memmove+0x20>
 8008be4:	1e43      	subs	r3, r0, #1
 8008be6:	42a1      	cmp	r1, r4
 8008be8:	d008      	beq.n	8008bfc <memmove+0x28>
 8008bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bf2:	e7f8      	b.n	8008be6 <memmove+0x12>
 8008bf4:	4402      	add	r2, r0
 8008bf6:	4601      	mov	r1, r0
 8008bf8:	428a      	cmp	r2, r1
 8008bfa:	d100      	bne.n	8008bfe <memmove+0x2a>
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c06:	e7f7      	b.n	8008bf8 <memmove+0x24>

08008c08 <__malloc_lock>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__malloc_lock+0x8>)
 8008c0a:	f7ff bf7d 	b.w	8008b08 <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	200006fc 	.word	0x200006fc

08008c14 <__malloc_unlock>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__malloc_unlock+0x8>)
 8008c16:	f7ff bf78 	b.w	8008b0a <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	200006fc 	.word	0x200006fc

08008c20 <_realloc_r>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	4607      	mov	r7, r0
 8008c24:	4614      	mov	r4, r2
 8008c26:	460e      	mov	r6, r1
 8008c28:	b921      	cbnz	r1, 8008c34 <_realloc_r+0x14>
 8008c2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c2e:	4611      	mov	r1, r2
 8008c30:	f7ff b836 	b.w	8007ca0 <_malloc_r>
 8008c34:	b922      	cbnz	r2, 8008c40 <_realloc_r+0x20>
 8008c36:	f7fe ffe3 	bl	8007c00 <_free_r>
 8008c3a:	4625      	mov	r5, r4
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c40:	f000 f8f2 	bl	8008e28 <_malloc_usable_size_r>
 8008c44:	42a0      	cmp	r0, r4
 8008c46:	d20f      	bcs.n	8008c68 <_realloc_r+0x48>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	f7ff f828 	bl	8007ca0 <_malloc_r>
 8008c50:	4605      	mov	r5, r0
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d0f2      	beq.n	8008c3c <_realloc_r+0x1c>
 8008c56:	4631      	mov	r1, r6
 8008c58:	4622      	mov	r2, r4
 8008c5a:	f7fe fe37 	bl	80078cc <memcpy>
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7fe ffcd 	bl	8007c00 <_free_r>
 8008c66:	e7e9      	b.n	8008c3c <_realloc_r+0x1c>
 8008c68:	4635      	mov	r5, r6
 8008c6a:	e7e7      	b.n	8008c3c <_realloc_r+0x1c>

08008c6c <_raise_r>:
 8008c6c:	291f      	cmp	r1, #31
 8008c6e:	b538      	push	{r3, r4, r5, lr}
 8008c70:	4604      	mov	r4, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	d904      	bls.n	8008c80 <_raise_r+0x14>
 8008c76:	2316      	movs	r3, #22
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c82:	b112      	cbz	r2, 8008c8a <_raise_r+0x1e>
 8008c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c88:	b94b      	cbnz	r3, 8008c9e <_raise_r+0x32>
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 f830 	bl	8008cf0 <_getpid_r>
 8008c90:	462a      	mov	r2, r5
 8008c92:	4601      	mov	r1, r0
 8008c94:	4620      	mov	r0, r4
 8008c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c9a:	f000 b817 	b.w	8008ccc <_kill_r>
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d00a      	beq.n	8008cb8 <_raise_r+0x4c>
 8008ca2:	1c59      	adds	r1, r3, #1
 8008ca4:	d103      	bne.n	8008cae <_raise_r+0x42>
 8008ca6:	2316      	movs	r3, #22
 8008ca8:	6003      	str	r3, [r0, #0]
 8008caa:	2001      	movs	r0, #1
 8008cac:	e7e7      	b.n	8008c7e <_raise_r+0x12>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	4798      	blx	r3
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7e0      	b.n	8008c7e <_raise_r+0x12>

08008cbc <raise>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <raise+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f7ff bfd3 	b.w	8008c6c <_raise_r>
 8008cc6:	bf00      	nop
 8008cc8:	20000020 	.word	0x20000020

08008ccc <_kill_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d07      	ldr	r5, [pc, #28]	; (8008cec <_kill_r+0x20>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f7f8 fa47 	bl	800116c <_kill>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d102      	bne.n	8008ce8 <_kill_r+0x1c>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <_kill_r+0x1c>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	20000704 	.word	0x20000704

08008cf0 <_getpid_r>:
 8008cf0:	f7f8 ba34 	b.w	800115c <_getpid>

08008cf4 <__sread>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	f000 f89c 	bl	8008e38 <_read_r>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	bfab      	itete	ge
 8008d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d06:	89a3      	ldrhlt	r3, [r4, #12]
 8008d08:	181b      	addge	r3, r3, r0
 8008d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d0e:	bfac      	ite	ge
 8008d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d12:	81a3      	strhlt	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__swrite>:
 8008d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1a:	461f      	mov	r7, r3
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	05db      	lsls	r3, r3, #23
 8008d20:	4605      	mov	r5, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	4616      	mov	r6, r2
 8008d26:	d505      	bpl.n	8008d34 <__swrite+0x1e>
 8008d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f000 f868 	bl	8008e04 <_lseek_r>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	4628      	mov	r0, r5
 8008d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	f000 b817 	b.w	8008d7c <_write_r>

08008d4e <__sseek>:
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	460c      	mov	r4, r1
 8008d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d56:	f000 f855 	bl	8008e04 <_lseek_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	bf15      	itete	ne
 8008d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d6a:	81a3      	strheq	r3, [r4, #12]
 8008d6c:	bf18      	it	ne
 8008d6e:	81a3      	strhne	r3, [r4, #12]
 8008d70:	bd10      	pop	{r4, pc}

08008d72 <__sclose>:
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 b813 	b.w	8008da0 <_close_r>
	...

08008d7c <_write_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	; (8008d9c <_write_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f8 fa25 	bl	80011da <_write>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_write_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_write_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20000704 	.word	0x20000704

08008da0 <_close_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d06      	ldr	r5, [pc, #24]	; (8008dbc <_close_r+0x1c>)
 8008da4:	2300      	movs	r3, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	f7f8 fa31 	bl	8001212 <_close>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_close_r+0x1a>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_close_r+0x1a>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20000704 	.word	0x20000704

08008dc0 <_fstat_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d07      	ldr	r5, [pc, #28]	; (8008de0 <_fstat_r+0x20>)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	4611      	mov	r1, r2
 8008dcc:	602b      	str	r3, [r5, #0]
 8008dce:	f7f8 fa2c 	bl	800122a <_fstat>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d102      	bne.n	8008ddc <_fstat_r+0x1c>
 8008dd6:	682b      	ldr	r3, [r5, #0]
 8008dd8:	b103      	cbz	r3, 8008ddc <_fstat_r+0x1c>
 8008dda:	6023      	str	r3, [r4, #0]
 8008ddc:	bd38      	pop	{r3, r4, r5, pc}
 8008dde:	bf00      	nop
 8008de0:	20000704 	.word	0x20000704

08008de4 <_isatty_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	; (8008e00 <_isatty_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f8 fa2b 	bl	800124a <_isatty>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_isatty_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_isatty_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000704 	.word	0x20000704

08008e04 <_lseek_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d07      	ldr	r5, [pc, #28]	; (8008e24 <_lseek_r+0x20>)
 8008e08:	4604      	mov	r4, r0
 8008e0a:	4608      	mov	r0, r1
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	602a      	str	r2, [r5, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f7f8 fa24 	bl	8001260 <_lseek>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_lseek_r+0x1e>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_lseek_r+0x1e>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	20000704 	.word	0x20000704

08008e28 <_malloc_usable_size_r>:
 8008e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e2c:	1f18      	subs	r0, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfbc      	itt	lt
 8008e32:	580b      	ldrlt	r3, [r1, r0]
 8008e34:	18c0      	addlt	r0, r0, r3
 8008e36:	4770      	bx	lr

08008e38 <_read_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d07      	ldr	r5, [pc, #28]	; (8008e58 <_read_r+0x20>)
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	4608      	mov	r0, r1
 8008e40:	4611      	mov	r1, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	602a      	str	r2, [r5, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f7f8 f9aa 	bl	80011a0 <_read>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_read_r+0x1e>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_read_r+0x1e>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	20000704 	.word	0x20000704

08008e5c <_init>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr

08008e68 <_fini>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	bf00      	nop
 8008e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6e:	bc08      	pop	{r3}
 8008e70:	469e      	mov	lr, r3
 8008e72:	4770      	bx	lr
