
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800c63c  0800c63c  0001c63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca78  0800ca78  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca78  0800ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca80  0800ca80  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca80  0800ca80  0001ca80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca84  0800ca84  0001ca84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ca88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb8  20000080  0800cb08  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002038  0800cb08  00022038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed7d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe3  00000000  00000000  0004ee2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  00053e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d70  00000000  00000000  00055d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed08  00000000  00000000  00057ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025062  00000000  00000000  000867f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cec7  00000000  00000000  000ab852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c8719  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000904c  00000000  00000000  001c876c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c624 	.word	0x0800c624

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c624 	.word	0x0800c624

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe0>)
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_ADC1_Init+0xe4>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005fc:	f001 fd06 	bl	800200c <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000606:	f000 fc15 	bl	8000e34 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000616:	f002 fd53 	bl	80030c0 <HAL_ADCEx_MultiModeConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fc08 	bl	8000e34 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_ADC1_Init+0xe8>)
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2306      	movs	r3, #6
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000630:	237f      	movs	r3, #127	; 0x7f
 8000632:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000642:	f001 ffd9 	bl	80025f8 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800064c:	f000 fbf2 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20001dbc 	.word	0x20001dbc
 800065c:	50040000 	.word	0x50040000
 8000660:	43210000 	.word	0x43210000

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00a fd55 	bl	800b134 <memset>
  if(adcHandle->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_ADC_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d146      	bne.n	8000722 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800069a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fed1 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006d0:	f000 fbb0 	bl	8000e34 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_ADC_MspInit+0xd0>)
 800071e:	f002 fe61 	bl	80033e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000722:	bf00      	nop
 8000724:	37b0      	adds	r7, #176	; 0xb0
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	50040000 	.word	0x50040000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <adc_read_pot>:
/**
 * @brief Reads the analog voltage of the potentimeter located on the shield
 * and returns a digital conversion.
 * @return The current voltage level.
 */
uint16_t adc_read_pot() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800073c:	4806      	ldr	r0, [pc, #24]	; (8000758 <adc_read_pot+0x20>)
 800073e:	f001 fdbb 	bl	80022b8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8000742:	2101      	movs	r1, #1
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <adc_read_pot+0x20>)
 8000746:	f001 fe71 	bl	800242c <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 800074a:	4803      	ldr	r0, [pc, #12]	; (8000758 <adc_read_pot+0x20>)
 800074c:	f001 ff46 	bl	80025dc <HAL_ADC_GetValue>
 8000750:	4603      	mov	r3, r0
 8000752:	b29b      	uxth	r3, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20001dbc 	.word	0x20001dbc

0800075c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of uartTxMutex */
  uartTxMutexHandle = osMutexNew(&uartTxMutex_attributes);
 8000760:	481d      	ldr	r0, [pc, #116]	; (80007d8 <MX_FREERTOS_Init+0x7c>)
 8000762:	f007 fba2 	bl	8007eaa <osMutexNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_FREERTOS_Init+0x80>)
 800076a:	6013      	str	r3, [r2, #0]

  /* creation of dispL1mutex */
  dispL1mutexHandle = osMutexNew(&dispL1mutex_attributes);
 800076c:	481c      	ldr	r0, [pc, #112]	; (80007e0 <MX_FREERTOS_Init+0x84>)
 800076e:	f007 fb9c 	bl	8007eaa <osMutexNew>
 8000772:	4603      	mov	r3, r0
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <MX_FREERTOS_Init+0x88>)
 8000776:	6013      	str	r3, [r2, #0]

  /* creation of uartRxMutex */
  uartRxMutexHandle = osMutexNew(&uartRxMutex_attributes);
 8000778:	481b      	ldr	r0, [pc, #108]	; (80007e8 <MX_FREERTOS_Init+0x8c>)
 800077a:	f007 fb96 	bl	8007eaa <osMutexNew>
 800077e:	4603      	mov	r3, r0
 8000780:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <MX_FREERTOS_Init+0x90>)
 8000782:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000784:	4a1a      	ldr	r2, [pc, #104]	; (80007f0 <MX_FREERTOS_Init+0x94>)
 8000786:	2100      	movs	r1, #0
 8000788:	481a      	ldr	r0, [pc, #104]	; (80007f4 <MX_FREERTOS_Init+0x98>)
 800078a:	f007 fae1 	bl	8007d50 <osThreadNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <MX_FREERTOS_Init+0x9c>)
 8000792:	6013      	str	r3, [r2, #0]

  /* creation of digitalClock */
  digitalClockHandle = osThreadNew(digitalClockEntry, NULL, &digitalClock_attributes);
 8000794:	4a19      	ldr	r2, [pc, #100]	; (80007fc <MX_FREERTOS_Init+0xa0>)
 8000796:	2100      	movs	r1, #0
 8000798:	4819      	ldr	r0, [pc, #100]	; (8000800 <MX_FREERTOS_Init+0xa4>)
 800079a:	f007 fad9 	bl	8007d50 <osThreadNew>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_FREERTOS_Init+0xa8>)
 80007a2:	6013      	str	r3, [r2, #0]

  /* creation of backlight */
  backlightHandle = osThreadNew(backlightEntry, NULL, &backlight_attributes);
 80007a4:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_FREERTOS_Init+0xac>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4818      	ldr	r0, [pc, #96]	; (800080c <MX_FREERTOS_Init+0xb0>)
 80007aa:	f007 fad1 	bl	8007d50 <osThreadNew>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_FREERTOS_Init+0xb4>)
 80007b2:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(displayEntry, NULL, &display_attributes);
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_FREERTOS_Init+0xb8>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <MX_FREERTOS_Init+0xbc>)
 80007ba:	f007 fac9 	bl	8007d50 <osThreadNew>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_FREERTOS_Init+0xc0>)
 80007c2:	6013      	str	r3, [r2, #0]

  /* creation of uart */
  uartHandle = osThreadNew(uartEntry, NULL, &uart_attributes);
 80007c4:	4a16      	ldr	r2, [pc, #88]	; (8000820 <MX_FREERTOS_Init+0xc4>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4816      	ldr	r0, [pc, #88]	; (8000824 <MX_FREERTOS_Init+0xc8>)
 80007ca:	f007 fac1 	bl	8007d50 <osThreadNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a15      	ldr	r2, [pc, #84]	; (8000828 <MX_FREERTOS_Init+0xcc>)
 80007d2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	0800c7a4 	.word	0x0800c7a4
 80007dc:	20001e24 	.word	0x20001e24
 80007e0:	0800c7b4 	.word	0x0800c7b4
 80007e4:	20001e2c 	.word	0x20001e2c
 80007e8:	0800c7c4 	.word	0x0800c7c4
 80007ec:	20001e30 	.word	0x20001e30
 80007f0:	0800c6f0 	.word	0x0800c6f0
 80007f4:	0800082d 	.word	0x0800082d
 80007f8:	20001e20 	.word	0x20001e20
 80007fc:	0800c714 	.word	0x0800c714
 8000800:	0800083d 	.word	0x0800083d
 8000804:	20001e34 	.word	0x20001e34
 8000808:	0800c738 	.word	0x0800c738
 800080c:	08000a01 	.word	0x08000a01
 8000810:	20001e3c 	.word	0x20001e3c
 8000814:	0800c75c 	.word	0x0800c75c
 8000818:	08000a4d 	.word	0x08000a4d
 800081c:	20001e38 	.word	0x20001e38
 8000820:	0800c780 	.word	0x0800c780
 8000824:	08000b49 	.word	0x08000b49
 8000828:	20001e28 	.word	0x20001e28

0800082c <StartDefaultTask>:
  * all other threads are idle.
  * @param  argument[in]: not used.
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    while(1) {
        osDelay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f007 fb1d 	bl	8007e74 <osDelay>
 800083a:	e7fb      	b.n	8000834 <StartDefaultTask+0x8>

0800083c <digitalClockEntry>:
* the display each second with the RTC time.
* @param argument[in]: not used.
*/
/* USER CODE END Header_digitalClockEntry */
void digitalClockEntry(void *argument)
{
 800083c:	b5b0      	push	{r4, r5, r7, lr}
 800083e:	b092      	sub	sp, #72	; 0x48
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN digitalClockEntry */
    TickType_t xPeriod = pdMS_TO_TICKS(1000);
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
    TickType_t xLastWakeTime;
    uint8_t user_prompt[] = "set time as HH:MM:SS\r\n";
 800084a:	4b66      	ldr	r3, [pc, #408]	; (80009e4 <digitalClockEntry+0x1a8>)
 800084c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000850:	461d      	mov	r5, r3
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	e895 0003 	ldmia.w	r5, {r0, r1}
 800085a:	6020      	str	r0, [r4, #0]
 800085c:	3404      	adds	r4, #4
 800085e:	8021      	strh	r1, [r4, #0]
 8000860:	3402      	adds	r4, #2
 8000862:	0c0b      	lsrs	r3, r1, #16
 8000864:	7023      	strb	r3, [r4, #0]
    uint8_t time_rec[] = "\r\nClock started!\r\n";
 8000866:	4b60      	ldr	r3, [pc, #384]	; (80009e8 <digitalClockEntry+0x1ac>)
 8000868:	f107 0414 	add.w	r4, r7, #20
 800086c:	461d      	mov	r5, r3
 800086e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000872:	682b      	ldr	r3, [r5, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	8022      	strh	r2, [r4, #0]
 8000878:	3402      	adds	r4, #2
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	7023      	strb	r3, [r4, #0]
    uint8_t current_time[8]; //HH:MM:SS

    osMutexWait(uartTxMutexHandle, osWaitForever); //wait for send lock
 800087e:	4b5b      	ldr	r3, [pc, #364]	; (80009ec <digitalClockEntry+0x1b0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000886:	4618      	mov	r0, r3
 8000888:	f007 fb95 	bl	8007fb6 <osMutexAcquire>
    taskENTER_CRITICAL();
 800088c:	f00a f90a 	bl	800aaa4 <vPortEnterCritical>
    memcpy(uart_buf->send_buf, user_prompt, strlen((char*)user_prompt));
 8000890:	4b57      	ldr	r3, [pc, #348]	; (80009f0 <digitalClockEntry+0x1b4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1c9c      	adds	r4, r3, #2
 8000896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fc98 	bl	80001d0 <strlen>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4620      	mov	r0, r4
 80008aa:	f00a fc35 	bl	800b118 <memcpy>
    taskEXIT_CRITICAL();
 80008ae:	f00a f929 	bl	800ab04 <vPortExitCritical>
    uart_buf->send_loaded = TRUE;
 80008b2:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <digitalClockEntry+0x1b4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2201      	movs	r2, #1
 80008b8:	705a      	strb	r2, [r3, #1]
    osMutexRelease(uartTxMutexHandle); //release send lock
 80008ba:	4b4c      	ldr	r3, [pc, #304]	; (80009ec <digitalClockEntry+0x1b0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fbc4 	bl	800804c <osMutexRelease>

    osMutexWait(uartRxMutexHandle, osWaitForever); //wait for receive lock
 80008c4:	4b4b      	ldr	r3, [pc, #300]	; (80009f4 <digitalClockEntry+0x1b8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008cc:	4618      	mov	r0, r3
 80008ce:	f007 fb72 	bl	8007fb6 <osMutexAcquire>
    uart_buf->rec_size = 8;
 80008d2:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <digitalClockEntry+0x1b4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2208      	movs	r2, #8
 80008d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    while(uart_buf->rec_loaded == FALSE) {
 80008dc:	e002      	b.n	80008e4 <digitalClockEntry+0xa8>
	vTaskDelay(pdMS_TO_TICKS(10));
 80008de:	200a      	movs	r0, #10
 80008e0:	f008 fdfa 	bl	80094d8 <vTaskDelay>
    while(uart_buf->rec_loaded == FALSE) {
 80008e4:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <digitalClockEntry+0x1b4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f7      	beq.n	80008de <digitalClockEntry+0xa2>
    }
    rtc_set_time(uart_buf->rec_buf);
 80008ee:	4b40      	ldr	r3, [pc, #256]	; (80009f0 <digitalClockEntry+0x1b4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	331b      	adds	r3, #27
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fb3b 	bl	8000f70 <rtc_set_time>
    vTaskDelay(pdMS_TO_TICKS(1000)); //re-schedule to let clock tick once
 80008fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fe:	f008 fdeb 	bl	80094d8 <vTaskDelay>
    taskENTER_CRITICAL();
 8000902:	f00a f8cf 	bl	800aaa4 <vPortEnterCritical>
    memset(uart_buf->rec_buf, 0, 25); //reset buffer
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <digitalClockEntry+0x1b4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	331b      	adds	r3, #27
 800090c:	2219      	movs	r2, #25
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f00a fc0f 	bl	800b134 <memset>
    taskEXIT_CRITICAL();
 8000916:	f00a f8f5 	bl	800ab04 <vPortExitCritical>
    uart_buf->rec_loaded = FALSE;
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <digitalClockEntry+0x1b4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
    uart_buf->rec_size = 0;
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <digitalClockEntry+0x1b4>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    osMutexRelease(uartRxMutexHandle); //release receive lock
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <digitalClockEntry+0x1b8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f007 fb8b 	bl	800804c <osMutexRelease>

    osMutexWait(uartTxMutexHandle, osWaitForever); //wait for send lock
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <digitalClockEntry+0x1b0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800093e:	4618      	mov	r0, r3
 8000940:	f007 fb39 	bl	8007fb6 <osMutexAcquire>
    taskENTER_CRITICAL();
 8000944:	f00a f8ae 	bl	800aaa4 <vPortEnterCritical>
    memcpy(uart_buf->send_buf, time_rec, strlen((char*)time_rec));
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <digitalClockEntry+0x1b4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1c9c      	adds	r4, r3, #2
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc3c 	bl	80001d0 <strlen>
 8000958:	4602      	mov	r2, r0
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4620      	mov	r0, r4
 8000962:	f00a fbd9 	bl	800b118 <memcpy>
    taskEXIT_CRITICAL();
 8000966:	f00a f8cd 	bl	800ab04 <vPortExitCritical>
    uart_buf->send_loaded = TRUE;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <digitalClockEntry+0x1b4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2201      	movs	r2, #1
 8000970:	705a      	strb	r2, [r3, #1]
    osMutexRelease(uartTxMutexHandle); //release send lock
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <digitalClockEntry+0x1b0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f007 fb68 	bl	800804c <osMutexRelease>

    xLastWakeTime = xTaskGetTickCount();
 800097c:	f008 fef2 	bl	8009764 <xTaskGetTickCount>
 8000980:	4603      	mov	r3, r0
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
    while(1) {
	rtc_get_time(current_time);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fb35 	bl	8000ff8 <rtc_get_time>
	osMutexWait(dispL1mutexHandle, osWaitForever); //wait for disp L1 lock
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <digitalClockEntry+0x1bc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000996:	4618      	mov	r0, r3
 8000998:	f007 fb0d 	bl	8007fb6 <osMutexAcquire>
	taskENTER_CRITICAL();
 800099c:	f00a f882 	bl	800aaa4 <vPortEnterCritical>
	memcpy(disp_buf->L1_buf, current_time, strlen((char*)current_time));
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <digitalClockEntry+0x1c0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	1c5c      	adds	r4, r3, #1
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fc10 	bl	80001d0 <strlen>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4620      	mov	r0, r4
 80009ba:	f00a fbad 	bl	800b118 <memcpy>
	taskEXIT_CRITICAL();
 80009be:	f00a f8a1 	bl	800ab04 <vPortExitCritical>
	disp_buf->L1_new_data = TRUE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <digitalClockEntry+0x1c0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
	osMutexRelease(dispL1mutexHandle); //release disp L1 lock
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <digitalClockEntry+0x1bc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 fb3c 	bl	800804c <osMutexRelease>
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80009d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80009da:	4618      	mov	r0, r3
 80009dc:	f008 fcfe 	bl	80093dc <vTaskDelayUntil>
	rtc_get_time(current_time);
 80009e0:	e7d0      	b.n	8000984 <digitalClockEntry+0x148>
 80009e2:	bf00      	nop
 80009e4:	0800c698 	.word	0x0800c698
 80009e8:	0800c6b0 	.word	0x0800c6b0
 80009ec:	20001e24 	.word	0x20001e24
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20001e30 	.word	0x20001e30
 80009f8:	20001e2c 	.word	0x20001e2c
 80009fc:	20000004 	.word	0x20000004

08000a00 <backlightEntry>:
* adjusts the red display backlight accordingly.
* @param argument[in]: not used.
*/
/* USER CODE END Header_backlightEntry */
void backlightEntry(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN backlightEntry */
    TickType_t xPeriod = pdMS_TO_TICKS(100);
 8000a08:	2364      	movs	r3, #100	; 0x64
 8000a0a:	617b      	str	r3, [r7, #20]
    TickType_t xLastWakeTime;
    uint16_t voltage;

//    display_set_backlight(WHITE);
//    display_set_backlight(GREEN);
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); //red backlight
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <backlightEntry+0x44>)
 8000a10:	f005 f9a2 	bl	8005d58 <HAL_TIM_PWM_Start>
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a14:	217f      	movs	r1, #127	; 0x7f
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <backlightEntry+0x48>)
 8000a18:	f002 faf2 	bl	8003000 <HAL_ADCEx_Calibration_Start>

    xLastWakeTime = xTaskGetTickCount();
 8000a1c:	f008 fea2 	bl	8009764 <xTaskGetTickCount>
 8000a20:	4603      	mov	r3, r0
 8000a22:	60fb      	str	r3, [r7, #12]

    while(1) {
	voltage = adc_read_pot();
 8000a24:	f7ff fe88 	bl	8000738 <adc_read_pot>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	827b      	strh	r3, [r7, #18]
	tim_set_duty_cycle(voltage);
 8000a2c:	8a7b      	ldrh	r3, [r7, #18]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 ff34 	bl	800189c <tim_set_duty_cycle>
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	6979      	ldr	r1, [r7, #20]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 fcce 	bl	80093dc <vTaskDelayUntil>
	voltage = adc_read_pot();
 8000a40:	e7f0      	b.n	8000a24 <backlightEntry+0x24>
 8000a42:	bf00      	nop
 8000a44:	20001f14 	.word	0x20001f14
 8000a48:	20001dbc 	.word	0x20001dbc

08000a4c <displayEntry>:
* and update the display if current segments are outdated.
* @param argument[in]: not used.
*/
/* USER CODE END Header_displayEntry */
void displayEntry(void *argument)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayEntry */
    TickType_t xPeriod = pdMS_TO_TICKS(100);
 8000a54:	2364      	movs	r3, #100	; 0x64
 8000a56:	60fb      	str	r3, [r7, #12]
    TickType_t xLastWakeTime;

    display_init();
 8000a58:	f000 fc26 	bl	80012a8 <display_init>
    xLastWakeTime = xTaskGetTickCount();
 8000a5c:	f008 fe82 	bl	8009764 <xTaskGetTickCount>
 8000a60:	4603      	mov	r3, r0
 8000a62:	60bb      	str	r3, [r7, #8]
    while(1) {
	if (disp_buf->L1_new_data == TRUE) {
 8000a64:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <displayEntry+0xf8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d113      	bne.n	8000a96 <displayEntry+0x4a>
	    display_write_line(disp_buf->L1_buf, strlen((char*)disp_buf->L1_buf), 1);
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <displayEntry+0xf8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1c5c      	adds	r4, r3, #1
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <displayEntry+0xf8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fba8 	bl	80001d0 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2201      	movs	r2, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	4620      	mov	r0, r4
 8000a8a:	f000 fc5e 	bl	800134a <display_write_line>
	    disp_buf->L1_new_data = FALSE;
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <displayEntry+0xf8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
	}
	if (disp_buf->L2_new_data == TRUE) {
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <displayEntry+0xf8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7adb      	ldrb	r3, [r3, #11]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d114      	bne.n	8000aca <displayEntry+0x7e>
	    display_write_line(disp_buf->L2_buf, strlen((char*)disp_buf->L2_buf), 2);
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <displayEntry+0xf8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f103 040c 	add.w	r4, r3, #12
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <displayEntry+0xf8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	330c      	adds	r3, #12
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb8e 	bl	80001d0 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2202      	movs	r2, #2
 8000aba:	4619      	mov	r1, r3
 8000abc:	4620      	mov	r0, r4
 8000abe:	f000 fc44 	bl	800134a <display_write_line>
	    disp_buf->L2_new_data = FALSE;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <displayEntry+0xf8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	72da      	strb	r2, [r3, #11]
	}
	if (disp_buf->L3_new_data == TRUE) {
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <displayEntry+0xf8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	7d9b      	ldrb	r3, [r3, #22]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d114      	bne.n	8000afe <displayEntry+0xb2>
	    display_write_line(disp_buf->L3_buf, strlen((char*)disp_buf->L3_buf), 3);
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <displayEntry+0xf8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f103 0417 	add.w	r4, r3, #23
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <displayEntry+0xf8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3317      	adds	r3, #23
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fb74 	bl	80001d0 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2203      	movs	r2, #3
 8000aee:	4619      	mov	r1, r3
 8000af0:	4620      	mov	r0, r4
 8000af2:	f000 fc2a 	bl	800134a <display_write_line>
	    disp_buf->L3_new_data = FALSE;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <displayEntry+0xf8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2200      	movs	r2, #0
 8000afc:	759a      	strb	r2, [r3, #22]
	}
	if (disp_buf->L4_new_data == TRUE) {
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <displayEntry+0xf8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d115      	bne.n	8000b36 <displayEntry+0xea>
	    display_write_line(disp_buf->L4_buf, strlen((char*)disp_buf->L4_buf), 4);
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <displayEntry+0xf8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f103 0422 	add.w	r4, r3, #34	; 0x22
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <displayEntry+0xf8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3322      	adds	r3, #34	; 0x22
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fb59 	bl	80001d0 <strlen>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2204      	movs	r2, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4620      	mov	r0, r4
 8000b28:	f000 fc0f 	bl	800134a <display_write_line>
	    disp_buf->L4_new_data = FALSE;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <displayEntry+0xf8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	68f9      	ldr	r1, [r7, #12]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f008 fc4d 	bl	80093dc <vTaskDelayUntil>
	if (disp_buf->L1_new_data == TRUE) {
 8000b42:	e78f      	b.n	8000a64 <displayEntry+0x18>
 8000b44:	20000004 	.word	0x20000004

08000b48 <uartEntry>:
* start transmitting or receiving for a reqesting thread.
* @param argument[in]: not used.
*/
/* USER CODE END Header_uartEntry */
void uartEntry(void *argument)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartEntry */
    TickType_t xLastWakeTime;
    TickType_t xPeriod = pdMS_TO_TICKS(100);
 8000b50:	2364      	movs	r3, #100	; 0x64
 8000b52:	60fb      	str	r3, [r7, #12]

    xLastWakeTime = xTaskGetTickCount();
 8000b54:	f008 fe06 	bl	8009764 <xTaskGetTickCount>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60bb      	str	r3, [r7, #8]
    while(1) {
	if (uart_buf->send_loaded == TRUE) { //a thread wants to send data
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <uartEntry+0xac>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d11e      	bne.n	8000ba4 <uartEntry+0x5c>
	    taskENTER_CRITICAL();
 8000b66:	f009 ff9d 	bl	800aaa4 <vPortEnterCritical>
	    uart_transmit(uart_buf->send_buf, strlen((char*)uart_buf->send_buf));
 8000b6a:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <uartEntry+0xac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	1c9c      	adds	r4, r3, #2
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <uartEntry+0xac>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3302      	adds	r3, #2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb2a 	bl	80001d0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	4620      	mov	r0, r4
 8000b84:	f000 ff62 	bl	8001a4c <uart_transmit>
	    memset(uart_buf->send_buf, 0x0, 25); //reset buffer
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <uartEntry+0xac>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	2219      	movs	r2, #25
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00a face 	bl	800b134 <memset>
	    taskEXIT_CRITICAL();
 8000b98:	f009 ffb4 	bl	800ab04 <vPortExitCritical>
	    uart_buf->send_loaded = FALSE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <uartEntry+0xac>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	705a      	strb	r2, [r3, #1]
	}

	if (uart_buf->rec_size != 0) { //a thread has requested data
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <uartEntry+0xac>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d019      	beq.n	8000be4 <uartEntry+0x9c>
	    taskENTER_CRITICAL();
 8000bb0:	f009 ff78 	bl	800aaa4 <vPortEnterCritical>
	    uart_receive(uart_buf->rec_buf, uart_buf->rec_size);
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <uartEntry+0xac>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f103 021b 	add.w	r2, r3, #27
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <uartEntry+0xac>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4610      	mov	r0, r2
 8000bca:	f000 ff57 	bl	8001a7c <uart_receive>
	    taskEXIT_CRITICAL();
 8000bce:	f009 ff99 	bl	800ab04 <vPortExitCritical>
	    uart_buf->rec_loaded = TRUE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <uartEntry+0xac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
	    uart_buf->rec_size = 0;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <uartEntry+0xac>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	68f9      	ldr	r1, [r7, #12]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 fbf6 	bl	80093dc <vTaskDelayUntil>
	if (uart_buf->send_loaded == TRUE) { //a thread wants to send data
 8000bf0:	e7b4      	b.n	8000b5c <uartEntry+0x14>
 8000bf2:	bf00      	nop
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a41      	ldr	r2, [pc, #260]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a3b      	ldr	r2, [pc, #236]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a35      	ldr	r2, [pc, #212]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_GPIO_Init+0x138>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f002 fd53 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f002 fd4c 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ca6:	4823      	ldr	r0, [pc, #140]	; (8000d34 <MX_GPIO_Init+0x13c>)
 8000ca8:	f002 fd46 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481c      	ldr	r0, [pc, #112]	; (8000d34 <MX_GPIO_Init+0x13c>)
 8000cc4:	f002 fb8e 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f002 fb7d 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 8000cea:	f248 0320 	movw	r3, #32800	; 0x8020
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f002 fb6d 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Green_Backlight_Pin|White_Backlight_Pin;
 8000d0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0x13c>)
 8000d24:	f002 fb5e 	bl	80033e4 <HAL_GPIO_Init>

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000800 	.word	0x48000800

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f000 fef8 	bl	8001b30 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f813 	bl	8000d6a <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f7ff ff58 	bl	8000bf8 <MX_GPIO_Init>
  MX_UART5_Init();
 8000d48:	f000 fdc4 	bl	80018d4 <MX_UART5_Init>
  MX_SPI2_Init();
 8000d4c:	f000 f98e 	bl	800106c <MX_SPI2_Init>
  MX_RTC_Init();
 8000d50:	f000 f876 	bl	8000e40 <MX_RTC_Init>
  MX_ADC1_Init();
 8000d54:	f7ff fc10 	bl	8000578 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000d58:	f000 fc9c 	bl	8001694 <MX_TIM8_Init>
//  main_test();
//  while(1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d5c:	f006 ffae 	bl	8007cbc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d60:	f7ff fcfc 	bl	800075c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000d64:	f006 ffce 	bl	8007d04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000d68:	e7fe      	b.n	8000d68 <main+0x30>

08000d6a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b096      	sub	sp, #88	; 0x58
 8000d6e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2244      	movs	r2, #68	; 0x44
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00a f9db 	bl	800b134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d90:	f002 fcf8 	bl	8003784 <HAL_PWREx_ControlVoltageScaling>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d9a:	f000 f84b 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d9e:	230a      	movs	r3, #10
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	2310      	movs	r3, #16
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fd2d 	bl	8003830 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000ddc:	f000 f82a 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2303      	movs	r3, #3
 8000de6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	2104      	movs	r1, #4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 f8ff 	bl	8003ffc <HAL_RCC_ClockConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e04:	f000 f816 	bl	8000e34 <Error_Handler>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3758      	adds	r7, #88	; 0x58
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e22:	f000 fea5 	bl	8001b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40012c00 	.word	0x40012c00

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e5a:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <MX_RTC_Init+0xb4>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e66:	227f      	movs	r2, #127	; 0x7f
 8000e68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e6c:	22ff      	movs	r2, #255	; 0xff
 8000e6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000e8a:	f003 ffab 	bl	8004de4 <HAL_RTC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000e94:	f7ff ffce 	bl	8000e34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000eb4:	f004 f811 	bl	8004eda <HAL_RTC_SetTime>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ebe:	f7ff ffb9 	bl	8000e34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000ec6:	2312      	movs	r3, #18
 8000ec8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8000eca:	2322      	movs	r3, #34	; 0x22
 8000ecc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8000ece:	2321      	movs	r3, #33	; 0x21
 8000ed0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_RTC_Init+0xb0>)
 8000eda:	f004 f8f7 	bl	80050cc <HAL_RTC_SetDate>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ee4:	f7ff ffa6 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20001e40 	.word	0x20001e40
 8000ef4:	40002800 	.word	0x40002800

08000ef8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0a4      	sub	sp, #144	; 0x90
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	2288      	movs	r2, #136	; 0x88
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00a f913 	bl	800b134 <memset>
  if(rtcHandle->Instance==RTC)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_RTC_MspInit+0x5c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d118      	bne.n	8000f4a <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fa9e 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f36:	f7ff ff7d 	bl	8000e34 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_RTC_MspInit+0x60>)
 8000f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_RTC_MspInit+0x60>)
 8000f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3790      	adds	r7, #144	; 0x90
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40002800 	.word	0x40002800
 8000f58:	40021000 	.word	0x40021000

08000f5c <RTC_Error>:
 * @brief Called when an error generated during RTC interaction has
 * been detected.
 * @note Activates the LD2 led on the Nucleo board and loops infinitely.
 * @retval None.
 */
void RTC_Error() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2120      	movs	r1, #32
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f002 fbe6 	bl	8003738 <HAL_GPIO_WritePin>
    while (1) {}
 8000f6c:	e7fe      	b.n	8000f6c <RTC_Error+0x10>
	...

08000f70 <rtc_set_time>:
/**
 * @brief Set the RTC time.
 * @param[in] tstr Time string on format "HH:MM:SS".
 * @retval None.
 */
void rtc_set_time(uint8_t tstr[]) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <rtc_set_time+0x80>)
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, del); //tokenize tstr on given delimiter
 8000f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f00a f8f8 	bl	800b184 <strtok>
 8000f94:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000f96:	6a38      	ldr	r0, [r7, #32]
 8000f98:	f00a f890 	bl	800b0bc <atoi>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 8000fa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f00a f8ed 	bl	800b184 <strtok>
 8000faa:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 8000fac:	6a38      	ldr	r0, [r7, #32]
 8000fae:	f00a f885 	bl	800b0bc <atoi>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f00a f8e2 	bl	800b184 <strtok>
 8000fc0:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 8000fc2:	6a38      	ldr	r0, [r7, #32]
 8000fc4:	f00a f87a 	bl	800b0bc <atoi>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73bb      	strb	r3, [r7, #14]

    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <rtc_set_time+0x84>)
 8000fd8:	f003 ff7f 	bl	8004eda <HAL_RTC_SetTime>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <rtc_set_time+0x76>
	RTC_Error();
 8000fe2:	f7ff ffbb 	bl	8000f5c <RTC_Error>
    }
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800c6c4 	.word	0x0800c6c4
 8000ff4:	20001e40 	.word	0x20001e40

08000ff8 <rtc_get_time>:
  * @brief Retrieval function for the current RTC time.
  * @param[out] buffer Buffer to store the current time.
  * @note Date function is called to properly retreive the time.
  * @retval None.
  */
void rtc_get_time(uint8_t buffer[]) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	4619      	mov	r1, r3
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <rtc_get_time+0x6c>)
 800101e:	f003 fff9 	bl	8005014 <HAL_RTC_GetTime>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <rtc_get_time+0x34>
	RTC_Error();
 8001028:	f7ff ff98 	bl	8000f5c <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <rtc_get_time+0x6c>)
 8001036:	f004 f8d0 	bl	80051da <HAL_RTC_GetDate>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <rtc_get_time+0x4c>
	RTC_Error();
 8001040:	f7ff ff8c 	bl	8000f5c <RTC_Error>
    }

    sprintf((char*)buffer, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8001044:	7b3b      	ldrb	r3, [r7, #12]
 8001046:	461a      	mov	r2, r3
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	4619      	mov	r1, r3
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	460b      	mov	r3, r1
 8001052:	4905      	ldr	r1, [pc, #20]	; (8001068 <rtc_get_time+0x70>)
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f00a f875 	bl	800b144 <siprintf>
}
 800105a:	bf00      	nop
 800105c:	3720      	adds	r7, #32
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20001e40 	.word	0x20001e40
 8001068:	0800c6c8 	.word	0x0800c6c8

0800106c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 0 */
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <MX_SPI2_Init+0x78>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800107c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001080:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001084:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001088:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800108c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001090:	2202      	movs	r2, #2
 8001092:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_SPI2_Init+0x74>)
 8001096:	2201      	movs	r2, #1
 8001098:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_SPI2_Init+0x74>)
 800109c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010a4:	2230      	movs	r2, #48	; 0x30
 80010a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010bc:	2207      	movs	r2, #7
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_SPI2_Init+0x74>)
 80010ce:	f004 f9a3 	bl	8005418 <HAL_SPI_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80010d8:	f7ff feac 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20001e64 	.word	0x20001e64
 80010e4:	40003800 	.word	0x40003800

080010e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a25      	ldr	r2, [pc, #148]	; (800119c <HAL_SPI_MspInit+0xb4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d144      	bne.n	8001194 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */
  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_SPI_MspInit+0xb8>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001152:	2308      	movs	r3, #8
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001162:	2305      	movs	r3, #5
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_SPI_MspInit+0xbc>)
 800116e:	f002 f939 	bl	80033e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001172:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001184:	2305      	movs	r3, #5
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <HAL_SPI_MspInit+0xc0>)
 8001190:	f002 f928 	bl	80033e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */
  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40003800 	.word	0x40003800
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000400 	.word	0x48000400

080011ac <SPI_Error>:
 * @brief Called when an error generated during SPI communication
 * has been detected.
 * @note Enables LD2 LED on the Nucleo board and loops infinitely.
 * @retval None.
 */
void SPI_Error() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2120      	movs	r1, #32
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f002 fabe 	bl	8003738 <HAL_GPIO_WritePin>
    while(1) {}
 80011bc:	e7fe      	b.n	80011bc <SPI_Error+0x10>
	...

080011c0 <set_startbyte>:
  * @param[in] nibble The sequence to set.
  * @note Nibble on format "0_RS_R/W_1" (MSB first representation).
  * Placed at bits 4-7 in the startbyte.
  * @retval None.
  */
void set_startbyte(uint8_t nibble) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
    instr[0] = ((instr[0] & 0x0F) | (nibble << 4));
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <set_startbyte+0x34>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <set_startbyte+0x34>)
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <set_byte>:
  * to follow display convention.
  * @param[in] byte The byte to transmit as data, MSB format
  * @note Display requires LSB first, hence the bit ordering.
  * @retval None.
  */
void set_byte(uint8_t byte) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    instr[1] = (byte & 0x0F);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <set_byte+0x2c>)
 800120c:	705a      	strb	r2, [r3, #1]
    instr[2] = ((byte & 0xF0) >> 4);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <set_byte+0x2c>)
 8001216:	709a      	strb	r2, [r3, #2]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	20000008 	.word	0x20000008

08001228 <display_hw_reset>:
/**
 * @brief Before using the display it should be reset by toggling the
 * Disp_Reset pin: high->low->high with sufficient delays inbetween.
 * @retval None.
 */
void display_hw_reset() {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 800122c:	2005      	movs	r0, #5
 800122e:	f000 fcbf 	bl	8001bb0 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f002 fa7c 	bl	8003738 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001240:	200a      	movs	r0, #10
 8001242:	f000 fcb5 	bl	8001bb0 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f002 fa72 	bl	8003738 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f000 fcab 	bl	8001bb0 <HAL_Delay>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <send>:
/**
 * @brief Sends the current data loaded in the instruction
 * array "instr[]" over SPI.
 * @retval None.
 */
void send() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    if (HAL_SPI_Transmit(&hspi2, (uint8_t*)instr, 3, 50) != HAL_OK) {
 8001264:	2332      	movs	r3, #50	; 0x32
 8001266:	2203      	movs	r2, #3
 8001268:	4905      	ldr	r1, [pc, #20]	; (8001280 <send+0x20>)
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <send+0x24>)
 800126c:	f004 f977 	bl	800555e <HAL_SPI_Transmit>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <send+0x1a>
	SPI_Error();
 8001276:	f7ff ff99 	bl	80011ac <SPI_Error>
    }
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	20001e64 	.word	0x20001e64

08001288 <display_clear>:

/**
 * @brief Sets all segments of the display to 20H, blank.
 * @retval None.
 */
void display_clear() {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    set_startbyte(RS0_RW0);
 800128c:	2301      	movs	r3, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff96 	bl	80011c0 <set_startbyte>
    set_byte(CLEAR_DISPLAY);
 8001294:	2301      	movs	r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ffad 	bl	80011f8 <set_byte>
    send();
 800129e:	f7ff ffdf 	bl	8001260 <send>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <display_init>:
/**
 * @brief Initialization routine to set up the running conditions for the display.
 * @note Sequence needed is predefined. Hardware reset required beforehand.
 * @retval None.
 */
void display_init() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

    display_hw_reset();
 80012ae:	f7ff ffbb 	bl	8001228 <display_hw_reset>

    set_startbyte(RS0_RW0);
 80012b2:	2301      	movs	r3, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff83 	bl	80011c0 <set_startbyte>
    for (int i = 0; i < 11; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e00e      	b.n	80012de <display_init+0x36>
	set_byte(init_seq[i]);
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <display_init+0x48>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff95 	bl	80011f8 <set_byte>
	send();
 80012ce:	f7ff ffc7 	bl	8001260 <send>
	HAL_Delay(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f000 fc6c 	bl	8001bb0 <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0a      	cmp	r3, #10
 80012e2:	dded      	ble.n	80012c0 <display_init+0x18>
    }

    display_clear();
 80012e4:	f7ff ffd0 	bl	8001288 <display_clear>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	0800c7d8 	.word	0x0800c7d8

080012f4 <display_set_line>:
/**
 * @brief Instructs the display to select the specified line.
 * @param[in] line The line to target, 1, 2, 3 or 4.
 * @retval None.
 */
void display_set_line(uint8_t line) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
    set_byte(DDRAM_L[line - 1]);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	3b01      	subs	r3, #1
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <display_set_line+0x24>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff76 	bl	80011f8 <set_byte>
    send();
 800130c:	f7ff ffa8 	bl	8001260 <send>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0800c7d4 	.word	0x0800c7d4

0800131c <display_write>:
/**
 * @brief Writes the given data to the display line selected beforehand.
 * @param[in] data The data to send.
 * @retval None.
 */
void display_write(uint8_t data) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS1_RW0);
 8001326:	2305      	movs	r3, #5
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff49 	bl	80011c0 <set_startbyte>
    set_byte(data);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff61 	bl	80011f8 <set_byte>
    send();
 8001336:	f7ff ff93 	bl	8001260 <send>
    set_startbyte(RS0_RW0);
 800133a:	2301      	movs	r3, #1
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff3f 	bl	80011c0 <set_startbyte>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <display_write_line>:
 * @param[in] buf The buffer of data to send.
 * @param[in] len Length of the buffer.
 * @param[in] line The line of the display to target.
 * @retval None.
 */
void display_write_line(uint8_t *buf, uint8_t len, uint8_t line) {
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	4613      	mov	r3, r2
 8001358:	70bb      	strb	r3, [r7, #2]
    display_set_line(line);
 800135a:	78bb      	ldrb	r3, [r7, #2]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffc9 	bl	80012f4 <display_set_line>

    uint8_t i = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
    while (i < len) {
 8001366:	e00c      	b.n	8001382 <display_write_line+0x38>
	display_write(buf[i++]);
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	73fa      	strb	r2, [r7, #15]
 800136e:	461a      	mov	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ffd0 	bl	800131c <display_write>
	HAL_Delay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f000 fc17 	bl	8001bb0 <HAL_Delay>
    while (i < len) {
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	429a      	cmp	r2, r3
 8001388:	d3ee      	bcc.n	8001368 <display_write_line+0x1e>
    }

    while (i < 10) { //set remaining segments to blank (0x20)
 800138a:	e005      	b.n	8001398 <display_write_line+0x4e>
	display_write((uint8_t) 0x20);
 800138c:	2020      	movs	r0, #32
 800138e:	f7ff ffc5 	bl	800131c <display_write>
	i++;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	3301      	adds	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
    while (i < 10) { //set remaining segments to blank (0x20)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b09      	cmp	r3, #9
 800139c:	d9f6      	bls.n	800138c <display_write_line+0x42>
    }
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_MspInit+0x4c>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_MspInit+0x4c>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_MspInit+0x4c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6593      	str	r3, [r2, #88]	; 0x58
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	210f      	movs	r1, #15
 80013e2:	f06f 0001 	mvn.w	r0, #1
 80013e6:	f001 ffd3 	bl	8003390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	2019      	movs	r0, #25
 800140e:	f001 ffbf 	bl	8003390 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001412:	2019      	movs	r0, #25
 8001414:	f001 ffd8 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_InitTick+0x9c>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_InitTick+0x9c>)
 800141e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_InitTick+0x9c>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001430:	f107 0210 	add.w	r2, r7, #16
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ff84 	bl	8004348 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001440:	f002 ff6c 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8001444:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_InitTick+0xa0>)
 800144a:	fba2 2303 	umull	r2, r3, r2, r3
 800144e:	0c9b      	lsrs	r3, r3, #18
 8001450:	3b01      	subs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_InitTick+0xa4>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <HAL_InitTick+0xa8>)
 8001458:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_InitTick+0xa4>)
 800145c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001460:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_InitTick+0xa4>)
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_InitTick+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_InitTick+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_InitTick+0xa4>)
 8001476:	f004 fb45 	bl	8005b04 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_InitTick+0xa4>)
 8001482:	f004 fb97 	bl	8005bb4 <HAL_TIM_Base_Start_IT>
 8001486:	4603      	mov	r3, r0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3730      	adds	r7, #48	; 0x30
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	431bde83 	.word	0x431bde83
 800149c:	20001ec8 	.word	0x20001ec8
 80014a0:	40012c00 	.word	0x40012c00

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014d6:	f004 fd45 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20001ec8 	.word	0x20001ec8

080014e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	return 1;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_kill>:

int _kill(int pid, int sig)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014fe:	f009 fde1 	bl	800b0c4 <__errno>
 8001502:	4603      	mov	r3, r0
 8001504:	2216      	movs	r2, #22
 8001506:	601a      	str	r2, [r3, #0]
	return -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_exit>:

void _exit (int status)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800151c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffe7 	bl	80014f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001526:	e7fe      	b.n	8001526 <_exit+0x12>

08001528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
	}

return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e009      	b.n	8001588 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf1      	blt.n	8001574 <_write+0x12>
	}
	return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f009 fd46 	bl	800b0c4 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20018000 	.word	0x20018000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000100 	.word	0x20000100
 800166c:	20002038 	.word	0x20002038

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b09a      	sub	sp, #104	; 0x68
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	222c      	movs	r2, #44	; 0x2c
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f009 fd30 	bl	800b134 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <MX_TIM8_Init+0x150>)
 80016d6:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <MX_TIM8_Init+0x154>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4000;
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <MX_TIM8_Init+0x150>)
 80016dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <MX_TIM8_Init+0x150>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 80016e8:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <MX_TIM8_Init+0x150>)
 80016ea:	2264      	movs	r2, #100	; 0x64
 80016ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <MX_TIM8_Init+0x150>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <MX_TIM8_Init+0x150>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <MX_TIM8_Init+0x150>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001700:	4838      	ldr	r0, [pc, #224]	; (80017e4 <MX_TIM8_Init+0x150>)
 8001702:	f004 f9ff 	bl	8005b04 <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800170c:	f7ff fb92 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800171a:	4619      	mov	r1, r3
 800171c:	4831      	ldr	r0, [pc, #196]	; (80017e4 <MX_TIM8_Init+0x150>)
 800171e:	f004 fe55 	bl	80063cc <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001728:	f7ff fb84 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800172c:	482d      	ldr	r0, [pc, #180]	; (80017e4 <MX_TIM8_Init+0x150>)
 800172e:	f004 fab1 	bl	8005c94 <HAL_TIM_PWM_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001738:	f7ff fb7c 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800174c:	4619      	mov	r1, r3
 800174e:	4825      	ldr	r0, [pc, #148]	; (80017e4 <MX_TIM8_Init+0x150>)
 8001750:	f005 fb5e 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800175a:	f7ff fb6b 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	2360      	movs	r3, #96	; 0x60
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8001762:	2332      	movs	r3, #50	; 0x32
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001766:	2300      	movs	r3, #0
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800176a:	2300      	movs	r3, #0
 800176c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800177a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800177e:	2204      	movs	r2, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4818      	ldr	r0, [pc, #96]	; (80017e4 <MX_TIM8_Init+0x150>)
 8001784:	f004 fd0e 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800178e:	f7ff fb51 	bl	8000e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM8_Init+0x150>)
 80017c8:	f005 fbaa 	bl	8006f20 <HAL_TIMEx_ConfigBreakDeadTime>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80017d2:	f7ff fb2f 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM8_Init+0x150>)
 80017d8:	f000 f828 	bl	800182c <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3768      	adds	r7, #104	; 0x68
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20001f14 	.word	0x20001f14
 80017e8:	40013400 	.word	0x40013400

080017ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x38>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d10b      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_TIM_Base_MspInit+0x3c>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_TIM_Base_MspInit+0x3c>)
 8001804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001808:	6613      	str	r3, [r2, #96]	; 0x60
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_TIM_Base_MspInit+0x3c>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40013400 	.word	0x40013400
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_TIM_MspPostInit+0x64>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11b      	bne.n	8001886 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_TIM_MspPostInit+0x68>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_TIM_MspPostInit+0x68>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_TIM_MspPostInit+0x68>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001876:	2303      	movs	r3, #3
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_TIM_MspPostInit+0x6c>)
 8001882:	f001 fdaf 	bl	80033e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40013400 	.word	0x40013400
 8001894:	40021000 	.word	0x40021000
 8001898:	48000800 	.word	0x48000800

0800189c <tim_set_duty_cycle>:
 * @brief Sets the duty cycle for the PWM proportional to the voltage
 * over the potentiometer.
 * @param[in] voltage The voltage level given by ADC conversion.
 * @retval None.
 */
void tim_set_duty_cycle(uint16_t pot_value) {
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	80fb      	strh	r3, [r7, #6]
    /* "or 1" syntax to never allow for 0% duty cycle */
  //voltage/MAX_VALUE) * 100
    uint32_t new_dc = (uint32_t)((pot_value * 100)/MAX_VALUE | 1);
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	2264      	movs	r2, #100	; 0x64
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	f640 72e3 	movw	r2, #4067	; 0xfe3
 80018b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]

    htim8.Instance->CCR2 = new_dc;
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <tim_set_duty_cycle+0x34>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20001f14 	.word	0x20001f14

080018d4 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_UART5_Init+0x58>)
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MX_UART5_Init+0x5c>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_UART5_Init+0x58>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_UART5_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_UART5_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_UART5_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_UART5_Init+0x58>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_UART5_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_UART5_Init+0x58>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_UART5_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_UART5_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_UART5_Init+0x58>)
 8001918:	f005 fb9e 	bl	8007058 <HAL_UART_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001922:	f7ff fa87 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20001f60 	.word	0x20001f60
 8001930:	40005000 	.word	0x40005000

08001934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ac      	sub	sp, #176	; 0xb0
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2288      	movs	r2, #136	; 0x88
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f009 fbed 	bl	800b134 <memset>
  if(uartHandle->Instance==UART5)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <HAL_UART_MspInit+0xf4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d15c      	bne.n	8001a1e <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001964:	2310      	movs	r3, #16
 8001966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001968:	2300      	movs	r3, #0
 800196a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fd7b 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800197c:	f7ff fa5a 	bl	8000e34 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 8001986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800198a:	6593      	str	r3, [r2, #88]	; 0x58
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199c:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_UART_MspInit+0xf8>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019e2:	2308      	movs	r3, #8
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4810      	ldr	r0, [pc, #64]	; (8001a30 <HAL_UART_MspInit+0xfc>)
 80019f0:	f001 fcf8 	bl	80033e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019f4:	2304      	movs	r3, #4
 80019f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a16:	4619      	mov	r1, r3
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <HAL_UART_MspInit+0x100>)
 8001a1a:	f001 fce3 	bl	80033e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001a1e:	bf00      	nop
 8001a20:	37b0      	adds	r7, #176	; 0xb0
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40005000 	.word	0x40005000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000800 	.word	0x48000800
 8001a34:	48000c00 	.word	0x48000c00

08001a38 <UART_Error>:
 * @brief Called when an error generated during UART communication
 * has been detected.
 * @note Enables the LD2 LED on the Nucleo board and loops infinitely.
 * @retval None.
 */
void UART_Error() {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2120      	movs	r1, #32
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f001 fe78 	bl	8003738 <HAL_GPIO_WritePin>
    while (1) {}
 8001a48:	e7fe      	b.n	8001a48 <UART_Error+0x10>
	...

08001a4c <uart_transmit>:
  * @brief UART transmission entry point.
  * @param[in] buffer The buffer of data to transmit.
  * @param[in] size Amount of bytes to transmit.
  * @retval None.
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
    /* uart in reception process */
    if (HAL_UART_Transmit(&huart5, buffer, size, 100) != HAL_OK) {
 8001a58:	887a      	ldrh	r2, [r7, #2]
 8001a5a:	2364      	movs	r3, #100	; 0x64
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <uart_transmit+0x2c>)
 8001a60:	f005 fb48 	bl	80070f4 <HAL_UART_Transmit>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <uart_transmit+0x22>
	UART_Error();
 8001a6a:	f7ff ffe5 	bl	8001a38 <UART_Error>
    }
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20001f60 	.word	0x20001f60

08001a7c <uart_receive>:
  * @param[out] buffer The buffer to place incoming data.
  * @param[in] size Amount of bytes to receive.
  * @note Feeds back one character at a time to the user.
  * @retval None.
  */
void uart_receive(uint8_t buffer[], uint16_t size) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
    uint32_t MAX_TIMEOUT = 0xFFFF;
 8001a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8c:	60bb      	str	r3, [r7, #8]
    /* uart in reception process */
    uint8_t i = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
    while (i < size) {
 8001a92:	e016      	b.n	8001ac2 <uart_receive+0x46>
	if (HAL_UART_Receive(&huart5, &buffer[i], 1, MAX_TIMEOUT) != HAL_OK) {
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	18d1      	adds	r1, r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <uart_receive+0x5c>)
 8001aa0:	f005 fbbc 	bl	800721c <HAL_UART_Receive>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <uart_receive+0x32>
	    UART_Error();
 8001aaa:	f7ff ffc5 	bl	8001a38 <UART_Error>
	}
	uart_transmit(&buffer[i++], 1);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	73fa      	strb	r2, [r7, #15]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ffc5 	bl	8001a4c <uart_transmit>
    while (i < size) {
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8e3      	bhi.n	8001a94 <uart_receive+0x18>
    }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20001f60 	.word	0x20001f60

08001adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae0:	f7ff fdc6 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae6:	490d      	ldr	r1, [pc, #52]	; (8001b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <LoopForever+0xe>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001afc:	4c0a      	ldr	r4, [pc, #40]	; (8001b28 <LoopForever+0x16>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f009 fae1 	bl	800b0d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0e:	f7ff f913 	bl	8000d38 <main>

08001b12 <LoopForever>:

LoopForever:
    b LoopForever
 8001b12:	e7fe      	b.n	8001b12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b20:	0800ca88 	.word	0x0800ca88
  ldr r2, =_sbss
 8001b24:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b28:	20002038 	.word	0x20002038

08001b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC1_2_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_Init+0x3c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_Init+0x3c>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b46:	2003      	movs	r0, #3
 8001b48:	f001 fc17 	bl	800337a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4c:	200f      	movs	r0, #15
 8001b4e:	f7ff fc53 	bl	80013f8 <HAL_InitTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	e001      	b.n	8001b62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b5e:	f7ff fc23 	bl	80013a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b62:	79fb      	ldrb	r3, [r7, #7]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000014 	.word	0x20000014
 8001b94:	20001fe4 	.word	0x20001fe4

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20001fe4 	.word	0x20001fe4

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000014 	.word	0x20000014

08001bf8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	609a      	str	r2, [r3, #8]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3360      	adds	r3, #96	; 0x60
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <LL_ADC_SetOffset+0x44>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	03fff000 	.word	0x03fff000

08001ca8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3360      	adds	r3, #96	; 0x60
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3360      	adds	r3, #96	; 0x60
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3330      	adds	r3, #48	; 0x30
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	211f      	movs	r1, #31
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	401a      	ands	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 011f 	and.w	r1, r3, #31
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	431a      	orrs	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3314      	adds	r3, #20
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	0e5b      	lsrs	r3, r3, #25
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0d1b      	lsrs	r3, r3, #20
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2107      	movs	r1, #7
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0d1b      	lsrs	r3, r3, #20
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0318 	and.w	r3, r3, #24
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e04:	40d9      	lsrs	r1, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	400b      	ands	r3, r1
 8001e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	0007ffff 	.word	0x0007ffff

08001e28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 031f 	and.w	r3, r3, #31
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6093      	str	r3, [r2, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e98:	d101      	bne.n	8001e9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ee8:	d101      	bne.n	8001eee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f38:	f043 0202 	orr.w	r2, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <LL_ADC_IsEnabled+0x18>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <LL_ADC_IsEnabled+0x1a>
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d101      	bne.n	8001f8a <LL_ADC_IsDisableOngoing+0x18>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <LL_ADC_IsDisableOngoing+0x1a>
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d101      	bne.n	8001fd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e136      	b.n	8002294 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe fb15 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff19 	bl	8001e84 <LL_ADC_IsDeepPowerDownEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff feff 	bl	8001e60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff34 	bl	8001ed4 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff18 	bl	8001eac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800207c:	4b87      	ldr	r3, [pc, #540]	; (800229c <HAL_ADC_Init+0x290>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	4a87      	ldr	r2, [pc, #540]	; (80022a0 <HAL_ADC_Init+0x294>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	3301      	adds	r3, #1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002090:	e002      	b.n	8002098 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3b01      	subs	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f9      	bne.n	8002092 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff16 	bl	8001ed4 <LL_ADC_IsInternalRegulatorEnabled>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f043 0210 	orr.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff76 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80cf 	bne.w	8002282 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 80cb 	bne.w	8002282 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020f4:	f043 0202 	orr.w	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff23 	bl	8001f4c <LL_ADC_IsEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d115      	bne.n	8002138 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210c:	4865      	ldr	r0, [pc, #404]	; (80022a4 <HAL_ADC_Init+0x298>)
 800210e:	f7ff ff1d 	bl	8001f4c <LL_ADC_IsEnabled>
 8002112:	4604      	mov	r4, r0
 8002114:	4864      	ldr	r0, [pc, #400]	; (80022a8 <HAL_ADC_Init+0x29c>)
 8002116:	f7ff ff19 	bl	8001f4c <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	431c      	orrs	r4, r3
 800211e:	4863      	ldr	r0, [pc, #396]	; (80022ac <HAL_ADC_Init+0x2a0>)
 8002120:	f7ff ff14 	bl	8001f4c <LL_ADC_IsEnabled>
 8002124:	4603      	mov	r3, r0
 8002126:	4323      	orrs	r3, r4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4619      	mov	r1, r3
 8002132:	485f      	ldr	r0, [pc, #380]	; (80022b0 <HAL_ADC_Init+0x2a4>)
 8002134:	f7ff fd60 	bl	8001bf8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e5b      	ldrb	r3, [r3, #25]
 800213c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002142:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002148:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800214e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d106      	bne.n	8002174 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	3b01      	subs	r3, #1
 800216c:	045b      	lsls	r3, r3, #17
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_ADC_Init+0x2a8>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff09 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 80021ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff16 	bl	8001fe6 <LL_ADC_INJ_IsConversionOngoing>
 80021ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d13d      	bne.n	800223e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d13a      	bne.n	800223e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021e4:	f023 0302 	bic.w	r3, r3, #2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d118      	bne.n	800222e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002206:	f023 0304 	bic.w	r3, r3, #4
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800221e:	430a      	orrs	r2, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	611a      	str	r2, [r3, #16]
 800222c:	e007      	b.n	800223e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10c      	bne.n	8002260 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f023 010f 	bic.w	r1, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
 800225e:	e007      	b.n	8002270 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020f 	bic.w	r2, r2, #15
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f023 0303 	bic.w	r3, r3, #3
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
 8002280:	e007      	b.n	8002292 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f043 0210 	orr.w	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002292:	7ffb      	ldrb	r3, [r7, #31]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3724      	adds	r7, #36	; 0x24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	053e2d63 	.word	0x053e2d63
 80022a4:	50040000 	.word	0x50040000
 80022a8:	50040100 	.word	0x50040100
 80022ac:	50040200 	.word	0x50040200
 80022b0:	50040300 	.word	0x50040300
 80022b4:	fff0c007 	.word	0xfff0c007

080022b8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c0:	4857      	ldr	r0, [pc, #348]	; (8002420 <HAL_ADC_Start+0x168>)
 80022c2:	f7ff fdb1 	bl	8001e28 <LL_ADC_GetMultimode>
 80022c6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fe77 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 809c 	bne.w	8002412 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_Start+0x30>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e097      	b.n	8002418 <HAL_ADC_Start+0x160>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fd71 	bl	8002dd8 <ADC_Enable>
 80022f6:	4603      	mov	r3, r0
 80022f8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 8083 	bne.w	8002408 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a42      	ldr	r2, [pc, #264]	; (8002424 <HAL_ADC_Start+0x16c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d002      	beq.n	8002326 <HAL_ADC_Start+0x6e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	e000      	b.n	8002328 <HAL_ADC_Start+0x70>
 8002326:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_ADC_Start+0x170>)
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	4293      	cmp	r3, r2
 800232e:	d002      	beq.n	8002336 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d105      	bne.n	8002342 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	d106      	bne.n	800235e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f023 0206 	bic.w	r2, r3, #6
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58
 800235c:	e002      	b.n	8002364 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	221c      	movs	r2, #28
 800236a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <HAL_ADC_Start+0x16c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d002      	beq.n	8002384 <HAL_ADC_Start+0xcc>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	e000      	b.n	8002386 <HAL_ADC_Start+0xce>
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_ADC_Start+0x170>)
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	4293      	cmp	r3, r2
 800238c:	d008      	beq.n	80023a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b05      	cmp	r3, #5
 8002398:	d002      	beq.n	80023a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d114      	bne.n	80023ca <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fde8 	bl	8001f98 <LL_ADC_REG_StartConversion>
 80023c8:	e025      	b.n	8002416 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_ADC_Start+0x16c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d002      	beq.n	80023e6 <HAL_ADC_Start+0x12e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	e000      	b.n	80023e8 <HAL_ADC_Start+0x130>
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_ADC_Start+0x170>)
 80023e8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00f      	beq.n	8002416 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
 8002406:	e006      	b.n	8002416 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002410:	e001      	b.n	8002416 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002416:	7dfb      	ldrb	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	50040300 	.word	0x50040300
 8002424:	50040100 	.word	0x50040100
 8002428:	50040000 	.word	0x50040000

0800242c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002436:	4866      	ldr	r0, [pc, #408]	; (80025d0 <HAL_ADC_PollForConversion+0x1a4>)
 8002438:	f7ff fcf6 	bl	8001e28 <LL_ADC_GetMultimode>
 800243c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d102      	bne.n	800244c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002446:	2308      	movs	r3, #8
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e02a      	b.n	80024a2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d002      	beq.n	800245e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b09      	cmp	r3, #9
 800245c:	d111      	bne.n	8002482 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0a4      	b.n	80025c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800247c:	2304      	movs	r3, #4
 800247e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002480:	e00f      	b.n	80024a2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002482:	4853      	ldr	r0, [pc, #332]	; (80025d0 <HAL_ADC_PollForConversion+0x1a4>)
 8002484:	f7ff fcde 	bl	8001e44 <LL_ADC_GetMultiDMATransfer>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e093      	b.n	80025c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800249e:	2304      	movs	r3, #4
 80024a0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024a2:	f7ff fb79 	bl	8001b98 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024a8:	e021      	b.n	80024ee <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b0:	d01d      	beq.n	80024ee <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024b2:	f7ff fb71 	bl	8001b98 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d302      	bcc.n	80024c8 <HAL_ADC_PollForConversion+0x9c>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d112      	bne.n	80024ee <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e06b      	b.n	80025c6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0d6      	beq.n	80024aa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fbfc 	bl	8001d0a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01c      	beq.n	8002552 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e5b      	ldrb	r3, [r3, #25]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d118      	bne.n	8002552 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b08      	cmp	r3, #8
 800252c:	d111      	bne.n	8002552 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <HAL_ADC_PollForConversion+0x1a8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d002      	beq.n	8002562 <HAL_ADC_PollForConversion+0x136>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	e000      	b.n	8002564 <HAL_ADC_PollForConversion+0x138>
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <HAL_ADC_PollForConversion+0x1ac>)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4293      	cmp	r3, r2
 800256a:	d008      	beq.n	800257e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b05      	cmp	r3, #5
 8002576:	d002      	beq.n	800257e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b09      	cmp	r3, #9
 800257c:	d104      	bne.n	8002588 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	e00c      	b.n	80025a2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_ADC_PollForConversion+0x1a8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d002      	beq.n	8002598 <HAL_ADC_PollForConversion+0x16c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	e000      	b.n	800259a <HAL_ADC_PollForConversion+0x16e>
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_ADC_PollForConversion+0x1ac>)
 800259a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d104      	bne.n	80025b2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2208      	movs	r2, #8
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e008      	b.n	80025c4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	220c      	movs	r2, #12
 80025c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	50040300 	.word	0x50040300
 80025d4:	50040100 	.word	0x50040100
 80025d8:	50040000 	.word	0x50040000

080025dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0b6      	sub	sp, #216	; 0xd8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x22>
 8002616:	2302      	movs	r3, #2
 8002618:	e3c7      	b.n	8002daa <HAL_ADC_ConfigChannel+0x7b2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fcca 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 83a8 	bne.w	8002d84 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d824      	bhi.n	8002686 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	3b02      	subs	r3, #2
 8002642:	2b03      	cmp	r3, #3
 8002644:	d81b      	bhi.n	800267e <HAL_ADC_ConfigChannel+0x86>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <HAL_ADC_ConfigChannel+0x54>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800265d 	.word	0x0800265d
 8002650:	08002665 	.word	0x08002665
 8002654:	0800266d 	.word	0x0800266d
 8002658:	08002675 	.word	0x08002675
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	220c      	movs	r2, #12
 8002660:	605a      	str	r2, [r3, #4]
          break;
 8002662:	e011      	b.n	8002688 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2212      	movs	r2, #18
 8002668:	605a      	str	r2, [r3, #4]
          break;
 800266a:	e00d      	b.n	8002688 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2218      	movs	r2, #24
 8002670:	605a      	str	r2, [r3, #4]
          break;
 8002672:	e009      	b.n	8002688 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267a:	605a      	str	r2, [r3, #4]
          break;
 800267c:	e004      	b.n	8002688 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2206      	movs	r2, #6
 8002682:	605a      	str	r2, [r3, #4]
          break;
 8002684:	e000      	b.n	8002688 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002686:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	f7ff fb4b 	bl	8001d30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fc8e 	bl	8001fc0 <LL_ADC_REG_IsConversionOngoing>
 80026a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fc9a 	bl	8001fe6 <LL_ADC_INJ_IsConversionOngoing>
 80026b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 81a6 	bne.w	8002a0c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 81a1 	bne.w	8002a0c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f7ff fb56 	bl	8001d88 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d00a      	beq.n	8002714 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6919      	ldr	r1, [r3, #16]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800270e:	f7ff faa7 	bl	8001c60 <LL_ADC_SetOffset>
 8002712:	e17b      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fac4 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x148>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fab9 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	f003 021f 	and.w	r2, r3, #31
 800273e:	e01e      	b.n	800277e <HAL_ADC_ConfigChannel+0x186>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff faae 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800275e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002766:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e004      	b.n	800277c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x19e>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	e018      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e004      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80027be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d106      	bne.n	80027da <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fa7d 	bl	8001cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fa61 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x20e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fa56 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	e01e      	b.n	8002844 <HAL_ADC_ConfigChannel+0x24c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2101      	movs	r1, #1
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fa4b 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002828:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800282c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e004      	b.n	8002842 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_ADC_ConfigChannel+0x264>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	e018      	b.n	800288e <HAL_ADC_ConfigChannel+0x296>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002870:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e004      	b.n	800288e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800288e:	429a      	cmp	r2, r3
 8002890:	d106      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2200      	movs	r2, #0
 8002898:	2101      	movs	r1, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fa1a 	bl	8001cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff f9fe 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x2d4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f9f3 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	f003 021f 	and.w	r2, r3, #31
 80028ca:	e01e      	b.n	800290a <HAL_ADC_ConfigChannel+0x312>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2102      	movs	r1, #2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f9e8 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e004      	b.n	8002908 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x32a>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	e016      	b.n	8002950 <HAL_ADC_ConfigChannel+0x358>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002934:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800293a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e004      	b.n	8002950 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	2102      	movs	r1, #2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f9b9 	bl	8001cd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2103      	movs	r1, #3
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f99d 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 800296e:	4603      	mov	r3, r0
 8002970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <HAL_ADC_ConfigChannel+0x396>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2103      	movs	r1, #3
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f992 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 021f 	and.w	r2, r3, #31
 800298c:	e017      	b.n	80029be <HAL_ADC_ConfigChannel+0x3c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2103      	movs	r1, #3
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f987 	bl	8001ca8 <LL_ADC_GetOffsetChannel>
 800299a:	4603      	mov	r3, r0
 800299c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e003      	b.n	80029bc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80029b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x3de>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	e011      	b.n	80029fa <HAL_ADC_ConfigChannel+0x402>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e003      	b.n	80029fa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80029f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2103      	movs	r1, #3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f964 	bl	8001cd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fa9b 	bl	8001f4c <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f040 813f 	bne.w	8002c9c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f7ff f9d8 	bl	8001de0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a8e      	ldr	r2, [pc, #568]	; (8002c70 <HAL_ADC_ConfigChannel+0x678>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	f040 8130 	bne.w	8002c9c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x46c>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e019      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x4a0>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a74:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e003      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2b09      	cmp	r3, #9
 8002a90:	bf94      	ite	ls
 8002a92:	2301      	movls	r3, #1
 8002a94:	2300      	movhi	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d079      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x4c0>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	069b      	lsls	r3, r3, #26
 8002ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab6:	e015      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x4ec>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e003      	b.n	8002adc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	069b      	lsls	r3, r3, #26
 8002ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x50c>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	e017      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x53c>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e003      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	ea42 0103 	orr.w	r1, r2, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x562>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0e9b      	lsrs	r3, r3, #26
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	051b      	lsls	r3, r3, #20
 8002b58:	e018      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x594>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e003      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	e080      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x5b4>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	069b      	lsls	r3, r3, #26
 8002ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002baa:	e015      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x5e0>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	e003      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	069b      	lsls	r3, r3, #26
 8002bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x600>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	3301      	adds	r3, #1
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	e017      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x630>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	61fb      	str	r3, [r7, #28]
  return result;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e003      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	ea42 0103 	orr.w	r1, r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x65c>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b1e      	subs	r3, #30
 8002c4c:	051b      	lsls	r3, r3, #20
 8002c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c52:	e01d      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x698>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	613b      	str	r3, [r7, #16]
  return result;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e005      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x684>
 8002c70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f003 021f 	and.w	r2, r3, #31
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	3b1e      	subs	r3, #30
 8002c8a:	051b      	lsls	r3, r3, #20
 8002c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c90:	430b      	orrs	r3, r1
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	6892      	ldr	r2, [r2, #8]
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7ff f876 	bl	8001d88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d07a      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ca8:	4843      	ldr	r0, [pc, #268]	; (8002db8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002caa:	f7fe ffcb 	bl	8001c44 <LL_ADC_GetCommonPathInternalCh>
 8002cae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <HAL_ADC_ConfigChannel+0x7c4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d12c      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d126      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3c      	ldr	r2, [pc, #240]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x6e4>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d15d      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4834      	ldr	r0, [pc, #208]	; (8002db8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ce8:	f7fe ff99 	bl	8001c1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4a36      	ldr	r2, [pc, #216]	; (8002dcc <HAL_ADC_ConfigChannel+0x7d4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d14:	e040      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d118      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x75a>
 8002d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d112      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x748>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d12d      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d48:	4619      	mov	r1, r3
 8002d4a:	481b      	ldr	r0, [pc, #108]	; (8002db8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d4c:	f7fe ff67 	bl	8001c1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d50:	e024      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d120      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11a      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d115      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	480e      	ldr	r0, [pc, #56]	; (8002db8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d7e:	f7fe ff4e 	bl	8001c1e <LL_ADC_SetCommonPathInternalCh>
 8002d82:	e00c      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d96:	e002      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d98:	bf00      	nop
 8002d9a:	e000      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002da6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	37d8      	adds	r7, #216	; 0xd8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	80080000 	.word	0x80080000
 8002db8:	50040300 	.word	0x50040300
 8002dbc:	c7520000 	.word	0xc7520000
 8002dc0:	50040000 	.word	0x50040000
 8002dc4:	50040200 	.word	0x50040200
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	053e2d63 	.word	0x053e2d63
 8002dd0:	cb840000 	.word	0xcb840000
 8002dd4:	80000001 	.word	0x80000001

08002dd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff f8b1 	bl	8001f4c <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d14d      	bne.n	8002e8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <ADC_Enable+0xc0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e039      	b.n	8002e8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f86c 	bl	8001efc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e24:	f7fe feb8 	bl	8001b98 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e2a:	e028      	b.n	8002e7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f88b 	bl	8001f4c <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f85b 	bl	8001efc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e46:	f7fe fea7 	bl	8001b98 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d914      	bls.n	8002e7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00d      	beq.n	8002e7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0210 	orr.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	f043 0201 	orr.w	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e007      	b.n	8002e8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1cf      	bne.n	8002e2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	8000003f 	.word	0x8000003f

08002e9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f862 	bl	8001f72 <LL_ADC_IsDisableOngoing>
 8002eae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f849 	bl	8001f4c <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d047      	beq.n	8002f50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d144      	bne.n	8002f50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030d 	and.w	r3, r3, #13
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10c      	bne.n	8002eee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f823 	bl	8001f24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fe57 	bl	8001b98 <HAL_GetTick>
 8002eea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eec:	e029      	b.n	8002f42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e023      	b.n	8002f52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f0a:	f7fe fe45 	bl	8001b98 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d914      	bls.n	8002f42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f043 0210 	orr.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e007      	b.n	8002f52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1dc      	bne.n	8002f0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <LL_ADC_IsEnabled>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_IsEnabled+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_IsEnabled+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_StartCalibration>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc6:	d101      	bne.n	8002fcc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_REG_IsConversionOngoing>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d101      	bne.n	8002ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_ADCEx_Calibration_Start+0x1c>
 8003018:	2302      	movs	r3, #2
 800301a:	e04d      	b.n	80030b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff39 	bl	8002e9c <ADC_Disable>
 800302a:	4603      	mov	r3, r0
 800302c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d136      	bne.n	80030a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800303c:	f023 0302 	bic.w	r3, r3, #2
 8003040:	f043 0202 	orr.w	r2, r3, #2
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff96 	bl	8002f80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003054:	e014      	b.n	8003080 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3301      	adds	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003062:	d30d      	bcc.n	8003080 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f023 0312 	bic.w	r3, r3, #18
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e01b      	b.n	80030b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff94 	bl	8002fb2 <LL_ADC_IsCalibrationOnGoing>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e2      	bne.n	8003056 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f023 0303 	bic.w	r3, r3, #3
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
 80030a0:	e005      	b.n	80030ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f043 0210 	orr.w	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b09f      	sub	sp, #124	; 0x7c
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030da:	2302      	movs	r3, #2
 80030dc:	e093      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030e6:	2300      	movs	r3, #0
 80030e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80030ea:	2300      	movs	r3, #0
 80030ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a47      	ldr	r2, [pc, #284]	; (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d102      	bne.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030f8:	4b46      	ldr	r3, [pc, #280]	; (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	e001      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e072      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff59 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 8003128:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff53 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d154      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800313a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313c:	2b00      	cmp	r3, #0
 800313e:	d151      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003140:	4b35      	ldr	r3, [pc, #212]	; (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003142:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02c      	beq.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800314c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800315e:	035b      	lsls	r3, r3, #13
 8003160:	430b      	orrs	r3, r1
 8003162:	431a      	orrs	r2, r3
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003168:	4829      	ldr	r0, [pc, #164]	; (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800316a:	f7ff fef6 	bl	8002f5a <LL_ADC_IsEnabled>
 800316e:	4604      	mov	r4, r0
 8003170:	4828      	ldr	r0, [pc, #160]	; (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003172:	f7ff fef2 	bl	8002f5a <LL_ADC_IsEnabled>
 8003176:	4603      	mov	r3, r0
 8003178:	431c      	orrs	r4, r3
 800317a:	4828      	ldr	r0, [pc, #160]	; (800321c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800317c:	f7ff feed 	bl	8002f5a <LL_ADC_IsEnabled>
 8003180:	4603      	mov	r3, r0
 8003182:	4323      	orrs	r3, r4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d137      	bne.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003190:	f023 030f 	bic.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	6811      	ldr	r1, [r2, #0]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	6892      	ldr	r2, [r2, #8]
 800319c:	430a      	orrs	r2, r1
 800319e:	431a      	orrs	r2, r3
 80031a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031a4:	e028      	b.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b2:	4817      	ldr	r0, [pc, #92]	; (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031b4:	f7ff fed1 	bl	8002f5a <LL_ADC_IsEnabled>
 80031b8:	4604      	mov	r4, r0
 80031ba:	4816      	ldr	r0, [pc, #88]	; (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031bc:	f7ff fecd 	bl	8002f5a <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	431c      	orrs	r4, r3
 80031c4:	4815      	ldr	r0, [pc, #84]	; (800321c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031c6:	f7ff fec8 	bl	8002f5a <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4323      	orrs	r3, r4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d112      	bne.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031da:	f023 030f 	bic.w	r3, r3, #15
 80031de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e2:	e009      	b.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80031f6:	e000      	b.n	80031fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003202:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003206:	4618      	mov	r0, r3
 8003208:	377c      	adds	r7, #124	; 0x7c
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	50040000 	.word	0x50040000
 8003214:	50040100 	.word	0x50040100
 8003218:	50040300 	.word	0x50040300
 800321c:	50040200 	.word	0x50040200

08003220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4907      	ldr	r1, [pc, #28]	; (80032bc <__NVIC_EnableIRQ+0x38>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	db0a      	blt.n	80032ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	490c      	ldr	r1, [pc, #48]	; (800330c <__NVIC_SetPriority+0x4c>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	440b      	add	r3, r1
 80032e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e8:	e00a      	b.n	8003300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4908      	ldr	r1, [pc, #32]	; (8003310 <__NVIC_SetPriority+0x50>)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	3b04      	subs	r3, #4
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	440b      	add	r3, r1
 80032fe:	761a      	strb	r2, [r3, #24]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	bf28      	it	cs
 8003332:	2304      	movcs	r3, #4
 8003334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3304      	adds	r3, #4
 800333a:	2b06      	cmp	r3, #6
 800333c:	d902      	bls.n	8003344 <NVIC_EncodePriority+0x30>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3b03      	subs	r3, #3
 8003342:	e000      	b.n	8003346 <NVIC_EncodePriority+0x32>
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	401a      	ands	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800335c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43d9      	mvns	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	4313      	orrs	r3, r2
         );
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	; 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ff4c 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033a2:	f7ff ff61 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80033a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	6978      	ldr	r0, [r7, #20]
 80033ae:	f7ff ffb1 	bl	8003314 <NVIC_EncodePriority>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff80 	bl	80032c0 <__NVIC_SetPriority>
}
 80033c0:	bf00      	nop
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff54 	bl	8003284 <__NVIC_EnableIRQ>
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f2:	e17f      	b.n	80036f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8171 	beq.w	80036ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d005      	beq.n	8003424 <HAL_GPIO_Init+0x40>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d130      	bne.n	8003486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800345a:	2201      	movs	r2, #1
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	f003 0201 	and.w	r2, r3, #1
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b03      	cmp	r3, #3
 8003490:	d118      	bne.n	80034c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003498:	2201      	movs	r2, #1
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f003 0201 	and.w	r2, r3, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d017      	beq.n	8003500 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d123      	bne.n	8003554 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	6939      	ldr	r1, [r7, #16]
 8003550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0203 	and.w	r2, r3, #3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80ac 	beq.w	80036ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	4b5f      	ldr	r3, [pc, #380]	; (8003714 <HAL_GPIO_Init+0x330>)
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	4a5e      	ldr	r2, [pc, #376]	; (8003714 <HAL_GPIO_Init+0x330>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6613      	str	r3, [r2, #96]	; 0x60
 80035a2:	4b5c      	ldr	r3, [pc, #368]	; (8003714 <HAL_GPIO_Init+0x330>)
 80035a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035ae:	4a5a      	ldr	r2, [pc, #360]	; (8003718 <HAL_GPIO_Init+0x334>)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035d8:	d025      	beq.n	8003626 <HAL_GPIO_Init+0x242>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	; (800371c <HAL_GPIO_Init+0x338>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <HAL_GPIO_Init+0x23e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4e      	ldr	r2, [pc, #312]	; (8003720 <HAL_GPIO_Init+0x33c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x23a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4d      	ldr	r2, [pc, #308]	; (8003724 <HAL_GPIO_Init+0x340>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x236>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4c      	ldr	r2, [pc, #304]	; (8003728 <HAL_GPIO_Init+0x344>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x232>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4b      	ldr	r2, [pc, #300]	; (800372c <HAL_GPIO_Init+0x348>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x22e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4a      	ldr	r2, [pc, #296]	; (8003730 <HAL_GPIO_Init+0x34c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x22a>
 800360a:	2306      	movs	r3, #6
 800360c:	e00c      	b.n	8003628 <HAL_GPIO_Init+0x244>
 800360e:	2307      	movs	r3, #7
 8003610:	e00a      	b.n	8003628 <HAL_GPIO_Init+0x244>
 8003612:	2305      	movs	r3, #5
 8003614:	e008      	b.n	8003628 <HAL_GPIO_Init+0x244>
 8003616:	2304      	movs	r3, #4
 8003618:	e006      	b.n	8003628 <HAL_GPIO_Init+0x244>
 800361a:	2303      	movs	r3, #3
 800361c:	e004      	b.n	8003628 <HAL_GPIO_Init+0x244>
 800361e:	2302      	movs	r3, #2
 8003620:	e002      	b.n	8003628 <HAL_GPIO_Init+0x244>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_GPIO_Init+0x244>
 8003626:	2300      	movs	r3, #0
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	f002 0203 	and.w	r2, r2, #3
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	4093      	lsls	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003638:	4937      	ldr	r1, [pc, #220]	; (8003718 <HAL_GPIO_Init+0x334>)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	3302      	adds	r3, #2
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_GPIO_Init+0x350>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800366a:	4a32      	ldr	r2, [pc, #200]	; (8003734 <HAL_GPIO_Init+0x350>)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003670:	4b30      	ldr	r3, [pc, #192]	; (8003734 <HAL_GPIO_Init+0x350>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	43db      	mvns	r3, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4013      	ands	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <HAL_GPIO_Init+0x350>)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_GPIO_Init+0x350>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036be:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_GPIO_Init+0x350>)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_GPIO_Init+0x350>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4013      	ands	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <HAL_GPIO_Init+0x350>)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3301      	adds	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f47f ae78 	bne.w	80033f4 <HAL_GPIO_Init+0x10>
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	40010000 	.word	0x40010000
 800371c:	48000400 	.word	0x48000400
 8003720:	48000800 	.word	0x48000800
 8003724:	48000c00 	.word	0x48000c00
 8003728:	48001000 	.word	0x48001000
 800372c:	48001400 	.word	0x48001400
 8003730:	48001800 	.word	0x48001800
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003754:	e002      	b.n	800375c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <HAL_PWREx_GetVoltageRange+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40007000 	.word	0x40007000

08003784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003792:	d130      	bne.n	80037f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800379c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a0:	d038      	beq.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2232      	movs	r2, #50	; 0x32
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0c9b      	lsrs	r3, r3, #18
 80037c4:	3301      	adds	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c8:	e002      	b.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d102      	bne.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f2      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f0:	d110      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d007      	beq.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003804:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800380c:	4a05      	ldr	r2, [pc, #20]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800380e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003812:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40007000 	.word	0x40007000
 8003828:	2000000c 	.word	0x2000000c
 800382c:	431bde83 	.word	0x431bde83

08003830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e3d4      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003842:	4ba1      	ldr	r3, [pc, #644]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800384c:	4b9e      	ldr	r3, [pc, #632]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80e4 	beq.w	8003a2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_RCC_OscConfig+0x4a>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f040 808b 	bne.w	8003988 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 8087 	bne.w	8003988 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800387a:	4b93      	ldr	r3, [pc, #588]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e3ac      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_RCC_OscConfig+0x7c>
 80038a2:	4b89      	ldr	r3, [pc, #548]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038aa:	e005      	b.n	80038b8 <HAL_RCC_OscConfig+0x88>
 80038ac:	4b86      	ldr	r3, [pc, #536]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d223      	bcs.n	8003904 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fd73 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e38d      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038d0:	4b7d      	ldr	r3, [pc, #500]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7c      	ldr	r2, [pc, #496]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038d6:	f043 0308 	orr.w	r3, r3, #8
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b7a      	ldr	r3, [pc, #488]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4977      	ldr	r1, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ee:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	4972      	ldr	r1, [pc, #456]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
 8003902:	e025      	b.n	8003950 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003904:	4b70      	ldr	r3, [pc, #448]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6f      	ldr	r2, [pc, #444]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 800390a:	f043 0308 	orr.w	r3, r3, #8
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	496a      	ldr	r1, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003922:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	4965      	ldr	r1, [pc, #404]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd33 	bl	80043ac <RCC_SetFlashLatencyFromMSIRange>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e34d      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003950:	f000 fc36 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b5c      	ldr	r3, [pc, #368]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	495a      	ldr	r1, [pc, #360]	; (8003acc <HAL_RCC_OscConfig+0x29c>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_RCC_OscConfig+0x2a0>)
 800396e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003970:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_RCC_OscConfig+0x2a4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fd3f 	bl	80013f8 <HAL_InitTick>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d052      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	e331      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d032      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003990:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4c      	ldr	r2, [pc, #304]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800399c:	f7fe f8fc 	bl	8001b98 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039a4:	f7fe f8f8 	bl	8001b98 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e31a      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a40      	ldr	r2, [pc, #256]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039c8:	f043 0308 	orr.w	r3, r3, #8
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	493b      	ldr	r1, [pc, #236]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e0:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	4936      	ldr	r1, [pc, #216]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	e01a      	b.n	8003a2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a33      	ldr	r2, [pc, #204]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a02:	f7fe f8c9 	bl	8001b98 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a0a:	f7fe f8c5 	bl	8001b98 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e2e7      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x1da>
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d074      	beq.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x21a>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	d10e      	bne.n	8003a62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d10b      	bne.n	8003a62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d064      	beq.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d160      	bne.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e2c4      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x24a>
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e01d      	b.n	8003ab6 <HAL_RCC_OscConfig+0x286>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCC_OscConfig+0x26e>
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x286>
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <HAL_RCC_OscConfig+0x298>)
 8003ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fe f86b 	bl	8001b98 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac4:	e011      	b.n	8003aea <HAL_RCC_OscConfig+0x2ba>
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	0800c7e4 	.word	0x0800c7e4
 8003ad0:	2000000c 	.word	0x2000000c
 8003ad4:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe f85e 	bl	8001b98 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e280      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	4baf      	ldr	r3, [pc, #700]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x2a8>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fe f84e 	bl	8001b98 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe f84a 	bl	8001b98 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e26c      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b12:	4ba5      	ldr	r3, [pc, #660]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2d0>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d060      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_OscConfig+0x310>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d116      	bne.n	8003b6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b40:	4b99      	ldr	r3, [pc, #612]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x328>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e249      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b93      	ldr	r3, [pc, #588]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	4990      	ldr	r1, [pc, #576]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6c:	e040      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d023      	beq.n	8003bbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b76:	4b8c      	ldr	r3, [pc, #560]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a8b      	ldr	r2, [pc, #556]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe f809 	bl	8001b98 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe f805 	bl	8001b98 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e227      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b9c:	4b82      	ldr	r3, [pc, #520]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b7f      	ldr	r3, [pc, #508]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	497c      	ldr	r1, [pc, #496]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
 8003bbc:	e018      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b7a      	ldr	r3, [pc, #488]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a79      	ldr	r2, [pc, #484]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd ffe5 	bl	8001b98 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fd ffe1 	bl	8001b98 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e203      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003be4:	4b70      	ldr	r3, [pc, #448]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c04:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c0a:	4a67      	ldr	r2, [pc, #412]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fd ffc0 	bl	8001b98 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7fd ffbc 	bl	8001b98 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1de      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c2e:	4b5e      	ldr	r3, [pc, #376]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ef      	beq.n	8003c1c <HAL_RCC_OscConfig+0x3ec>
 8003c3c:	e01b      	b.n	8003c76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3e:	4b5a      	ldr	r3, [pc, #360]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fd ffa3 	bl	8001b98 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fd ff9f 	bl	8001b98 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1c1      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c68:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ef      	bne.n	8003c56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80a6 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c88:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10d      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	4b44      	ldr	r3, [pc, #272]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	4a43      	ldr	r2, [pc, #268]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca0:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb0:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_OscConfig+0x57c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d118      	bne.n	8003cee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cbc:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x57c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a3a      	ldr	r2, [pc, #232]	; (8003dac <HAL_RCC_OscConfig+0x57c>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc8:	f7fd ff66 	bl	8001b98 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd0:	f7fd ff62 	bl	8001b98 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e184      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	4b32      	ldr	r3, [pc, #200]	; (8003dac <HAL_RCC_OscConfig+0x57c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d108      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4d8>
 8003cf6:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d06:	e024      	b.n	8003d52 <HAL_RCC_OscConfig+0x522>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d110      	bne.n	8003d32 <HAL_RCC_OscConfig+0x502>
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	4a24      	ldr	r2, [pc, #144]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d20:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d30:	e00f      	b.n	8003d52 <HAL_RCC_OscConfig+0x522>
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fd ff1d 	bl	8001b98 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd ff19 	bl	8001b98 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e139      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_OscConfig+0x578>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0ed      	beq.n	8003d62 <HAL_RCC_OscConfig+0x532>
 8003d86:	e01a      	b.n	8003dbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd ff06 	bl	8001b98 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7fd ff02 	bl	8001b98 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d906      	bls.n	8003db0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e122      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db0:	4b90      	ldr	r3, [pc, #576]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e8      	bne.n	8003d90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b8b      	ldr	r3, [pc, #556]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	4a8a      	ldr	r2, [pc, #552]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8108 	beq.w	8003fea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	f040 80d0 	bne.w	8003f84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003de4:	4b83      	ldr	r3, [pc, #524]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0203 	and.w	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d130      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d127      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e24:	2a07      	cmp	r2, #7
 8003e26:	bf14      	ite	ne
 8003e28:	2201      	movne	r2, #1
 8003e2a:	2200      	moveq	r2, #0
 8003e2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d109      	bne.n	8003e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	3b01      	subs	r3, #1
 8003e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d06e      	beq.n	8003f38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d069      	beq.n	8003f34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e60:	4b64      	ldr	r3, [pc, #400]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0b7      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b5d      	ldr	r3, [pc, #372]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a5c      	ldr	r2, [pc, #368]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e88:	f7fd fe86 	bl	8001b98 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fe82 	bl	8001b98 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0a4      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea2:	4b54      	ldr	r3, [pc, #336]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eae:	4b51      	ldr	r3, [pc, #324]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	4b51      	ldr	r3, [pc, #324]	; (8003ff8 <HAL_RCC_OscConfig+0x7c8>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec8:	0212      	lsls	r2, r2, #8
 8003eca:	4311      	orrs	r1, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ed0:	0852      	lsrs	r2, r2, #1
 8003ed2:	3a01      	subs	r2, #1
 8003ed4:	0552      	lsls	r2, r2, #21
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0652      	lsls	r2, r2, #25
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee8:	0912      	lsrs	r2, r2, #4
 8003eea:	0452      	lsls	r2, r2, #17
 8003eec:	430a      	orrs	r2, r1
 8003eee:	4941      	ldr	r1, [pc, #260]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3e      	ldr	r2, [pc, #248]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f00:	4b3c      	ldr	r3, [pc, #240]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f0c:	f7fd fe44 	bl	8001b98 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd fe40 	bl	8001b98 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e062      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f32:	e05a      	b.n	8003fea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e059      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d152      	bne.n	8003fea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f44:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f50:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f5c:	f7fd fe1c 	bl	8001b98 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fd fe18 	bl	8001b98 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e03a      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x734>
 8003f82:	e032      	b.n	8003fea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d02d      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f94:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003fa8:	f023 0303 	bic.w	r3, r3, #3
 8003fac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003fb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fdeb 	bl	8001b98 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fd fde7 	bl	8001b98 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e009      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_OscConfig+0x7c4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x796>
 8003fe4:	e001      	b.n	8003fea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	f99d808c 	.word	0xf99d808c

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0c8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d910      	bls.n	8004040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 0207 	bic.w	r2, r3, #7
 8004026:	4961      	ldr	r1, [pc, #388]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0b0      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d04c      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d107      	bne.n	8004064 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004054:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d121      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e09e      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d107      	bne.n	800407c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d115      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e092      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d107      	bne.n	8004094 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004084:	4b4a      	ldr	r3, [pc, #296]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e086      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e07e      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 0203 	bic.w	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	493f      	ldr	r1, [pc, #252]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b6:	f7fd fd6f 	bl	8001b98 <HAL_GetTick>
 80040ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040bc:	e00a      	b.n	80040d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040be:	f7fd fd6b 	bl	8001b98 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e066      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d4:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 020c 	and.w	r2, r3, #12
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d1eb      	bne.n	80040be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f2:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	492c      	ldr	r1, [pc, #176]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d210      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 0207 	bic.w	r2, r3, #7
 800411a:	4924      	ldr	r1, [pc, #144]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1b0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e036      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4918      	ldr	r1, [pc, #96]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4910      	ldr	r1, [pc, #64]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004172:	f000 f825 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <HAL_RCC_ClockConfig+0x1b4>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490c      	ldr	r1, [pc, #48]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd f92e 	bl	80013f8 <HAL_InitTick>
 800419c:	4603      	mov	r3, r0
 800419e:	72fb      	strb	r3, [r7, #11]

  return status;
 80041a0:	7afb      	ldrb	r3, [r7, #11]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40021000 	.word	0x40021000
 80041b4:	0800c7e4 	.word	0x0800c7e4
 80041b8:	2000000c 	.word	0x2000000c
 80041bc:	20000010 	.word	0x20000010

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	4b3e      	ldr	r3, [pc, #248]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x34>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d121      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d11e      	bne.n	8004232 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041f4:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004200:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e005      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800421c:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d102      	bne.n	800423e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e004      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b08      	cmp	r3, #8
 8004242:	d101      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004244:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004246:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d134      	bne.n	80042b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800424e:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d003      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0xa6>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d003      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0xac>
 8004264:	e005      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004268:	617b      	str	r3, [r7, #20]
      break;
 800426a:	e005      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800426e:	617b      	str	r3, [r7, #20]
      break;
 8004270:	e002      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	617b      	str	r3, [r7, #20]
      break;
 8004276:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	3301      	adds	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	fb02 f203 	mul.w	r2, r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	0e5b      	lsrs	r3, r3, #25
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	3301      	adds	r3, #1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042b8:	69bb      	ldr	r3, [r7, #24]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	0800c7fc 	.word	0x0800c7fc
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	2000000c 	.word	0x2000000c

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4904      	ldr	r1, [pc, #16]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	0800c7f4 	.word	0x0800c7f4

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004320:	f7ff ffda 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0adb      	lsrs	r3, r3, #11
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4904      	ldr	r1, [pc, #16]	; (8004344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	0800c7f4 	.word	0x0800c7f4

08004348 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	220f      	movs	r2, #15
 8004356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0203 	and.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_GetClockConfig+0x5c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <HAL_RCC_GetClockConfig+0x60>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0207 	and.w	r2, r3, #7
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40022000 	.word	0x40022000

080043ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043c4:	f7ff f9d0 	bl	8003768 <HAL_PWREx_GetVoltageRange>
 80043c8:	6178      	str	r0, [r7, #20]
 80043ca:	e014      	b.n	80043f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	4a24      	ldr	r2, [pc, #144]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6593      	str	r3, [r2, #88]	; 0x58
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043e4:	f7ff f9c0 	bl	8003768 <HAL_PWREx_GetVoltageRange>
 80043e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d10b      	bne.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d919      	bls.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2ba0      	cmp	r3, #160	; 0xa0
 8004408:	d902      	bls.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800440a:	2302      	movs	r3, #2
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e013      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004410:	2301      	movs	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e010      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d902      	bls.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800441c:	2303      	movs	r3, #3
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	e00a      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d102      	bne.n	800442e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004428:	2302      	movs	r3, #2
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e004      	b.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b70      	cmp	r3, #112	; 0x70
 8004432:	d101      	bne.n	8004438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004434:	2301      	movs	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 0207 	bic.w	r2, r3, #7
 8004440:	4909      	ldr	r1, [pc, #36]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d001      	beq.n	800445a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000
 8004468:	40022000 	.word	0x40022000

0800446c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004474:	2300      	movs	r3, #0
 8004476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004478:	2300      	movs	r3, #0
 800447a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004484:	2b00      	cmp	r3, #0
 8004486:	d041      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004490:	d02a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004492:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004496:	d824      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800449c:	d008      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800449e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044a2:	d81e      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ac:	d010      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044ae:	e018      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044b0:	4b86      	ldr	r3, [pc, #536]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a85      	ldr	r2, [pc, #532]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044bc:	e015      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2100      	movs	r1, #0
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fabb 	bl	8004a40 <RCCEx_PLLSAI1_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ce:	e00c      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3320      	adds	r3, #32
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fba6 	bl	8004c28 <RCCEx_PLLSAI2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	74fb      	strb	r3, [r7, #19]
      break;
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f0:	4b76      	ldr	r3, [pc, #472]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fe:	4973      	ldr	r1, [pc, #460]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004506:	e001      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d041      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004520:	d02a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004522:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004526:	d824      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800452c:	d008      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800452e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004532:	d81e      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800453c:	d010      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800453e:	e018      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004540:	4b62      	ldr	r3, [pc, #392]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a61      	ldr	r2, [pc, #388]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800454c:	e015      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fa73 	bl	8004a40 <RCCEx_PLLSAI1_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800455e:	e00c      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3320      	adds	r3, #32
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fb5e 	bl	8004c28 <RCCEx_PLLSAI2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	74fb      	strb	r3, [r7, #19]
      break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004580:	4b52      	ldr	r3, [pc, #328]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458e:	494f      	ldr	r1, [pc, #316]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004596:	e001      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a0 	beq.w	80046ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045aa:	2300      	movs	r3, #0
 80045ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b41      	ldr	r3, [pc, #260]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	4a40      	ldr	r2, [pc, #256]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6593      	str	r3, [r2, #88]	; 0x58
 80045d0:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045dc:	2301      	movs	r3, #1
 80045de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e0:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a3a      	ldr	r2, [pc, #232]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ec:	f7fd fad4 	bl	8001b98 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f4:	f7fd fad0 	bl	8001b98 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	74fb      	strb	r3, [r7, #19]
        break;
 8004606:	e005      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004608:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ef      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d15c      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800461a:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004624:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01f      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d019      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004638:	4b24      	ldr	r3, [pc, #144]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004644:	4b21      	ldr	r3, [pc, #132]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	4a20      	ldr	r2, [pc, #128]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004654:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d016      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd fa8f 	bl	8001b98 <HAL_GetTick>
 800467a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467c:	e00b      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fd fa8b 	bl	8001b98 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d902      	bls.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	74fb      	strb	r3, [r7, #19]
            break;
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ec      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ba:	4904      	ldr	r1, [pc, #16]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046c2:	e009      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
 80046c8:	e006      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d8:	7c7b      	ldrb	r3, [r7, #17]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046de:	4b9e      	ldr	r3, [pc, #632]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	4a9d      	ldr	r2, [pc, #628]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046f6:	4b98      	ldr	r3, [pc, #608]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f023 0203 	bic.w	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	4994      	ldr	r1, [pc, #592]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004718:	4b8f      	ldr	r3, [pc, #572]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 020c 	bic.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	498c      	ldr	r1, [pc, #560]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800473a:	4b87      	ldr	r3, [pc, #540]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004740:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	4983      	ldr	r1, [pc, #524]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800475c:	4b7e      	ldr	r3, [pc, #504]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	497b      	ldr	r1, [pc, #492]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800477e:	4b76      	ldr	r3, [pc, #472]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478c:	4972      	ldr	r1, [pc, #456]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047a0:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	496a      	ldr	r1, [pc, #424]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c2:	4b65      	ldr	r3, [pc, #404]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d0:	4961      	ldr	r1, [pc, #388]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047e4:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	4959      	ldr	r1, [pc, #356]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004806:	4b54      	ldr	r3, [pc, #336]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004814:	4950      	ldr	r1, [pc, #320]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004828:	4b4b      	ldr	r3, [pc, #300]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	4948      	ldr	r1, [pc, #288]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800484a:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	493f      	ldr	r1, [pc, #252]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d028      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800486c:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487a:	4937      	ldr	r1, [pc, #220]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488a:	d106      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a31      	ldr	r2, [pc, #196]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004896:	60d3      	str	r3, [r2, #12]
 8004898:	e011      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048a2:	d10c      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f8c8 	bl	8004a40 <RCCEx_PLLSAI1_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d028      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048ca:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	491f      	ldr	r1, [pc, #124]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e8:	d106      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f4:	60d3      	str	r3, [r2, #12]
 80048f6:	e011      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004900:	d10c      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3304      	adds	r3, #4
 8004906:	2101      	movs	r1, #1
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f899 	bl	8004a40 <RCCEx_PLLSAI1_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02b      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004936:	4908      	ldr	r1, [pc, #32]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004946:	d109      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4a02      	ldr	r2, [pc, #8]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004952:	60d3      	str	r3, [r2, #12]
 8004954:	e014      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004964:	d10c      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f867 	bl	8004a40 <RCCEx_PLLSAI1_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02f      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800498c:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499a:	4928      	ldr	r1, [pc, #160]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	2102      	movs	r1, #2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f844 	bl	8004a40 <RCCEx_PLLSAI1_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d014      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049c2:	7cfb      	ldrb	r3, [r7, #19]
 80049c4:	74bb      	strb	r3, [r7, #18]
 80049c6:	e011      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3320      	adds	r3, #32
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f925 	bl	8004c28 <RCCEx_PLLSAI2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a06:	490d      	ldr	r1, [pc, #52]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2a:	4904      	ldr	r1, [pc, #16]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a32:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40021000 	.word	0x40021000

08004a40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a4e:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d018      	beq.n	8004a8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a5a:	4b72      	ldr	r3, [pc, #456]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0203 	and.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d10d      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a72:	4b6c      	ldr	r3, [pc, #432]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	091b      	lsrs	r3, r3, #4
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
       ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d047      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
 8004a8a:	e044      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d018      	beq.n	8004ac6 <RCCEx_PLLSAI1_Config+0x86>
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d825      	bhi.n	8004ae4 <RCCEx_PLLSAI1_Config+0xa4>
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d002      	beq.n	8004aa2 <RCCEx_PLLSAI1_Config+0x62>
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d009      	beq.n	8004ab4 <RCCEx_PLLSAI1_Config+0x74>
 8004aa0:	e020      	b.n	8004ae4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aa2:	4b60      	ldr	r3, [pc, #384]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d11d      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab2:	e01a      	b.n	8004aea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ab4:	4b5b      	ldr	r3, [pc, #364]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d116      	bne.n	8004aee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac4:	e013      	b.n	8004aee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ac6:	4b57      	ldr	r3, [pc, #348]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ad2:	4b54      	ldr	r3, [pc, #336]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ae2:	e006      	b.n	8004af2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	e004      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aea:	bf00      	nop
 8004aec:	e002      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004afa:	4b4a      	ldr	r3, [pc, #296]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	4944      	ldr	r1, [pc, #272]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d17d      	bne.n	8004c18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b1c:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a40      	ldr	r2, [pc, #256]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd f836 	bl	8001b98 <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b2e:	e009      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b30:	f7fd f832 	bl	8001b98 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d902      	bls.n	8004b44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	73fb      	strb	r3, [r7, #15]
        break;
 8004b42:	e005      	b.n	8004b50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ef      	bne.n	8004b30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d160      	bne.n	8004c18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d111      	bne.n	8004b80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b5c:	4b31      	ldr	r3, [pc, #196]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6892      	ldr	r2, [r2, #8]
 8004b6c:	0211      	lsls	r1, r2, #8
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	0912      	lsrs	r2, r2, #4
 8004b74:	0452      	lsls	r2, r2, #17
 8004b76:	430a      	orrs	r2, r1
 8004b78:	492a      	ldr	r1, [pc, #168]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	610b      	str	r3, [r1, #16]
 8004b7e:	e027      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d112      	bne.n	8004bac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b86:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	0211      	lsls	r1, r2, #8
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6912      	ldr	r2, [r2, #16]
 8004b9c:	0852      	lsrs	r2, r2, #1
 8004b9e:	3a01      	subs	r2, #1
 8004ba0:	0552      	lsls	r2, r2, #21
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	491f      	ldr	r1, [pc, #124]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	610b      	str	r3, [r1, #16]
 8004baa:	e011      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6892      	ldr	r2, [r2, #8]
 8004bbc:	0211      	lsls	r1, r2, #8
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6952      	ldr	r2, [r2, #20]
 8004bc2:	0852      	lsrs	r2, r2, #1
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	0652      	lsls	r2, r2, #25
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	4916      	ldr	r1, [pc, #88]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bd0:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fc ffdc 	bl	8001b98 <HAL_GetTick>
 8004be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004be2:	e009      	b.n	8004bf8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004be4:	f7fc ffd8 	bl	8001b98 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d902      	bls.n	8004bf8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8004bf6:	e005      	b.n	8004c04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ef      	beq.n	8004be4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	4904      	ldr	r1, [pc, #16]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000

08004c28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c36:	4b6a      	ldr	r3, [pc, #424]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c42:	4b67      	ldr	r3, [pc, #412]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0203 	and.w	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d10d      	bne.n	8004c6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
       ||
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c5a:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
       ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d047      	beq.n	8004cfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
 8004c72:	e044      	b.n	8004cfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d018      	beq.n	8004cae <RCCEx_PLLSAI2_Config+0x86>
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d825      	bhi.n	8004ccc <RCCEx_PLLSAI2_Config+0xa4>
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d002      	beq.n	8004c8a <RCCEx_PLLSAI2_Config+0x62>
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d009      	beq.n	8004c9c <RCCEx_PLLSAI2_Config+0x74>
 8004c88:	e020      	b.n	8004ccc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c8a:	4b55      	ldr	r3, [pc, #340]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d11d      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c9a:	e01a      	b.n	8004cd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c9c:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d116      	bne.n	8004cd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cac:	e013      	b.n	8004cd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cae:	4b4c      	ldr	r3, [pc, #304]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cba:	4b49      	ldr	r3, [pc, #292]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cca:	e006      	b.n	8004cda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd0:	e004      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e002      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e000      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cda:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10d      	bne.n	8004cfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ce2:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	4939      	ldr	r1, [pc, #228]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d167      	bne.n	8004dd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d04:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a35      	ldr	r2, [pc, #212]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d10:	f7fc ff42 	bl	8001b98 <HAL_GetTick>
 8004d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d16:	e009      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d18:	f7fc ff3e 	bl	8001b98 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d902      	bls.n	8004d2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	73fb      	strb	r3, [r7, #15]
        break;
 8004d2a:	e005      	b.n	8004d38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d2c:	4b2c      	ldr	r3, [pc, #176]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ef      	bne.n	8004d18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d14a      	bne.n	8004dd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d111      	bne.n	8004d68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d44:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6892      	ldr	r2, [r2, #8]
 8004d54:	0211      	lsls	r1, r2, #8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68d2      	ldr	r2, [r2, #12]
 8004d5a:	0912      	lsrs	r2, r2, #4
 8004d5c:	0452      	lsls	r2, r2, #17
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	491f      	ldr	r1, [pc, #124]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	614b      	str	r3, [r1, #20]
 8004d66:	e011      	b.n	8004d8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d68:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6892      	ldr	r2, [r2, #8]
 8004d78:	0211      	lsls	r1, r2, #8
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6912      	ldr	r2, [r2, #16]
 8004d7e:	0852      	lsrs	r2, r2, #1
 8004d80:	3a01      	subs	r2, #1
 8004d82:	0652      	lsls	r2, r2, #25
 8004d84:	430a      	orrs	r2, r1
 8004d86:	4916      	ldr	r1, [pc, #88]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d8c:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fc fefe 	bl	8001b98 <HAL_GetTick>
 8004d9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d9e:	e009      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004da0:	f7fc fefa 	bl	8001b98 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d902      	bls.n	8004db4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	73fb      	strb	r3, [r7, #15]
          break;
 8004db2:	e005      	b.n	8004dc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ef      	beq.n	8004da0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	4904      	ldr	r1, [pc, #16]	; (8004de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40021000 	.word	0x40021000

08004de4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d06c      	beq.n	8004ed0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc f874 	bl	8000ef8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	22ca      	movs	r2, #202	; 0xca
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2253      	movs	r2, #83	; 0x53
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fa49 	bl	80052c0 <RTC_EnterInitMode>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d14b      	bne.n	8004ed0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68d2      	ldr	r2, [r2, #12]
 8004e72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6919      	ldr	r1, [r3, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	041a      	lsls	r2, r3, #16
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fa4d 	bl	8005328 <RTC_ExitInitMode>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11b      	bne.n	8004ed0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0203 	bic.w	r2, r2, #3
 8004ea6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	22ff      	movs	r2, #255	; 0xff
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004eda:	b590      	push	{r4, r7, lr}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_RTC_SetTime+0x1a>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e08b      	b.n	800500c <HAL_RTC_SetTime+0x132>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	22ca      	movs	r2, #202	; 0xca
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2253      	movs	r2, #83	; 0x53
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f9d3 	bl	80052c0 <RTC_EnterInitMode>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d163      	bne.n	8004fec <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d126      	bne.n	8004f78 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fa2e 	bl	80053a4 <RTC_ByteToBcd2>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fa27 	bl	80053a4 <RTC_ByteToBcd2>
 8004f56:	4603      	mov	r3, r0
 8004f58:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f5a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	789b      	ldrb	r3, [r3, #2]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fa1f 	bl	80053a4 <RTC_ByteToBcd2>
 8004f66:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f68:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e018      	b.n	8004faa <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f98:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f9e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004fb4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fb8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fc8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f9a0 	bl	8005328 <RTC_ExitInitMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	22ff      	movs	r2, #255	; 0xff
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800500a:	7cfb      	ldrb	r3, [r7, #19]
}
 800500c:	4618      	mov	r0, r3
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	bd90      	pop	{r4, r7, pc}

08005014 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005042:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005046:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	b2da      	uxtb	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	0d9b      	lsrs	r3, r3, #22
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11a      	bne.n	80050c2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 f9a7 	bl	80053e4 <RTC_Bcd2ToByte>
 8005096:	4603      	mov	r3, r0
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f99e 	bl	80053e4 <RTC_Bcd2ToByte>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f995 	bl	80053e4 <RTC_Bcd2ToByte>
 80050ba:	4603      	mov	r3, r0
 80050bc:	461a      	mov	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_RTC_SetDate+0x1a>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e075      	b.n	80051d2 <HAL_RTC_SetDate+0x106>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10e      	bne.n	800511a <HAL_RTC_SetDate+0x4e>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	b2db      	uxtb	r3, r3
 8005112:	330a      	adds	r3, #10
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11c      	bne.n	800515a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f93d 	bl	80053a4 <RTC_ByteToBcd2>
 800512a:	4603      	mov	r3, r0
 800512c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f936 	bl	80053a4 <RTC_ByteToBcd2>
 8005138:	4603      	mov	r3, r0
 800513a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800513c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	789b      	ldrb	r3, [r3, #2]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f92e 	bl	80053a4 <RTC_ByteToBcd2>
 8005148:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800514a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e00e      	b.n	8005178 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	78db      	ldrb	r3, [r3, #3]
 800515e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005166:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800516c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	22ca      	movs	r2, #202	; 0xca
 800517e:	625a      	str	r2, [r3, #36]	; 0x24
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2253      	movs	r2, #83	; 0x53
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f899 	bl	80052c0 <RTC_EnterInitMode>
 800518e:	4603      	mov	r3, r0
 8005190:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005192:	7cfb      	ldrb	r3, [r7, #19]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10c      	bne.n	80051b2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f8bd 	bl	8005328 <RTC_ExitInitMode>
 80051ae:	4603      	mov	r3, r0
 80051b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	22ff      	movs	r2, #255	; 0xff
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd90      	pop	{r4, r7, pc}

080051da <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	b2da      	uxtb	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0b5b      	lsrs	r3, r3, #13
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11a      	bne.n	800526a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	78db      	ldrb	r3, [r3, #3]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f8d3 	bl	80053e4 <RTC_Bcd2ToByte>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f8ca 	bl	80053e4 <RTC_Bcd2ToByte>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	789b      	ldrb	r3, [r3, #2]
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f8c1 	bl	80053e4 <RTC_Bcd2ToByte>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800528a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800528c:	f7fc fc84 	bl	8001b98 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005292:	e009      	b.n	80052a8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005294:	f7fc fc80 	bl	8001b98 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a2:	d901      	bls.n	80052a8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e007      	b.n	80052b8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ee      	beq.n	8005294 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d120      	bne.n	800531c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052e4:	f7fc fc58 	bl	8001b98 <HAL_GetTick>
 80052e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052ea:	e00d      	b.n	8005308 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80052ec:	f7fc fc54 	bl	8001b98 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fa:	d905      	bls.n	8005308 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2203      	movs	r2, #3
 8005304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <RTC_EnterInitMode+0x5c>
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d1e7      	bne.n	80052ec <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005334:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <RTC_ExitInitMode+0x78>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <RTC_ExitInitMode+0x78>)
 800533a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800533e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005340:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <RTC_ExitInitMode+0x78>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10c      	bne.n	8005366 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff91 	bl	8005274 <HAL_RTC_WaitForSynchro>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01e      	beq.n	8005396 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2203      	movs	r2, #3
 800535c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e017      	b.n	8005396 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005366:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <RTC_ExitInitMode+0x78>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <RTC_ExitInitMode+0x78>)
 800536c:	f023 0320 	bic.w	r3, r3, #32
 8005370:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff ff7e 	bl	8005274 <HAL_RTC_WaitForSynchro>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2203      	movs	r2, #3
 8005382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <RTC_ExitInitMode+0x78>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <RTC_ExitInitMode+0x78>)
 8005390:	f043 0320 	orr.w	r3, r3, #32
 8005394:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40002800 	.word	0x40002800

080053a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80053b6:	e005      	b.n	80053c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80053be:	7afb      	ldrb	r3, [r7, #11]
 80053c0:	3b0a      	subs	r3, #10
 80053c2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80053c4:	7afb      	ldrb	r3, [r7, #11]
 80053c6:	2b09      	cmp	r3, #9
 80053c8:	d8f6      	bhi.n	80053b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b2db      	uxtb	r3, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	0092      	lsls	r2, r2, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	b2da      	uxtb	r2, r3
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	4413      	add	r3, r2
 800540a:	b2db      	uxtb	r3, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e095      	b.n	8005556 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d108      	bne.n	8005444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800543a:	d009      	beq.n	8005450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	61da      	str	r2, [r3, #28]
 8005442:	e005      	b.n	8005450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fb fe3c 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005486:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005490:	d902      	bls.n	8005498 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e002      	b.n	800549e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800549c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054a6:	d007      	beq.n	80054b8 <HAL_SPI_Init+0xa0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054b0:	d002      	beq.n	80054b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	ea42 0103 	orr.w	r1, r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	0c1b      	lsrs	r3, r3, #16
 8005514:	f003 0204 	and.w	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005534:	ea42 0103 	orr.w	r1, r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b088      	sub	sp, #32
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_SPI_Transmit+0x22>
 800557c:	2302      	movs	r3, #2
 800557e:	e158      	b.n	8005832 <HAL_SPI_Transmit+0x2d4>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005588:	f7fc fb06 	bl	8001b98 <HAL_GetTick>
 800558c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800559e:	2302      	movs	r3, #2
 80055a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055a2:	e13d      	b.n	8005820 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_SPI_Transmit+0x52>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b4:	e134      	b.n	8005820 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2203      	movs	r2, #3
 80055ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005600:	d10f      	bne.n	8005622 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005620:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d007      	beq.n	8005640 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800563e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005648:	d94b      	bls.n	80056e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_SPI_Transmit+0xfa>
 8005652:	8afb      	ldrh	r3, [r7, #22]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d13e      	bne.n	80056d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800567c:	e02b      	b.n	80056d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b02      	cmp	r3, #2
 800568a:	d112      	bne.n	80056b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	1c9a      	adds	r2, r3, #2
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b0:	e011      	b.n	80056d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b2:	f7fc fa71 	bl	8001b98 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d803      	bhi.n	80056ca <HAL_SPI_Transmit+0x16c>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c8:	d102      	bne.n	80056d0 <HAL_SPI_Transmit+0x172>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056d4:	e0a4      	b.n	8005820 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ce      	bne.n	800567e <HAL_SPI_Transmit+0x120>
 80056e0:	e07c      	b.n	80057dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_SPI_Transmit+0x192>
 80056ea:	8afb      	ldrh	r3, [r7, #22]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d170      	bne.n	80057d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d912      	bls.n	8005720 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	881a      	ldrh	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	1c9a      	adds	r2, r3, #2
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b02      	subs	r3, #2
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800571e:	e058      	b.n	80057d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005746:	e044      	b.n	80057d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d12b      	bne.n	80057ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d912      	bls.n	8005786 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	881a      	ldrh	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	1c9a      	adds	r2, r3, #2
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b02      	subs	r3, #2
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005784:	e025      	b.n	80057d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057ac:	e011      	b.n	80057d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ae:	f7fc f9f3 	bl	8001b98 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d803      	bhi.n	80057c6 <HAL_SPI_Transmit+0x268>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c4:	d102      	bne.n	80057cc <HAL_SPI_Transmit+0x26e>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057d0:	e026      	b.n	8005820 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1b5      	bne.n	8005748 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f949 	bl	8005a78 <SPI_EndRxTxTransaction>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e000      	b.n	8005820 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800581e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005830:	7ffb      	ldrb	r3, [r7, #31]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800584c:	f7fc f9a4 	bl	8001b98 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	4413      	add	r3, r2
 800585a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800585c:	f7fc f99c 	bl	8001b98 <HAL_GetTick>
 8005860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005862:	4b39      	ldr	r3, [pc, #228]	; (8005948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	015b      	lsls	r3, r3, #5
 8005868:	0d1b      	lsrs	r3, r3, #20
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	fb02 f303 	mul.w	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005872:	e054      	b.n	800591e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800587a:	d050      	beq.n	800591e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800587c:	f7fc f98c 	bl	8001b98 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	429a      	cmp	r2, r3
 800588a:	d902      	bls.n	8005892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d13d      	bne.n	800590e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058aa:	d111      	bne.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b4:	d004      	beq.n	80058c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058be:	d107      	bne.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d8:	d10f      	bne.n	80058fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e017      	b.n	800593e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	3b01      	subs	r3, #1
 800591c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4013      	ands	r3, r2
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	429a      	cmp	r2, r3
 800593a:	d19b      	bne.n	8005874 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	2000000c 	.word	0x2000000c

0800594c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	; 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800595e:	f7fc f91b 	bl	8001b98 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	4413      	add	r3, r2
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800596e:	f7fc f913 	bl	8001b98 <HAL_GetTick>
 8005972:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800597c:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	00da      	lsls	r2, r3, #3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	0d1b      	lsrs	r3, r3, #20
 800598c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005994:	e060      	b.n	8005a58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800599c:	d107      	bne.n	80059ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b4:	d050      	beq.n	8005a58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059b6:	f7fc f8ef 	bl	8001b98 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d902      	bls.n	80059cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d13d      	bne.n	8005a48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e4:	d111      	bne.n	8005a0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ee:	d004      	beq.n	80059fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f8:	d107      	bne.n	8005a0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a12:	d10f      	bne.n	8005a34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e010      	b.n	8005a6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4013      	ands	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d196      	bne.n	8005996 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3728      	adds	r7, #40	; 0x28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	2000000c 	.word	0x2000000c

08005a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff ff5b 	bl	800594c <SPI_WaitFifoStateUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e027      	b.n	8005afc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2180      	movs	r1, #128	; 0x80
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fec0 	bl	800583c <SPI_WaitFlagStateUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e014      	b.n	8005afc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff ff34 	bl	800594c <SPI_WaitFifoStateUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e000      	b.n	8005afc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e049      	b.n	8005baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb fe5e 	bl	80017ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f000 fd34 	bl	80065b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d001      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e04f      	b.n	8005c6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a23      	ldr	r2, [pc, #140]	; (8005c78 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01d      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0x76>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf6:	d018      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0x76>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1f      	ldr	r2, [pc, #124]	; (8005c7c <HAL_TIM_Base_Start_IT+0xc8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0x76>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00e      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0x76>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d009      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0x76>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d004      	beq.n	8005c2a <HAL_TIM_Base_Start_IT+0x76>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d115      	bne.n	8005c56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b06      	cmp	r3, #6
 8005c3a:	d015      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0xb4>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c42:	d011      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c54:	e008      	b.n	8005c68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0201 	orr.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40000c00 	.word	0x40000c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	00010007 	.word	0x00010007

08005c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e049      	b.n	8005d3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f841 	bl	8005d42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f000 fc6c 	bl	80065b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d109      	bne.n	8005d7c <HAL_TIM_PWM_Start+0x24>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e03c      	b.n	8005df6 <HAL_TIM_PWM_Start+0x9e>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d109      	bne.n	8005d96 <HAL_TIM_PWM_Start+0x3e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	bf14      	ite	ne
 8005d8e:	2301      	movne	r3, #1
 8005d90:	2300      	moveq	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	e02f      	b.n	8005df6 <HAL_TIM_PWM_Start+0x9e>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d109      	bne.n	8005db0 <HAL_TIM_PWM_Start+0x58>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e022      	b.n	8005df6 <HAL_TIM_PWM_Start+0x9e>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b0c      	cmp	r3, #12
 8005db4:	d109      	bne.n	8005dca <HAL_TIM_PWM_Start+0x72>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	e015      	b.n	8005df6 <HAL_TIM_PWM_Start+0x9e>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d109      	bne.n	8005de4 <HAL_TIM_PWM_Start+0x8c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e008      	b.n	8005df6 <HAL_TIM_PWM_Start+0x9e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e09c      	b.n	8005f38 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xb6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e0c:	e023      	b.n	8005e56 <HAL_TIM_PWM_Start+0xfe>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0xc6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1c:	e01b      	b.n	8005e56 <HAL_TIM_PWM_Start+0xfe>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Start+0xd6>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e2c:	e013      	b.n	8005e56 <HAL_TIM_PWM_Start+0xfe>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b0c      	cmp	r3, #12
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Start+0xe6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e3c:	e00b      	b.n	8005e56 <HAL_TIM_PWM_Start+0xfe>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_PWM_Start+0xf6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e4c:	e003      	b.n	8005e56 <HAL_TIM_PWM_Start+0xfe>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 ffb0 	bl	8006dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a35      	ldr	r2, [pc, #212]	; (8005f40 <HAL_TIM_PWM_Start+0x1e8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x13e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a34      	ldr	r2, [pc, #208]	; (8005f44 <HAL_TIM_PWM_Start+0x1ec>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x13e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a32      	ldr	r2, [pc, #200]	; (8005f48 <HAL_TIM_PWM_Start+0x1f0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x13e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a31      	ldr	r2, [pc, #196]	; (8005f4c <HAL_TIM_PWM_Start+0x1f4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIM_PWM_Start+0x13e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2f      	ldr	r2, [pc, #188]	; (8005f50 <HAL_TIM_PWM_Start+0x1f8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_PWM_Start+0x142>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_TIM_PWM_Start+0x144>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a22      	ldr	r2, [pc, #136]	; (8005f40 <HAL_TIM_PWM_Start+0x1e8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x19e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d018      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x19e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <HAL_TIM_PWM_Start+0x1fc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x19e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <HAL_TIM_PWM_Start+0x200>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x19e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <HAL_TIM_PWM_Start+0x204>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x19e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <HAL_TIM_PWM_Start+0x1ec>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x19e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <HAL_TIM_PWM_Start+0x1f0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d115      	bne.n	8005f22 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <HAL_TIM_PWM_Start+0x208>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b06      	cmp	r3, #6
 8005f06:	d015      	beq.n	8005f34 <HAL_TIM_PWM_Start+0x1dc>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d011      	beq.n	8005f34 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f20:	e008      	b.n	8005f34 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	e000      	b.n	8005f36 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40013400 	.word	0x40013400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	00010007 	.word	0x00010007

08005f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0202 	mvn.w	r2, #2
 8005f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fae3 	bl	8006572 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fad5 	bl	800655e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fae6 	bl	8006586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0204 	mvn.w	r2, #4
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fab9 	bl	8006572 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 faab 	bl	800655e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fabc 	bl	8006586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b08      	cmp	r3, #8
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b08      	cmp	r3, #8
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0208 	mvn.w	r2, #8
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa8f 	bl	8006572 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa81 	bl	800655e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa92 	bl	8006586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b10      	cmp	r3, #16
 8006074:	d122      	bne.n	80060bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	2b10      	cmp	r3, #16
 8006082:	d11b      	bne.n	80060bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0210 	mvn.w	r2, #16
 800608c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2208      	movs	r2, #8
 8006092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa65 	bl	8006572 <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa57 	bl	800655e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fa68 	bl	8006586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d107      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0201 	mvn.w	r2, #1
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fa fe94 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 ff8e 	bl	8007030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006122:	d10e      	bne.n	8006142 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d107      	bne.n	8006142 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 ff81 	bl	8007044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d10e      	bne.n	800616e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d107      	bne.n	800616e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa16 	bl	800659a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b20      	cmp	r3, #32
 800617a:	d10e      	bne.n	800619a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b20      	cmp	r3, #32
 8006188:	d107      	bne.n	800619a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f06f 0220 	mvn.w	r2, #32
 8006192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 ff41 	bl	800701c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061be:	2302      	movs	r3, #2
 80061c0:	e0ff      	b.n	80063c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b14      	cmp	r3, #20
 80061ce:	f200 80f0 	bhi.w	80063b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	080063b3 	.word	0x080063b3
 80061e0:	080063b3 	.word	0x080063b3
 80061e4:	080063b3 	.word	0x080063b3
 80061e8:	0800626d 	.word	0x0800626d
 80061ec:	080063b3 	.word	0x080063b3
 80061f0:	080063b3 	.word	0x080063b3
 80061f4:	080063b3 	.word	0x080063b3
 80061f8:	080062af 	.word	0x080062af
 80061fc:	080063b3 	.word	0x080063b3
 8006200:	080063b3 	.word	0x080063b3
 8006204:	080063b3 	.word	0x080063b3
 8006208:	080062ef 	.word	0x080062ef
 800620c:	080063b3 	.word	0x080063b3
 8006210:	080063b3 	.word	0x080063b3
 8006214:	080063b3 	.word	0x080063b3
 8006218:	08006331 	.word	0x08006331
 800621c:	080063b3 	.word	0x080063b3
 8006220:	080063b3 	.word	0x080063b3
 8006224:	080063b3 	.word	0x080063b3
 8006228:	08006371 	.word	0x08006371
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fa56 	bl	80066e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0208 	orr.w	r2, r2, #8
 8006246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0204 	bic.w	r2, r2, #4
 8006256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6999      	ldr	r1, [r3, #24]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	619a      	str	r2, [r3, #24]
      break;
 800626a:	e0a5      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fac6 	bl	8006804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6999      	ldr	r1, [r3, #24]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	021a      	lsls	r2, r3, #8
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	619a      	str	r2, [r3, #24]
      break;
 80062ac:	e084      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fb2f 	bl	8006918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0208 	orr.w	r2, r2, #8
 80062c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0204 	bic.w	r2, r2, #4
 80062d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	61da      	str	r2, [r3, #28]
      break;
 80062ec:	e064      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fb97 	bl	8006a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69da      	ldr	r2, [r3, #28]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69d9      	ldr	r1, [r3, #28]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	021a      	lsls	r2, r3, #8
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	61da      	str	r2, [r3, #28]
      break;
 800632e:	e043      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fbe0 	bl	8006afc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0208 	orr.w	r2, r2, #8
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0204 	bic.w	r2, r2, #4
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800636e:	e023      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fc24 	bl	8006bc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800638a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	021a      	lsls	r2, r3, #8
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063b0:	e002      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	75fb      	strb	r3, [r7, #23]
      break;
 80063b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop

080063cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIM_ConfigClockSource+0x1c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e0b6      	b.n	8006556 <HAL_TIM_ConfigClockSource+0x18a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800640a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006424:	d03e      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0xd8>
 8006426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642a:	f200 8087 	bhi.w	800653c <HAL_TIM_ConfigClockSource+0x170>
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	f000 8086 	beq.w	8006542 <HAL_TIM_ConfigClockSource+0x176>
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	d87f      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800643c:	2b70      	cmp	r3, #112	; 0x70
 800643e:	d01a      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0xaa>
 8006440:	2b70      	cmp	r3, #112	; 0x70
 8006442:	d87b      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 8006444:	2b60      	cmp	r3, #96	; 0x60
 8006446:	d050      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x11e>
 8006448:	2b60      	cmp	r3, #96	; 0x60
 800644a:	d877      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800644c:	2b50      	cmp	r3, #80	; 0x50
 800644e:	d03c      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0xfe>
 8006450:	2b50      	cmp	r3, #80	; 0x50
 8006452:	d873      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d058      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x13e>
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d86f      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800645c:	2b30      	cmp	r3, #48	; 0x30
 800645e:	d064      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006460:	2b30      	cmp	r3, #48	; 0x30
 8006462:	d86b      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 8006464:	2b20      	cmp	r3, #32
 8006466:	d060      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006468:	2b20      	cmp	r3, #32
 800646a:	d867      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x170>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05c      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006470:	2b10      	cmp	r3, #16
 8006472:	d05a      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x15e>
 8006474:	e062      	b.n	800653c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6899      	ldr	r1, [r3, #8]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f000 fc7d 	bl	8006d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	609a      	str	r2, [r3, #8]
      break;
 80064a2:	e04f      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	6899      	ldr	r1, [r3, #8]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f000 fc66 	bl	8006d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c6:	609a      	str	r2, [r3, #8]
      break;
 80064c8:	e03c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f000 fbda 	bl	8006c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2150      	movs	r1, #80	; 0x50
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fc33 	bl	8006d4e <TIM_ITRx_SetConfig>
      break;
 80064e8:	e02c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6859      	ldr	r1, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f000 fbf9 	bl	8006cee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2160      	movs	r1, #96	; 0x60
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fc23 	bl	8006d4e <TIM_ITRx_SetConfig>
      break;
 8006508:	e01c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	f000 fbba 	bl	8006c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2140      	movs	r1, #64	; 0x40
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fc13 	bl	8006d4e <TIM_ITRx_SetConfig>
      break;
 8006528:	e00c      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f000 fc0a 	bl	8006d4e <TIM_ITRx_SetConfig>
      break;
 800653a:	e003      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
      break;
 8006540:	e000      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a40      	ldr	r2, [pc, #256]	; (80066c4 <TIM_Base_SetConfig+0x114>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d00f      	beq.n	80065f0 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a3d      	ldr	r2, [pc, #244]	; (80066c8 <TIM_Base_SetConfig+0x118>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a3c      	ldr	r2, [pc, #240]	; (80066cc <TIM_Base_SetConfig+0x11c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_Base_SetConfig+0x40>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a3b      	ldr	r2, [pc, #236]	; (80066d0 <TIM_Base_SetConfig+0x120>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0x40>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a3a      	ldr	r2, [pc, #232]	; (80066d4 <TIM_Base_SetConfig+0x124>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d108      	bne.n	8006602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2f      	ldr	r2, [pc, #188]	; (80066c4 <TIM_Base_SetConfig+0x114>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01f      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006610:	d01b      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2c      	ldr	r2, [pc, #176]	; (80066c8 <TIM_Base_SetConfig+0x118>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d017      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2b      	ldr	r2, [pc, #172]	; (80066cc <TIM_Base_SetConfig+0x11c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2a      	ldr	r2, [pc, #168]	; (80066d0 <TIM_Base_SetConfig+0x120>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a29      	ldr	r2, [pc, #164]	; (80066d4 <TIM_Base_SetConfig+0x124>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a28      	ldr	r2, [pc, #160]	; (80066d8 <TIM_Base_SetConfig+0x128>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a27      	ldr	r2, [pc, #156]	; (80066dc <TIM_Base_SetConfig+0x12c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_Base_SetConfig+0x9a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <TIM_Base_SetConfig+0x130>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d108      	bne.n	800665c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a10      	ldr	r2, [pc, #64]	; (80066c4 <TIM_Base_SetConfig+0x114>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00f      	beq.n	80066a8 <TIM_Base_SetConfig+0xf8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <TIM_Base_SetConfig+0x124>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00b      	beq.n	80066a8 <TIM_Base_SetConfig+0xf8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <TIM_Base_SetConfig+0x128>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <TIM_Base_SetConfig+0xf8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a10      	ldr	r2, [pc, #64]	; (80066dc <TIM_Base_SetConfig+0x12c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_Base_SetConfig+0xf8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a0f      	ldr	r2, [pc, #60]	; (80066e0 <TIM_Base_SetConfig+0x130>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d103      	bne.n	80066b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	615a      	str	r2, [r3, #20]
}
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	40000400 	.word	0x40000400
 80066cc:	40000800 	.word	0x40000800
 80066d0:	40000c00 	.word	0x40000c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800

080066e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f023 0201 	bic.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 0302 	bic.w	r3, r3, #2
 8006730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a2c      	ldr	r2, [pc, #176]	; (80067f0 <TIM_OC1_SetConfig+0x10c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00f      	beq.n	8006764 <TIM_OC1_SetConfig+0x80>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a2b      	ldr	r2, [pc, #172]	; (80067f4 <TIM_OC1_SetConfig+0x110>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00b      	beq.n	8006764 <TIM_OC1_SetConfig+0x80>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a2a      	ldr	r2, [pc, #168]	; (80067f8 <TIM_OC1_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_OC1_SetConfig+0x80>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a29      	ldr	r2, [pc, #164]	; (80067fc <TIM_OC1_SetConfig+0x118>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_OC1_SetConfig+0x80>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a28      	ldr	r2, [pc, #160]	; (8006800 <TIM_OC1_SetConfig+0x11c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d10c      	bne.n	800677e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0308 	bic.w	r3, r3, #8
 800676a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 0304 	bic.w	r3, r3, #4
 800677c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <TIM_OC1_SetConfig+0x10c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_OC1_SetConfig+0xc2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <TIM_OC1_SetConfig+0x110>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_OC1_SetConfig+0xc2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <TIM_OC1_SetConfig+0x114>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_OC1_SetConfig+0xc2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a18      	ldr	r2, [pc, #96]	; (80067fc <TIM_OC1_SetConfig+0x118>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC1_SetConfig+0xc2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a17      	ldr	r2, [pc, #92]	; (8006800 <TIM_OC1_SetConfig+0x11c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d111      	bne.n	80067ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f023 0210 	bic.w	r2, r3, #16
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0320 	bic.w	r3, r3, #32
 8006852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a28      	ldr	r2, [pc, #160]	; (8006904 <TIM_OC2_SetConfig+0x100>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC2_SetConfig+0x6c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a27      	ldr	r2, [pc, #156]	; (8006908 <TIM_OC2_SetConfig+0x104>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10d      	bne.n	800688c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a1d      	ldr	r2, [pc, #116]	; (8006904 <TIM_OC2_SetConfig+0x100>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00f      	beq.n	80068b4 <TIM_OC2_SetConfig+0xb0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a1c      	ldr	r2, [pc, #112]	; (8006908 <TIM_OC2_SetConfig+0x104>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_OC2_SetConfig+0xb0>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a1b      	ldr	r2, [pc, #108]	; (800690c <TIM_OC2_SetConfig+0x108>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_OC2_SetConfig+0xb0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1a      	ldr	r2, [pc, #104]	; (8006910 <TIM_OC2_SetConfig+0x10c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC2_SetConfig+0xb0>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a19      	ldr	r2, [pc, #100]	; (8006914 <TIM_OC2_SetConfig+0x110>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d113      	bne.n	80068dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40013400 	.word	0x40013400
 800690c:	40014000 	.word	0x40014000
 8006910:	40014400 	.word	0x40014400
 8006914:	40014800 	.word	0x40014800

08006918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <TIM_OC3_SetConfig+0xfc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC3_SetConfig+0x6a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <TIM_OC3_SetConfig+0x100>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10d      	bne.n	800699e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <TIM_OC3_SetConfig+0xfc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00f      	beq.n	80069c6 <TIM_OC3_SetConfig+0xae>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <TIM_OC3_SetConfig+0x100>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00b      	beq.n	80069c6 <TIM_OC3_SetConfig+0xae>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a1a      	ldr	r2, [pc, #104]	; (8006a1c <TIM_OC3_SetConfig+0x104>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d007      	beq.n	80069c6 <TIM_OC3_SetConfig+0xae>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <TIM_OC3_SetConfig+0x108>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d003      	beq.n	80069c6 <TIM_OC3_SetConfig+0xae>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <TIM_OC3_SetConfig+0x10c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d113      	bne.n	80069ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40013400 	.word	0x40013400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800

08006a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <TIM_OC4_SetConfig+0xc0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_OC4_SetConfig+0x84>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	; (8006aec <TIM_OC4_SetConfig+0xc4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_OC4_SetConfig+0x84>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <TIM_OC4_SetConfig+0xc8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_OC4_SetConfig+0x84>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <TIM_OC4_SetConfig+0xcc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC4_SetConfig+0x84>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <TIM_OC4_SetConfig+0xd0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d109      	bne.n	8006ac0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40013400 	.word	0x40013400
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <TIM_OC5_SetConfig+0xb4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00f      	beq.n	8006b76 <TIM_OC5_SetConfig+0x7a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a16      	ldr	r2, [pc, #88]	; (8006bb4 <TIM_OC5_SetConfig+0xb8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00b      	beq.n	8006b76 <TIM_OC5_SetConfig+0x7a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <TIM_OC5_SetConfig+0xbc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d007      	beq.n	8006b76 <TIM_OC5_SetConfig+0x7a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <TIM_OC5_SetConfig+0xc0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <TIM_OC5_SetConfig+0x7a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <TIM_OC5_SetConfig+0xc4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d109      	bne.n	8006b8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	621a      	str	r2, [r3, #32]
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40013400 	.word	0x40013400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40014400 	.word	0x40014400
 8006bc0:	40014800 	.word	0x40014800

08006bc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	051b      	lsls	r3, r3, #20
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a18      	ldr	r2, [pc, #96]	; (8006c7c <TIM_OC6_SetConfig+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00f      	beq.n	8006c40 <TIM_OC6_SetConfig+0x7c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a17      	ldr	r2, [pc, #92]	; (8006c80 <TIM_OC6_SetConfig+0xbc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00b      	beq.n	8006c40 <TIM_OC6_SetConfig+0x7c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a16      	ldr	r2, [pc, #88]	; (8006c84 <TIM_OC6_SetConfig+0xc0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <TIM_OC6_SetConfig+0x7c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <TIM_OC6_SetConfig+0xc4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_OC6_SetConfig+0x7c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a14      	ldr	r2, [pc, #80]	; (8006c8c <TIM_OC6_SetConfig+0xc8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d109      	bne.n	8006c54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40013400 	.word	0x40013400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f023 0201 	bic.w	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f023 030a 	bic.w	r3, r3, #10
 8006ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b087      	sub	sp, #28
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f023 0210 	bic.w	r2, r3, #16
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	031b      	lsls	r3, r3, #12
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f043 0307 	orr.w	r3, r3, #7
 8006d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	609a      	str	r2, [r3, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	021a      	lsls	r2, r3, #8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	609a      	str	r2, [r3, #8]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	43db      	mvns	r3, r3
 8006de6:	401a      	ands	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1a      	ldr	r2, [r3, #32]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 031f 	and.w	r3, r3, #31
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e068      	b.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2e      	ldr	r2, [pc, #184]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2d      	ldr	r2, [pc, #180]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01d      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d018      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a14      	ldr	r2, [pc, #80]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40012c00 	.word	0x40012c00
 8006f0c:	40013400 	.word	0x40013400
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40014000 	.word	0x40014000

08006f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e065      	b.n	8007008 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a16      	ldr	r2, [pc, #88]	; (8007014 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d004      	beq.n	8006fca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a14      	ldr	r2, [pc, #80]	; (8007018 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d115      	bne.n	8006ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	051b      	lsls	r3, r3, #20
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	40012c00 	.word	0x40012c00
 8007018:	40013400 	.word	0x40013400

0800701c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e040      	b.n	80070ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fa fc5a 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2224      	movs	r2, #36	; 0x24
 8007084:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0201 	bic.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f992 	bl	80073c0 <UART_SetConfig>
 800709c:	4603      	mov	r3, r0
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e022      	b.n	80070ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fc10 	bl	80078d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fc97 	bl	8007a18 <UART_CheckIdleState>
 80070ea:	4603      	mov	r3, r0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007108:	2b20      	cmp	r3, #32
 800710a:	f040 8082 	bne.w	8007212 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_UART_Transmit+0x26>
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e07a      	b.n	8007214 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_UART_Transmit+0x38>
 8007128:	2302      	movs	r3, #2
 800712a:	e073      	b.n	8007214 <HAL_UART_Transmit+0x120>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2221      	movs	r2, #33	; 0x21
 8007140:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007142:	f7fa fd29 	bl	8001b98 <HAL_GetTick>
 8007146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007160:	d108      	bne.n	8007174 <HAL_UART_Transmit+0x80>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	e003      	b.n	800717c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007184:	e02d      	b.n	80071e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	2180      	movs	r1, #128	; 0x80
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fc8a 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e039      	b.n	8007214 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b2:	b292      	uxth	r2, r2
 80071b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	3302      	adds	r3, #2
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	e008      	b.n	80071d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	b292      	uxth	r2, r2
 80071c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cb      	bne.n	8007186 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2140      	movs	r1, #64	; 0x40
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fc56 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e005      	b.n	8007214 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	4613      	mov	r3, r2
 800722a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007230:	2b20      	cmp	r3, #32
 8007232:	f040 80bf 	bne.w	80073b4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_UART_Receive+0x26>
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e0b7      	b.n	80073b6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_UART_Receive+0x38>
 8007250:	2302      	movs	r3, #2
 8007252:	e0b0      	b.n	80073b6 <HAL_UART_Receive+0x19a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2222      	movs	r2, #34	; 0x22
 8007268:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007270:	f7fa fc92 	bl	8001b98 <HAL_GetTick>
 8007274:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	88fa      	ldrh	r2, [r7, #6]
 800727a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728e:	d10e      	bne.n	80072ae <HAL_UART_Receive+0x92>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <HAL_UART_Receive+0x88>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800729e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072a2:	e02d      	b.n	8007300 <HAL_UART_Receive+0xe4>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	22ff      	movs	r2, #255	; 0xff
 80072a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ac:	e028      	b.n	8007300 <HAL_UART_Receive+0xe4>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10d      	bne.n	80072d2 <HAL_UART_Receive+0xb6>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d104      	bne.n	80072c8 <HAL_UART_Receive+0xac>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	22ff      	movs	r2, #255	; 0xff
 80072c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072c6:	e01b      	b.n	8007300 <HAL_UART_Receive+0xe4>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	227f      	movs	r2, #127	; 0x7f
 80072cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072d0:	e016      	b.n	8007300 <HAL_UART_Receive+0xe4>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072da:	d10d      	bne.n	80072f8 <HAL_UART_Receive+0xdc>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <HAL_UART_Receive+0xd2>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	227f      	movs	r2, #127	; 0x7f
 80072e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072ec:	e008      	b.n	8007300 <HAL_UART_Receive+0xe4>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	223f      	movs	r2, #63	; 0x3f
 80072f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072f6:	e003      	b.n	8007300 <HAL_UART_Receive+0xe4>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007306:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007310:	d108      	bne.n	8007324 <HAL_UART_Receive+0x108>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	e003      	b.n	800732c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007328:	2300      	movs	r3, #0
 800732a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007334:	e033      	b.n	800739e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2200      	movs	r2, #0
 800733e:	2120      	movs	r1, #32
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fbb2 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e032      	b.n	80073b6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10c      	bne.n	8007370 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800735c:	b29a      	uxth	r2, r3
 800735e:	8a7b      	ldrh	r3, [r7, #18]
 8007360:	4013      	ands	r3, r2
 8007362:	b29a      	uxth	r2, r3
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	3302      	adds	r3, #2
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	e00d      	b.n	800738c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007376:	b29b      	uxth	r3, r3
 8007378:	b2da      	uxtb	r2, r3
 800737a:	8a7b      	ldrh	r3, [r7, #18]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	4013      	ands	r3, r2
 8007380:	b2da      	uxtb	r2, r3
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	3301      	adds	r3, #1
 800738a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1c5      	bne.n	8007336 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073c0:	b5b0      	push	{r4, r5, r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4bad      	ldr	r3, [pc, #692]	; (80076a0 <UART_SetConfig+0x2e0>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	69f9      	ldr	r1, [r7, #28]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4aa2      	ldr	r2, [pc, #648]	; (80076a4 <UART_SetConfig+0x2e4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d004      	beq.n	8007428 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	4313      	orrs	r3, r2
 8007426:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	430a      	orrs	r2, r1
 800743a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a99      	ldr	r2, [pc, #612]	; (80076a8 <UART_SetConfig+0x2e8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d121      	bne.n	800748a <UART_SetConfig+0xca>
 8007446:	4b99      	ldr	r3, [pc, #612]	; (80076ac <UART_SetConfig+0x2ec>)
 8007448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	2b03      	cmp	r3, #3
 8007452:	d817      	bhi.n	8007484 <UART_SetConfig+0xc4>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <UART_SetConfig+0x9c>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007479 	.word	0x08007479
 8007464:	08007473 	.word	0x08007473
 8007468:	0800747f 	.word	0x0800747f
 800746c:	2301      	movs	r3, #1
 800746e:	76fb      	strb	r3, [r7, #27]
 8007470:	e0e7      	b.n	8007642 <UART_SetConfig+0x282>
 8007472:	2302      	movs	r3, #2
 8007474:	76fb      	strb	r3, [r7, #27]
 8007476:	e0e4      	b.n	8007642 <UART_SetConfig+0x282>
 8007478:	2304      	movs	r3, #4
 800747a:	76fb      	strb	r3, [r7, #27]
 800747c:	e0e1      	b.n	8007642 <UART_SetConfig+0x282>
 800747e:	2308      	movs	r3, #8
 8007480:	76fb      	strb	r3, [r7, #27]
 8007482:	e0de      	b.n	8007642 <UART_SetConfig+0x282>
 8007484:	2310      	movs	r3, #16
 8007486:	76fb      	strb	r3, [r7, #27]
 8007488:	e0db      	b.n	8007642 <UART_SetConfig+0x282>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a88      	ldr	r2, [pc, #544]	; (80076b0 <UART_SetConfig+0x2f0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d132      	bne.n	80074fa <UART_SetConfig+0x13a>
 8007494:	4b85      	ldr	r3, [pc, #532]	; (80076ac <UART_SetConfig+0x2ec>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749a:	f003 030c 	and.w	r3, r3, #12
 800749e:	2b0c      	cmp	r3, #12
 80074a0:	d828      	bhi.n	80074f4 <UART_SetConfig+0x134>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0xe8>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	080074f5 	.word	0x080074f5
 80074b0:	080074f5 	.word	0x080074f5
 80074b4:	080074f5 	.word	0x080074f5
 80074b8:	080074e9 	.word	0x080074e9
 80074bc:	080074f5 	.word	0x080074f5
 80074c0:	080074f5 	.word	0x080074f5
 80074c4:	080074f5 	.word	0x080074f5
 80074c8:	080074e3 	.word	0x080074e3
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074ef 	.word	0x080074ef
 80074dc:	2300      	movs	r3, #0
 80074de:	76fb      	strb	r3, [r7, #27]
 80074e0:	e0af      	b.n	8007642 <UART_SetConfig+0x282>
 80074e2:	2302      	movs	r3, #2
 80074e4:	76fb      	strb	r3, [r7, #27]
 80074e6:	e0ac      	b.n	8007642 <UART_SetConfig+0x282>
 80074e8:	2304      	movs	r3, #4
 80074ea:	76fb      	strb	r3, [r7, #27]
 80074ec:	e0a9      	b.n	8007642 <UART_SetConfig+0x282>
 80074ee:	2308      	movs	r3, #8
 80074f0:	76fb      	strb	r3, [r7, #27]
 80074f2:	e0a6      	b.n	8007642 <UART_SetConfig+0x282>
 80074f4:	2310      	movs	r3, #16
 80074f6:	76fb      	strb	r3, [r7, #27]
 80074f8:	e0a3      	b.n	8007642 <UART_SetConfig+0x282>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a6d      	ldr	r2, [pc, #436]	; (80076b4 <UART_SetConfig+0x2f4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d120      	bne.n	8007546 <UART_SetConfig+0x186>
 8007504:	4b69      	ldr	r3, [pc, #420]	; (80076ac <UART_SetConfig+0x2ec>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800750e:	2b30      	cmp	r3, #48	; 0x30
 8007510:	d013      	beq.n	800753a <UART_SetConfig+0x17a>
 8007512:	2b30      	cmp	r3, #48	; 0x30
 8007514:	d814      	bhi.n	8007540 <UART_SetConfig+0x180>
 8007516:	2b20      	cmp	r3, #32
 8007518:	d009      	beq.n	800752e <UART_SetConfig+0x16e>
 800751a:	2b20      	cmp	r3, #32
 800751c:	d810      	bhi.n	8007540 <UART_SetConfig+0x180>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <UART_SetConfig+0x168>
 8007522:	2b10      	cmp	r3, #16
 8007524:	d006      	beq.n	8007534 <UART_SetConfig+0x174>
 8007526:	e00b      	b.n	8007540 <UART_SetConfig+0x180>
 8007528:	2300      	movs	r3, #0
 800752a:	76fb      	strb	r3, [r7, #27]
 800752c:	e089      	b.n	8007642 <UART_SetConfig+0x282>
 800752e:	2302      	movs	r3, #2
 8007530:	76fb      	strb	r3, [r7, #27]
 8007532:	e086      	b.n	8007642 <UART_SetConfig+0x282>
 8007534:	2304      	movs	r3, #4
 8007536:	76fb      	strb	r3, [r7, #27]
 8007538:	e083      	b.n	8007642 <UART_SetConfig+0x282>
 800753a:	2308      	movs	r3, #8
 800753c:	76fb      	strb	r3, [r7, #27]
 800753e:	e080      	b.n	8007642 <UART_SetConfig+0x282>
 8007540:	2310      	movs	r3, #16
 8007542:	76fb      	strb	r3, [r7, #27]
 8007544:	e07d      	b.n	8007642 <UART_SetConfig+0x282>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a5b      	ldr	r2, [pc, #364]	; (80076b8 <UART_SetConfig+0x2f8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d120      	bne.n	8007592 <UART_SetConfig+0x1d2>
 8007550:	4b56      	ldr	r3, [pc, #344]	; (80076ac <UART_SetConfig+0x2ec>)
 8007552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800755a:	2bc0      	cmp	r3, #192	; 0xc0
 800755c:	d013      	beq.n	8007586 <UART_SetConfig+0x1c6>
 800755e:	2bc0      	cmp	r3, #192	; 0xc0
 8007560:	d814      	bhi.n	800758c <UART_SetConfig+0x1cc>
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d009      	beq.n	800757a <UART_SetConfig+0x1ba>
 8007566:	2b80      	cmp	r3, #128	; 0x80
 8007568:	d810      	bhi.n	800758c <UART_SetConfig+0x1cc>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <UART_SetConfig+0x1b4>
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d006      	beq.n	8007580 <UART_SetConfig+0x1c0>
 8007572:	e00b      	b.n	800758c <UART_SetConfig+0x1cc>
 8007574:	2300      	movs	r3, #0
 8007576:	76fb      	strb	r3, [r7, #27]
 8007578:	e063      	b.n	8007642 <UART_SetConfig+0x282>
 800757a:	2302      	movs	r3, #2
 800757c:	76fb      	strb	r3, [r7, #27]
 800757e:	e060      	b.n	8007642 <UART_SetConfig+0x282>
 8007580:	2304      	movs	r3, #4
 8007582:	76fb      	strb	r3, [r7, #27]
 8007584:	e05d      	b.n	8007642 <UART_SetConfig+0x282>
 8007586:	2308      	movs	r3, #8
 8007588:	76fb      	strb	r3, [r7, #27]
 800758a:	e05a      	b.n	8007642 <UART_SetConfig+0x282>
 800758c:	2310      	movs	r3, #16
 800758e:	76fb      	strb	r3, [r7, #27]
 8007590:	e057      	b.n	8007642 <UART_SetConfig+0x282>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a49      	ldr	r2, [pc, #292]	; (80076bc <UART_SetConfig+0x2fc>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d125      	bne.n	80075e8 <UART_SetConfig+0x228>
 800759c:	4b43      	ldr	r3, [pc, #268]	; (80076ac <UART_SetConfig+0x2ec>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075aa:	d017      	beq.n	80075dc <UART_SetConfig+0x21c>
 80075ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b0:	d817      	bhi.n	80075e2 <UART_SetConfig+0x222>
 80075b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b6:	d00b      	beq.n	80075d0 <UART_SetConfig+0x210>
 80075b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075bc:	d811      	bhi.n	80075e2 <UART_SetConfig+0x222>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <UART_SetConfig+0x20a>
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d006      	beq.n	80075d6 <UART_SetConfig+0x216>
 80075c8:	e00b      	b.n	80075e2 <UART_SetConfig+0x222>
 80075ca:	2300      	movs	r3, #0
 80075cc:	76fb      	strb	r3, [r7, #27]
 80075ce:	e038      	b.n	8007642 <UART_SetConfig+0x282>
 80075d0:	2302      	movs	r3, #2
 80075d2:	76fb      	strb	r3, [r7, #27]
 80075d4:	e035      	b.n	8007642 <UART_SetConfig+0x282>
 80075d6:	2304      	movs	r3, #4
 80075d8:	76fb      	strb	r3, [r7, #27]
 80075da:	e032      	b.n	8007642 <UART_SetConfig+0x282>
 80075dc:	2308      	movs	r3, #8
 80075de:	76fb      	strb	r3, [r7, #27]
 80075e0:	e02f      	b.n	8007642 <UART_SetConfig+0x282>
 80075e2:	2310      	movs	r3, #16
 80075e4:	76fb      	strb	r3, [r7, #27]
 80075e6:	e02c      	b.n	8007642 <UART_SetConfig+0x282>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a2d      	ldr	r2, [pc, #180]	; (80076a4 <UART_SetConfig+0x2e4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d125      	bne.n	800763e <UART_SetConfig+0x27e>
 80075f2:	4b2e      	ldr	r3, [pc, #184]	; (80076ac <UART_SetConfig+0x2ec>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007600:	d017      	beq.n	8007632 <UART_SetConfig+0x272>
 8007602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007606:	d817      	bhi.n	8007638 <UART_SetConfig+0x278>
 8007608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760c:	d00b      	beq.n	8007626 <UART_SetConfig+0x266>
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d811      	bhi.n	8007638 <UART_SetConfig+0x278>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <UART_SetConfig+0x260>
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	d006      	beq.n	800762c <UART_SetConfig+0x26c>
 800761e:	e00b      	b.n	8007638 <UART_SetConfig+0x278>
 8007620:	2300      	movs	r3, #0
 8007622:	76fb      	strb	r3, [r7, #27]
 8007624:	e00d      	b.n	8007642 <UART_SetConfig+0x282>
 8007626:	2302      	movs	r3, #2
 8007628:	76fb      	strb	r3, [r7, #27]
 800762a:	e00a      	b.n	8007642 <UART_SetConfig+0x282>
 800762c:	2304      	movs	r3, #4
 800762e:	76fb      	strb	r3, [r7, #27]
 8007630:	e007      	b.n	8007642 <UART_SetConfig+0x282>
 8007632:	2308      	movs	r3, #8
 8007634:	76fb      	strb	r3, [r7, #27]
 8007636:	e004      	b.n	8007642 <UART_SetConfig+0x282>
 8007638:	2310      	movs	r3, #16
 800763a:	76fb      	strb	r3, [r7, #27]
 800763c:	e001      	b.n	8007642 <UART_SetConfig+0x282>
 800763e:	2310      	movs	r3, #16
 8007640:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <UART_SetConfig+0x2e4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	f040 8087 	bne.w	800775c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800764e:	7efb      	ldrb	r3, [r7, #27]
 8007650:	2b08      	cmp	r3, #8
 8007652:	d837      	bhi.n	80076c4 <UART_SetConfig+0x304>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <UART_SetConfig+0x29c>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	08007681 	.word	0x08007681
 8007660:	080076c5 	.word	0x080076c5
 8007664:	08007689 	.word	0x08007689
 8007668:	080076c5 	.word	0x080076c5
 800766c:	0800768f 	.word	0x0800768f
 8007670:	080076c5 	.word	0x080076c5
 8007674:	080076c5 	.word	0x080076c5
 8007678:	080076c5 	.word	0x080076c5
 800767c:	08007697 	.word	0x08007697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007680:	f7fc fe36 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007684:	6178      	str	r0, [r7, #20]
        break;
 8007686:	e022      	b.n	80076ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007688:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <UART_SetConfig+0x300>)
 800768a:	617b      	str	r3, [r7, #20]
        break;
 800768c:	e01f      	b.n	80076ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768e:	f7fc fd97 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8007692:	6178      	str	r0, [r7, #20]
        break;
 8007694:	e01b      	b.n	80076ce <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769a:	617b      	str	r3, [r7, #20]
        break;
 800769c:	e017      	b.n	80076ce <UART_SetConfig+0x30e>
 800769e:	bf00      	nop
 80076a0:	efff69f3 	.word	0xefff69f3
 80076a4:	40008000 	.word	0x40008000
 80076a8:	40013800 	.word	0x40013800
 80076ac:	40021000 	.word	0x40021000
 80076b0:	40004400 	.word	0x40004400
 80076b4:	40004800 	.word	0x40004800
 80076b8:	40004c00 	.word	0x40004c00
 80076bc:	40005000 	.word	0x40005000
 80076c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	76bb      	strb	r3, [r7, #26]
        break;
 80076cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80f1 	beq.w	80078b8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d305      	bcc.n	80076f2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d902      	bls.n	80076f8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	76bb      	strb	r3, [r7, #26]
 80076f6:	e0df      	b.n	80078b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f04f 0100 	mov.w	r1, #0
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	020b      	lsls	r3, r1, #8
 800770a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800770e:	0202      	lsls	r2, r0, #8
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	6849      	ldr	r1, [r1, #4]
 8007714:	0849      	lsrs	r1, r1, #1
 8007716:	4608      	mov	r0, r1
 8007718:	f04f 0100 	mov.w	r1, #0
 800771c:	1814      	adds	r4, r2, r0
 800771e:	eb43 0501 	adc.w	r5, r3, r1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	461a      	mov	r2, r3
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	4620      	mov	r0, r4
 800772e:	4629      	mov	r1, r5
 8007730:	f7f8 fda6 	bl	8000280 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4613      	mov	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007742:	d308      	bcc.n	8007756 <UART_SetConfig+0x396>
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774a:	d204      	bcs.n	8007756 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	60da      	str	r2, [r3, #12]
 8007754:	e0b0      	b.n	80078b8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	76bb      	strb	r3, [r7, #26]
 800775a:	e0ad      	b.n	80078b8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007764:	d15b      	bne.n	800781e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007766:	7efb      	ldrb	r3, [r7, #27]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d828      	bhi.n	80077be <UART_SetConfig+0x3fe>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0x3b4>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	08007799 	.word	0x08007799
 8007778:	080077a1 	.word	0x080077a1
 800777c:	080077a9 	.word	0x080077a9
 8007780:	080077bf 	.word	0x080077bf
 8007784:	080077af 	.word	0x080077af
 8007788:	080077bf 	.word	0x080077bf
 800778c:	080077bf 	.word	0x080077bf
 8007790:	080077bf 	.word	0x080077bf
 8007794:	080077b7 	.word	0x080077b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007798:	f7fc fdaa 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 800779c:	6178      	str	r0, [r7, #20]
        break;
 800779e:	e013      	b.n	80077c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a0:	f7fc fdbc 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 80077a4:	6178      	str	r0, [r7, #20]
        break;
 80077a6:	e00f      	b.n	80077c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077a8:	4b49      	ldr	r3, [pc, #292]	; (80078d0 <UART_SetConfig+0x510>)
 80077aa:	617b      	str	r3, [r7, #20]
        break;
 80077ac:	e00c      	b.n	80077c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ae:	f7fc fd07 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 80077b2:	6178      	str	r0, [r7, #20]
        break;
 80077b4:	e008      	b.n	80077c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	617b      	str	r3, [r7, #20]
        break;
 80077bc:	e004      	b.n	80077c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	76bb      	strb	r3, [r7, #26]
        break;
 80077c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d074      	beq.n	80078b8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	005a      	lsls	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	441a      	add	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d916      	bls.n	8007818 <UART_SetConfig+0x458>
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f0:	d212      	bcs.n	8007818 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f023 030f 	bic.w	r3, r3, #15
 80077fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	b29b      	uxth	r3, r3
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	b29a      	uxth	r2, r3
 8007808:	89fb      	ldrh	r3, [r7, #14]
 800780a:	4313      	orrs	r3, r2
 800780c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	89fa      	ldrh	r2, [r7, #14]
 8007814:	60da      	str	r2, [r3, #12]
 8007816:	e04f      	b.n	80078b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	76bb      	strb	r3, [r7, #26]
 800781c:	e04c      	b.n	80078b8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800781e:	7efb      	ldrb	r3, [r7, #27]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d828      	bhi.n	8007876 <UART_SetConfig+0x4b6>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <UART_SetConfig+0x46c>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007851 	.word	0x08007851
 8007830:	08007859 	.word	0x08007859
 8007834:	08007861 	.word	0x08007861
 8007838:	08007877 	.word	0x08007877
 800783c:	08007867 	.word	0x08007867
 8007840:	08007877 	.word	0x08007877
 8007844:	08007877 	.word	0x08007877
 8007848:	08007877 	.word	0x08007877
 800784c:	0800786f 	.word	0x0800786f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007850:	f7fc fd4e 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007854:	6178      	str	r0, [r7, #20]
        break;
 8007856:	e013      	b.n	8007880 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007858:	f7fc fd60 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 800785c:	6178      	str	r0, [r7, #20]
        break;
 800785e:	e00f      	b.n	8007880 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007860:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <UART_SetConfig+0x510>)
 8007862:	617b      	str	r3, [r7, #20]
        break;
 8007864:	e00c      	b.n	8007880 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007866:	f7fc fcab 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800786a:	6178      	str	r0, [r7, #20]
        break;
 800786c:	e008      	b.n	8007880 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800786e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007872:	617b      	str	r3, [r7, #20]
        break;
 8007874:	e004      	b.n	8007880 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	76bb      	strb	r3, [r7, #26]
        break;
 800787e:	bf00      	nop
    }

    if (pclk != 0U)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	085a      	lsrs	r2, r3, #1
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	441a      	add	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	fbb2 f3f3 	udiv	r3, r2, r3
 8007898:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d909      	bls.n	80078b4 <UART_SetConfig+0x4f4>
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a6:	d205      	bcs.n	80078b4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60da      	str	r2, [r3, #12]
 80078b2:	e001      	b.n	80078b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80078c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bdb0      	pop	{r4, r5, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	00f42400 	.word	0x00f42400

080078d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01a      	beq.n	80079ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d2:	d10a      	bne.n	80079ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	605a      	str	r2, [r3, #4]
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a28:	f7fa f8b6 	bl	8001b98 <HAL_GetTick>
 8007a2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d10e      	bne.n	8007a5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f82d 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e023      	b.n	8007aa2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d10e      	bne.n	8007a86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f817 	bl	8007aaa <UART_WaitOnFlagUntilTimeout>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e00d      	b.n	8007aa2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b09c      	sub	sp, #112	; 0x70
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aba:	e0a5      	b.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac2:	f000 80a1 	beq.w	8007c08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac6:	f7fa f867 	bl	8001b98 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <UART_WaitOnFlagUntilTimeout+0x32>
 8007ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d13e      	bne.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007af0:	667b      	str	r3, [r7, #100]	; 0x64
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007afc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e6      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	663b      	str	r3, [r7, #96]	; 0x60
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e5      	bne.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e067      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d04f      	beq.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b76:	d147      	bne.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b80:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e6      	bne.n	8007b82 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f023 0301 	bic.w	r3, r3, #1
 8007bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bd4:	623a      	str	r2, [r7, #32]
 8007bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	69f9      	ldr	r1, [r7, #28]
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e5      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e010      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69da      	ldr	r2, [r3, #28]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4013      	ands	r3, r2
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	bf0c      	ite	eq
 8007c18:	2301      	moveq	r3, #1
 8007c1a:	2300      	movne	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f43f af4a 	beq.w	8007abc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3770      	adds	r7, #112	; 0x70
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <__NVIC_SetPriority>:
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	db0a      	blt.n	8007c5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	490c      	ldr	r1, [pc, #48]	; (8007c80 <__NVIC_SetPriority+0x4c>)
 8007c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c52:	0112      	lsls	r2, r2, #4
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	440b      	add	r3, r1
 8007c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c5c:	e00a      	b.n	8007c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	4908      	ldr	r1, [pc, #32]	; (8007c84 <__NVIC_SetPriority+0x50>)
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	3b04      	subs	r3, #4
 8007c6c:	0112      	lsls	r2, r2, #4
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	440b      	add	r3, r1
 8007c72:	761a      	strb	r2, [r3, #24]
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	e000e100 	.word	0xe000e100
 8007c84:	e000ed00 	.word	0xe000ed00

08007c88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c8c:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <SysTick_Handler+0x1c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c90:	f002 f8ae 	bl	8009df0 <xTaskGetSchedulerState>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d001      	beq.n	8007c9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c9a:	f002 ff95 	bl	800abc8 <xPortSysTickHandler>
  }
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	e000e010 	.word	0xe000e010

08007ca8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007cac:	2100      	movs	r1, #0
 8007cae:	f06f 0004 	mvn.w	r0, #4
 8007cb2:	f7ff ffbf 	bl	8007c34 <__NVIC_SetPriority>
#endif
}
 8007cb6:	bf00      	nop
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cc2:	f3ef 8305 	mrs	r3, IPSR
 8007cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8007cc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cce:	f06f 0305 	mvn.w	r3, #5
 8007cd2:	607b      	str	r3, [r7, #4]
 8007cd4:	e00c      	b.n	8007cf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <osKernelInitialize+0x44>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d105      	bne.n	8007cea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cde:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <osKernelInitialize+0x44>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	e002      	b.n	8007cf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cf0:	687b      	ldr	r3, [r7, #4]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000104 	.word	0x20000104

08007d04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d0a:	f3ef 8305 	mrs	r3, IPSR
 8007d0e:	603b      	str	r3, [r7, #0]
  return(result);
 8007d10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d16:	f06f 0305 	mvn.w	r3, #5
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	e010      	b.n	8007d40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d1e:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <osKernelStart+0x48>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d109      	bne.n	8007d3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d26:	f7ff ffbf 	bl	8007ca8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d2a:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <osKernelStart+0x48>)
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d30:	f001 fc06 	bl	8009540 <vTaskStartScheduler>
      stat = osOK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	607b      	str	r3, [r7, #4]
 8007d38:	e002      	b.n	8007d40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d40:	687b      	ldr	r3, [r7, #4]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000104 	.word	0x20000104

08007d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08e      	sub	sp, #56	; 0x38
 8007d54:	af04      	add	r7, sp, #16
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d60:	f3ef 8305 	mrs	r3, IPSR
 8007d64:	617b      	str	r3, [r7, #20]
  return(result);
 8007d66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d17e      	bne.n	8007e6a <osThreadNew+0x11a>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d07b      	beq.n	8007e6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d76:	2318      	movs	r3, #24
 8007d78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d045      	beq.n	8007e16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <osThreadNew+0x48>
        name = attr->name;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <osThreadNew+0x6e>
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	2b38      	cmp	r3, #56	; 0x38
 8007db0:	d805      	bhi.n	8007dbe <osThreadNew+0x6e>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <osThreadNew+0x72>
        return (NULL);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e054      	b.n	8007e6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	089b      	lsrs	r3, r3, #2
 8007dd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00e      	beq.n	8007df8 <osThreadNew+0xa8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b5b      	cmp	r3, #91	; 0x5b
 8007de0:	d90a      	bls.n	8007df8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d006      	beq.n	8007df8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <osThreadNew+0xa8>
        mem = 1;
 8007df2:	2301      	movs	r3, #1
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	e010      	b.n	8007e1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10c      	bne.n	8007e1a <osThreadNew+0xca>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d108      	bne.n	8007e1a <osThreadNew+0xca>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d104      	bne.n	8007e1a <osThreadNew+0xca>
          mem = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	61bb      	str	r3, [r7, #24]
 8007e14:	e001      	b.n	8007e1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d110      	bne.n	8007e42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e28:	9202      	str	r2, [sp, #8]
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f001 f92e 	bl	8009098 <xTaskCreateStatic>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	e013      	b.n	8007e6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d110      	bne.n	8007e6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	f107 0310 	add.w	r3, r7, #16
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f001 f979 	bl	8009152 <xTaskCreate>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d001      	beq.n	8007e6a <osThreadNew+0x11a>
            hTask = NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e6a:	693b      	ldr	r3, [r7, #16]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3728      	adds	r7, #40	; 0x28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e7c:	f3ef 8305 	mrs	r3, IPSR
 8007e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <osDelay+0x1c>
    stat = osErrorISR;
 8007e88:	f06f 0305 	mvn.w	r3, #5
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	e007      	b.n	8007ea0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 fb1c 	bl	80094d8 <vTaskDelay>
    }
  }

  return (stat);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b088      	sub	sp, #32
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb6:	f3ef 8305 	mrs	r3, IPSR
 8007eba:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ebc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d174      	bne.n	8007fac <osMutexNew+0x102>
    if (attr != NULL) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	e001      	b.n	8007ed4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <osMutexNew+0x3a>
      rmtx = 1U;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e001      	b.n	8007ee8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d15c      	bne.n	8007fac <osMutexNew+0x102>
      mem = -1;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d015      	beq.n	8007f2a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <osMutexNew+0x6a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b4f      	cmp	r3, #79	; 0x4f
 8007f0c:	d902      	bls.n	8007f14 <osMutexNew+0x6a>
          mem = 1;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	613b      	str	r3, [r7, #16]
 8007f12:	e00c      	b.n	8007f2e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d108      	bne.n	8007f2e <osMutexNew+0x84>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d104      	bne.n	8007f2e <osMutexNew+0x84>
            mem = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e001      	b.n	8007f2e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d112      	bne.n	8007f5a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	2004      	movs	r0, #4
 8007f42:	f000 fb18 	bl	8008576 <xQueueCreateMutexStatic>
 8007f46:	61f8      	str	r0, [r7, #28]
 8007f48:	e016      	b.n	8007f78 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	2001      	movs	r0, #1
 8007f52:	f000 fb10 	bl	8008576 <xQueueCreateMutexStatic>
 8007f56:	61f8      	str	r0, [r7, #28]
 8007f58:	e00e      	b.n	8007f78 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10b      	bne.n	8007f78 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007f66:	2004      	movs	r0, #4
 8007f68:	f000 faed 	bl	8008546 <xQueueCreateMutex>
 8007f6c:	61f8      	str	r0, [r7, #28]
 8007f6e:	e003      	b.n	8007f78 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007f70:	2001      	movs	r0, #1
 8007f72:	f000 fae8 	bl	8008546 <xQueueCreateMutex>
 8007f76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00c      	beq.n	8007f98 <osMutexNew+0xee>
        if (attr != NULL) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <osMutexNew+0xe2>
          name = attr->name;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	e001      	b.n	8007f90 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007f90:	68f9      	ldr	r1, [r7, #12]
 8007f92:	69f8      	ldr	r0, [r7, #28]
 8007f94:	f001 f822 	bl	8008fdc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d006      	beq.n	8007fac <osMutexNew+0x102>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007fac:	69fb      	ldr	r3, [r7, #28]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fd4:	f3ef 8305 	mrs	r3, IPSR
 8007fd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fda:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007fe0:	f06f 0305 	mvn.w	r3, #5
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	e02c      	b.n	8008042 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007fee:	f06f 0303 	mvn.w	r3, #3
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e025      	b.n	8008042 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d011      	beq.n	8008020 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6938      	ldr	r0, [r7, #16]
 8008000:	f000 fb08 	bl	8008614 <xQueueTakeMutexRecursive>
 8008004:	4603      	mov	r3, r0
 8008006:	2b01      	cmp	r3, #1
 8008008:	d01b      	beq.n	8008042 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008010:	f06f 0301 	mvn.w	r3, #1
 8008014:	617b      	str	r3, [r7, #20]
 8008016:	e014      	b.n	8008042 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008018:	f06f 0302 	mvn.w	r3, #2
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	e010      	b.n	8008042 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6938      	ldr	r0, [r7, #16]
 8008024:	f000 fda6 	bl	8008b74 <xQueueSemaphoreTake>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d009      	beq.n	8008042 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008034:	f06f 0301 	mvn.w	r3, #1
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	e002      	b.n	8008042 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800803c:	f06f 0302 	mvn.w	r3, #2
 8008040:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008042:	697b      	ldr	r3, [r7, #20]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f023 0301 	bic.w	r3, r3, #1
 800805a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008068:	f3ef 8305 	mrs	r3, IPSR
 800806c:	60bb      	str	r3, [r7, #8]
  return(result);
 800806e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <osMutexRelease+0x30>
    stat = osErrorISR;
 8008074:	f06f 0305 	mvn.w	r3, #5
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e01f      	b.n	80080bc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008082:	f06f 0303 	mvn.w	r3, #3
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e018      	b.n	80080bc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008090:	6938      	ldr	r0, [r7, #16]
 8008092:	f000 fa8b 	bl	80085ac <xQueueGiveMutexRecursive>
 8008096:	4603      	mov	r3, r0
 8008098:	2b01      	cmp	r3, #1
 800809a:	d00f      	beq.n	80080bc <osMutexRelease+0x70>
        stat = osErrorResource;
 800809c:	f06f 0302 	mvn.w	r3, #2
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	e00b      	b.n	80080bc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80080a4:	2300      	movs	r3, #0
 80080a6:	2200      	movs	r2, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	6938      	ldr	r0, [r7, #16]
 80080ac:	f000 fae8 	bl	8008680 <xQueueGenericSend>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d002      	beq.n	80080bc <osMutexRelease+0x70>
        stat = osErrorResource;
 80080b6:	f06f 0302 	mvn.w	r3, #2
 80080ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80080bc:	697b      	ldr	r3, [r7, #20]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80080d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a06      	ldr	r2, [pc, #24]	; (80080f8 <vApplicationGetIdleTaskMemory+0x30>)
 80080de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2280      	movs	r2, #128	; 0x80
 80080e4:	601a      	str	r2, [r3, #0]
}
 80080e6:	bf00      	nop
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000108 	.word	0x20000108
 80080f8:	20000164 	.word	0x20000164

080080fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a07      	ldr	r2, [pc, #28]	; (8008128 <vApplicationGetTimerTaskMemory+0x2c>)
 800810c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4a06      	ldr	r2, [pc, #24]	; (800812c <vApplicationGetTimerTaskMemory+0x30>)
 8008112:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800811a:	601a      	str	r2, [r3, #0]
}
 800811c:	bf00      	nop
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	20000364 	.word	0x20000364
 800812c:	200003c0 	.word	0x200003c0

08008130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f103 0208 	add.w	r2, r3, #8
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008148:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f103 0208 	add.w	r2, r3, #8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f103 0208 	add.w	r2, r3, #8
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e8:	d103      	bne.n	80081f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e00c      	b.n	800820c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3308      	adds	r3, #8
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e002      	b.n	8008200 <vListInsert+0x2e>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	429a      	cmp	r2, r3
 800820a:	d2f6      	bcs.n	80081fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	601a      	str	r2, [r3, #0]
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6892      	ldr	r2, [r2, #8]
 800825a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6852      	ldr	r2, [r2, #4]
 8008264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d103      	bne.n	8008278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	1e5a      	subs	r2, r3, #1
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082c2:	f002 fbef 	bl	800aaa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	441a      	add	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f2:	3b01      	subs	r3, #1
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082f8:	fb01 f303 	mul.w	r3, r1, r3
 80082fc:	441a      	add	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	22ff      	movs	r2, #255	; 0xff
 8008306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	22ff      	movs	r2, #255	; 0xff
 800830e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d114      	bne.n	8008342 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01a      	beq.n	8008356 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3310      	adds	r3, #16
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fb95 	bl	8009a54 <xTaskRemoveFromEventList>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d012      	beq.n	8008356 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <xQueueGenericReset+0xcc>)
 8008332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	e009      	b.n	8008356 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3310      	adds	r3, #16
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fef2 	bl	8008130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff feed 	bl	8008130 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008356:	f002 fbd5 	bl	800ab04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800835a:	2301      	movs	r3, #1
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08e      	sub	sp, #56	; 0x38
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <xQueueGenericCreateStatic+0x52>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <xQueueGenericCreateStatic+0x56>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e000      	b.n	80083c0 <xQueueGenericCreateStatic+0x58>
 80083be:	2300      	movs	r3, #0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	623b      	str	r3, [r7, #32]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <xQueueGenericCreateStatic+0x7e>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <xQueueGenericCreateStatic+0x82>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <xQueueGenericCreateStatic+0x84>
 80083ea:	2300      	movs	r3, #0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	61fb      	str	r3, [r7, #28]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008406:	2350      	movs	r3, #80	; 0x50
 8008408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b50      	cmp	r3, #80	; 0x50
 800840e:	d00a      	beq.n	8008426 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	61bb      	str	r3, [r7, #24]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008426:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00d      	beq.n	800844e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800843a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4613      	mov	r3, r2
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f83f 	bl	80084cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008450:	4618      	mov	r0, r3
 8008452:	3730      	adds	r7, #48	; 0x30
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08a      	sub	sp, #40	; 0x28
 800845c:	af02      	add	r7, sp, #8
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <xQueueGenericCreate+0x2a>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	613b      	str	r3, [r7, #16]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	fb02 f303 	mul.w	r3, r2, r3
 800848a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	3350      	adds	r3, #80	; 0x50
 8008490:	4618      	mov	r0, r3
 8008492:	f002 fc29 	bl	800ace8 <pvPortMalloc>
 8008496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d011      	beq.n	80084c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	3350      	adds	r3, #80	; 0x50
 80084a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084b0:	79fa      	ldrb	r2, [r7, #7]
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	4613      	mov	r3, r2
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f805 	bl	80084cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084c2:	69bb      	ldr	r3, [r7, #24]
	}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	e002      	b.n	80084ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084fa:	2101      	movs	r1, #1
 80084fc:	69b8      	ldr	r0, [r7, #24]
 80084fe:	f7ff fecb 	bl	8008298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00e      	beq.n	800853e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008532:	2300      	movs	r3, #0
 8008534:	2200      	movs	r2, #0
 8008536:	2100      	movs	r1, #0
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8a1 	bl	8008680 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008546:	b580      	push	{r7, lr}
 8008548:	b086      	sub	sp, #24
 800854a:	af00      	add	r7, sp, #0
 800854c:	4603      	mov	r3, r0
 800854e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008550:	2301      	movs	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	2300      	movs	r3, #0
 8008556:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	461a      	mov	r2, r3
 800855c:	6939      	ldr	r1, [r7, #16]
 800855e:	6978      	ldr	r0, [r7, #20]
 8008560:	f7ff ff7a 	bl	8008458 <xQueueGenericCreate>
 8008564:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff ffd3 	bl	8008512 <prvInitialiseMutex>

		return xNewQueue;
 800856c:	68fb      	ldr	r3, [r7, #12]
	}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008576:	b580      	push	{r7, lr}
 8008578:	b088      	sub	sp, #32
 800857a:	af02      	add	r7, sp, #8
 800857c:	4603      	mov	r3, r0
 800857e:	6039      	str	r1, [r7, #0]
 8008580:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008582:	2301      	movs	r3, #1
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	2300      	movs	r3, #0
 8008588:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2200      	movs	r2, #0
 8008592:	6939      	ldr	r1, [r7, #16]
 8008594:	6978      	ldr	r0, [r7, #20]
 8008596:	f7ff fee7 	bl	8008368 <xQueueGenericCreateStatic>
 800859a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f7ff ffb8 	bl	8008512 <prvInitialiseMutex>

		return xNewQueue;
 80085a2:	68fb      	ldr	r3, [r7, #12]
	}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	60fb      	str	r3, [r7, #12]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	689c      	ldr	r4, [r3, #8]
 80085d8:	f001 fbfa 	bl	8009dd0 <xTaskGetCurrentTaskHandle>
 80085dc:	4603      	mov	r3, r0
 80085de:	429c      	cmp	r4, r3
 80085e0:	d111      	bne.n	8008606 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	1e5a      	subs	r2, r3, #1
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80085f4:	2300      	movs	r3, #0
 80085f6:	2200      	movs	r2, #0
 80085f8:	2100      	movs	r1, #0
 80085fa:	6938      	ldr	r0, [r7, #16]
 80085fc:	f000 f840 	bl	8008680 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008600:	2301      	movs	r3, #1
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	e001      	b.n	800860a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800860a:	697b      	ldr	r3, [r7, #20]
	}
 800860c:	4618      	mov	r0, r3
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	bd90      	pop	{r4, r7, pc}

08008614 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008614:	b590      	push	{r4, r7, lr}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10a      	bne.n	800863e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	60fb      	str	r3, [r7, #12]
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	689c      	ldr	r4, [r3, #8]
 8008642:	f001 fbc5 	bl	8009dd0 <xTaskGetCurrentTaskHandle>
 8008646:	4603      	mov	r3, r0
 8008648:	429c      	cmp	r4, r3
 800864a:	d107      	bne.n	800865c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008656:	2301      	movs	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e00c      	b.n	8008676 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6938      	ldr	r0, [r7, #16]
 8008660:	f000 fa88 	bl	8008b74 <xQueueSemaphoreTake>
 8008664:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008676:	697b      	ldr	r3, [r7, #20]
	}
 8008678:	4618      	mov	r0, r3
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	bd90      	pop	{r4, r7, pc}

08008680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800868e:	2300      	movs	r3, #0
 8008690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <xQueueGenericSend+0x32>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <xQueueGenericSend+0x40>
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <xQueueGenericSend+0x44>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <xQueueGenericSend+0x46>
 80086c4:	2300      	movs	r3, #0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <xQueueGenericSend+0x60>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d103      	bne.n	80086ee <xQueueGenericSend+0x6e>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d101      	bne.n	80086f2 <xQueueGenericSend+0x72>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <xQueueGenericSend+0x74>
 80086f2:	2300      	movs	r3, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <xQueueGenericSend+0x8e>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	623b      	str	r3, [r7, #32]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800870e:	f001 fb6f 	bl	8009df0 <xTaskGetSchedulerState>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <xQueueGenericSend+0x9e>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <xQueueGenericSend+0xa2>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <xQueueGenericSend+0xa4>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <xQueueGenericSend+0xbe>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	61fb      	str	r3, [r7, #28]
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800873e:	f002 f9b1 	bl	800aaa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874a:	429a      	cmp	r2, r3
 800874c:	d302      	bcc.n	8008754 <xQueueGenericSend+0xd4>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d129      	bne.n	80087a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800875a:	f000 fb2f 	bl	8008dbc <prvCopyDataToQueue>
 800875e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d010      	beq.n	800878a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	3324      	adds	r3, #36	; 0x24
 800876c:	4618      	mov	r0, r3
 800876e:	f001 f971 	bl	8009a54 <xTaskRemoveFromEventList>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d013      	beq.n	80087a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008778:	4b3f      	ldr	r3, [pc, #252]	; (8008878 <xQueueGenericSend+0x1f8>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	e00a      	b.n	80087a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008790:	4b39      	ldr	r3, [pc, #228]	; (8008878 <xQueueGenericSend+0x1f8>)
 8008792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80087a0:	f002 f9b0 	bl	800ab04 <vPortExitCritical>
				return pdPASS;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e063      	b.n	8008870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d103      	bne.n	80087b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ae:	f002 f9a9 	bl	800ab04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e05c      	b.n	8008870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087bc:	f107 0314 	add.w	r3, r7, #20
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 f9ab 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087c6:	2301      	movs	r3, #1
 80087c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087ca:	f002 f99b 	bl	800ab04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ce:	f000 ff1d 	bl	800960c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087d2:	f002 f967 	bl	800aaa4 <vPortEnterCritical>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087dc:	b25b      	sxtb	r3, r3
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e2:	d103      	bne.n	80087ec <xQueueGenericSend+0x16c>
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087f8:	d103      	bne.n	8008802 <xQueueGenericSend+0x182>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008802:	f002 f97f 	bl	800ab04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008806:	1d3a      	adds	r2, r7, #4
 8008808:	f107 0314 	add.w	r3, r7, #20
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f001 f99a 	bl	8009b48 <xTaskCheckForTimeOut>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d124      	bne.n	8008864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800881a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881c:	f000 fbc6 	bl	8008fac <prvIsQueueFull>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d018      	beq.n	8008858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	3310      	adds	r3, #16
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f8c0 	bl	80099b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008836:	f000 fb51 	bl	8008edc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800883a:	f000 fef5 	bl	8009628 <xTaskResumeAll>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	f47f af7c 	bne.w	800873e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <xQueueGenericSend+0x1f8>)
 8008848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	e772      	b.n	800873e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800885a:	f000 fb3f 	bl	8008edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800885e:	f000 fee3 	bl	8009628 <xTaskResumeAll>
 8008862:	e76c      	b.n	800873e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008866:	f000 fb39 	bl	8008edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800886a:	f000 fedd 	bl	8009628 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800886e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008870:	4618      	mov	r0, r3
 8008872:	3738      	adds	r7, #56	; 0x38
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b090      	sub	sp, #64	; 0x40
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <xQueueGenericSendFromISR+0x3c>
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <xQueueGenericSendFromISR+0x40>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <xQueueGenericSendFromISR+0x42>
 80088bc:	2300      	movs	r3, #0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d103      	bne.n	80088e6 <xQueueGenericSendFromISR+0x6a>
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <xQueueGenericSendFromISR+0x6e>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <xQueueGenericSendFromISR+0x70>
 80088ea:	2300      	movs	r3, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	623b      	str	r3, [r7, #32]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008906:	f002 f9af 	bl	800ac68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800890a:	f3ef 8211 	mrs	r2, BASEPRI
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	61fa      	str	r2, [r7, #28]
 8008920:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008922:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892e:	429a      	cmp	r2, r3
 8008930:	d302      	bcc.n	8008938 <xQueueGenericSendFromISR+0xbc>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d12f      	bne.n	8008998 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800893e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800894e:	f000 fa35 	bl	8008dbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008952:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800895a:	d112      	bne.n	8008982 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	d016      	beq.n	8008992 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	3324      	adds	r3, #36	; 0x24
 8008968:	4618      	mov	r0, r3
 800896a:	f001 f873 	bl	8009a54 <xTaskRemoveFromEventList>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00e      	beq.n	8008992 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00b      	beq.n	8008992 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	e007      	b.n	8008992 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008986:	3301      	adds	r3, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	b25a      	sxtb	r2, r3
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008992:	2301      	movs	r3, #1
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008996:	e001      	b.n	800899c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008998:	2300      	movs	r3, #0
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3740      	adds	r7, #64	; 0x40
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089c0:	2300      	movs	r3, #0
 80089c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <xQueueReceive+0x30>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	623b      	str	r3, [r7, #32]
}
 80089e0:	bf00      	nop
 80089e2:	e7fe      	b.n	80089e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <xQueueReceive+0x3e>
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <xQueueReceive+0x42>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e000      	b.n	80089f8 <xQueueReceive+0x44>
 80089f6:	2300      	movs	r3, #0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <xQueueReceive+0x5e>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	61fb      	str	r3, [r7, #28]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a12:	f001 f9ed 	bl	8009df0 <xTaskGetSchedulerState>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <xQueueReceive+0x6e>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <xQueueReceive+0x72>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <xQueueReceive+0x74>
 8008a26:	2300      	movs	r3, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <xQueueReceive+0x8e>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	61bb      	str	r3, [r7, #24]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a42:	f002 f82f 	bl	800aaa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01f      	beq.n	8008a92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a56:	f000 fa1b 	bl	8008e90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	1e5a      	subs	r2, r3, #1
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00f      	beq.n	8008a8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	3310      	adds	r3, #16
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fff0 	bl	8009a54 <xTaskRemoveFromEventList>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a7a:	4b3d      	ldr	r3, [pc, #244]	; (8008b70 <xQueueReceive+0x1bc>)
 8008a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a8a:	f002 f83b 	bl	800ab04 <vPortExitCritical>
				return pdPASS;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e069      	b.n	8008b66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a98:	f002 f834 	bl	800ab04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e062      	b.n	8008b66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aa6:	f107 0310 	add.w	r3, r7, #16
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 f836 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ab4:	f002 f826 	bl	800ab04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ab8:	f000 fda8 	bl	800960c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008abc:	f001 fff2 	bl	800aaa4 <vPortEnterCritical>
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ac6:	b25b      	sxtb	r3, r3
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008acc:	d103      	bne.n	8008ad6 <xQueueReceive+0x122>
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae2:	d103      	bne.n	8008aec <xQueueReceive+0x138>
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aec:	f002 f80a 	bl	800ab04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008af0:	1d3a      	adds	r2, r7, #4
 8008af2:	f107 0310 	add.w	r3, r7, #16
 8008af6:	4611      	mov	r1, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 f825 	bl	8009b48 <xTaskCheckForTimeOut>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d123      	bne.n	8008b4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b06:	f000 fa3b 	bl	8008f80 <prvIsQueueEmpty>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d017      	beq.n	8008b40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	3324      	adds	r3, #36	; 0x24
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 ff4b 	bl	80099b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b20:	f000 f9dc 	bl	8008edc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b24:	f000 fd80 	bl	8009628 <xTaskResumeAll>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d189      	bne.n	8008a42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b2e:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <xQueueReceive+0x1bc>)
 8008b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	e780      	b.n	8008a42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b42:	f000 f9cb 	bl	8008edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b46:	f000 fd6f 	bl	8009628 <xTaskResumeAll>
 8008b4a:	e77a      	b.n	8008a42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4e:	f000 f9c5 	bl	8008edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b52:	f000 fd69 	bl	8009628 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b58:	f000 fa12 	bl	8008f80 <prvIsQueueEmpty>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f43f af6f 	beq.w	8008a42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3730      	adds	r7, #48	; 0x30
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08e      	sub	sp, #56	; 0x38
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	623b      	str	r3, [r7, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00a      	beq.n	8008bc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	61fb      	str	r3, [r7, #28]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bc4:	f001 f914 	bl	8009df0 <xTaskGetSchedulerState>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <xQueueSemaphoreTake+0x60>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <xQueueSemaphoreTake+0x64>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <xQueueSemaphoreTake+0x66>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	61bb      	str	r3, [r7, #24]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bf4:	f001 ff56 	bl	800aaa4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d024      	beq.n	8008c4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	1e5a      	subs	r2, r3, #1
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c14:	f001 fa62 	bl	800a0dc <pvTaskIncrementMutexHeldCount>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00f      	beq.n	8008c46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	3310      	adds	r3, #16
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 ff12 	bl	8009a54 <xTaskRemoveFromEventList>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c36:	4b54      	ldr	r3, [pc, #336]	; (8008d88 <xQueueSemaphoreTake+0x214>)
 8008c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c46:	f001 ff5d 	bl	800ab04 <vPortExitCritical>
				return pdPASS;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e097      	b.n	8008d7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d111      	bne.n	8008c78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	617b      	str	r3, [r7, #20]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c70:	f001 ff48 	bl	800ab04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e082      	b.n	8008d7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c7e:	f107 030c 	add.w	r3, r7, #12
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 ff4a 	bl	8009b1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c8c:	f001 ff3a 	bl	800ab04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c90:	f000 fcbc 	bl	800960c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c94:	f001 ff06 	bl	800aaa4 <vPortEnterCritical>
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c9e:	b25b      	sxtb	r3, r3
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ca4:	d103      	bne.n	8008cae <xQueueSemaphoreTake+0x13a>
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb4:	b25b      	sxtb	r3, r3
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cba:	d103      	bne.n	8008cc4 <xQueueSemaphoreTake+0x150>
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cc4:	f001 ff1e 	bl	800ab04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cc8:	463a      	mov	r2, r7
 8008cca:	f107 030c 	add.w	r3, r7, #12
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 ff39 	bl	8009b48 <xTaskCheckForTimeOut>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d132      	bne.n	8008d42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cde:	f000 f94f 	bl	8008f80 <prvIsQueueEmpty>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d026      	beq.n	8008d36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d109      	bne.n	8008d04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008cf0:	f001 fed8 	bl	800aaa4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 f897 	bl	8009e2c <xTaskPriorityInherit>
 8008cfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d00:	f001 ff00 	bl	800ab04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	3324      	adds	r3, #36	; 0x24
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fe51 	bl	80099b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d14:	f000 f8e2 	bl	8008edc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d18:	f000 fc86 	bl	8009628 <xTaskResumeAll>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f47f af68 	bne.w	8008bf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008d24:	4b18      	ldr	r3, [pc, #96]	; (8008d88 <xQueueSemaphoreTake+0x214>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	e75e      	b.n	8008bf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d38:	f000 f8d0 	bl	8008edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d3c:	f000 fc74 	bl	8009628 <xTaskResumeAll>
 8008d40:	e758      	b.n	8008bf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d44:	f000 f8ca 	bl	8008edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d48:	f000 fc6e 	bl	8009628 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d4e:	f000 f917 	bl	8008f80 <prvIsQueueEmpty>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f43f af4d 	beq.w	8008bf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008d60:	f001 fea0 	bl	800aaa4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d66:	f000 f811 	bl	8008d8c <prvGetDisinheritPriorityAfterTimeout>
 8008d6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 f930 	bl	8009fd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d78:	f001 fec4 	bl	800ab04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3738      	adds	r7, #56	; 0x38
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d006      	beq.n	8008daa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e001      	b.n	8008dae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008dae:	68fb      	ldr	r3, [r7, #12]
	}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10d      	bne.n	8008df6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d14d      	bne.n	8008e7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 f888 	bl	8009efc <xTaskPriorityDisinherit>
 8008dec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	609a      	str	r2, [r3, #8]
 8008df4:	e043      	b.n	8008e7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d119      	bne.n	8008e30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6858      	ldr	r0, [r3, #4]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	461a      	mov	r2, r3
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	f002 f986 	bl	800b118 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e14:	441a      	add	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d32b      	bcc.n	8008e7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	605a      	str	r2, [r3, #4]
 8008e2e:	e026      	b.n	8008e7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68d8      	ldr	r0, [r3, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	f002 f96c 	bl	800b118 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e48:	425b      	negs	r3, r3
 8008e4a:	441a      	add	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d207      	bcs.n	8008e6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e64:	425b      	negs	r3, r3
 8008e66:	441a      	add	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d105      	bne.n	8008e7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e86:	697b      	ldr	r3, [r7, #20]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d018      	beq.n	8008ed4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	441a      	add	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d303      	bcc.n	8008ec4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68d9      	ldr	r1, [r3, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6838      	ldr	r0, [r7, #0]
 8008ed0:	f002 f922 	bl	800b118 <memcpy>
	}
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ee4:	f001 fdde 	bl	800aaa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ef0:	e011      	b.n	8008f16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d012      	beq.n	8008f20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3324      	adds	r3, #36	; 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fda8 	bl	8009a54 <xTaskRemoveFromEventList>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f0a:	f000 fe7f 	bl	8009c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dce9      	bgt.n	8008ef2 <prvUnlockQueue+0x16>
 8008f1e:	e000      	b.n	8008f22 <prvUnlockQueue+0x46>
					break;
 8008f20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	22ff      	movs	r2, #255	; 0xff
 8008f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f2a:	f001 fdeb 	bl	800ab04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f2e:	f001 fdb9 	bl	800aaa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f3a:	e011      	b.n	8008f60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d012      	beq.n	8008f6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3310      	adds	r3, #16
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fd83 	bl	8009a54 <xTaskRemoveFromEventList>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f54:	f000 fe5a 	bl	8009c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f58:	7bbb      	ldrb	r3, [r7, #14]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dce9      	bgt.n	8008f3c <prvUnlockQueue+0x60>
 8008f68:	e000      	b.n	8008f6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	22ff      	movs	r2, #255	; 0xff
 8008f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f74:	f001 fdc6 	bl	800ab04 <vPortExitCritical>
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f88:	f001 fd8c 	bl	800aaa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d102      	bne.n	8008f9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f94:	2301      	movs	r3, #1
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	e001      	b.n	8008f9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f9e:	f001 fdb1 	bl	800ab04 <vPortExitCritical>

	return xReturn;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fb4:	f001 fd76 	bl	800aaa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d102      	bne.n	8008fca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	e001      	b.n	8008fce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fce:	f001 fd99 	bl	800ab04 <vPortExitCritical>

	return xReturn;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	e014      	b.n	8009016 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fec:	4a0f      	ldr	r2, [pc, #60]	; (800902c <vQueueAddToRegistry+0x50>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10b      	bne.n	8009010 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ff8:	490c      	ldr	r1, [pc, #48]	; (800902c <vQueueAddToRegistry+0x50>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009002:	4a0a      	ldr	r2, [pc, #40]	; (800902c <vQueueAddToRegistry+0x50>)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	4413      	add	r3, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800900e:	e006      	b.n	800901e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3301      	adds	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b07      	cmp	r3, #7
 800901a:	d9e7      	bls.n	8008fec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20001fe8 	.word	0x20001fe8

08009030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009040:	f001 fd30 	bl	800aaa4 <vPortEnterCritical>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800904a:	b25b      	sxtb	r3, r3
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009050:	d103      	bne.n	800905a <vQueueWaitForMessageRestricted+0x2a>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009060:	b25b      	sxtb	r3, r3
 8009062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009066:	d103      	bne.n	8009070 <vQueueWaitForMessageRestricted+0x40>
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009070:	f001 fd48 	bl	800ab04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	3324      	adds	r3, #36	; 0x24
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	68b9      	ldr	r1, [r7, #8]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fcb9 	bl	80099fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800908a:	6978      	ldr	r0, [r7, #20]
 800908c:	f7ff ff26 	bl	8008edc <prvUnlockQueue>
	}
 8009090:	bf00      	nop
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08e      	sub	sp, #56	; 0x38
 800909c:	af04      	add	r7, sp, #16
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	623b      	str	r3, [r7, #32]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xTaskCreateStatic+0x46>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	61fb      	str	r3, [r7, #28]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090de:	235c      	movs	r3, #92	; 0x5c
 80090e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b5c      	cmp	r3, #92	; 0x5c
 80090e6:	d00a      	beq.n	80090fe <xTaskCreateStatic+0x66>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	61bb      	str	r3, [r7, #24]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01e      	beq.n	8009144 <xTaskCreateStatic+0xac>
 8009106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01b      	beq.n	8009144 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009114:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	2202      	movs	r2, #2
 800911a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800911e:	2300      	movs	r3, #0
 8009120:	9303      	str	r3, [sp, #12]
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	9302      	str	r3, [sp, #8]
 8009126:	f107 0314 	add.w	r3, r7, #20
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 f850 	bl	80091dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800913c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800913e:	f000 f8dd 	bl	80092fc <prvAddNewTaskToReadyList>
 8009142:	e001      	b.n	8009148 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009144:	2300      	movs	r3, #0
 8009146:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009148:	697b      	ldr	r3, [r7, #20]
	}
 800914a:	4618      	mov	r0, r3
 800914c:	3728      	adds	r7, #40	; 0x28
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009152:	b580      	push	{r7, lr}
 8009154:	b08c      	sub	sp, #48	; 0x30
 8009156:	af04      	add	r7, sp, #16
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	4613      	mov	r3, r2
 8009160:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4618      	mov	r0, r3
 8009168:	f001 fdbe 	bl	800ace8 <pvPortMalloc>
 800916c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00e      	beq.n	8009192 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009174:	205c      	movs	r0, #92	; 0x5c
 8009176:	f001 fdb7 	bl	800ace8 <pvPortMalloc>
 800917a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	631a      	str	r2, [r3, #48]	; 0x30
 8009188:	e005      	b.n	8009196 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800918a:	6978      	ldr	r0, [r7, #20]
 800918c:	f001 fe78 	bl	800ae80 <vPortFree>
 8009190:	e001      	b.n	8009196 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d017      	beq.n	80091cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091a4:	88fa      	ldrh	r2, [r7, #6]
 80091a6:	2300      	movs	r3, #0
 80091a8:	9303      	str	r3, [sp, #12]
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	9302      	str	r3, [sp, #8]
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f80e 	bl	80091dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091c0:	69f8      	ldr	r0, [r7, #28]
 80091c2:	f000 f89b 	bl	80092fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091c6:	2301      	movs	r3, #1
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	e002      	b.n	80091d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091d2:	69bb      	ldr	r3, [r7, #24]
	}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	461a      	mov	r2, r3
 80091f4:	21a5      	movs	r1, #165	; 0xa5
 80091f6:	f001 ff9d 	bl	800b134 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009204:	3b01      	subs	r3, #1
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f023 0307 	bic.w	r3, r3, #7
 8009212:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00a      	beq.n	8009234 <prvInitialiseNewTask+0x58>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	617b      	str	r3, [r7, #20]
}
 8009230:	bf00      	nop
 8009232:	e7fe      	b.n	8009232 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01f      	beq.n	800927a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800923a:	2300      	movs	r3, #0
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	e012      	b.n	8009266 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	4413      	add	r3, r2
 8009246:	7819      	ldrb	r1, [r3, #0]
 8009248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	3334      	adds	r3, #52	; 0x34
 8009250:	460a      	mov	r2, r1
 8009252:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d006      	beq.n	800926e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	3301      	adds	r3, #1
 8009264:	61fb      	str	r3, [r7, #28]
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	2b0f      	cmp	r3, #15
 800926a:	d9e9      	bls.n	8009240 <prvInitialiseNewTask+0x64>
 800926c:	e000      	b.n	8009270 <prvInitialiseNewTask+0x94>
			{
				break;
 800926e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009278:	e003      	b.n	8009282 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	2b37      	cmp	r3, #55	; 0x37
 8009286:	d901      	bls.n	800928c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009288:	2337      	movs	r3, #55	; 0x37
 800928a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009290:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009296:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	2200      	movs	r2, #0
 800929c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	3304      	adds	r3, #4
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe ff64 	bl	8008170 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	3318      	adds	r3, #24
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe ff5f 	bl	8008170 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	2200      	movs	r2, #0
 80092cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	68f9      	ldr	r1, [r7, #12]
 80092da:	69b8      	ldr	r0, [r7, #24]
 80092dc:	f001 fab4 	bl	800a848 <pxPortInitialiseStack>
 80092e0:	4602      	mov	r2, r0
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092f2:	bf00      	nop
 80092f4:	3720      	adds	r7, #32
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009304:	f001 fbce 	bl	800aaa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009308:	4b2d      	ldr	r3, [pc, #180]	; (80093c0 <prvAddNewTaskToReadyList+0xc4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	4a2c      	ldr	r2, [pc, #176]	; (80093c0 <prvAddNewTaskToReadyList+0xc4>)
 8009310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009312:	4b2c      	ldr	r3, [pc, #176]	; (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800931a:	4a2a      	ldr	r2, [pc, #168]	; (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009320:	4b27      	ldr	r3, [pc, #156]	; (80093c0 <prvAddNewTaskToReadyList+0xc4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d110      	bne.n	800934a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009328:	f000 fc94 	bl	8009c54 <prvInitialiseTaskLists>
 800932c:	e00d      	b.n	800934a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800932e:	4b26      	ldr	r3, [pc, #152]	; (80093c8 <prvAddNewTaskToReadyList+0xcc>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d109      	bne.n	800934a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009336:	4b23      	ldr	r3, [pc, #140]	; (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	429a      	cmp	r2, r3
 8009342:	d802      	bhi.n	800934a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009344:	4a1f      	ldr	r2, [pc, #124]	; (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800934a:	4b20      	ldr	r3, [pc, #128]	; (80093cc <prvAddNewTaskToReadyList+0xd0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	4a1e      	ldr	r2, [pc, #120]	; (80093cc <prvAddNewTaskToReadyList+0xd0>)
 8009352:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009354:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <prvAddNewTaskToReadyList+0xd0>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009360:	4b1b      	ldr	r3, [pc, #108]	; (80093d0 <prvAddNewTaskToReadyList+0xd4>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d903      	bls.n	8009370 <prvAddNewTaskToReadyList+0x74>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <prvAddNewTaskToReadyList+0xd4>)
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <prvAddNewTaskToReadyList+0xd8>)
 800937e:	441a      	add	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3304      	adds	r3, #4
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7fe feff 	bl	800818a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800938c:	f001 fbba 	bl	800ab04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009390:	4b0d      	ldr	r3, [pc, #52]	; (80093c8 <prvAddNewTaskToReadyList+0xcc>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00e      	beq.n	80093b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009398:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d207      	bcs.n	80093b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <prvAddNewTaskToReadyList+0xdc>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b6:	bf00      	nop
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000c94 	.word	0x20000c94
 80093c4:	200007c0 	.word	0x200007c0
 80093c8:	20000ca0 	.word	0x20000ca0
 80093cc:	20000cb0 	.word	0x20000cb0
 80093d0:	20000c9c 	.word	0x20000c9c
 80093d4:	200007c4 	.word	0x200007c4
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08a      	sub	sp, #40	; 0x28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <vTaskDelayUntil+0x2a>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	617b      	str	r3, [r7, #20]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <vTaskDelayUntil+0x46>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	613b      	str	r3, [r7, #16]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009422:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <vTaskDelayUntil+0xf0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <vTaskDelayUntil+0x64>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	60fb      	str	r3, [r7, #12]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009440:	f000 f8e4 	bl	800960c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009444:	4b22      	ldr	r3, [pc, #136]	; (80094d0 <vTaskDelayUntil+0xf4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4413      	add	r3, r2
 8009452:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a3a      	ldr	r2, [r7, #32]
 800945a:	429a      	cmp	r2, r3
 800945c:	d20b      	bcs.n	8009476 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	429a      	cmp	r2, r3
 8009466:	d211      	bcs.n	800948c <vTaskDelayUntil+0xb0>
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	429a      	cmp	r2, r3
 800946e:	d90d      	bls.n	800948c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009470:	2301      	movs	r3, #1
 8009472:	627b      	str	r3, [r7, #36]	; 0x24
 8009474:	e00a      	b.n	800948c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	429a      	cmp	r2, r3
 800947e:	d303      	bcc.n	8009488 <vTaskDelayUntil+0xac>
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	429a      	cmp	r2, r3
 8009486:	d901      	bls.n	800948c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009488:	2301      	movs	r3, #1
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	69fa      	ldr	r2, [r7, #28]
 8009490:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2100      	movs	r1, #0
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fe2f 	bl	800a104 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80094a6:	f000 f8bf 	bl	8009628 <xTaskResumeAll>
 80094aa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d107      	bne.n	80094c2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80094b2:	4b08      	ldr	r3, [pc, #32]	; (80094d4 <vTaskDelayUntil+0xf8>)
 80094b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094c2:	bf00      	nop
 80094c4:	3728      	adds	r7, #40	; 0x28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000cbc 	.word	0x20000cbc
 80094d0:	20000c98 	.word	0x20000c98
 80094d4:	e000ed04 	.word	0xe000ed04

080094d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d017      	beq.n	800951a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094ea:	4b13      	ldr	r3, [pc, #76]	; (8009538 <vTaskDelay+0x60>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <vTaskDelay+0x30>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	60bb      	str	r3, [r7, #8]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009508:	f000 f880 	bl	800960c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fdf8 	bl	800a104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009514:	f000 f888 	bl	8009628 <xTaskResumeAll>
 8009518:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d107      	bne.n	8009530 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009520:	4b06      	ldr	r3, [pc, #24]	; (800953c <vTaskDelay+0x64>)
 8009522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009530:	bf00      	nop
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20000cbc 	.word	0x20000cbc
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	; 0x28
 8009544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800954e:	463a      	mov	r2, r7
 8009550:	1d39      	adds	r1, r7, #4
 8009552:	f107 0308 	add.w	r3, r7, #8
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fdb6 	bl	80080c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	9202      	str	r2, [sp, #8]
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	2300      	movs	r3, #0
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	2300      	movs	r3, #0
 800956c:	460a      	mov	r2, r1
 800956e:	4921      	ldr	r1, [pc, #132]	; (80095f4 <vTaskStartScheduler+0xb4>)
 8009570:	4821      	ldr	r0, [pc, #132]	; (80095f8 <vTaskStartScheduler+0xb8>)
 8009572:	f7ff fd91 	bl	8009098 <xTaskCreateStatic>
 8009576:	4603      	mov	r3, r0
 8009578:	4a20      	ldr	r2, [pc, #128]	; (80095fc <vTaskStartScheduler+0xbc>)
 800957a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800957c:	4b1f      	ldr	r3, [pc, #124]	; (80095fc <vTaskStartScheduler+0xbc>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e001      	b.n	800958e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800958a:	2300      	movs	r3, #0
 800958c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d102      	bne.n	800959a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009594:	f000 fe0a 	bl	800a1ac <xTimerCreateTimerTask>
 8009598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d116      	bne.n	80095ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095b4:	4b12      	ldr	r3, [pc, #72]	; (8009600 <vTaskStartScheduler+0xc0>)
 80095b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <vTaskStartScheduler+0xc4>)
 80095be:	2201      	movs	r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095c2:	4b11      	ldr	r3, [pc, #68]	; (8009608 <vTaskStartScheduler+0xc8>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095c8:	f001 f9ca 	bl	800a960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095cc:	e00e      	b.n	80095ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095d4:	d10a      	bne.n	80095ec <vTaskStartScheduler+0xac>
	__asm volatile
 80095d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	60fb      	str	r3, [r7, #12]
}
 80095e8:	bf00      	nop
 80095ea:	e7fe      	b.n	80095ea <vTaskStartScheduler+0xaa>
}
 80095ec:	bf00      	nop
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	0800c6d8 	.word	0x0800c6d8
 80095f8:	08009c25 	.word	0x08009c25
 80095fc:	20000cb8 	.word	0x20000cb8
 8009600:	20000cb4 	.word	0x20000cb4
 8009604:	20000ca0 	.word	0x20000ca0
 8009608:	20000c98 	.word	0x20000c98

0800960c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009610:	4b04      	ldr	r3, [pc, #16]	; (8009624 <vTaskSuspendAll+0x18>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	4a03      	ldr	r2, [pc, #12]	; (8009624 <vTaskSuspendAll+0x18>)
 8009618:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800961a:	bf00      	nop
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	20000cbc 	.word	0x20000cbc

08009628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009632:	2300      	movs	r3, #0
 8009634:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009636:	4b42      	ldr	r3, [pc, #264]	; (8009740 <xTaskResumeAll+0x118>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <xTaskResumeAll+0x2c>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	603b      	str	r3, [r7, #0]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009654:	f001 fa26 	bl	800aaa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009658:	4b39      	ldr	r3, [pc, #228]	; (8009740 <xTaskResumeAll+0x118>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3b01      	subs	r3, #1
 800965e:	4a38      	ldr	r2, [pc, #224]	; (8009740 <xTaskResumeAll+0x118>)
 8009660:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009662:	4b37      	ldr	r3, [pc, #220]	; (8009740 <xTaskResumeAll+0x118>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d162      	bne.n	8009730 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800966a:	4b36      	ldr	r3, [pc, #216]	; (8009744 <xTaskResumeAll+0x11c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d05e      	beq.n	8009730 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009672:	e02f      	b.n	80096d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009674:	4b34      	ldr	r3, [pc, #208]	; (8009748 <xTaskResumeAll+0x120>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3318      	adds	r3, #24
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe fddf 	bl	8008244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3304      	adds	r3, #4
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fdda 	bl	8008244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	4b2d      	ldr	r3, [pc, #180]	; (800974c <xTaskResumeAll+0x124>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d903      	bls.n	80096a4 <xTaskResumeAll+0x7c>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a2a      	ldr	r2, [pc, #168]	; (800974c <xTaskResumeAll+0x124>)
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4a27      	ldr	r2, [pc, #156]	; (8009750 <xTaskResumeAll+0x128>)
 80096b2:	441a      	add	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fd65 	bl	800818a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c4:	4b23      	ldr	r3, [pc, #140]	; (8009754 <xTaskResumeAll+0x12c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d302      	bcc.n	80096d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096ce:	4b22      	ldr	r3, [pc, #136]	; (8009758 <xTaskResumeAll+0x130>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096d4:	4b1c      	ldr	r3, [pc, #112]	; (8009748 <xTaskResumeAll+0x120>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1cb      	bne.n	8009674 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096e2:	f000 fb55 	bl	8009d90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096e6:	4b1d      	ldr	r3, [pc, #116]	; (800975c <xTaskResumeAll+0x134>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d010      	beq.n	8009714 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096f2:	f000 f847 	bl	8009784 <xTaskIncrementTick>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80096fc:	4b16      	ldr	r3, [pc, #88]	; (8009758 <xTaskResumeAll+0x130>)
 80096fe:	2201      	movs	r2, #1
 8009700:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3b01      	subs	r3, #1
 8009706:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1f1      	bne.n	80096f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800970e:	4b13      	ldr	r3, [pc, #76]	; (800975c <xTaskResumeAll+0x134>)
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009714:	4b10      	ldr	r3, [pc, #64]	; (8009758 <xTaskResumeAll+0x130>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d009      	beq.n	8009730 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800971c:	2301      	movs	r3, #1
 800971e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009720:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <xTaskResumeAll+0x138>)
 8009722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009730:	f001 f9e8 	bl	800ab04 <vPortExitCritical>

	return xAlreadyYielded;
 8009734:	68bb      	ldr	r3, [r7, #8]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000cbc 	.word	0x20000cbc
 8009744:	20000c94 	.word	0x20000c94
 8009748:	20000c54 	.word	0x20000c54
 800974c:	20000c9c 	.word	0x20000c9c
 8009750:	200007c4 	.word	0x200007c4
 8009754:	200007c0 	.word	0x200007c0
 8009758:	20000ca8 	.word	0x20000ca8
 800975c:	20000ca4 	.word	0x20000ca4
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800976a:	4b05      	ldr	r3, [pc, #20]	; (8009780 <xTaskGetTickCount+0x1c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009770:	687b      	ldr	r3, [r7, #4]
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	20000c98 	.word	0x20000c98

08009784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800978e:	4b4f      	ldr	r3, [pc, #316]	; (80098cc <xTaskIncrementTick+0x148>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	f040 808f 	bne.w	80098b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009798:	4b4d      	ldr	r3, [pc, #308]	; (80098d0 <xTaskIncrementTick+0x14c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097a0:	4a4b      	ldr	r2, [pc, #300]	; (80098d0 <xTaskIncrementTick+0x14c>)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d120      	bne.n	80097ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80097ac:	4b49      	ldr	r3, [pc, #292]	; (80098d4 <xTaskIncrementTick+0x150>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00a      	beq.n	80097cc <xTaskIncrementTick+0x48>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	603b      	str	r3, [r7, #0]
}
 80097c8:	bf00      	nop
 80097ca:	e7fe      	b.n	80097ca <xTaskIncrementTick+0x46>
 80097cc:	4b41      	ldr	r3, [pc, #260]	; (80098d4 <xTaskIncrementTick+0x150>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	4b41      	ldr	r3, [pc, #260]	; (80098d8 <xTaskIncrementTick+0x154>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a3f      	ldr	r2, [pc, #252]	; (80098d4 <xTaskIncrementTick+0x150>)
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	4a3f      	ldr	r2, [pc, #252]	; (80098d8 <xTaskIncrementTick+0x154>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	4b3e      	ldr	r3, [pc, #248]	; (80098dc <xTaskIncrementTick+0x158>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3301      	adds	r3, #1
 80097e6:	4a3d      	ldr	r2, [pc, #244]	; (80098dc <xTaskIncrementTick+0x158>)
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	f000 fad1 	bl	8009d90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097ee:	4b3c      	ldr	r3, [pc, #240]	; (80098e0 <xTaskIncrementTick+0x15c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d349      	bcc.n	800988c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f8:	4b36      	ldr	r3, [pc, #216]	; (80098d4 <xTaskIncrementTick+0x150>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009802:	4b37      	ldr	r3, [pc, #220]	; (80098e0 <xTaskIncrementTick+0x15c>)
 8009804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009808:	601a      	str	r2, [r3, #0]
					break;
 800980a:	e03f      	b.n	800988c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980c:	4b31      	ldr	r3, [pc, #196]	; (80098d4 <xTaskIncrementTick+0x150>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d203      	bcs.n	800982c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009824:	4a2e      	ldr	r2, [pc, #184]	; (80098e0 <xTaskIncrementTick+0x15c>)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800982a:	e02f      	b.n	800988c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	3304      	adds	r3, #4
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fd07 	bl	8008244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	d004      	beq.n	8009848 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3318      	adds	r3, #24
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fcfe 	bl	8008244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984c:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <xTaskIncrementTick+0x160>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d903      	bls.n	800985c <xTaskIncrementTick+0xd8>
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	4a22      	ldr	r2, [pc, #136]	; (80098e4 <xTaskIncrementTick+0x160>)
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009860:	4613      	mov	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4a1f      	ldr	r2, [pc, #124]	; (80098e8 <xTaskIncrementTick+0x164>)
 800986a:	441a      	add	r2, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	3304      	adds	r3, #4
 8009870:	4619      	mov	r1, r3
 8009872:	4610      	mov	r0, r2
 8009874:	f7fe fc89 	bl	800818a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987c:	4b1b      	ldr	r3, [pc, #108]	; (80098ec <xTaskIncrementTick+0x168>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	429a      	cmp	r2, r3
 8009884:	d3b8      	bcc.n	80097f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009886:	2301      	movs	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800988a:	e7b5      	b.n	80097f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800988c:	4b17      	ldr	r3, [pc, #92]	; (80098ec <xTaskIncrementTick+0x168>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009892:	4915      	ldr	r1, [pc, #84]	; (80098e8 <xTaskIncrementTick+0x164>)
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d901      	bls.n	80098a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098a8:	4b11      	ldr	r3, [pc, #68]	; (80098f0 <xTaskIncrementTick+0x16c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d007      	beq.n	80098c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098b0:	2301      	movs	r3, #1
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	e004      	b.n	80098c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098b6:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <xTaskIncrementTick+0x170>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3301      	adds	r3, #1
 80098bc:	4a0d      	ldr	r2, [pc, #52]	; (80098f4 <xTaskIncrementTick+0x170>)
 80098be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098c0:	697b      	ldr	r3, [r7, #20]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	20000cbc 	.word	0x20000cbc
 80098d0:	20000c98 	.word	0x20000c98
 80098d4:	20000c4c 	.word	0x20000c4c
 80098d8:	20000c50 	.word	0x20000c50
 80098dc:	20000cac 	.word	0x20000cac
 80098e0:	20000cb4 	.word	0x20000cb4
 80098e4:	20000c9c 	.word	0x20000c9c
 80098e8:	200007c4 	.word	0x200007c4
 80098ec:	200007c0 	.word	0x200007c0
 80098f0:	20000ca8 	.word	0x20000ca8
 80098f4:	20000ca4 	.word	0x20000ca4

080098f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098fe:	4b28      	ldr	r3, [pc, #160]	; (80099a0 <vTaskSwitchContext+0xa8>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009906:	4b27      	ldr	r3, [pc, #156]	; (80099a4 <vTaskSwitchContext+0xac>)
 8009908:	2201      	movs	r2, #1
 800990a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800990c:	e041      	b.n	8009992 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800990e:	4b25      	ldr	r3, [pc, #148]	; (80099a4 <vTaskSwitchContext+0xac>)
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009914:	4b24      	ldr	r3, [pc, #144]	; (80099a8 <vTaskSwitchContext+0xb0>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	e010      	b.n	800993e <vTaskSwitchContext+0x46>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <vTaskSwitchContext+0x40>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	607b      	str	r3, [r7, #4]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vTaskSwitchContext+0x3e>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3b01      	subs	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	491b      	ldr	r1, [pc, #108]	; (80099ac <vTaskSwitchContext+0xb4>)
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0e4      	beq.n	800991c <vTaskSwitchContext+0x24>
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4613      	mov	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4a13      	ldr	r2, [pc, #76]	; (80099ac <vTaskSwitchContext+0xb4>)
 800995e:	4413      	add	r3, r2
 8009960:	60bb      	str	r3, [r7, #8]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	605a      	str	r2, [r3, #4]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	3308      	adds	r3, #8
 8009974:	429a      	cmp	r2, r3
 8009976:	d104      	bne.n	8009982 <vTaskSwitchContext+0x8a>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	4a09      	ldr	r2, [pc, #36]	; (80099b0 <vTaskSwitchContext+0xb8>)
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	4a06      	ldr	r2, [pc, #24]	; (80099a8 <vTaskSwitchContext+0xb0>)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6013      	str	r3, [r2, #0]
}
 8009992:	bf00      	nop
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	20000cbc 	.word	0x20000cbc
 80099a4:	20000ca8 	.word	0x20000ca8
 80099a8:	20000c9c 	.word	0x20000c9c
 80099ac:	200007c4 	.word	0x200007c4
 80099b0:	200007c0 	.word	0x200007c0

080099b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	60fb      	str	r3, [r7, #12]
}
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <vTaskPlaceOnEventList+0x44>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3318      	adds	r3, #24
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7fe fbf5 	bl	80081d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099e8:	2101      	movs	r1, #1
 80099ea:	6838      	ldr	r0, [r7, #0]
 80099ec:	f000 fb8a 	bl	800a104 <prvAddCurrentTaskToDelayedList>
}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	200007c0 	.word	0x200007c0

080099fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	617b      	str	r3, [r7, #20]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3318      	adds	r3, #24
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f7fe fbac 	bl	800818a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	68b8      	ldr	r0, [r7, #8]
 8009a42:	f000 fb5f 	bl	800a104 <prvAddCurrentTaskToDelayedList>
	}
 8009a46:	bf00      	nop
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	200007c0 	.word	0x200007c0

08009a54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	60fb      	str	r3, [r7, #12]
}
 8009a7c:	bf00      	nop
 8009a7e:	e7fe      	b.n	8009a7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	3318      	adds	r3, #24
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe fbdd 	bl	8008244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a8a:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <xTaskRemoveFromEventList+0xb0>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d11d      	bne.n	8009ace <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	3304      	adds	r3, #4
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fbd4 	bl	8008244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa0:	4b19      	ldr	r3, [pc, #100]	; (8009b08 <xTaskRemoveFromEventList+0xb4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d903      	bls.n	8009ab0 <xTaskRemoveFromEventList+0x5c>
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	4a16      	ldr	r2, [pc, #88]	; (8009b08 <xTaskRemoveFromEventList+0xb4>)
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4a13      	ldr	r2, [pc, #76]	; (8009b0c <xTaskRemoveFromEventList+0xb8>)
 8009abe:	441a      	add	r2, r3
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7fe fb5f 	bl	800818a <vListInsertEnd>
 8009acc:	e005      	b.n	8009ada <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	3318      	adds	r3, #24
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	480e      	ldr	r0, [pc, #56]	; (8009b10 <xTaskRemoveFromEventList+0xbc>)
 8009ad6:	f7fe fb58 	bl	800818a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ade:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <xTaskRemoveFromEventList+0xc0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d905      	bls.n	8009af4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <xTaskRemoveFromEventList+0xc4>)
 8009aee:	2201      	movs	r2, #1
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	e001      	b.n	8009af8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009af4:	2300      	movs	r3, #0
 8009af6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009af8:	697b      	ldr	r3, [r7, #20]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000cbc 	.word	0x20000cbc
 8009b08:	20000c9c 	.word	0x20000c9c
 8009b0c:	200007c4 	.word	0x200007c4
 8009b10:	20000c54 	.word	0x20000c54
 8009b14:	200007c0 	.word	0x200007c0
 8009b18:	20000ca8 	.word	0x20000ca8

08009b1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b24:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <vTaskInternalSetTimeOutState+0x24>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <vTaskInternalSetTimeOutState+0x28>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	605a      	str	r2, [r3, #4]
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	20000cac 	.word	0x20000cac
 8009b44:	20000c98 	.word	0x20000c98

08009b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	613b      	str	r3, [r7, #16]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	60fb      	str	r3, [r7, #12]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b8a:	f000 ff8b 	bl	800aaa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b8e:	4b1d      	ldr	r3, [pc, #116]	; (8009c04 <xTaskCheckForTimeOut+0xbc>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ba6:	d102      	bne.n	8009bae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61fb      	str	r3, [r7, #28]
 8009bac:	e023      	b.n	8009bf6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b15      	ldr	r3, [pc, #84]	; (8009c08 <xTaskCheckForTimeOut+0xc0>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d007      	beq.n	8009bca <xTaskCheckForTimeOut+0x82>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d302      	bcc.n	8009bca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	e015      	b.n	8009bf6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d20b      	bcs.n	8009bec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff ff9b 	bl	8009b1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61fb      	str	r3, [r7, #28]
 8009bea:	e004      	b.n	8009bf6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bf6:	f000 ff85 	bl	800ab04 <vPortExitCritical>

	return xReturn;
 8009bfa:	69fb      	ldr	r3, [r7, #28]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3720      	adds	r7, #32
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000c98 	.word	0x20000c98
 8009c08:	20000cac 	.word	0x20000cac

08009c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c10:	4b03      	ldr	r3, [pc, #12]	; (8009c20 <vTaskMissedYield+0x14>)
 8009c12:	2201      	movs	r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
}
 8009c16:	bf00      	nop
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20000ca8 	.word	0x20000ca8

08009c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c2c:	f000 f852 	bl	8009cd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c30:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <prvIdleTask+0x28>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d9f9      	bls.n	8009c2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c38:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <prvIdleTask+0x2c>)
 8009c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c48:	e7f0      	b.n	8009c2c <prvIdleTask+0x8>
 8009c4a:	bf00      	nop
 8009c4c:	200007c4 	.word	0x200007c4
 8009c50:	e000ed04 	.word	0xe000ed04

08009c54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	607b      	str	r3, [r7, #4]
 8009c5e:	e00c      	b.n	8009c7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4a12      	ldr	r2, [pc, #72]	; (8009cb4 <prvInitialiseTaskLists+0x60>)
 8009c6c:	4413      	add	r3, r2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fa5e 	bl	8008130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3301      	adds	r3, #1
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b37      	cmp	r3, #55	; 0x37
 8009c7e:	d9ef      	bls.n	8009c60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c80:	480d      	ldr	r0, [pc, #52]	; (8009cb8 <prvInitialiseTaskLists+0x64>)
 8009c82:	f7fe fa55 	bl	8008130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c86:	480d      	ldr	r0, [pc, #52]	; (8009cbc <prvInitialiseTaskLists+0x68>)
 8009c88:	f7fe fa52 	bl	8008130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c8c:	480c      	ldr	r0, [pc, #48]	; (8009cc0 <prvInitialiseTaskLists+0x6c>)
 8009c8e:	f7fe fa4f 	bl	8008130 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c92:	480c      	ldr	r0, [pc, #48]	; (8009cc4 <prvInitialiseTaskLists+0x70>)
 8009c94:	f7fe fa4c 	bl	8008130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c98:	480b      	ldr	r0, [pc, #44]	; (8009cc8 <prvInitialiseTaskLists+0x74>)
 8009c9a:	f7fe fa49 	bl	8008130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c9e:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <prvInitialiseTaskLists+0x78>)
 8009ca0:	4a05      	ldr	r2, [pc, #20]	; (8009cb8 <prvInitialiseTaskLists+0x64>)
 8009ca2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <prvInitialiseTaskLists+0x7c>)
 8009ca6:	4a05      	ldr	r2, [pc, #20]	; (8009cbc <prvInitialiseTaskLists+0x68>)
 8009ca8:	601a      	str	r2, [r3, #0]
}
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	200007c4 	.word	0x200007c4
 8009cb8:	20000c24 	.word	0x20000c24
 8009cbc:	20000c38 	.word	0x20000c38
 8009cc0:	20000c54 	.word	0x20000c54
 8009cc4:	20000c68 	.word	0x20000c68
 8009cc8:	20000c80 	.word	0x20000c80
 8009ccc:	20000c4c 	.word	0x20000c4c
 8009cd0:	20000c50 	.word	0x20000c50

08009cd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cda:	e019      	b.n	8009d10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cdc:	f000 fee2 	bl	800aaa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce0:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <prvCheckTasksWaitingTermination+0x50>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fe faa9 	bl	8008244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <prvCheckTasksWaitingTermination+0x54>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	4a0b      	ldr	r2, [pc, #44]	; (8009d28 <prvCheckTasksWaitingTermination+0x54>)
 8009cfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cfc:	4b0b      	ldr	r3, [pc, #44]	; (8009d2c <prvCheckTasksWaitingTermination+0x58>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	4a0a      	ldr	r2, [pc, #40]	; (8009d2c <prvCheckTasksWaitingTermination+0x58>)
 8009d04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d06:	f000 fefd 	bl	800ab04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f810 	bl	8009d30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d10:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <prvCheckTasksWaitingTermination+0x58>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e1      	bne.n	8009cdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000c68 	.word	0x20000c68
 8009d28:	20000c94 	.word	0x20000c94
 8009d2c:	20000c7c 	.word	0x20000c7c

08009d30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d108      	bne.n	8009d54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f89a 	bl	800ae80 <vPortFree>
				vPortFree( pxTCB );
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 f897 	bl	800ae80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d52:	e018      	b.n	8009d86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d103      	bne.n	8009d66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 f88e 	bl	800ae80 <vPortFree>
	}
 8009d64:	e00f      	b.n	8009d86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d00a      	beq.n	8009d86 <prvDeleteTCB+0x56>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	60fb      	str	r3, [r7, #12]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <prvDeleteTCB+0x54>
	}
 8009d86:	bf00      	nop
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d96:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <prvResetNextTaskUnblockTime+0x38>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d104      	bne.n	8009daa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <prvResetNextTaskUnblockTime+0x3c>)
 8009da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009da6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009da8:	e008      	b.n	8009dbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009daa:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <prvResetNextTaskUnblockTime+0x38>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	4a04      	ldr	r2, [pc, #16]	; (8009dcc <prvResetNextTaskUnblockTime+0x3c>)
 8009dba:	6013      	str	r3, [r2, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	20000c4c 	.word	0x20000c4c
 8009dcc:	20000cb4 	.word	0x20000cb4

08009dd0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009dd6:	4b05      	ldr	r3, [pc, #20]	; (8009dec <xTaskGetCurrentTaskHandle+0x1c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009ddc:	687b      	ldr	r3, [r7, #4]
	}
 8009dde:	4618      	mov	r0, r3
 8009de0:	370c      	adds	r7, #12
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	200007c0 	.word	0x200007c0

08009df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <xTaskGetSchedulerState+0x34>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	607b      	str	r3, [r7, #4]
 8009e02:	e008      	b.n	8009e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e04:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <xTaskGetSchedulerState+0x38>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d102      	bne.n	8009e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	607b      	str	r3, [r7, #4]
 8009e10:	e001      	b.n	8009e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e12:	2300      	movs	r3, #0
 8009e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e16:	687b      	ldr	r3, [r7, #4]
	}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	20000ca0 	.word	0x20000ca0
 8009e28:	20000cbc 	.word	0x20000cbc

08009e2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d051      	beq.n	8009ee6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e46:	4b2a      	ldr	r3, [pc, #168]	; (8009ef0 <xTaskPriorityInherit+0xc4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d241      	bcs.n	8009ed4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	db06      	blt.n	8009e66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e58:	4b25      	ldr	r3, [pc, #148]	; (8009ef0 <xTaskPriorityInherit+0xc4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6959      	ldr	r1, [r3, #20]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <xTaskPriorityInherit+0xc8>)
 8009e78:	4413      	add	r3, r2
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	d122      	bne.n	8009ec4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe f9de 	bl	8008244 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e88:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <xTaskPriorityInherit+0xc4>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e96:	4b18      	ldr	r3, [pc, #96]	; (8009ef8 <xTaskPriorityInherit+0xcc>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d903      	bls.n	8009ea6 <xTaskPriorityInherit+0x7a>
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <xTaskPriorityInherit+0xcc>)
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eaa:	4613      	mov	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4a10      	ldr	r2, [pc, #64]	; (8009ef4 <xTaskPriorityInherit+0xc8>)
 8009eb4:	441a      	add	r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	f7fe f964 	bl	800818a <vListInsertEnd>
 8009ec2:	e004      	b.n	8009ece <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ec4:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <xTaskPriorityInherit+0xc4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e008      	b.n	8009ee6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ed8:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <xTaskPriorityInherit+0xc4>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d201      	bcs.n	8009ee6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
	}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	200007c0 	.word	0x200007c0
 8009ef4:	200007c4 	.word	0x200007c4
 8009ef8:	20000c9c 	.word	0x20000c9c

08009efc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d056      	beq.n	8009fc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f12:	4b2e      	ldr	r3, [pc, #184]	; (8009fcc <xTaskPriorityDisinherit+0xd0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d00a      	beq.n	8009f32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60fb      	str	r3, [r7, #12]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10a      	bne.n	8009f50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	60bb      	str	r3, [r7, #8]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f54:	1e5a      	subs	r2, r3, #1
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d02c      	beq.n	8009fc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d128      	bne.n	8009fc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	3304      	adds	r3, #4
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe f966 	bl	8008244 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f90:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <xTaskPriorityDisinherit+0xd4>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d903      	bls.n	8009fa0 <xTaskPriorityDisinherit+0xa4>
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a0c      	ldr	r2, [pc, #48]	; (8009fd0 <xTaskPriorityDisinherit+0xd4>)
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4a09      	ldr	r2, [pc, #36]	; (8009fd4 <xTaskPriorityDisinherit+0xd8>)
 8009fae:	441a      	add	r2, r3
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7fe f8e7 	bl	800818a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fc0:	697b      	ldr	r3, [r7, #20]
	}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200007c0 	.word	0x200007c0
 8009fd0:	20000c9c 	.word	0x20000c9c
 8009fd4:	200007c4 	.word	0x200007c4

08009fd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d06a      	beq.n	800a0c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60fb      	str	r3, [r7, #12]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d902      	bls.n	800a01e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	61fb      	str	r3, [r7, #28]
 800a01c:	e002      	b.n	800a024 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a022:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d04b      	beq.n	800a0c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	429a      	cmp	r2, r3
 800a036:	d146      	bne.n	800a0c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a038:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	69ba      	ldr	r2, [r7, #24]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d10a      	bne.n	800a058 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	60bb      	str	r3, [r7, #8]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	69fa      	ldr	r2, [r7, #28]
 800a062:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	db04      	blt.n	800a076 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	6959      	ldr	r1, [r3, #20]
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4a13      	ldr	r2, [pc, #76]	; (800a0d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a086:	4413      	add	r3, r2
 800a088:	4299      	cmp	r1, r3
 800a08a:	d11c      	bne.n	800a0c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	3304      	adds	r3, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe f8d7 	bl	8008244 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09a:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d903      	bls.n	800a0aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	4a0c      	ldr	r2, [pc, #48]	; (800a0d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4a07      	ldr	r2, [pc, #28]	; (800a0d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0b8:	441a      	add	r2, r3
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fe f862 	bl	800818a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0c6:	bf00      	nop
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200007c0 	.word	0x200007c0
 800a0d4:	200007c4 	.word	0x200007c4
 800a0d8:	20000c9c 	.word	0x20000c9c

0800a0dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0e0:	4b07      	ldr	r3, [pc, #28]	; (800a100 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0ee:	3201      	adds	r2, #1
 800a0f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a0f2:	4b03      	ldr	r3, [pc, #12]	; (800a100 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
	}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	200007c0 	.word	0x200007c0

0800a104 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a10e:	4b21      	ldr	r3, [pc, #132]	; (800a194 <prvAddCurrentTaskToDelayedList+0x90>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a114:	4b20      	ldr	r3, [pc, #128]	; (800a198 <prvAddCurrentTaskToDelayedList+0x94>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3304      	adds	r3, #4
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe f892 	bl	8008244 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a126:	d10a      	bne.n	800a13e <prvAddCurrentTaskToDelayedList+0x3a>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d007      	beq.n	800a13e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a12e:	4b1a      	ldr	r3, [pc, #104]	; (800a198 <prvAddCurrentTaskToDelayedList+0x94>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	3304      	adds	r3, #4
 800a134:	4619      	mov	r1, r3
 800a136:	4819      	ldr	r0, [pc, #100]	; (800a19c <prvAddCurrentTaskToDelayedList+0x98>)
 800a138:	f7fe f827 	bl	800818a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a13c:	e026      	b.n	800a18c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4413      	add	r3, r2
 800a144:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a146:	4b14      	ldr	r3, [pc, #80]	; (800a198 <prvAddCurrentTaskToDelayedList+0x94>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	429a      	cmp	r2, r3
 800a154:	d209      	bcs.n	800a16a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a156:	4b12      	ldr	r3, [pc, #72]	; (800a1a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <prvAddCurrentTaskToDelayedList+0x94>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fe f835 	bl	80081d2 <vListInsert>
}
 800a168:	e010      	b.n	800a18c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <prvAddCurrentTaskToDelayedList+0x94>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3304      	adds	r3, #4
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f7fe f82b 	bl	80081d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	429a      	cmp	r2, r3
 800a184:	d202      	bcs.n	800a18c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a186:	4a08      	ldr	r2, [pc, #32]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	6013      	str	r3, [r2, #0]
}
 800a18c:	bf00      	nop
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000c98 	.word	0x20000c98
 800a198:	200007c0 	.word	0x200007c0
 800a19c:	20000c80 	.word	0x20000c80
 800a1a0:	20000c50 	.word	0x20000c50
 800a1a4:	20000c4c 	.word	0x20000c4c
 800a1a8:	20000cb4 	.word	0x20000cb4

0800a1ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	; 0x28
 800a1b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1b6:	f000 fb07 	bl	800a7c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	; (800a22c <xTimerCreateTimerTask+0x80>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d021      	beq.n	800a206 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1ca:	1d3a      	adds	r2, r7, #4
 800a1cc:	f107 0108 	add.w	r1, r7, #8
 800a1d0:	f107 030c 	add.w	r3, r7, #12
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fd ff91 	bl	80080fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	9202      	str	r2, [sp, #8]
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	460a      	mov	r2, r1
 800a1ec:	4910      	ldr	r1, [pc, #64]	; (800a230 <xTimerCreateTimerTask+0x84>)
 800a1ee:	4811      	ldr	r0, [pc, #68]	; (800a234 <xTimerCreateTimerTask+0x88>)
 800a1f0:	f7fe ff52 	bl	8009098 <xTaskCreateStatic>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	4a10      	ldr	r2, [pc, #64]	; (800a238 <xTimerCreateTimerTask+0x8c>)
 800a1f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <xTimerCreateTimerTask+0x8c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a202:	2301      	movs	r3, #1
 800a204:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	613b      	str	r3, [r7, #16]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a222:	697b      	ldr	r3, [r7, #20]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000cf0 	.word	0x20000cf0
 800a230:	0800c6e0 	.word	0x0800c6e0
 800a234:	0800a371 	.word	0x0800a371
 800a238:	20000cf4 	.word	0x20000cf4

0800a23c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	; 0x28
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	623b      	str	r3, [r7, #32]
}
 800a266:	bf00      	nop
 800a268:	e7fe      	b.n	800a268 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a26a:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <xTimerGenericCommand+0x98>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d02a      	beq.n	800a2c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b05      	cmp	r3, #5
 800a282:	dc18      	bgt.n	800a2b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a284:	f7ff fdb4 	bl	8009df0 <xTaskGetSchedulerState>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d109      	bne.n	800a2a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a28e:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <xTimerGenericCommand+0x98>)
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	f107 0110 	add.w	r1, r7, #16
 800a296:	2300      	movs	r3, #0
 800a298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a29a:	f7fe f9f1 	bl	8008680 <xQueueGenericSend>
 800a29e:	6278      	str	r0, [r7, #36]	; 0x24
 800a2a0:	e012      	b.n	800a2c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <xTimerGenericCommand+0x98>)
 800a2a4:	6818      	ldr	r0, [r3, #0]
 800a2a6:	f107 0110 	add.w	r1, r7, #16
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f7fe f9e7 	bl	8008680 <xQueueGenericSend>
 800a2b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a2b4:	e008      	b.n	800a2c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <xTimerGenericCommand+0x98>)
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f107 0110 	add.w	r1, r7, #16
 800a2be:	2300      	movs	r3, #0
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	f7fe fadb 	bl	800887c <xQueueGenericSendFromISR>
 800a2c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3728      	adds	r7, #40	; 0x28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000cf0 	.word	0x20000cf0

0800a2d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e2:	4b22      	ldr	r3, [pc, #136]	; (800a36c <prvProcessExpiredTimer+0x94>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fd ffa7 	bl	8008244 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d022      	beq.n	800a34a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	699a      	ldr	r2, [r3, #24]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	18d1      	adds	r1, r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	6978      	ldr	r0, [r7, #20]
 800a312:	f000 f8d1 	bl	800a4b8 <prvInsertTimerInActiveList>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01f      	beq.n	800a35c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a31c:	2300      	movs	r3, #0
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	2300      	movs	r3, #0
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	2100      	movs	r1, #0
 800a326:	6978      	ldr	r0, [r7, #20]
 800a328:	f7ff ff88 	bl	800a23c <xTimerGenericCommand>
 800a32c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d113      	bne.n	800a35c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	60fb      	str	r3, [r7, #12]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a350:	f023 0301 	bic.w	r3, r3, #1
 800a354:	b2da      	uxtb	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	6978      	ldr	r0, [r7, #20]
 800a362:	4798      	blx	r3
}
 800a364:	bf00      	nop
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20000ce8 	.word	0x20000ce8

0800a370 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a378:	f107 0308 	add.w	r3, r7, #8
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 f857 	bl	800a430 <prvGetNextExpireTime>
 800a382:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4619      	mov	r1, r3
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 f803 	bl	800a394 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a38e:	f000 f8d5 	bl	800a53c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a392:	e7f1      	b.n	800a378 <prvTimerTask+0x8>

0800a394 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a39e:	f7ff f935 	bl	800960c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3a2:	f107 0308 	add.w	r3, r7, #8
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f866 	bl	800a478 <prvSampleTimeNow>
 800a3ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d130      	bne.n	800a416 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10a      	bne.n	800a3d0 <prvProcessTimerOrBlockTask+0x3c>
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d806      	bhi.n	800a3d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3c2:	f7ff f931 	bl	8009628 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3c6:	68f9      	ldr	r1, [r7, #12]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff ff85 	bl	800a2d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3ce:	e024      	b.n	800a41a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3d6:	4b13      	ldr	r3, [pc, #76]	; (800a424 <prvProcessTimerOrBlockTask+0x90>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <prvProcessTimerOrBlockTask+0x50>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e000      	b.n	800a3e6 <prvProcessTimerOrBlockTask+0x52>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <prvProcessTimerOrBlockTask+0x94>)
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7fe fe1b 	bl	8009030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3fa:	f7ff f915 	bl	8009628 <xTaskResumeAll>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a404:	4b09      	ldr	r3, [pc, #36]	; (800a42c <prvProcessTimerOrBlockTask+0x98>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
}
 800a414:	e001      	b.n	800a41a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a416:	f7ff f907 	bl	8009628 <xTaskResumeAll>
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20000cec 	.word	0x20000cec
 800a428:	20000cf0 	.word	0x20000cf0
 800a42c:	e000ed04 	.word	0xe000ed04

0800a430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a438:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <prvGetNextExpireTime+0x44>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <prvGetNextExpireTime+0x16>
 800a442:	2201      	movs	r2, #1
 800a444:	e000      	b.n	800a448 <prvGetNextExpireTime+0x18>
 800a446:	2200      	movs	r2, #0
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d105      	bne.n	800a460 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a454:	4b07      	ldr	r3, [pc, #28]	; (800a474 <prvGetNextExpireTime+0x44>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	e001      	b.n	800a464 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a464:	68fb      	ldr	r3, [r7, #12]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20000ce8 	.word	0x20000ce8

0800a478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a480:	f7ff f970 	bl	8009764 <xTaskGetTickCount>
 800a484:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a486:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <prvSampleTimeNow+0x3c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d205      	bcs.n	800a49c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a490:	f000 f936 	bl	800a700 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	e002      	b.n	800a4a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4a2:	4a04      	ldr	r2, [pc, #16]	; (800a4b4 <prvSampleTimeNow+0x3c>)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000cf8 	.word	0x20000cf8

0800a4b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d812      	bhi.n	800a504 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	1ad2      	subs	r2, r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d302      	bcc.n	800a4f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	617b      	str	r3, [r7, #20]
 800a4f0:	e01b      	b.n	800a52a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4f2:	4b10      	ldr	r3, [pc, #64]	; (800a534 <prvInsertTimerInActiveList+0x7c>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	f7fd fe68 	bl	80081d2 <vListInsert>
 800a502:	e012      	b.n	800a52a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d206      	bcs.n	800a51a <prvInsertTimerInActiveList+0x62>
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	429a      	cmp	r2, r3
 800a512:	d302      	bcc.n	800a51a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	e007      	b.n	800a52a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a51a:	4b07      	ldr	r3, [pc, #28]	; (800a538 <prvInsertTimerInActiveList+0x80>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3304      	adds	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7fd fe54 	bl	80081d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a52a:	697b      	ldr	r3, [r7, #20]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	20000cec 	.word	0x20000cec
 800a538:	20000ce8 	.word	0x20000ce8

0800a53c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08e      	sub	sp, #56	; 0x38
 800a540:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a542:	e0ca      	b.n	800a6da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	da18      	bge.n	800a57c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a54a:	1d3b      	adds	r3, r7, #4
 800a54c:	3304      	adds	r3, #4
 800a54e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	61fb      	str	r3, [r7, #28]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a572:	6850      	ldr	r0, [r2, #4]
 800a574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a576:	6892      	ldr	r2, [r2, #8]
 800a578:	4611      	mov	r1, r2
 800a57a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f2c0 80aa 	blt.w	800a6d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d004      	beq.n	800a59a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	3304      	adds	r3, #4
 800a594:	4618      	mov	r0, r3
 800a596:	f7fd fe55 	bl	8008244 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a59a:	463b      	mov	r3, r7
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff ff6b 	bl	800a478 <prvSampleTimeNow>
 800a5a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b09      	cmp	r3, #9
 800a5a8:	f200 8097 	bhi.w	800a6da <prvProcessReceivedCommands+0x19e>
 800a5ac:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <prvProcessReceivedCommands+0x78>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a5dd 	.word	0x0800a5dd
 800a5b8:	0800a5dd 	.word	0x0800a5dd
 800a5bc:	0800a5dd 	.word	0x0800a5dd
 800a5c0:	0800a651 	.word	0x0800a651
 800a5c4:	0800a665 	.word	0x0800a665
 800a5c8:	0800a6af 	.word	0x0800a6af
 800a5cc:	0800a5dd 	.word	0x0800a5dd
 800a5d0:	0800a5dd 	.word	0x0800a5dd
 800a5d4:	0800a651 	.word	0x0800a651
 800a5d8:	0800a665 	.word	0x0800a665
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5e2:	f043 0301 	orr.w	r3, r3, #1
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	18d1      	adds	r1, r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5fc:	f7ff ff5c 	bl	800a4b8 <prvInsertTimerInActiveList>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d069      	beq.n	800a6da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a60c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d05e      	beq.n	800a6da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	441a      	add	r2, r3
 800a624:	2300      	movs	r3, #0
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	2300      	movs	r3, #0
 800a62a:	2100      	movs	r1, #0
 800a62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a62e:	f7ff fe05 	bl	800a23c <xTimerGenericCommand>
 800a632:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d14f      	bne.n	800a6da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	61bb      	str	r3, [r7, #24]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a656:	f023 0301 	bic.w	r3, r3, #1
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a662:	e03a      	b.n	800a6da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a66a:	f043 0301 	orr.w	r3, r3, #1
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	617b      	str	r3, [r7, #20]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	18d1      	adds	r1, r2, r3
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a8:	f7ff ff06 	bl	800a4b8 <prvInsertTimerInActiveList>
					break;
 800a6ac:	e015      	b.n	800a6da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6be:	f000 fbdf 	bl	800ae80 <vPortFree>
 800a6c2:	e00a      	b.n	800a6da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6ca:	f023 0301 	bic.w	r3, r3, #1
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6d6:	e000      	b.n	800a6da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6da:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <prvProcessReceivedCommands+0x1c0>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	1d39      	adds	r1, r7, #4
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe f966 	bl	80089b4 <xQueueReceive>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f47f af2a 	bne.w	800a544 <prvProcessReceivedCommands+0x8>
	}
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	3730      	adds	r7, #48	; 0x30
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000cf0 	.word	0x20000cf0

0800a700 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a706:	e048      	b.n	800a79a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a708:	4b2d      	ldr	r3, [pc, #180]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a712:	4b2b      	ldr	r3, [pc, #172]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3304      	adds	r3, #4
 800a720:	4618      	mov	r0, r3
 800a722:	f7fd fd8f 	bl	8008244 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d02e      	beq.n	800a79a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4413      	add	r3, r2
 800a744:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d90e      	bls.n	800a76c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a75a:	4b19      	ldr	r3, [pc, #100]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3304      	adds	r3, #4
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7fd fd34 	bl	80081d2 <vListInsert>
 800a76a:	e016      	b.n	800a79a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a76c:	2300      	movs	r3, #0
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	2300      	movs	r3, #0
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	2100      	movs	r1, #0
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff fd60 	bl	800a23c <xTimerGenericCommand>
 800a77c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10a      	bne.n	800a79a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	603b      	str	r3, [r7, #0]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1b1      	bne.n	800a708 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7aa:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <prvSwitchTimerLists+0xc4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a04      	ldr	r2, [pc, #16]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a7b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7b2:	4a04      	ldr	r2, [pc, #16]	; (800a7c4 <prvSwitchTimerLists+0xc4>)
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	6013      	str	r3, [r2, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20000ce8 	.word	0x20000ce8
 800a7c4:	20000cec 	.word	0x20000cec

0800a7c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7ce:	f000 f969 	bl	800aaa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7d2:	4b15      	ldr	r3, [pc, #84]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d120      	bne.n	800a81c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7da:	4814      	ldr	r0, [pc, #80]	; (800a82c <prvCheckForValidListAndQueue+0x64>)
 800a7dc:	f7fd fca8 	bl	8008130 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7e0:	4813      	ldr	r0, [pc, #76]	; (800a830 <prvCheckForValidListAndQueue+0x68>)
 800a7e2:	f7fd fca5 	bl	8008130 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7e6:	4b13      	ldr	r3, [pc, #76]	; (800a834 <prvCheckForValidListAndQueue+0x6c>)
 800a7e8:	4a10      	ldr	r2, [pc, #64]	; (800a82c <prvCheckForValidListAndQueue+0x64>)
 800a7ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7ec:	4b12      	ldr	r3, [pc, #72]	; (800a838 <prvCheckForValidListAndQueue+0x70>)
 800a7ee:	4a10      	ldr	r2, [pc, #64]	; (800a830 <prvCheckForValidListAndQueue+0x68>)
 800a7f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4b11      	ldr	r3, [pc, #68]	; (800a83c <prvCheckForValidListAndQueue+0x74>)
 800a7f8:	4a11      	ldr	r2, [pc, #68]	; (800a840 <prvCheckForValidListAndQueue+0x78>)
 800a7fa:	2110      	movs	r1, #16
 800a7fc:	200a      	movs	r0, #10
 800a7fe:	f7fd fdb3 	bl	8008368 <xQueueGenericCreateStatic>
 800a802:	4603      	mov	r3, r0
 800a804:	4a08      	ldr	r2, [pc, #32]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a808:	4b07      	ldr	r3, [pc, #28]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a810:	4b05      	ldr	r3, [pc, #20]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	490b      	ldr	r1, [pc, #44]	; (800a844 <prvCheckForValidListAndQueue+0x7c>)
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fbe0 	bl	8008fdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a81c:	f000 f972 	bl	800ab04 <vPortExitCritical>
}
 800a820:	bf00      	nop
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20000cf0 	.word	0x20000cf0
 800a82c:	20000cc0 	.word	0x20000cc0
 800a830:	20000cd4 	.word	0x20000cd4
 800a834:	20000ce8 	.word	0x20000ce8
 800a838:	20000cec 	.word	0x20000cec
 800a83c:	20000d9c 	.word	0x20000d9c
 800a840:	20000cfc 	.word	0x20000cfc
 800a844:	0800c6e8 	.word	0x0800c6e8

0800a848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3b04      	subs	r3, #4
 800a858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3b04      	subs	r3, #4
 800a866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	f023 0201 	bic.w	r2, r3, #1
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b04      	subs	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a878:	4a0c      	ldr	r2, [pc, #48]	; (800a8ac <pxPortInitialiseStack+0x64>)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b14      	subs	r3, #20
 800a882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3b04      	subs	r3, #4
 800a88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f06f 0202 	mvn.w	r2, #2
 800a896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3b20      	subs	r3, #32
 800a89c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a89e:	68fb      	ldr	r3, [r7, #12]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	0800a8b1 	.word	0x0800a8b1

0800a8b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8ba:	4b12      	ldr	r3, [pc, #72]	; (800a904 <prvTaskExitError+0x54>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8c2:	d00a      	beq.n	800a8da <prvTaskExitError+0x2a>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	60fb      	str	r3, [r7, #12]
}
 800a8d6:	bf00      	nop
 800a8d8:	e7fe      	b.n	800a8d8 <prvTaskExitError+0x28>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	60bb      	str	r3, [r7, #8]
}
 800a8ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8ee:	bf00      	nop
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0fc      	beq.n	800a8f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8f6:	bf00      	nop
 800a8f8:	bf00      	nop
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	20000018 	.word	0x20000018
	...

0800a910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <pxCurrentTCBConst2>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f380 8809 	msr	PSP, r0
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8811 	msr	BASEPRI, r0
 800a92a:	4770      	bx	lr
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst2>:
 800a930:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a938:	4808      	ldr	r0, [pc, #32]	; (800a95c <prvPortStartFirstTask+0x24>)
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f380 8808 	msr	MSP, r0
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8814 	msr	CONTROL, r0
 800a94a:	b662      	cpsie	i
 800a94c:	b661      	cpsie	f
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	df00      	svc	0
 800a958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a95a:	bf00      	nop
 800a95c:	e000ed08 	.word	0xe000ed08

0800a960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a966:	4b46      	ldr	r3, [pc, #280]	; (800aa80 <xPortStartScheduler+0x120>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a46      	ldr	r2, [pc, #280]	; (800aa84 <xPortStartScheduler+0x124>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d10a      	bne.n	800a986 <xPortStartScheduler+0x26>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	613b      	str	r3, [r7, #16]
}
 800a982:	bf00      	nop
 800a984:	e7fe      	b.n	800a984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a986:	4b3e      	ldr	r3, [pc, #248]	; (800aa80 <xPortStartScheduler+0x120>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a3f      	ldr	r2, [pc, #252]	; (800aa88 <xPortStartScheduler+0x128>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d10a      	bne.n	800a9a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	60fb      	str	r3, [r7, #12]
}
 800a9a2:	bf00      	nop
 800a9a4:	e7fe      	b.n	800a9a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9a6:	4b39      	ldr	r3, [pc, #228]	; (800aa8c <xPortStartScheduler+0x12c>)
 800a9a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	22ff      	movs	r2, #255	; 0xff
 800a9b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9c0:	78fb      	ldrb	r3, [r7, #3]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	4b31      	ldr	r3, [pc, #196]	; (800aa90 <xPortStartScheduler+0x130>)
 800a9cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9ce:	4b31      	ldr	r3, [pc, #196]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9d0:	2207      	movs	r2, #7
 800a9d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9d4:	e009      	b.n	800a9ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a9d6:	4b2f      	ldr	r3, [pc, #188]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	4a2d      	ldr	r2, [pc, #180]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9e0:	78fb      	ldrb	r3, [r7, #3]
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ea:	78fb      	ldrb	r3, [r7, #3]
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f2:	2b80      	cmp	r3, #128	; 0x80
 800a9f4:	d0ef      	beq.n	800a9d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9f6:	4b27      	ldr	r3, [pc, #156]	; (800aa94 <xPortStartScheduler+0x134>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f1c3 0307 	rsb	r3, r3, #7
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d00a      	beq.n	800aa18 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	60bb      	str	r3, [r7, #8]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa18:	4b1e      	ldr	r3, [pc, #120]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	021b      	lsls	r3, r3, #8
 800aa1e:	4a1d      	ldr	r2, [pc, #116]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa22:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa2a:	4a1a      	ldr	r2, [pc, #104]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa36:	4b18      	ldr	r3, [pc, #96]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a17      	ldr	r2, [pc, #92]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa42:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a14      	ldr	r2, [pc, #80]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa4e:	f000 f8dd 	bl	800ac0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa52:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <xPortStartScheduler+0x13c>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa58:	f000 f8fc 	bl	800ac54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa5c:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <xPortStartScheduler+0x140>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a0f      	ldr	r2, [pc, #60]	; (800aaa0 <xPortStartScheduler+0x140>)
 800aa62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa68:	f7ff ff66 	bl	800a938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa6c:	f7fe ff44 	bl	80098f8 <vTaskSwitchContext>
	prvTaskExitError();
 800aa70:	f7ff ff1e 	bl	800a8b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	e000ed00 	.word	0xe000ed00
 800aa84:	410fc271 	.word	0x410fc271
 800aa88:	410fc270 	.word	0x410fc270
 800aa8c:	e000e400 	.word	0xe000e400
 800aa90:	20000dec 	.word	0x20000dec
 800aa94:	20000df0 	.word	0x20000df0
 800aa98:	e000ed20 	.word	0xe000ed20
 800aa9c:	20000018 	.word	0x20000018
 800aaa0:	e000ef34 	.word	0xe000ef34

0800aaa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	607b      	str	r3, [r7, #4]
}
 800aabc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aabe:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <vPortEnterCritical+0x58>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3301      	adds	r3, #1
 800aac4:	4a0d      	ldr	r2, [pc, #52]	; (800aafc <vPortEnterCritical+0x58>)
 800aac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <vPortEnterCritical+0x58>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d10f      	bne.n	800aaf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <vPortEnterCritical+0x5c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	603b      	str	r3, [r7, #0]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <vPortEnterCritical+0x4a>
	}
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20000018 	.word	0x20000018
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab0a:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <vPortExitCritical+0x50>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10a      	bne.n	800ab28 <vPortExitCritical+0x24>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	607b      	str	r3, [r7, #4]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab28:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <vPortExitCritical+0x50>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <vPortExitCritical+0x50>)
 800ab30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab32:	4b08      	ldr	r3, [pc, #32]	; (800ab54 <vPortExitCritical+0x50>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d105      	bne.n	800ab46 <vPortExitCritical+0x42>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	f383 8811 	msr	BASEPRI, r3
}
 800ab44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000018 	.word	0x20000018
	...

0800ab60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab60:	f3ef 8009 	mrs	r0, PSP
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4b15      	ldr	r3, [pc, #84]	; (800abc0 <pxCurrentTCBConst>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	f01e 0f10 	tst.w	lr, #16
 800ab70:	bf08      	it	eq
 800ab72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	6010      	str	r0, [r2, #0]
 800ab7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab84:	f380 8811 	msr	BASEPRI, r0
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f7fe feb2 	bl	80098f8 <vTaskSwitchContext>
 800ab94:	f04f 0000 	mov.w	r0, #0
 800ab98:	f380 8811 	msr	BASEPRI, r0
 800ab9c:	bc09      	pop	{r0, r3}
 800ab9e:	6819      	ldr	r1, [r3, #0]
 800aba0:	6808      	ldr	r0, [r1, #0]
 800aba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba6:	f01e 0f10 	tst.w	lr, #16
 800abaa:	bf08      	it	eq
 800abac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abb0:	f380 8809 	msr	PSP, r0
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst>:
 800abc0:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
	__asm volatile
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	607b      	str	r3, [r7, #4]
}
 800abe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abe2:	f7fe fdcf 	bl	8009784 <xTaskIncrementTick>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abec:	4b06      	ldr	r3, [pc, #24]	; (800ac08 <xPortSysTickHandler+0x40>)
 800abee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f383 8811 	msr	BASEPRI, r3
}
 800abfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac10:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac16:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <vPortSetupTimerInterrupt+0x38>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <vPortSetupTimerInterrupt+0x3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a0a      	ldr	r2, [pc, #40]	; (800ac4c <vPortSetupTimerInterrupt+0x40>)
 800ac22:	fba2 2303 	umull	r2, r3, r2, r3
 800ac26:	099b      	lsrs	r3, r3, #6
 800ac28:	4a09      	ldr	r2, [pc, #36]	; (800ac50 <vPortSetupTimerInterrupt+0x44>)
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac2e:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <vPortSetupTimerInterrupt+0x34>)
 800ac30:	2207      	movs	r2, #7
 800ac32:	601a      	str	r2, [r3, #0]
}
 800ac34:	bf00      	nop
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000e010 	.word	0xe000e010
 800ac44:	e000e018 	.word	0xe000e018
 800ac48:	2000000c 	.word	0x2000000c
 800ac4c:	10624dd3 	.word	0x10624dd3
 800ac50:	e000e014 	.word	0xe000e014

0800ac54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac64 <vPortEnableVFP+0x10>
 800ac58:	6801      	ldr	r1, [r0, #0]
 800ac5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac5e:	6001      	str	r1, [r0, #0]
 800ac60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac62:	bf00      	nop
 800ac64:	e000ed88 	.word	0xe000ed88

0800ac68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac6e:	f3ef 8305 	mrs	r3, IPSR
 800ac72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b0f      	cmp	r3, #15
 800ac78:	d914      	bls.n	800aca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac7a:	4a17      	ldr	r2, [pc, #92]	; (800acd8 <vPortValidateInterruptPriority+0x70>)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac84:	4b15      	ldr	r3, [pc, #84]	; (800acdc <vPortValidateInterruptPriority+0x74>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	7afa      	ldrb	r2, [r7, #11]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d20a      	bcs.n	800aca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	607b      	str	r3, [r7, #4]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aca4:	4b0e      	ldr	r3, [pc, #56]	; (800ace0 <vPortValidateInterruptPriority+0x78>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acac:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <vPortValidateInterruptPriority+0x7c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d90a      	bls.n	800acca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	603b      	str	r3, [r7, #0]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <vPortValidateInterruptPriority+0x60>
	}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	e000e3f0 	.word	0xe000e3f0
 800acdc:	20000dec 	.word	0x20000dec
 800ace0:	e000ed0c 	.word	0xe000ed0c
 800ace4:	20000df0 	.word	0x20000df0

0800ace8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08a      	sub	sp, #40	; 0x28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acf0:	2300      	movs	r3, #0
 800acf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acf4:	f7fe fc8a 	bl	800960c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acf8:	4b5b      	ldr	r3, [pc, #364]	; (800ae68 <pvPortMalloc+0x180>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad00:	f000 f920 	bl	800af44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad04:	4b59      	ldr	r3, [pc, #356]	; (800ae6c <pvPortMalloc+0x184>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f040 8093 	bne.w	800ae38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01d      	beq.n	800ad54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad18:	2208      	movs	r2, #8
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f003 0307 	and.w	r3, r3, #7
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d014      	beq.n	800ad54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f023 0307 	bic.w	r3, r3, #7
 800ad30:	3308      	adds	r3, #8
 800ad32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <pvPortMalloc+0x6c>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	617b      	str	r3, [r7, #20]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d06e      	beq.n	800ae38 <pvPortMalloc+0x150>
 800ad5a:	4b45      	ldr	r3, [pc, #276]	; (800ae70 <pvPortMalloc+0x188>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d869      	bhi.n	800ae38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad64:	4b43      	ldr	r3, [pc, #268]	; (800ae74 <pvPortMalloc+0x18c>)
 800ad66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad68:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <pvPortMalloc+0x18c>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad6e:	e004      	b.n	800ad7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d903      	bls.n	800ad8c <pvPortMalloc+0xa4>
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1f1      	bne.n	800ad70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad8c:	4b36      	ldr	r3, [pc, #216]	; (800ae68 <pvPortMalloc+0x180>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d050      	beq.n	800ae38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2208      	movs	r2, #8
 800ad9c:	4413      	add	r3, r2
 800ad9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	1ad2      	subs	r2, r2, r3
 800adb0:	2308      	movs	r3, #8
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d91f      	bls.n	800adf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4413      	add	r3, r2
 800adbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00a      	beq.n	800ade0 <pvPortMalloc+0xf8>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	613b      	str	r3, [r7, #16]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	1ad2      	subs	r2, r2, r3
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adf2:	69b8      	ldr	r0, [r7, #24]
 800adf4:	f000 f908 	bl	800b008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adf8:	4b1d      	ldr	r3, [pc, #116]	; (800ae70 <pvPortMalloc+0x188>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	4a1b      	ldr	r2, [pc, #108]	; (800ae70 <pvPortMalloc+0x188>)
 800ae04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae06:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <pvPortMalloc+0x188>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <pvPortMalloc+0x190>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d203      	bcs.n	800ae1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae12:	4b17      	ldr	r3, [pc, #92]	; (800ae70 <pvPortMalloc+0x188>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a18      	ldr	r2, [pc, #96]	; (800ae78 <pvPortMalloc+0x190>)
 800ae18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <pvPortMalloc+0x184>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	431a      	orrs	r2, r3
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <pvPortMalloc+0x194>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3301      	adds	r3, #1
 800ae34:	4a11      	ldr	r2, [pc, #68]	; (800ae7c <pvPortMalloc+0x194>)
 800ae36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae38:	f7fe fbf6 	bl	8009628 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	f003 0307 	and.w	r3, r3, #7
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <pvPortMalloc+0x174>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	60fb      	str	r3, [r7, #12]
}
 800ae58:	bf00      	nop
 800ae5a:	e7fe      	b.n	800ae5a <pvPortMalloc+0x172>
	return pvReturn;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3728      	adds	r7, #40	; 0x28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20001d9c 	.word	0x20001d9c
 800ae6c:	20001db0 	.word	0x20001db0
 800ae70:	20001da0 	.word	0x20001da0
 800ae74:	20001d94 	.word	0x20001d94
 800ae78:	20001da4 	.word	0x20001da4
 800ae7c:	20001da8 	.word	0x20001da8

0800ae80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d04d      	beq.n	800af2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae92:	2308      	movs	r3, #8
 800ae94:	425b      	negs	r3, r3
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	4413      	add	r3, r2
 800ae9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	4b24      	ldr	r3, [pc, #144]	; (800af38 <vPortFree+0xb8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4013      	ands	r3, r2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <vPortFree+0x44>
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	60fb      	str	r3, [r7, #12]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00a      	beq.n	800aee2 <vPortFree+0x62>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	60bb      	str	r3, [r7, #8]
}
 800aede:	bf00      	nop
 800aee0:	e7fe      	b.n	800aee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	4b14      	ldr	r3, [pc, #80]	; (800af38 <vPortFree+0xb8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01e      	beq.n	800af2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11a      	bne.n	800af2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	4b0e      	ldr	r3, [pc, #56]	; (800af38 <vPortFree+0xb8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	43db      	mvns	r3, r3
 800af02:	401a      	ands	r2, r3
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af08:	f7fe fb80 	bl	800960c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <vPortFree+0xbc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4413      	add	r3, r2
 800af16:	4a09      	ldr	r2, [pc, #36]	; (800af3c <vPortFree+0xbc>)
 800af18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af1a:	6938      	ldr	r0, [r7, #16]
 800af1c:	f000 f874 	bl	800b008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af20:	4b07      	ldr	r3, [pc, #28]	; (800af40 <vPortFree+0xc0>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	4a06      	ldr	r2, [pc, #24]	; (800af40 <vPortFree+0xc0>)
 800af28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af2a:	f7fe fb7d 	bl	8009628 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af2e:	bf00      	nop
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20001db0 	.word	0x20001db0
 800af3c:	20001da0 	.word	0x20001da0
 800af40:	20001dac 	.word	0x20001dac

0800af44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af4a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800af4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af50:	4b27      	ldr	r3, [pc, #156]	; (800aff0 <prvHeapInit+0xac>)
 800af52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00c      	beq.n	800af78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	3307      	adds	r3, #7
 800af62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f023 0307 	bic.w	r3, r3, #7
 800af6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	4a1f      	ldr	r2, [pc, #124]	; (800aff0 <prvHeapInit+0xac>)
 800af74:	4413      	add	r3, r2
 800af76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af7c:	4a1d      	ldr	r2, [pc, #116]	; (800aff4 <prvHeapInit+0xb0>)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af82:	4b1c      	ldr	r3, [pc, #112]	; (800aff4 <prvHeapInit+0xb0>)
 800af84:	2200      	movs	r2, #0
 800af86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	4413      	add	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af90:	2208      	movs	r2, #8
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f023 0307 	bic.w	r3, r3, #7
 800af9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4a15      	ldr	r2, [pc, #84]	; (800aff8 <prvHeapInit+0xb4>)
 800afa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afa6:	4b14      	ldr	r3, [pc, #80]	; (800aff8 <prvHeapInit+0xb4>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2200      	movs	r2, #0
 800afac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afae:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <prvHeapInit+0xb4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	1ad2      	subs	r2, r2, r3
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afc4:	4b0c      	ldr	r3, [pc, #48]	; (800aff8 <prvHeapInit+0xb4>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	4a0a      	ldr	r2, [pc, #40]	; (800affc <prvHeapInit+0xb8>)
 800afd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	4a09      	ldr	r2, [pc, #36]	; (800b000 <prvHeapInit+0xbc>)
 800afda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afdc:	4b09      	ldr	r3, [pc, #36]	; (800b004 <prvHeapInit+0xc0>)
 800afde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afe2:	601a      	str	r2, [r3, #0]
}
 800afe4:	bf00      	nop
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	20000df4 	.word	0x20000df4
 800aff4:	20001d94 	.word	0x20001d94
 800aff8:	20001d9c 	.word	0x20001d9c
 800affc:	20001da4 	.word	0x20001da4
 800b000:	20001da0 	.word	0x20001da0
 800b004:	20001db0 	.word	0x20001db0

0800b008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b010:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <prvInsertBlockIntoFreeList+0xac>)
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	e002      	b.n	800b01c <prvInsertBlockIntoFreeList+0x14>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	429a      	cmp	r2, r3
 800b024:	d8f7      	bhi.n	800b016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	4413      	add	r3, r2
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	d108      	bne.n	800b04a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	441a      	add	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	441a      	add	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d118      	bne.n	800b090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	4b15      	ldr	r3, [pc, #84]	; (800b0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d00d      	beq.n	800b086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	441a      	add	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	e008      	b.n	800b098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b086:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	e003      	b.n	800b098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d002      	beq.n	800b0a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20001d94 	.word	0x20001d94
 800b0b8:	20001d9c 	.word	0x20001d9c

0800b0bc <atoi>:
 800b0bc:	220a      	movs	r2, #10
 800b0be:	2100      	movs	r1, #0
 800b0c0:	f000 b940 	b.w	800b344 <strtol>

0800b0c4 <__errno>:
 800b0c4:	4b01      	ldr	r3, [pc, #4]	; (800b0cc <__errno+0x8>)
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	2000001c 	.word	0x2000001c

0800b0d0 <__libc_init_array>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	4d0d      	ldr	r5, [pc, #52]	; (800b108 <__libc_init_array+0x38>)
 800b0d4:	4c0d      	ldr	r4, [pc, #52]	; (800b10c <__libc_init_array+0x3c>)
 800b0d6:	1b64      	subs	r4, r4, r5
 800b0d8:	10a4      	asrs	r4, r4, #2
 800b0da:	2600      	movs	r6, #0
 800b0dc:	42a6      	cmp	r6, r4
 800b0de:	d109      	bne.n	800b0f4 <__libc_init_array+0x24>
 800b0e0:	4d0b      	ldr	r5, [pc, #44]	; (800b110 <__libc_init_array+0x40>)
 800b0e2:	4c0c      	ldr	r4, [pc, #48]	; (800b114 <__libc_init_array+0x44>)
 800b0e4:	f001 fa9e 	bl	800c624 <_init>
 800b0e8:	1b64      	subs	r4, r4, r5
 800b0ea:	10a4      	asrs	r4, r4, #2
 800b0ec:	2600      	movs	r6, #0
 800b0ee:	42a6      	cmp	r6, r4
 800b0f0:	d105      	bne.n	800b0fe <__libc_init_array+0x2e>
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f8:	4798      	blx	r3
 800b0fa:	3601      	adds	r6, #1
 800b0fc:	e7ee      	b.n	800b0dc <__libc_init_array+0xc>
 800b0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b102:	4798      	blx	r3
 800b104:	3601      	adds	r6, #1
 800b106:	e7f2      	b.n	800b0ee <__libc_init_array+0x1e>
 800b108:	0800ca80 	.word	0x0800ca80
 800b10c:	0800ca80 	.word	0x0800ca80
 800b110:	0800ca80 	.word	0x0800ca80
 800b114:	0800ca84 	.word	0x0800ca84

0800b118 <memcpy>:
 800b118:	440a      	add	r2, r1
 800b11a:	4291      	cmp	r1, r2
 800b11c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b120:	d100      	bne.n	800b124 <memcpy+0xc>
 800b122:	4770      	bx	lr
 800b124:	b510      	push	{r4, lr}
 800b126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b12a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b12e:	4291      	cmp	r1, r2
 800b130:	d1f9      	bne.n	800b126 <memcpy+0xe>
 800b132:	bd10      	pop	{r4, pc}

0800b134 <memset>:
 800b134:	4402      	add	r2, r0
 800b136:	4603      	mov	r3, r0
 800b138:	4293      	cmp	r3, r2
 800b13a:	d100      	bne.n	800b13e <memset+0xa>
 800b13c:	4770      	bx	lr
 800b13e:	f803 1b01 	strb.w	r1, [r3], #1
 800b142:	e7f9      	b.n	800b138 <memset+0x4>

0800b144 <siprintf>:
 800b144:	b40e      	push	{r1, r2, r3}
 800b146:	b500      	push	{lr}
 800b148:	b09c      	sub	sp, #112	; 0x70
 800b14a:	ab1d      	add	r3, sp, #116	; 0x74
 800b14c:	9002      	str	r0, [sp, #8]
 800b14e:	9006      	str	r0, [sp, #24]
 800b150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b154:	4809      	ldr	r0, [pc, #36]	; (800b17c <siprintf+0x38>)
 800b156:	9107      	str	r1, [sp, #28]
 800b158:	9104      	str	r1, [sp, #16]
 800b15a:	4909      	ldr	r1, [pc, #36]	; (800b180 <siprintf+0x3c>)
 800b15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b160:	9105      	str	r1, [sp, #20]
 800b162:	6800      	ldr	r0, [r0, #0]
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	a902      	add	r1, sp, #8
 800b168:	f000 fa34 	bl	800b5d4 <_svfiprintf_r>
 800b16c:	9b02      	ldr	r3, [sp, #8]
 800b16e:	2200      	movs	r2, #0
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	b01c      	add	sp, #112	; 0x70
 800b174:	f85d eb04 	ldr.w	lr, [sp], #4
 800b178:	b003      	add	sp, #12
 800b17a:	4770      	bx	lr
 800b17c:	2000001c 	.word	0x2000001c
 800b180:	ffff0208 	.word	0xffff0208

0800b184 <strtok>:
 800b184:	4b16      	ldr	r3, [pc, #88]	; (800b1e0 <strtok+0x5c>)
 800b186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b188:	681e      	ldr	r6, [r3, #0]
 800b18a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b18c:	4605      	mov	r5, r0
 800b18e:	b9fc      	cbnz	r4, 800b1d0 <strtok+0x4c>
 800b190:	2050      	movs	r0, #80	; 0x50
 800b192:	9101      	str	r1, [sp, #4]
 800b194:	f000 f910 	bl	800b3b8 <malloc>
 800b198:	9901      	ldr	r1, [sp, #4]
 800b19a:	65b0      	str	r0, [r6, #88]	; 0x58
 800b19c:	4602      	mov	r2, r0
 800b19e:	b920      	cbnz	r0, 800b1aa <strtok+0x26>
 800b1a0:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <strtok+0x60>)
 800b1a2:	4811      	ldr	r0, [pc, #68]	; (800b1e8 <strtok+0x64>)
 800b1a4:	2157      	movs	r1, #87	; 0x57
 800b1a6:	f000 f8d7 	bl	800b358 <__assert_func>
 800b1aa:	e9c0 4400 	strd	r4, r4, [r0]
 800b1ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b1b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b1b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b1ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b1be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b1c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b1c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b1ca:	6184      	str	r4, [r0, #24]
 800b1cc:	7704      	strb	r4, [r0, #28]
 800b1ce:	6244      	str	r4, [r0, #36]	; 0x24
 800b1d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	b002      	add	sp, #8
 800b1d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1dc:	f000 b806 	b.w	800b1ec <__strtok_r>
 800b1e0:	2000001c 	.word	0x2000001c
 800b1e4:	0800c830 	.word	0x0800c830
 800b1e8:	0800c847 	.word	0x0800c847

0800b1ec <__strtok_r>:
 800b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ee:	b908      	cbnz	r0, 800b1f4 <__strtok_r+0x8>
 800b1f0:	6810      	ldr	r0, [r2, #0]
 800b1f2:	b188      	cbz	r0, 800b218 <__strtok_r+0x2c>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b202:	b91e      	cbnz	r6, 800b20c <__strtok_r+0x20>
 800b204:	b965      	cbnz	r5, 800b220 <__strtok_r+0x34>
 800b206:	6015      	str	r5, [r2, #0]
 800b208:	4628      	mov	r0, r5
 800b20a:	e005      	b.n	800b218 <__strtok_r+0x2c>
 800b20c:	42b5      	cmp	r5, r6
 800b20e:	d1f6      	bne.n	800b1fe <__strtok_r+0x12>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1f0      	bne.n	800b1f6 <__strtok_r+0xa>
 800b214:	6014      	str	r4, [r2, #0]
 800b216:	7003      	strb	r3, [r0, #0]
 800b218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b21a:	461c      	mov	r4, r3
 800b21c:	e00c      	b.n	800b238 <__strtok_r+0x4c>
 800b21e:	b915      	cbnz	r5, 800b226 <__strtok_r+0x3a>
 800b220:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b224:	460e      	mov	r6, r1
 800b226:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b22a:	42ab      	cmp	r3, r5
 800b22c:	d1f7      	bne.n	800b21e <__strtok_r+0x32>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0f3      	beq.n	800b21a <__strtok_r+0x2e>
 800b232:	2300      	movs	r3, #0
 800b234:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b238:	6014      	str	r4, [r2, #0]
 800b23a:	e7ed      	b.n	800b218 <__strtok_r+0x2c>

0800b23c <_strtol_l.isra.0>:
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b242:	d001      	beq.n	800b248 <_strtol_l.isra.0+0xc>
 800b244:	2b24      	cmp	r3, #36	; 0x24
 800b246:	d906      	bls.n	800b256 <_strtol_l.isra.0+0x1a>
 800b248:	f7ff ff3c 	bl	800b0c4 <__errno>
 800b24c:	2316      	movs	r3, #22
 800b24e:	6003      	str	r3, [r0, #0]
 800b250:	2000      	movs	r0, #0
 800b252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b256:	4f3a      	ldr	r7, [pc, #232]	; (800b340 <_strtol_l.isra.0+0x104>)
 800b258:	468e      	mov	lr, r1
 800b25a:	4676      	mov	r6, lr
 800b25c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b260:	5de5      	ldrb	r5, [r4, r7]
 800b262:	f015 0508 	ands.w	r5, r5, #8
 800b266:	d1f8      	bne.n	800b25a <_strtol_l.isra.0+0x1e>
 800b268:	2c2d      	cmp	r4, #45	; 0x2d
 800b26a:	d134      	bne.n	800b2d6 <_strtol_l.isra.0+0x9a>
 800b26c:	f89e 4000 	ldrb.w	r4, [lr]
 800b270:	f04f 0801 	mov.w	r8, #1
 800b274:	f106 0e02 	add.w	lr, r6, #2
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d05c      	beq.n	800b336 <_strtol_l.isra.0+0xfa>
 800b27c:	2b10      	cmp	r3, #16
 800b27e:	d10c      	bne.n	800b29a <_strtol_l.isra.0+0x5e>
 800b280:	2c30      	cmp	r4, #48	; 0x30
 800b282:	d10a      	bne.n	800b29a <_strtol_l.isra.0+0x5e>
 800b284:	f89e 4000 	ldrb.w	r4, [lr]
 800b288:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b28c:	2c58      	cmp	r4, #88	; 0x58
 800b28e:	d14d      	bne.n	800b32c <_strtol_l.isra.0+0xf0>
 800b290:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b294:	2310      	movs	r3, #16
 800b296:	f10e 0e02 	add.w	lr, lr, #2
 800b29a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b29e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	fbbc f9f3 	udiv	r9, ip, r3
 800b2a8:	4635      	mov	r5, r6
 800b2aa:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b2b2:	2f09      	cmp	r7, #9
 800b2b4:	d818      	bhi.n	800b2e8 <_strtol_l.isra.0+0xac>
 800b2b6:	463c      	mov	r4, r7
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	dd24      	ble.n	800b306 <_strtol_l.isra.0+0xca>
 800b2bc:	2e00      	cmp	r6, #0
 800b2be:	db1f      	blt.n	800b300 <_strtol_l.isra.0+0xc4>
 800b2c0:	45a9      	cmp	r9, r5
 800b2c2:	d31d      	bcc.n	800b300 <_strtol_l.isra.0+0xc4>
 800b2c4:	d101      	bne.n	800b2ca <_strtol_l.isra.0+0x8e>
 800b2c6:	45a2      	cmp	sl, r4
 800b2c8:	db1a      	blt.n	800b300 <_strtol_l.isra.0+0xc4>
 800b2ca:	fb05 4503 	mla	r5, r5, r3, r4
 800b2ce:	2601      	movs	r6, #1
 800b2d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b2d4:	e7eb      	b.n	800b2ae <_strtol_l.isra.0+0x72>
 800b2d6:	2c2b      	cmp	r4, #43	; 0x2b
 800b2d8:	bf08      	it	eq
 800b2da:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b2de:	46a8      	mov	r8, r5
 800b2e0:	bf08      	it	eq
 800b2e2:	f106 0e02 	addeq.w	lr, r6, #2
 800b2e6:	e7c7      	b.n	800b278 <_strtol_l.isra.0+0x3c>
 800b2e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b2ec:	2f19      	cmp	r7, #25
 800b2ee:	d801      	bhi.n	800b2f4 <_strtol_l.isra.0+0xb8>
 800b2f0:	3c37      	subs	r4, #55	; 0x37
 800b2f2:	e7e1      	b.n	800b2b8 <_strtol_l.isra.0+0x7c>
 800b2f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b2f8:	2f19      	cmp	r7, #25
 800b2fa:	d804      	bhi.n	800b306 <_strtol_l.isra.0+0xca>
 800b2fc:	3c57      	subs	r4, #87	; 0x57
 800b2fe:	e7db      	b.n	800b2b8 <_strtol_l.isra.0+0x7c>
 800b300:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b304:	e7e4      	b.n	800b2d0 <_strtol_l.isra.0+0x94>
 800b306:	2e00      	cmp	r6, #0
 800b308:	da05      	bge.n	800b316 <_strtol_l.isra.0+0xda>
 800b30a:	2322      	movs	r3, #34	; 0x22
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	4665      	mov	r5, ip
 800b310:	b942      	cbnz	r2, 800b324 <_strtol_l.isra.0+0xe8>
 800b312:	4628      	mov	r0, r5
 800b314:	e79d      	b.n	800b252 <_strtol_l.isra.0+0x16>
 800b316:	f1b8 0f00 	cmp.w	r8, #0
 800b31a:	d000      	beq.n	800b31e <_strtol_l.isra.0+0xe2>
 800b31c:	426d      	negs	r5, r5
 800b31e:	2a00      	cmp	r2, #0
 800b320:	d0f7      	beq.n	800b312 <_strtol_l.isra.0+0xd6>
 800b322:	b10e      	cbz	r6, 800b328 <_strtol_l.isra.0+0xec>
 800b324:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800b328:	6011      	str	r1, [r2, #0]
 800b32a:	e7f2      	b.n	800b312 <_strtol_l.isra.0+0xd6>
 800b32c:	2430      	movs	r4, #48	; 0x30
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1b3      	bne.n	800b29a <_strtol_l.isra.0+0x5e>
 800b332:	2308      	movs	r3, #8
 800b334:	e7b1      	b.n	800b29a <_strtol_l.isra.0+0x5e>
 800b336:	2c30      	cmp	r4, #48	; 0x30
 800b338:	d0a4      	beq.n	800b284 <_strtol_l.isra.0+0x48>
 800b33a:	230a      	movs	r3, #10
 800b33c:	e7ad      	b.n	800b29a <_strtol_l.isra.0+0x5e>
 800b33e:	bf00      	nop
 800b340:	0800c8e5 	.word	0x0800c8e5

0800b344 <strtol>:
 800b344:	4613      	mov	r3, r2
 800b346:	460a      	mov	r2, r1
 800b348:	4601      	mov	r1, r0
 800b34a:	4802      	ldr	r0, [pc, #8]	; (800b354 <strtol+0x10>)
 800b34c:	6800      	ldr	r0, [r0, #0]
 800b34e:	f7ff bf75 	b.w	800b23c <_strtol_l.isra.0>
 800b352:	bf00      	nop
 800b354:	2000001c 	.word	0x2000001c

0800b358 <__assert_func>:
 800b358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b35a:	4614      	mov	r4, r2
 800b35c:	461a      	mov	r2, r3
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <__assert_func+0x2c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4605      	mov	r5, r0
 800b364:	68d8      	ldr	r0, [r3, #12]
 800b366:	b14c      	cbz	r4, 800b37c <__assert_func+0x24>
 800b368:	4b07      	ldr	r3, [pc, #28]	; (800b388 <__assert_func+0x30>)
 800b36a:	9100      	str	r1, [sp, #0]
 800b36c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b370:	4906      	ldr	r1, [pc, #24]	; (800b38c <__assert_func+0x34>)
 800b372:	462b      	mov	r3, r5
 800b374:	f000 f80e 	bl	800b394 <fiprintf>
 800b378:	f000 fdea 	bl	800bf50 <abort>
 800b37c:	4b04      	ldr	r3, [pc, #16]	; (800b390 <__assert_func+0x38>)
 800b37e:	461c      	mov	r4, r3
 800b380:	e7f3      	b.n	800b36a <__assert_func+0x12>
 800b382:	bf00      	nop
 800b384:	2000001c 	.word	0x2000001c
 800b388:	0800c8a8 	.word	0x0800c8a8
 800b38c:	0800c8b5 	.word	0x0800c8b5
 800b390:	0800c8e3 	.word	0x0800c8e3

0800b394 <fiprintf>:
 800b394:	b40e      	push	{r1, r2, r3}
 800b396:	b503      	push	{r0, r1, lr}
 800b398:	4601      	mov	r1, r0
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	4805      	ldr	r0, [pc, #20]	; (800b3b4 <fiprintf+0x20>)
 800b39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a2:	6800      	ldr	r0, [r0, #0]
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	f000 fa3f 	bl	800b828 <_vfiprintf_r>
 800b3aa:	b002      	add	sp, #8
 800b3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3b0:	b003      	add	sp, #12
 800b3b2:	4770      	bx	lr
 800b3b4:	2000001c 	.word	0x2000001c

0800b3b8 <malloc>:
 800b3b8:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <malloc+0xc>)
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	f000 b853 	b.w	800b468 <_malloc_r>
 800b3c2:	bf00      	nop
 800b3c4:	2000001c 	.word	0x2000001c

0800b3c8 <_free_r>:
 800b3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	d048      	beq.n	800b460 <_free_r+0x98>
 800b3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d2:	9001      	str	r0, [sp, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b3da:	bfb8      	it	lt
 800b3dc:	18e4      	addlt	r4, r4, r3
 800b3de:	f000 fff7 	bl	800c3d0 <__malloc_lock>
 800b3e2:	4a20      	ldr	r2, [pc, #128]	; (800b464 <_free_r+0x9c>)
 800b3e4:	9801      	ldr	r0, [sp, #4]
 800b3e6:	6813      	ldr	r3, [r2, #0]
 800b3e8:	4615      	mov	r5, r2
 800b3ea:	b933      	cbnz	r3, 800b3fa <_free_r+0x32>
 800b3ec:	6063      	str	r3, [r4, #4]
 800b3ee:	6014      	str	r4, [r2, #0]
 800b3f0:	b003      	add	sp, #12
 800b3f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3f6:	f000 bff1 	b.w	800c3dc <__malloc_unlock>
 800b3fa:	42a3      	cmp	r3, r4
 800b3fc:	d90b      	bls.n	800b416 <_free_r+0x4e>
 800b3fe:	6821      	ldr	r1, [r4, #0]
 800b400:	1862      	adds	r2, r4, r1
 800b402:	4293      	cmp	r3, r2
 800b404:	bf04      	itt	eq
 800b406:	681a      	ldreq	r2, [r3, #0]
 800b408:	685b      	ldreq	r3, [r3, #4]
 800b40a:	6063      	str	r3, [r4, #4]
 800b40c:	bf04      	itt	eq
 800b40e:	1852      	addeq	r2, r2, r1
 800b410:	6022      	streq	r2, [r4, #0]
 800b412:	602c      	str	r4, [r5, #0]
 800b414:	e7ec      	b.n	800b3f0 <_free_r+0x28>
 800b416:	461a      	mov	r2, r3
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	b10b      	cbz	r3, 800b420 <_free_r+0x58>
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	d9fa      	bls.n	800b416 <_free_r+0x4e>
 800b420:	6811      	ldr	r1, [r2, #0]
 800b422:	1855      	adds	r5, r2, r1
 800b424:	42a5      	cmp	r5, r4
 800b426:	d10b      	bne.n	800b440 <_free_r+0x78>
 800b428:	6824      	ldr	r4, [r4, #0]
 800b42a:	4421      	add	r1, r4
 800b42c:	1854      	adds	r4, r2, r1
 800b42e:	42a3      	cmp	r3, r4
 800b430:	6011      	str	r1, [r2, #0]
 800b432:	d1dd      	bne.n	800b3f0 <_free_r+0x28>
 800b434:	681c      	ldr	r4, [r3, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	6053      	str	r3, [r2, #4]
 800b43a:	4421      	add	r1, r4
 800b43c:	6011      	str	r1, [r2, #0]
 800b43e:	e7d7      	b.n	800b3f0 <_free_r+0x28>
 800b440:	d902      	bls.n	800b448 <_free_r+0x80>
 800b442:	230c      	movs	r3, #12
 800b444:	6003      	str	r3, [r0, #0]
 800b446:	e7d3      	b.n	800b3f0 <_free_r+0x28>
 800b448:	6825      	ldr	r5, [r4, #0]
 800b44a:	1961      	adds	r1, r4, r5
 800b44c:	428b      	cmp	r3, r1
 800b44e:	bf04      	itt	eq
 800b450:	6819      	ldreq	r1, [r3, #0]
 800b452:	685b      	ldreq	r3, [r3, #4]
 800b454:	6063      	str	r3, [r4, #4]
 800b456:	bf04      	itt	eq
 800b458:	1949      	addeq	r1, r1, r5
 800b45a:	6021      	streq	r1, [r4, #0]
 800b45c:	6054      	str	r4, [r2, #4]
 800b45e:	e7c7      	b.n	800b3f0 <_free_r+0x28>
 800b460:	b003      	add	sp, #12
 800b462:	bd30      	pop	{r4, r5, pc}
 800b464:	20001db4 	.word	0x20001db4

0800b468 <_malloc_r>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	1ccd      	adds	r5, r1, #3
 800b46c:	f025 0503 	bic.w	r5, r5, #3
 800b470:	3508      	adds	r5, #8
 800b472:	2d0c      	cmp	r5, #12
 800b474:	bf38      	it	cc
 800b476:	250c      	movcc	r5, #12
 800b478:	2d00      	cmp	r5, #0
 800b47a:	4606      	mov	r6, r0
 800b47c:	db01      	blt.n	800b482 <_malloc_r+0x1a>
 800b47e:	42a9      	cmp	r1, r5
 800b480:	d903      	bls.n	800b48a <_malloc_r+0x22>
 800b482:	230c      	movs	r3, #12
 800b484:	6033      	str	r3, [r6, #0]
 800b486:	2000      	movs	r0, #0
 800b488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b48a:	f000 ffa1 	bl	800c3d0 <__malloc_lock>
 800b48e:	4921      	ldr	r1, [pc, #132]	; (800b514 <_malloc_r+0xac>)
 800b490:	680a      	ldr	r2, [r1, #0]
 800b492:	4614      	mov	r4, r2
 800b494:	b99c      	cbnz	r4, 800b4be <_malloc_r+0x56>
 800b496:	4f20      	ldr	r7, [pc, #128]	; (800b518 <_malloc_r+0xb0>)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	b923      	cbnz	r3, 800b4a6 <_malloc_r+0x3e>
 800b49c:	4621      	mov	r1, r4
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f000 fc86 	bl	800bdb0 <_sbrk_r>
 800b4a4:	6038      	str	r0, [r7, #0]
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f000 fc81 	bl	800bdb0 <_sbrk_r>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	d123      	bne.n	800b4fa <_malloc_r+0x92>
 800b4b2:	230c      	movs	r3, #12
 800b4b4:	6033      	str	r3, [r6, #0]
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	f000 ff90 	bl	800c3dc <__malloc_unlock>
 800b4bc:	e7e3      	b.n	800b486 <_malloc_r+0x1e>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	1b5b      	subs	r3, r3, r5
 800b4c2:	d417      	bmi.n	800b4f4 <_malloc_r+0x8c>
 800b4c4:	2b0b      	cmp	r3, #11
 800b4c6:	d903      	bls.n	800b4d0 <_malloc_r+0x68>
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	441c      	add	r4, r3
 800b4cc:	6025      	str	r5, [r4, #0]
 800b4ce:	e004      	b.n	800b4da <_malloc_r+0x72>
 800b4d0:	6863      	ldr	r3, [r4, #4]
 800b4d2:	42a2      	cmp	r2, r4
 800b4d4:	bf0c      	ite	eq
 800b4d6:	600b      	streq	r3, [r1, #0]
 800b4d8:	6053      	strne	r3, [r2, #4]
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f000 ff7e 	bl	800c3dc <__malloc_unlock>
 800b4e0:	f104 000b 	add.w	r0, r4, #11
 800b4e4:	1d23      	adds	r3, r4, #4
 800b4e6:	f020 0007 	bic.w	r0, r0, #7
 800b4ea:	1ac2      	subs	r2, r0, r3
 800b4ec:	d0cc      	beq.n	800b488 <_malloc_r+0x20>
 800b4ee:	1a1b      	subs	r3, r3, r0
 800b4f0:	50a3      	str	r3, [r4, r2]
 800b4f2:	e7c9      	b.n	800b488 <_malloc_r+0x20>
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	6864      	ldr	r4, [r4, #4]
 800b4f8:	e7cc      	b.n	800b494 <_malloc_r+0x2c>
 800b4fa:	1cc4      	adds	r4, r0, #3
 800b4fc:	f024 0403 	bic.w	r4, r4, #3
 800b500:	42a0      	cmp	r0, r4
 800b502:	d0e3      	beq.n	800b4cc <_malloc_r+0x64>
 800b504:	1a21      	subs	r1, r4, r0
 800b506:	4630      	mov	r0, r6
 800b508:	f000 fc52 	bl	800bdb0 <_sbrk_r>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d1dd      	bne.n	800b4cc <_malloc_r+0x64>
 800b510:	e7cf      	b.n	800b4b2 <_malloc_r+0x4a>
 800b512:	bf00      	nop
 800b514:	20001db4 	.word	0x20001db4
 800b518:	20001db8 	.word	0x20001db8

0800b51c <__ssputs_r>:
 800b51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b520:	688e      	ldr	r6, [r1, #8]
 800b522:	429e      	cmp	r6, r3
 800b524:	4682      	mov	sl, r0
 800b526:	460c      	mov	r4, r1
 800b528:	4690      	mov	r8, r2
 800b52a:	461f      	mov	r7, r3
 800b52c:	d838      	bhi.n	800b5a0 <__ssputs_r+0x84>
 800b52e:	898a      	ldrh	r2, [r1, #12]
 800b530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b534:	d032      	beq.n	800b59c <__ssputs_r+0x80>
 800b536:	6825      	ldr	r5, [r4, #0]
 800b538:	6909      	ldr	r1, [r1, #16]
 800b53a:	eba5 0901 	sub.w	r9, r5, r1
 800b53e:	6965      	ldr	r5, [r4, #20]
 800b540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b548:	3301      	adds	r3, #1
 800b54a:	444b      	add	r3, r9
 800b54c:	106d      	asrs	r5, r5, #1
 800b54e:	429d      	cmp	r5, r3
 800b550:	bf38      	it	cc
 800b552:	461d      	movcc	r5, r3
 800b554:	0553      	lsls	r3, r2, #21
 800b556:	d531      	bpl.n	800b5bc <__ssputs_r+0xa0>
 800b558:	4629      	mov	r1, r5
 800b55a:	f7ff ff85 	bl	800b468 <_malloc_r>
 800b55e:	4606      	mov	r6, r0
 800b560:	b950      	cbnz	r0, 800b578 <__ssputs_r+0x5c>
 800b562:	230c      	movs	r3, #12
 800b564:	f8ca 3000 	str.w	r3, [sl]
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56e:	81a3      	strh	r3, [r4, #12]
 800b570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b578:	6921      	ldr	r1, [r4, #16]
 800b57a:	464a      	mov	r2, r9
 800b57c:	f7ff fdcc 	bl	800b118 <memcpy>
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b58a:	81a3      	strh	r3, [r4, #12]
 800b58c:	6126      	str	r6, [r4, #16]
 800b58e:	6165      	str	r5, [r4, #20]
 800b590:	444e      	add	r6, r9
 800b592:	eba5 0509 	sub.w	r5, r5, r9
 800b596:	6026      	str	r6, [r4, #0]
 800b598:	60a5      	str	r5, [r4, #8]
 800b59a:	463e      	mov	r6, r7
 800b59c:	42be      	cmp	r6, r7
 800b59e:	d900      	bls.n	800b5a2 <__ssputs_r+0x86>
 800b5a0:	463e      	mov	r6, r7
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	6820      	ldr	r0, [r4, #0]
 800b5a6:	4641      	mov	r1, r8
 800b5a8:	f000 fef8 	bl	800c39c <memmove>
 800b5ac:	68a3      	ldr	r3, [r4, #8]
 800b5ae:	6822      	ldr	r2, [r4, #0]
 800b5b0:	1b9b      	subs	r3, r3, r6
 800b5b2:	4432      	add	r2, r6
 800b5b4:	60a3      	str	r3, [r4, #8]
 800b5b6:	6022      	str	r2, [r4, #0]
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	e7db      	b.n	800b574 <__ssputs_r+0x58>
 800b5bc:	462a      	mov	r2, r5
 800b5be:	f000 ff13 	bl	800c3e8 <_realloc_r>
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d1e1      	bne.n	800b58c <__ssputs_r+0x70>
 800b5c8:	6921      	ldr	r1, [r4, #16]
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	f7ff fefc 	bl	800b3c8 <_free_r>
 800b5d0:	e7c7      	b.n	800b562 <__ssputs_r+0x46>
	...

0800b5d4 <_svfiprintf_r>:
 800b5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d8:	4698      	mov	r8, r3
 800b5da:	898b      	ldrh	r3, [r1, #12]
 800b5dc:	061b      	lsls	r3, r3, #24
 800b5de:	b09d      	sub	sp, #116	; 0x74
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	460d      	mov	r5, r1
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	d50e      	bpl.n	800b606 <_svfiprintf_r+0x32>
 800b5e8:	690b      	ldr	r3, [r1, #16]
 800b5ea:	b963      	cbnz	r3, 800b606 <_svfiprintf_r+0x32>
 800b5ec:	2140      	movs	r1, #64	; 0x40
 800b5ee:	f7ff ff3b 	bl	800b468 <_malloc_r>
 800b5f2:	6028      	str	r0, [r5, #0]
 800b5f4:	6128      	str	r0, [r5, #16]
 800b5f6:	b920      	cbnz	r0, 800b602 <_svfiprintf_r+0x2e>
 800b5f8:	230c      	movs	r3, #12
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b600:	e0d1      	b.n	800b7a6 <_svfiprintf_r+0x1d2>
 800b602:	2340      	movs	r3, #64	; 0x40
 800b604:	616b      	str	r3, [r5, #20]
 800b606:	2300      	movs	r3, #0
 800b608:	9309      	str	r3, [sp, #36]	; 0x24
 800b60a:	2320      	movs	r3, #32
 800b60c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b610:	f8cd 800c 	str.w	r8, [sp, #12]
 800b614:	2330      	movs	r3, #48	; 0x30
 800b616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b7c0 <_svfiprintf_r+0x1ec>
 800b61a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b61e:	f04f 0901 	mov.w	r9, #1
 800b622:	4623      	mov	r3, r4
 800b624:	469a      	mov	sl, r3
 800b626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b62a:	b10a      	cbz	r2, 800b630 <_svfiprintf_r+0x5c>
 800b62c:	2a25      	cmp	r2, #37	; 0x25
 800b62e:	d1f9      	bne.n	800b624 <_svfiprintf_r+0x50>
 800b630:	ebba 0b04 	subs.w	fp, sl, r4
 800b634:	d00b      	beq.n	800b64e <_svfiprintf_r+0x7a>
 800b636:	465b      	mov	r3, fp
 800b638:	4622      	mov	r2, r4
 800b63a:	4629      	mov	r1, r5
 800b63c:	4638      	mov	r0, r7
 800b63e:	f7ff ff6d 	bl	800b51c <__ssputs_r>
 800b642:	3001      	adds	r0, #1
 800b644:	f000 80aa 	beq.w	800b79c <_svfiprintf_r+0x1c8>
 800b648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b64a:	445a      	add	r2, fp
 800b64c:	9209      	str	r2, [sp, #36]	; 0x24
 800b64e:	f89a 3000 	ldrb.w	r3, [sl]
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 80a2 	beq.w	800b79c <_svfiprintf_r+0x1c8>
 800b658:	2300      	movs	r3, #0
 800b65a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b65e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b662:	f10a 0a01 	add.w	sl, sl, #1
 800b666:	9304      	str	r3, [sp, #16]
 800b668:	9307      	str	r3, [sp, #28]
 800b66a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b66e:	931a      	str	r3, [sp, #104]	; 0x68
 800b670:	4654      	mov	r4, sl
 800b672:	2205      	movs	r2, #5
 800b674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b678:	4851      	ldr	r0, [pc, #324]	; (800b7c0 <_svfiprintf_r+0x1ec>)
 800b67a:	f7f4 fdb1 	bl	80001e0 <memchr>
 800b67e:	9a04      	ldr	r2, [sp, #16]
 800b680:	b9d8      	cbnz	r0, 800b6ba <_svfiprintf_r+0xe6>
 800b682:	06d0      	lsls	r0, r2, #27
 800b684:	bf44      	itt	mi
 800b686:	2320      	movmi	r3, #32
 800b688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b68c:	0711      	lsls	r1, r2, #28
 800b68e:	bf44      	itt	mi
 800b690:	232b      	movmi	r3, #43	; 0x2b
 800b692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b696:	f89a 3000 	ldrb.w	r3, [sl]
 800b69a:	2b2a      	cmp	r3, #42	; 0x2a
 800b69c:	d015      	beq.n	800b6ca <_svfiprintf_r+0xf6>
 800b69e:	9a07      	ldr	r2, [sp, #28]
 800b6a0:	4654      	mov	r4, sl
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	f04f 0c0a 	mov.w	ip, #10
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ae:	3b30      	subs	r3, #48	; 0x30
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d94e      	bls.n	800b752 <_svfiprintf_r+0x17e>
 800b6b4:	b1b0      	cbz	r0, 800b6e4 <_svfiprintf_r+0x110>
 800b6b6:	9207      	str	r2, [sp, #28]
 800b6b8:	e014      	b.n	800b6e4 <_svfiprintf_r+0x110>
 800b6ba:	eba0 0308 	sub.w	r3, r0, r8
 800b6be:	fa09 f303 	lsl.w	r3, r9, r3
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	46a2      	mov	sl, r4
 800b6c8:	e7d2      	b.n	800b670 <_svfiprintf_r+0x9c>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	1d19      	adds	r1, r3, #4
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	9103      	str	r1, [sp, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	bfbb      	ittet	lt
 800b6d6:	425b      	neglt	r3, r3
 800b6d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b6dc:	9307      	strge	r3, [sp, #28]
 800b6de:	9307      	strlt	r3, [sp, #28]
 800b6e0:	bfb8      	it	lt
 800b6e2:	9204      	strlt	r2, [sp, #16]
 800b6e4:	7823      	ldrb	r3, [r4, #0]
 800b6e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b6e8:	d10c      	bne.n	800b704 <_svfiprintf_r+0x130>
 800b6ea:	7863      	ldrb	r3, [r4, #1]
 800b6ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ee:	d135      	bne.n	800b75c <_svfiprintf_r+0x188>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	1d1a      	adds	r2, r3, #4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	9203      	str	r2, [sp, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	bfb8      	it	lt
 800b6fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b700:	3402      	adds	r4, #2
 800b702:	9305      	str	r3, [sp, #20]
 800b704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7d0 <_svfiprintf_r+0x1fc>
 800b708:	7821      	ldrb	r1, [r4, #0]
 800b70a:	2203      	movs	r2, #3
 800b70c:	4650      	mov	r0, sl
 800b70e:	f7f4 fd67 	bl	80001e0 <memchr>
 800b712:	b140      	cbz	r0, 800b726 <_svfiprintf_r+0x152>
 800b714:	2340      	movs	r3, #64	; 0x40
 800b716:	eba0 000a 	sub.w	r0, r0, sl
 800b71a:	fa03 f000 	lsl.w	r0, r3, r0
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	4303      	orrs	r3, r0
 800b722:	3401      	adds	r4, #1
 800b724:	9304      	str	r3, [sp, #16]
 800b726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72a:	4826      	ldr	r0, [pc, #152]	; (800b7c4 <_svfiprintf_r+0x1f0>)
 800b72c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b730:	2206      	movs	r2, #6
 800b732:	f7f4 fd55 	bl	80001e0 <memchr>
 800b736:	2800      	cmp	r0, #0
 800b738:	d038      	beq.n	800b7ac <_svfiprintf_r+0x1d8>
 800b73a:	4b23      	ldr	r3, [pc, #140]	; (800b7c8 <_svfiprintf_r+0x1f4>)
 800b73c:	bb1b      	cbnz	r3, 800b786 <_svfiprintf_r+0x1b2>
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	3307      	adds	r3, #7
 800b742:	f023 0307 	bic.w	r3, r3, #7
 800b746:	3308      	adds	r3, #8
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74c:	4433      	add	r3, r6
 800b74e:	9309      	str	r3, [sp, #36]	; 0x24
 800b750:	e767      	b.n	800b622 <_svfiprintf_r+0x4e>
 800b752:	fb0c 3202 	mla	r2, ip, r2, r3
 800b756:	460c      	mov	r4, r1
 800b758:	2001      	movs	r0, #1
 800b75a:	e7a5      	b.n	800b6a8 <_svfiprintf_r+0xd4>
 800b75c:	2300      	movs	r3, #0
 800b75e:	3401      	adds	r4, #1
 800b760:	9305      	str	r3, [sp, #20]
 800b762:	4619      	mov	r1, r3
 800b764:	f04f 0c0a 	mov.w	ip, #10
 800b768:	4620      	mov	r0, r4
 800b76a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b76e:	3a30      	subs	r2, #48	; 0x30
 800b770:	2a09      	cmp	r2, #9
 800b772:	d903      	bls.n	800b77c <_svfiprintf_r+0x1a8>
 800b774:	2b00      	cmp	r3, #0
 800b776:	d0c5      	beq.n	800b704 <_svfiprintf_r+0x130>
 800b778:	9105      	str	r1, [sp, #20]
 800b77a:	e7c3      	b.n	800b704 <_svfiprintf_r+0x130>
 800b77c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b780:	4604      	mov	r4, r0
 800b782:	2301      	movs	r3, #1
 800b784:	e7f0      	b.n	800b768 <_svfiprintf_r+0x194>
 800b786:	ab03      	add	r3, sp, #12
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	462a      	mov	r2, r5
 800b78c:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <_svfiprintf_r+0x1f8>)
 800b78e:	a904      	add	r1, sp, #16
 800b790:	4638      	mov	r0, r7
 800b792:	f3af 8000 	nop.w
 800b796:	1c42      	adds	r2, r0, #1
 800b798:	4606      	mov	r6, r0
 800b79a:	d1d6      	bne.n	800b74a <_svfiprintf_r+0x176>
 800b79c:	89ab      	ldrh	r3, [r5, #12]
 800b79e:	065b      	lsls	r3, r3, #25
 800b7a0:	f53f af2c 	bmi.w	800b5fc <_svfiprintf_r+0x28>
 800b7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7a6:	b01d      	add	sp, #116	; 0x74
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	ab03      	add	r3, sp, #12
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	462a      	mov	r2, r5
 800b7b2:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <_svfiprintf_r+0x1f8>)
 800b7b4:	a904      	add	r1, sp, #16
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	f000 f9d4 	bl	800bb64 <_printf_i>
 800b7bc:	e7eb      	b.n	800b796 <_svfiprintf_r+0x1c2>
 800b7be:	bf00      	nop
 800b7c0:	0800c9e5 	.word	0x0800c9e5
 800b7c4:	0800c9ef 	.word	0x0800c9ef
 800b7c8:	00000000 	.word	0x00000000
 800b7cc:	0800b51d 	.word	0x0800b51d
 800b7d0:	0800c9eb 	.word	0x0800c9eb

0800b7d4 <__sfputc_r>:
 800b7d4:	6893      	ldr	r3, [r2, #8]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	b410      	push	{r4}
 800b7dc:	6093      	str	r3, [r2, #8]
 800b7de:	da08      	bge.n	800b7f2 <__sfputc_r+0x1e>
 800b7e0:	6994      	ldr	r4, [r2, #24]
 800b7e2:	42a3      	cmp	r3, r4
 800b7e4:	db01      	blt.n	800b7ea <__sfputc_r+0x16>
 800b7e6:	290a      	cmp	r1, #10
 800b7e8:	d103      	bne.n	800b7f2 <__sfputc_r+0x1e>
 800b7ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ee:	f000 baef 	b.w	800bdd0 <__swbuf_r>
 800b7f2:	6813      	ldr	r3, [r2, #0]
 800b7f4:	1c58      	adds	r0, r3, #1
 800b7f6:	6010      	str	r0, [r2, #0]
 800b7f8:	7019      	strb	r1, [r3, #0]
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <__sfputs_r>:
 800b802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b804:	4606      	mov	r6, r0
 800b806:	460f      	mov	r7, r1
 800b808:	4614      	mov	r4, r2
 800b80a:	18d5      	adds	r5, r2, r3
 800b80c:	42ac      	cmp	r4, r5
 800b80e:	d101      	bne.n	800b814 <__sfputs_r+0x12>
 800b810:	2000      	movs	r0, #0
 800b812:	e007      	b.n	800b824 <__sfputs_r+0x22>
 800b814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b818:	463a      	mov	r2, r7
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7ff ffda 	bl	800b7d4 <__sfputc_r>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d1f3      	bne.n	800b80c <__sfputs_r+0xa>
 800b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b828 <_vfiprintf_r>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	460d      	mov	r5, r1
 800b82e:	b09d      	sub	sp, #116	; 0x74
 800b830:	4614      	mov	r4, r2
 800b832:	4698      	mov	r8, r3
 800b834:	4606      	mov	r6, r0
 800b836:	b118      	cbz	r0, 800b840 <_vfiprintf_r+0x18>
 800b838:	6983      	ldr	r3, [r0, #24]
 800b83a:	b90b      	cbnz	r3, 800b840 <_vfiprintf_r+0x18>
 800b83c:	f000 fcaa 	bl	800c194 <__sinit>
 800b840:	4b89      	ldr	r3, [pc, #548]	; (800ba68 <_vfiprintf_r+0x240>)
 800b842:	429d      	cmp	r5, r3
 800b844:	d11b      	bne.n	800b87e <_vfiprintf_r+0x56>
 800b846:	6875      	ldr	r5, [r6, #4]
 800b848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b84a:	07d9      	lsls	r1, r3, #31
 800b84c:	d405      	bmi.n	800b85a <_vfiprintf_r+0x32>
 800b84e:	89ab      	ldrh	r3, [r5, #12]
 800b850:	059a      	lsls	r2, r3, #22
 800b852:	d402      	bmi.n	800b85a <_vfiprintf_r+0x32>
 800b854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b856:	f000 fd3b 	bl	800c2d0 <__retarget_lock_acquire_recursive>
 800b85a:	89ab      	ldrh	r3, [r5, #12]
 800b85c:	071b      	lsls	r3, r3, #28
 800b85e:	d501      	bpl.n	800b864 <_vfiprintf_r+0x3c>
 800b860:	692b      	ldr	r3, [r5, #16]
 800b862:	b9eb      	cbnz	r3, 800b8a0 <_vfiprintf_r+0x78>
 800b864:	4629      	mov	r1, r5
 800b866:	4630      	mov	r0, r6
 800b868:	f000 fb04 	bl	800be74 <__swsetup_r>
 800b86c:	b1c0      	cbz	r0, 800b8a0 <_vfiprintf_r+0x78>
 800b86e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b870:	07dc      	lsls	r4, r3, #31
 800b872:	d50e      	bpl.n	800b892 <_vfiprintf_r+0x6a>
 800b874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b878:	b01d      	add	sp, #116	; 0x74
 800b87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87e:	4b7b      	ldr	r3, [pc, #492]	; (800ba6c <_vfiprintf_r+0x244>)
 800b880:	429d      	cmp	r5, r3
 800b882:	d101      	bne.n	800b888 <_vfiprintf_r+0x60>
 800b884:	68b5      	ldr	r5, [r6, #8]
 800b886:	e7df      	b.n	800b848 <_vfiprintf_r+0x20>
 800b888:	4b79      	ldr	r3, [pc, #484]	; (800ba70 <_vfiprintf_r+0x248>)
 800b88a:	429d      	cmp	r5, r3
 800b88c:	bf08      	it	eq
 800b88e:	68f5      	ldreq	r5, [r6, #12]
 800b890:	e7da      	b.n	800b848 <_vfiprintf_r+0x20>
 800b892:	89ab      	ldrh	r3, [r5, #12]
 800b894:	0598      	lsls	r0, r3, #22
 800b896:	d4ed      	bmi.n	800b874 <_vfiprintf_r+0x4c>
 800b898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b89a:	f000 fd1a 	bl	800c2d2 <__retarget_lock_release_recursive>
 800b89e:	e7e9      	b.n	800b874 <_vfiprintf_r+0x4c>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a4:	2320      	movs	r3, #32
 800b8a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ae:	2330      	movs	r3, #48	; 0x30
 800b8b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba74 <_vfiprintf_r+0x24c>
 800b8b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8b8:	f04f 0901 	mov.w	r9, #1
 800b8bc:	4623      	mov	r3, r4
 800b8be:	469a      	mov	sl, r3
 800b8c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8c4:	b10a      	cbz	r2, 800b8ca <_vfiprintf_r+0xa2>
 800b8c6:	2a25      	cmp	r2, #37	; 0x25
 800b8c8:	d1f9      	bne.n	800b8be <_vfiprintf_r+0x96>
 800b8ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b8ce:	d00b      	beq.n	800b8e8 <_vfiprintf_r+0xc0>
 800b8d0:	465b      	mov	r3, fp
 800b8d2:	4622      	mov	r2, r4
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f7ff ff93 	bl	800b802 <__sfputs_r>
 800b8dc:	3001      	adds	r0, #1
 800b8de:	f000 80aa 	beq.w	800ba36 <_vfiprintf_r+0x20e>
 800b8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e4:	445a      	add	r2, fp
 800b8e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f000 80a2 	beq.w	800ba36 <_vfiprintf_r+0x20e>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8fc:	f10a 0a01 	add.w	sl, sl, #1
 800b900:	9304      	str	r3, [sp, #16]
 800b902:	9307      	str	r3, [sp, #28]
 800b904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b908:	931a      	str	r3, [sp, #104]	; 0x68
 800b90a:	4654      	mov	r4, sl
 800b90c:	2205      	movs	r2, #5
 800b90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b912:	4858      	ldr	r0, [pc, #352]	; (800ba74 <_vfiprintf_r+0x24c>)
 800b914:	f7f4 fc64 	bl	80001e0 <memchr>
 800b918:	9a04      	ldr	r2, [sp, #16]
 800b91a:	b9d8      	cbnz	r0, 800b954 <_vfiprintf_r+0x12c>
 800b91c:	06d1      	lsls	r1, r2, #27
 800b91e:	bf44      	itt	mi
 800b920:	2320      	movmi	r3, #32
 800b922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b926:	0713      	lsls	r3, r2, #28
 800b928:	bf44      	itt	mi
 800b92a:	232b      	movmi	r3, #43	; 0x2b
 800b92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b930:	f89a 3000 	ldrb.w	r3, [sl]
 800b934:	2b2a      	cmp	r3, #42	; 0x2a
 800b936:	d015      	beq.n	800b964 <_vfiprintf_r+0x13c>
 800b938:	9a07      	ldr	r2, [sp, #28]
 800b93a:	4654      	mov	r4, sl
 800b93c:	2000      	movs	r0, #0
 800b93e:	f04f 0c0a 	mov.w	ip, #10
 800b942:	4621      	mov	r1, r4
 800b944:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b948:	3b30      	subs	r3, #48	; 0x30
 800b94a:	2b09      	cmp	r3, #9
 800b94c:	d94e      	bls.n	800b9ec <_vfiprintf_r+0x1c4>
 800b94e:	b1b0      	cbz	r0, 800b97e <_vfiprintf_r+0x156>
 800b950:	9207      	str	r2, [sp, #28]
 800b952:	e014      	b.n	800b97e <_vfiprintf_r+0x156>
 800b954:	eba0 0308 	sub.w	r3, r0, r8
 800b958:	fa09 f303 	lsl.w	r3, r9, r3
 800b95c:	4313      	orrs	r3, r2
 800b95e:	9304      	str	r3, [sp, #16]
 800b960:	46a2      	mov	sl, r4
 800b962:	e7d2      	b.n	800b90a <_vfiprintf_r+0xe2>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	1d19      	adds	r1, r3, #4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	9103      	str	r1, [sp, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bfbb      	ittet	lt
 800b970:	425b      	neglt	r3, r3
 800b972:	f042 0202 	orrlt.w	r2, r2, #2
 800b976:	9307      	strge	r3, [sp, #28]
 800b978:	9307      	strlt	r3, [sp, #28]
 800b97a:	bfb8      	it	lt
 800b97c:	9204      	strlt	r2, [sp, #16]
 800b97e:	7823      	ldrb	r3, [r4, #0]
 800b980:	2b2e      	cmp	r3, #46	; 0x2e
 800b982:	d10c      	bne.n	800b99e <_vfiprintf_r+0x176>
 800b984:	7863      	ldrb	r3, [r4, #1]
 800b986:	2b2a      	cmp	r3, #42	; 0x2a
 800b988:	d135      	bne.n	800b9f6 <_vfiprintf_r+0x1ce>
 800b98a:	9b03      	ldr	r3, [sp, #12]
 800b98c:	1d1a      	adds	r2, r3, #4
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	9203      	str	r2, [sp, #12]
 800b992:	2b00      	cmp	r3, #0
 800b994:	bfb8      	it	lt
 800b996:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b99a:	3402      	adds	r4, #2
 800b99c:	9305      	str	r3, [sp, #20]
 800b99e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba84 <_vfiprintf_r+0x25c>
 800b9a2:	7821      	ldrb	r1, [r4, #0]
 800b9a4:	2203      	movs	r2, #3
 800b9a6:	4650      	mov	r0, sl
 800b9a8:	f7f4 fc1a 	bl	80001e0 <memchr>
 800b9ac:	b140      	cbz	r0, 800b9c0 <_vfiprintf_r+0x198>
 800b9ae:	2340      	movs	r3, #64	; 0x40
 800b9b0:	eba0 000a 	sub.w	r0, r0, sl
 800b9b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b9b8:	9b04      	ldr	r3, [sp, #16]
 800b9ba:	4303      	orrs	r3, r0
 800b9bc:	3401      	adds	r4, #1
 800b9be:	9304      	str	r3, [sp, #16]
 800b9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c4:	482c      	ldr	r0, [pc, #176]	; (800ba78 <_vfiprintf_r+0x250>)
 800b9c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ca:	2206      	movs	r2, #6
 800b9cc:	f7f4 fc08 	bl	80001e0 <memchr>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d03f      	beq.n	800ba54 <_vfiprintf_r+0x22c>
 800b9d4:	4b29      	ldr	r3, [pc, #164]	; (800ba7c <_vfiprintf_r+0x254>)
 800b9d6:	bb1b      	cbnz	r3, 800ba20 <_vfiprintf_r+0x1f8>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	3307      	adds	r3, #7
 800b9dc:	f023 0307 	bic.w	r3, r3, #7
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e6:	443b      	add	r3, r7
 800b9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ea:	e767      	b.n	800b8bc <_vfiprintf_r+0x94>
 800b9ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	e7a5      	b.n	800b942 <_vfiprintf_r+0x11a>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	3401      	adds	r4, #1
 800b9fa:	9305      	str	r3, [sp, #20]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	f04f 0c0a 	mov.w	ip, #10
 800ba02:	4620      	mov	r0, r4
 800ba04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba08:	3a30      	subs	r2, #48	; 0x30
 800ba0a:	2a09      	cmp	r2, #9
 800ba0c:	d903      	bls.n	800ba16 <_vfiprintf_r+0x1ee>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d0c5      	beq.n	800b99e <_vfiprintf_r+0x176>
 800ba12:	9105      	str	r1, [sp, #20]
 800ba14:	e7c3      	b.n	800b99e <_vfiprintf_r+0x176>
 800ba16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e7f0      	b.n	800ba02 <_vfiprintf_r+0x1da>
 800ba20:	ab03      	add	r3, sp, #12
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	462a      	mov	r2, r5
 800ba26:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <_vfiprintf_r+0x258>)
 800ba28:	a904      	add	r1, sp, #16
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f3af 8000 	nop.w
 800ba30:	4607      	mov	r7, r0
 800ba32:	1c78      	adds	r0, r7, #1
 800ba34:	d1d6      	bne.n	800b9e4 <_vfiprintf_r+0x1bc>
 800ba36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba38:	07d9      	lsls	r1, r3, #31
 800ba3a:	d405      	bmi.n	800ba48 <_vfiprintf_r+0x220>
 800ba3c:	89ab      	ldrh	r3, [r5, #12]
 800ba3e:	059a      	lsls	r2, r3, #22
 800ba40:	d402      	bmi.n	800ba48 <_vfiprintf_r+0x220>
 800ba42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba44:	f000 fc45 	bl	800c2d2 <__retarget_lock_release_recursive>
 800ba48:	89ab      	ldrh	r3, [r5, #12]
 800ba4a:	065b      	lsls	r3, r3, #25
 800ba4c:	f53f af12 	bmi.w	800b874 <_vfiprintf_r+0x4c>
 800ba50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba52:	e711      	b.n	800b878 <_vfiprintf_r+0x50>
 800ba54:	ab03      	add	r3, sp, #12
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	462a      	mov	r2, r5
 800ba5a:	4b09      	ldr	r3, [pc, #36]	; (800ba80 <_vfiprintf_r+0x258>)
 800ba5c:	a904      	add	r1, sp, #16
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f000 f880 	bl	800bb64 <_printf_i>
 800ba64:	e7e4      	b.n	800ba30 <_vfiprintf_r+0x208>
 800ba66:	bf00      	nop
 800ba68:	0800ca38 	.word	0x0800ca38
 800ba6c:	0800ca58 	.word	0x0800ca58
 800ba70:	0800ca18 	.word	0x0800ca18
 800ba74:	0800c9e5 	.word	0x0800c9e5
 800ba78:	0800c9ef 	.word	0x0800c9ef
 800ba7c:	00000000 	.word	0x00000000
 800ba80:	0800b803 	.word	0x0800b803
 800ba84:	0800c9eb 	.word	0x0800c9eb

0800ba88 <_printf_common>:
 800ba88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	4616      	mov	r6, r2
 800ba8e:	4699      	mov	r9, r3
 800ba90:	688a      	ldr	r2, [r1, #8]
 800ba92:	690b      	ldr	r3, [r1, #16]
 800ba94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	bfb8      	it	lt
 800ba9c:	4613      	movlt	r3, r2
 800ba9e:	6033      	str	r3, [r6, #0]
 800baa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baa4:	4607      	mov	r7, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	b10a      	cbz	r2, 800baae <_printf_common+0x26>
 800baaa:	3301      	adds	r3, #1
 800baac:	6033      	str	r3, [r6, #0]
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	0699      	lsls	r1, r3, #26
 800bab2:	bf42      	ittt	mi
 800bab4:	6833      	ldrmi	r3, [r6, #0]
 800bab6:	3302      	addmi	r3, #2
 800bab8:	6033      	strmi	r3, [r6, #0]
 800baba:	6825      	ldr	r5, [r4, #0]
 800babc:	f015 0506 	ands.w	r5, r5, #6
 800bac0:	d106      	bne.n	800bad0 <_printf_common+0x48>
 800bac2:	f104 0a19 	add.w	sl, r4, #25
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	6832      	ldr	r2, [r6, #0]
 800baca:	1a9b      	subs	r3, r3, r2
 800bacc:	42ab      	cmp	r3, r5
 800bace:	dc26      	bgt.n	800bb1e <_printf_common+0x96>
 800bad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bad4:	1e13      	subs	r3, r2, #0
 800bad6:	6822      	ldr	r2, [r4, #0]
 800bad8:	bf18      	it	ne
 800bada:	2301      	movne	r3, #1
 800badc:	0692      	lsls	r2, r2, #26
 800bade:	d42b      	bmi.n	800bb38 <_printf_common+0xb0>
 800bae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bae4:	4649      	mov	r1, r9
 800bae6:	4638      	mov	r0, r7
 800bae8:	47c0      	blx	r8
 800baea:	3001      	adds	r0, #1
 800baec:	d01e      	beq.n	800bb2c <_printf_common+0xa4>
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	68e5      	ldr	r5, [r4, #12]
 800baf2:	6832      	ldr	r2, [r6, #0]
 800baf4:	f003 0306 	and.w	r3, r3, #6
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	bf08      	it	eq
 800bafc:	1aad      	subeq	r5, r5, r2
 800bafe:	68a3      	ldr	r3, [r4, #8]
 800bb00:	6922      	ldr	r2, [r4, #16]
 800bb02:	bf0c      	ite	eq
 800bb04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb08:	2500      	movne	r5, #0
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	bfc4      	itt	gt
 800bb0e:	1a9b      	subgt	r3, r3, r2
 800bb10:	18ed      	addgt	r5, r5, r3
 800bb12:	2600      	movs	r6, #0
 800bb14:	341a      	adds	r4, #26
 800bb16:	42b5      	cmp	r5, r6
 800bb18:	d11a      	bne.n	800bb50 <_printf_common+0xc8>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	e008      	b.n	800bb30 <_printf_common+0xa8>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4652      	mov	r2, sl
 800bb22:	4649      	mov	r1, r9
 800bb24:	4638      	mov	r0, r7
 800bb26:	47c0      	blx	r8
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d103      	bne.n	800bb34 <_printf_common+0xac>
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb34:	3501      	adds	r5, #1
 800bb36:	e7c6      	b.n	800bac6 <_printf_common+0x3e>
 800bb38:	18e1      	adds	r1, r4, r3
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	2030      	movs	r0, #48	; 0x30
 800bb3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb42:	4422      	add	r2, r4
 800bb44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb4c:	3302      	adds	r3, #2
 800bb4e:	e7c7      	b.n	800bae0 <_printf_common+0x58>
 800bb50:	2301      	movs	r3, #1
 800bb52:	4622      	mov	r2, r4
 800bb54:	4649      	mov	r1, r9
 800bb56:	4638      	mov	r0, r7
 800bb58:	47c0      	blx	r8
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d0e6      	beq.n	800bb2c <_printf_common+0xa4>
 800bb5e:	3601      	adds	r6, #1
 800bb60:	e7d9      	b.n	800bb16 <_printf_common+0x8e>
	...

0800bb64 <_printf_i>:
 800bb64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb68:	460c      	mov	r4, r1
 800bb6a:	4691      	mov	r9, r2
 800bb6c:	7e27      	ldrb	r7, [r4, #24]
 800bb6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb70:	2f78      	cmp	r7, #120	; 0x78
 800bb72:	4680      	mov	r8, r0
 800bb74:	469a      	mov	sl, r3
 800bb76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb7a:	d807      	bhi.n	800bb8c <_printf_i+0x28>
 800bb7c:	2f62      	cmp	r7, #98	; 0x62
 800bb7e:	d80a      	bhi.n	800bb96 <_printf_i+0x32>
 800bb80:	2f00      	cmp	r7, #0
 800bb82:	f000 80d8 	beq.w	800bd36 <_printf_i+0x1d2>
 800bb86:	2f58      	cmp	r7, #88	; 0x58
 800bb88:	f000 80a3 	beq.w	800bcd2 <_printf_i+0x16e>
 800bb8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb94:	e03a      	b.n	800bc0c <_printf_i+0xa8>
 800bb96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb9a:	2b15      	cmp	r3, #21
 800bb9c:	d8f6      	bhi.n	800bb8c <_printf_i+0x28>
 800bb9e:	a001      	add	r0, pc, #4	; (adr r0, 800bba4 <_printf_i+0x40>)
 800bba0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bba4:	0800bbfd 	.word	0x0800bbfd
 800bba8:	0800bc11 	.word	0x0800bc11
 800bbac:	0800bb8d 	.word	0x0800bb8d
 800bbb0:	0800bb8d 	.word	0x0800bb8d
 800bbb4:	0800bb8d 	.word	0x0800bb8d
 800bbb8:	0800bb8d 	.word	0x0800bb8d
 800bbbc:	0800bc11 	.word	0x0800bc11
 800bbc0:	0800bb8d 	.word	0x0800bb8d
 800bbc4:	0800bb8d 	.word	0x0800bb8d
 800bbc8:	0800bb8d 	.word	0x0800bb8d
 800bbcc:	0800bb8d 	.word	0x0800bb8d
 800bbd0:	0800bd1d 	.word	0x0800bd1d
 800bbd4:	0800bc41 	.word	0x0800bc41
 800bbd8:	0800bcff 	.word	0x0800bcff
 800bbdc:	0800bb8d 	.word	0x0800bb8d
 800bbe0:	0800bb8d 	.word	0x0800bb8d
 800bbe4:	0800bd3f 	.word	0x0800bd3f
 800bbe8:	0800bb8d 	.word	0x0800bb8d
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bb8d 	.word	0x0800bb8d
 800bbf4:	0800bb8d 	.word	0x0800bb8d
 800bbf8:	0800bd07 	.word	0x0800bd07
 800bbfc:	680b      	ldr	r3, [r1, #0]
 800bbfe:	1d1a      	adds	r2, r3, #4
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	600a      	str	r2, [r1, #0]
 800bc04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e0a3      	b.n	800bd58 <_printf_i+0x1f4>
 800bc10:	6825      	ldr	r5, [r4, #0]
 800bc12:	6808      	ldr	r0, [r1, #0]
 800bc14:	062e      	lsls	r6, r5, #24
 800bc16:	f100 0304 	add.w	r3, r0, #4
 800bc1a:	d50a      	bpl.n	800bc32 <_printf_i+0xce>
 800bc1c:	6805      	ldr	r5, [r0, #0]
 800bc1e:	600b      	str	r3, [r1, #0]
 800bc20:	2d00      	cmp	r5, #0
 800bc22:	da03      	bge.n	800bc2c <_printf_i+0xc8>
 800bc24:	232d      	movs	r3, #45	; 0x2d
 800bc26:	426d      	negs	r5, r5
 800bc28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc2c:	485e      	ldr	r0, [pc, #376]	; (800bda8 <_printf_i+0x244>)
 800bc2e:	230a      	movs	r3, #10
 800bc30:	e019      	b.n	800bc66 <_printf_i+0x102>
 800bc32:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc36:	6805      	ldr	r5, [r0, #0]
 800bc38:	600b      	str	r3, [r1, #0]
 800bc3a:	bf18      	it	ne
 800bc3c:	b22d      	sxthne	r5, r5
 800bc3e:	e7ef      	b.n	800bc20 <_printf_i+0xbc>
 800bc40:	680b      	ldr	r3, [r1, #0]
 800bc42:	6825      	ldr	r5, [r4, #0]
 800bc44:	1d18      	adds	r0, r3, #4
 800bc46:	6008      	str	r0, [r1, #0]
 800bc48:	0628      	lsls	r0, r5, #24
 800bc4a:	d501      	bpl.n	800bc50 <_printf_i+0xec>
 800bc4c:	681d      	ldr	r5, [r3, #0]
 800bc4e:	e002      	b.n	800bc56 <_printf_i+0xf2>
 800bc50:	0669      	lsls	r1, r5, #25
 800bc52:	d5fb      	bpl.n	800bc4c <_printf_i+0xe8>
 800bc54:	881d      	ldrh	r5, [r3, #0]
 800bc56:	4854      	ldr	r0, [pc, #336]	; (800bda8 <_printf_i+0x244>)
 800bc58:	2f6f      	cmp	r7, #111	; 0x6f
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2308      	moveq	r3, #8
 800bc5e:	230a      	movne	r3, #10
 800bc60:	2100      	movs	r1, #0
 800bc62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc66:	6866      	ldr	r6, [r4, #4]
 800bc68:	60a6      	str	r6, [r4, #8]
 800bc6a:	2e00      	cmp	r6, #0
 800bc6c:	bfa2      	ittt	ge
 800bc6e:	6821      	ldrge	r1, [r4, #0]
 800bc70:	f021 0104 	bicge.w	r1, r1, #4
 800bc74:	6021      	strge	r1, [r4, #0]
 800bc76:	b90d      	cbnz	r5, 800bc7c <_printf_i+0x118>
 800bc78:	2e00      	cmp	r6, #0
 800bc7a:	d04d      	beq.n	800bd18 <_printf_i+0x1b4>
 800bc7c:	4616      	mov	r6, r2
 800bc7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc82:	fb03 5711 	mls	r7, r3, r1, r5
 800bc86:	5dc7      	ldrb	r7, [r0, r7]
 800bc88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc8c:	462f      	mov	r7, r5
 800bc8e:	42bb      	cmp	r3, r7
 800bc90:	460d      	mov	r5, r1
 800bc92:	d9f4      	bls.n	800bc7e <_printf_i+0x11a>
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	d10b      	bne.n	800bcb0 <_printf_i+0x14c>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	07df      	lsls	r7, r3, #31
 800bc9c:	d508      	bpl.n	800bcb0 <_printf_i+0x14c>
 800bc9e:	6923      	ldr	r3, [r4, #16]
 800bca0:	6861      	ldr	r1, [r4, #4]
 800bca2:	4299      	cmp	r1, r3
 800bca4:	bfde      	ittt	le
 800bca6:	2330      	movle	r3, #48	; 0x30
 800bca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bcac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800bcb0:	1b92      	subs	r2, r2, r6
 800bcb2:	6122      	str	r2, [r4, #16]
 800bcb4:	f8cd a000 	str.w	sl, [sp]
 800bcb8:	464b      	mov	r3, r9
 800bcba:	aa03      	add	r2, sp, #12
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	f7ff fee2 	bl	800ba88 <_printf_common>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d14c      	bne.n	800bd62 <_printf_i+0x1fe>
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bccc:	b004      	add	sp, #16
 800bcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd2:	4835      	ldr	r0, [pc, #212]	; (800bda8 <_printf_i+0x244>)
 800bcd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcd8:	6823      	ldr	r3, [r4, #0]
 800bcda:	680e      	ldr	r6, [r1, #0]
 800bcdc:	061f      	lsls	r7, r3, #24
 800bcde:	f856 5b04 	ldr.w	r5, [r6], #4
 800bce2:	600e      	str	r6, [r1, #0]
 800bce4:	d514      	bpl.n	800bd10 <_printf_i+0x1ac>
 800bce6:	07d9      	lsls	r1, r3, #31
 800bce8:	bf44      	itt	mi
 800bcea:	f043 0320 	orrmi.w	r3, r3, #32
 800bcee:	6023      	strmi	r3, [r4, #0]
 800bcf0:	b91d      	cbnz	r5, 800bcfa <_printf_i+0x196>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	f023 0320 	bic.w	r3, r3, #32
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	2310      	movs	r3, #16
 800bcfc:	e7b0      	b.n	800bc60 <_printf_i+0xfc>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	f043 0320 	orr.w	r3, r3, #32
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	2378      	movs	r3, #120	; 0x78
 800bd08:	4828      	ldr	r0, [pc, #160]	; (800bdac <_printf_i+0x248>)
 800bd0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd0e:	e7e3      	b.n	800bcd8 <_printf_i+0x174>
 800bd10:	065e      	lsls	r6, r3, #25
 800bd12:	bf48      	it	mi
 800bd14:	b2ad      	uxthmi	r5, r5
 800bd16:	e7e6      	b.n	800bce6 <_printf_i+0x182>
 800bd18:	4616      	mov	r6, r2
 800bd1a:	e7bb      	b.n	800bc94 <_printf_i+0x130>
 800bd1c:	680b      	ldr	r3, [r1, #0]
 800bd1e:	6826      	ldr	r6, [r4, #0]
 800bd20:	6960      	ldr	r0, [r4, #20]
 800bd22:	1d1d      	adds	r5, r3, #4
 800bd24:	600d      	str	r5, [r1, #0]
 800bd26:	0635      	lsls	r5, r6, #24
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	d501      	bpl.n	800bd30 <_printf_i+0x1cc>
 800bd2c:	6018      	str	r0, [r3, #0]
 800bd2e:	e002      	b.n	800bd36 <_printf_i+0x1d2>
 800bd30:	0671      	lsls	r1, r6, #25
 800bd32:	d5fb      	bpl.n	800bd2c <_printf_i+0x1c8>
 800bd34:	8018      	strh	r0, [r3, #0]
 800bd36:	2300      	movs	r3, #0
 800bd38:	6123      	str	r3, [r4, #16]
 800bd3a:	4616      	mov	r6, r2
 800bd3c:	e7ba      	b.n	800bcb4 <_printf_i+0x150>
 800bd3e:	680b      	ldr	r3, [r1, #0]
 800bd40:	1d1a      	adds	r2, r3, #4
 800bd42:	600a      	str	r2, [r1, #0]
 800bd44:	681e      	ldr	r6, [r3, #0]
 800bd46:	6862      	ldr	r2, [r4, #4]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f7f4 fa48 	bl	80001e0 <memchr>
 800bd50:	b108      	cbz	r0, 800bd56 <_printf_i+0x1f2>
 800bd52:	1b80      	subs	r0, r0, r6
 800bd54:	6060      	str	r0, [r4, #4]
 800bd56:	6863      	ldr	r3, [r4, #4]
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd60:	e7a8      	b.n	800bcb4 <_printf_i+0x150>
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	4632      	mov	r2, r6
 800bd66:	4649      	mov	r1, r9
 800bd68:	4640      	mov	r0, r8
 800bd6a:	47d0      	blx	sl
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d0ab      	beq.n	800bcc8 <_printf_i+0x164>
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	079b      	lsls	r3, r3, #30
 800bd74:	d413      	bmi.n	800bd9e <_printf_i+0x23a>
 800bd76:	68e0      	ldr	r0, [r4, #12]
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	4298      	cmp	r0, r3
 800bd7c:	bfb8      	it	lt
 800bd7e:	4618      	movlt	r0, r3
 800bd80:	e7a4      	b.n	800bccc <_printf_i+0x168>
 800bd82:	2301      	movs	r3, #1
 800bd84:	4632      	mov	r2, r6
 800bd86:	4649      	mov	r1, r9
 800bd88:	4640      	mov	r0, r8
 800bd8a:	47d0      	blx	sl
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d09b      	beq.n	800bcc8 <_printf_i+0x164>
 800bd90:	3501      	adds	r5, #1
 800bd92:	68e3      	ldr	r3, [r4, #12]
 800bd94:	9903      	ldr	r1, [sp, #12]
 800bd96:	1a5b      	subs	r3, r3, r1
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	dcf2      	bgt.n	800bd82 <_printf_i+0x21e>
 800bd9c:	e7eb      	b.n	800bd76 <_printf_i+0x212>
 800bd9e:	2500      	movs	r5, #0
 800bda0:	f104 0619 	add.w	r6, r4, #25
 800bda4:	e7f5      	b.n	800bd92 <_printf_i+0x22e>
 800bda6:	bf00      	nop
 800bda8:	0800c9f6 	.word	0x0800c9f6
 800bdac:	0800ca07 	.word	0x0800ca07

0800bdb0 <_sbrk_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d06      	ldr	r5, [pc, #24]	; (800bdcc <_sbrk_r+0x1c>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f5 fc22 	bl	8001604 <_sbrk>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_sbrk_r+0x1a>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_sbrk_r+0x1a>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20002034 	.word	0x20002034

0800bdd0 <__swbuf_r>:
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	460e      	mov	r6, r1
 800bdd4:	4614      	mov	r4, r2
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	b118      	cbz	r0, 800bde2 <__swbuf_r+0x12>
 800bdda:	6983      	ldr	r3, [r0, #24]
 800bddc:	b90b      	cbnz	r3, 800bde2 <__swbuf_r+0x12>
 800bdde:	f000 f9d9 	bl	800c194 <__sinit>
 800bde2:	4b21      	ldr	r3, [pc, #132]	; (800be68 <__swbuf_r+0x98>)
 800bde4:	429c      	cmp	r4, r3
 800bde6:	d12b      	bne.n	800be40 <__swbuf_r+0x70>
 800bde8:	686c      	ldr	r4, [r5, #4]
 800bdea:	69a3      	ldr	r3, [r4, #24]
 800bdec:	60a3      	str	r3, [r4, #8]
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	071a      	lsls	r2, r3, #28
 800bdf2:	d52f      	bpl.n	800be54 <__swbuf_r+0x84>
 800bdf4:	6923      	ldr	r3, [r4, #16]
 800bdf6:	b36b      	cbz	r3, 800be54 <__swbuf_r+0x84>
 800bdf8:	6923      	ldr	r3, [r4, #16]
 800bdfa:	6820      	ldr	r0, [r4, #0]
 800bdfc:	1ac0      	subs	r0, r0, r3
 800bdfe:	6963      	ldr	r3, [r4, #20]
 800be00:	b2f6      	uxtb	r6, r6
 800be02:	4283      	cmp	r3, r0
 800be04:	4637      	mov	r7, r6
 800be06:	dc04      	bgt.n	800be12 <__swbuf_r+0x42>
 800be08:	4621      	mov	r1, r4
 800be0a:	4628      	mov	r0, r5
 800be0c:	f000 f92e 	bl	800c06c <_fflush_r>
 800be10:	bb30      	cbnz	r0, 800be60 <__swbuf_r+0x90>
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	3b01      	subs	r3, #1
 800be16:	60a3      	str	r3, [r4, #8]
 800be18:	6823      	ldr	r3, [r4, #0]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	6022      	str	r2, [r4, #0]
 800be1e:	701e      	strb	r6, [r3, #0]
 800be20:	6963      	ldr	r3, [r4, #20]
 800be22:	3001      	adds	r0, #1
 800be24:	4283      	cmp	r3, r0
 800be26:	d004      	beq.n	800be32 <__swbuf_r+0x62>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	07db      	lsls	r3, r3, #31
 800be2c:	d506      	bpl.n	800be3c <__swbuf_r+0x6c>
 800be2e:	2e0a      	cmp	r6, #10
 800be30:	d104      	bne.n	800be3c <__swbuf_r+0x6c>
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f000 f919 	bl	800c06c <_fflush_r>
 800be3a:	b988      	cbnz	r0, 800be60 <__swbuf_r+0x90>
 800be3c:	4638      	mov	r0, r7
 800be3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be40:	4b0a      	ldr	r3, [pc, #40]	; (800be6c <__swbuf_r+0x9c>)
 800be42:	429c      	cmp	r4, r3
 800be44:	d101      	bne.n	800be4a <__swbuf_r+0x7a>
 800be46:	68ac      	ldr	r4, [r5, #8]
 800be48:	e7cf      	b.n	800bdea <__swbuf_r+0x1a>
 800be4a:	4b09      	ldr	r3, [pc, #36]	; (800be70 <__swbuf_r+0xa0>)
 800be4c:	429c      	cmp	r4, r3
 800be4e:	bf08      	it	eq
 800be50:	68ec      	ldreq	r4, [r5, #12]
 800be52:	e7ca      	b.n	800bdea <__swbuf_r+0x1a>
 800be54:	4621      	mov	r1, r4
 800be56:	4628      	mov	r0, r5
 800be58:	f000 f80c 	bl	800be74 <__swsetup_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d0cb      	beq.n	800bdf8 <__swbuf_r+0x28>
 800be60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be64:	e7ea      	b.n	800be3c <__swbuf_r+0x6c>
 800be66:	bf00      	nop
 800be68:	0800ca38 	.word	0x0800ca38
 800be6c:	0800ca58 	.word	0x0800ca58
 800be70:	0800ca18 	.word	0x0800ca18

0800be74 <__swsetup_r>:
 800be74:	4b32      	ldr	r3, [pc, #200]	; (800bf40 <__swsetup_r+0xcc>)
 800be76:	b570      	push	{r4, r5, r6, lr}
 800be78:	681d      	ldr	r5, [r3, #0]
 800be7a:	4606      	mov	r6, r0
 800be7c:	460c      	mov	r4, r1
 800be7e:	b125      	cbz	r5, 800be8a <__swsetup_r+0x16>
 800be80:	69ab      	ldr	r3, [r5, #24]
 800be82:	b913      	cbnz	r3, 800be8a <__swsetup_r+0x16>
 800be84:	4628      	mov	r0, r5
 800be86:	f000 f985 	bl	800c194 <__sinit>
 800be8a:	4b2e      	ldr	r3, [pc, #184]	; (800bf44 <__swsetup_r+0xd0>)
 800be8c:	429c      	cmp	r4, r3
 800be8e:	d10f      	bne.n	800beb0 <__swsetup_r+0x3c>
 800be90:	686c      	ldr	r4, [r5, #4]
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be98:	0719      	lsls	r1, r3, #28
 800be9a:	d42c      	bmi.n	800bef6 <__swsetup_r+0x82>
 800be9c:	06dd      	lsls	r5, r3, #27
 800be9e:	d411      	bmi.n	800bec4 <__swsetup_r+0x50>
 800bea0:	2309      	movs	r3, #9
 800bea2:	6033      	str	r3, [r6, #0]
 800bea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beae:	e03e      	b.n	800bf2e <__swsetup_r+0xba>
 800beb0:	4b25      	ldr	r3, [pc, #148]	; (800bf48 <__swsetup_r+0xd4>)
 800beb2:	429c      	cmp	r4, r3
 800beb4:	d101      	bne.n	800beba <__swsetup_r+0x46>
 800beb6:	68ac      	ldr	r4, [r5, #8]
 800beb8:	e7eb      	b.n	800be92 <__swsetup_r+0x1e>
 800beba:	4b24      	ldr	r3, [pc, #144]	; (800bf4c <__swsetup_r+0xd8>)
 800bebc:	429c      	cmp	r4, r3
 800bebe:	bf08      	it	eq
 800bec0:	68ec      	ldreq	r4, [r5, #12]
 800bec2:	e7e6      	b.n	800be92 <__swsetup_r+0x1e>
 800bec4:	0758      	lsls	r0, r3, #29
 800bec6:	d512      	bpl.n	800beee <__swsetup_r+0x7a>
 800bec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beca:	b141      	cbz	r1, 800bede <__swsetup_r+0x6a>
 800becc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bed0:	4299      	cmp	r1, r3
 800bed2:	d002      	beq.n	800beda <__swsetup_r+0x66>
 800bed4:	4630      	mov	r0, r6
 800bed6:	f7ff fa77 	bl	800b3c8 <_free_r>
 800beda:	2300      	movs	r3, #0
 800bedc:	6363      	str	r3, [r4, #52]	; 0x34
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bee4:	81a3      	strh	r3, [r4, #12]
 800bee6:	2300      	movs	r3, #0
 800bee8:	6063      	str	r3, [r4, #4]
 800beea:	6923      	ldr	r3, [r4, #16]
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	f043 0308 	orr.w	r3, r3, #8
 800bef4:	81a3      	strh	r3, [r4, #12]
 800bef6:	6923      	ldr	r3, [r4, #16]
 800bef8:	b94b      	cbnz	r3, 800bf0e <__swsetup_r+0x9a>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf04:	d003      	beq.n	800bf0e <__swsetup_r+0x9a>
 800bf06:	4621      	mov	r1, r4
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f000 fa07 	bl	800c31c <__smakebuf_r>
 800bf0e:	89a0      	ldrh	r0, [r4, #12]
 800bf10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf14:	f010 0301 	ands.w	r3, r0, #1
 800bf18:	d00a      	beq.n	800bf30 <__swsetup_r+0xbc>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60a3      	str	r3, [r4, #8]
 800bf1e:	6963      	ldr	r3, [r4, #20]
 800bf20:	425b      	negs	r3, r3
 800bf22:	61a3      	str	r3, [r4, #24]
 800bf24:	6923      	ldr	r3, [r4, #16]
 800bf26:	b943      	cbnz	r3, 800bf3a <__swsetup_r+0xc6>
 800bf28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf2c:	d1ba      	bne.n	800bea4 <__swsetup_r+0x30>
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	0781      	lsls	r1, r0, #30
 800bf32:	bf58      	it	pl
 800bf34:	6963      	ldrpl	r3, [r4, #20]
 800bf36:	60a3      	str	r3, [r4, #8]
 800bf38:	e7f4      	b.n	800bf24 <__swsetup_r+0xb0>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	e7f7      	b.n	800bf2e <__swsetup_r+0xba>
 800bf3e:	bf00      	nop
 800bf40:	2000001c 	.word	0x2000001c
 800bf44:	0800ca38 	.word	0x0800ca38
 800bf48:	0800ca58 	.word	0x0800ca58
 800bf4c:	0800ca18 	.word	0x0800ca18

0800bf50 <abort>:
 800bf50:	b508      	push	{r3, lr}
 800bf52:	2006      	movs	r0, #6
 800bf54:	f000 fa96 	bl	800c484 <raise>
 800bf58:	2001      	movs	r0, #1
 800bf5a:	f7f5 fadb 	bl	8001514 <_exit>
	...

0800bf60 <__sflush_r>:
 800bf60:	898a      	ldrh	r2, [r1, #12]
 800bf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf66:	4605      	mov	r5, r0
 800bf68:	0710      	lsls	r0, r2, #28
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	d458      	bmi.n	800c020 <__sflush_r+0xc0>
 800bf6e:	684b      	ldr	r3, [r1, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	dc05      	bgt.n	800bf80 <__sflush_r+0x20>
 800bf74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	dc02      	bgt.n	800bf80 <__sflush_r+0x20>
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	d0f9      	beq.n	800bf7a <__sflush_r+0x1a>
 800bf86:	2300      	movs	r3, #0
 800bf88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf8c:	682f      	ldr	r7, [r5, #0]
 800bf8e:	602b      	str	r3, [r5, #0]
 800bf90:	d032      	beq.n	800bff8 <__sflush_r+0x98>
 800bf92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	075a      	lsls	r2, r3, #29
 800bf98:	d505      	bpl.n	800bfa6 <__sflush_r+0x46>
 800bf9a:	6863      	ldr	r3, [r4, #4]
 800bf9c:	1ac0      	subs	r0, r0, r3
 800bf9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfa0:	b10b      	cbz	r3, 800bfa6 <__sflush_r+0x46>
 800bfa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfa4:	1ac0      	subs	r0, r0, r3
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfac:	6a21      	ldr	r1, [r4, #32]
 800bfae:	4628      	mov	r0, r5
 800bfb0:	47b0      	blx	r6
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	d106      	bne.n	800bfc6 <__sflush_r+0x66>
 800bfb8:	6829      	ldr	r1, [r5, #0]
 800bfba:	291d      	cmp	r1, #29
 800bfbc:	d82c      	bhi.n	800c018 <__sflush_r+0xb8>
 800bfbe:	4a2a      	ldr	r2, [pc, #168]	; (800c068 <__sflush_r+0x108>)
 800bfc0:	40ca      	lsrs	r2, r1
 800bfc2:	07d6      	lsls	r6, r2, #31
 800bfc4:	d528      	bpl.n	800c018 <__sflush_r+0xb8>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	6062      	str	r2, [r4, #4]
 800bfca:	04d9      	lsls	r1, r3, #19
 800bfcc:	6922      	ldr	r2, [r4, #16]
 800bfce:	6022      	str	r2, [r4, #0]
 800bfd0:	d504      	bpl.n	800bfdc <__sflush_r+0x7c>
 800bfd2:	1c42      	adds	r2, r0, #1
 800bfd4:	d101      	bne.n	800bfda <__sflush_r+0x7a>
 800bfd6:	682b      	ldr	r3, [r5, #0]
 800bfd8:	b903      	cbnz	r3, 800bfdc <__sflush_r+0x7c>
 800bfda:	6560      	str	r0, [r4, #84]	; 0x54
 800bfdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfde:	602f      	str	r7, [r5, #0]
 800bfe0:	2900      	cmp	r1, #0
 800bfe2:	d0ca      	beq.n	800bf7a <__sflush_r+0x1a>
 800bfe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfe8:	4299      	cmp	r1, r3
 800bfea:	d002      	beq.n	800bff2 <__sflush_r+0x92>
 800bfec:	4628      	mov	r0, r5
 800bfee:	f7ff f9eb 	bl	800b3c8 <_free_r>
 800bff2:	2000      	movs	r0, #0
 800bff4:	6360      	str	r0, [r4, #52]	; 0x34
 800bff6:	e7c1      	b.n	800bf7c <__sflush_r+0x1c>
 800bff8:	6a21      	ldr	r1, [r4, #32]
 800bffa:	2301      	movs	r3, #1
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b0      	blx	r6
 800c000:	1c41      	adds	r1, r0, #1
 800c002:	d1c7      	bne.n	800bf94 <__sflush_r+0x34>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0c4      	beq.n	800bf94 <__sflush_r+0x34>
 800c00a:	2b1d      	cmp	r3, #29
 800c00c:	d001      	beq.n	800c012 <__sflush_r+0xb2>
 800c00e:	2b16      	cmp	r3, #22
 800c010:	d101      	bne.n	800c016 <__sflush_r+0xb6>
 800c012:	602f      	str	r7, [r5, #0]
 800c014:	e7b1      	b.n	800bf7a <__sflush_r+0x1a>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01c:	81a3      	strh	r3, [r4, #12]
 800c01e:	e7ad      	b.n	800bf7c <__sflush_r+0x1c>
 800c020:	690f      	ldr	r7, [r1, #16]
 800c022:	2f00      	cmp	r7, #0
 800c024:	d0a9      	beq.n	800bf7a <__sflush_r+0x1a>
 800c026:	0793      	lsls	r3, r2, #30
 800c028:	680e      	ldr	r6, [r1, #0]
 800c02a:	bf08      	it	eq
 800c02c:	694b      	ldreq	r3, [r1, #20]
 800c02e:	600f      	str	r7, [r1, #0]
 800c030:	bf18      	it	ne
 800c032:	2300      	movne	r3, #0
 800c034:	eba6 0807 	sub.w	r8, r6, r7
 800c038:	608b      	str	r3, [r1, #8]
 800c03a:	f1b8 0f00 	cmp.w	r8, #0
 800c03e:	dd9c      	ble.n	800bf7a <__sflush_r+0x1a>
 800c040:	6a21      	ldr	r1, [r4, #32]
 800c042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c044:	4643      	mov	r3, r8
 800c046:	463a      	mov	r2, r7
 800c048:	4628      	mov	r0, r5
 800c04a:	47b0      	blx	r6
 800c04c:	2800      	cmp	r0, #0
 800c04e:	dc06      	bgt.n	800c05e <__sflush_r+0xfe>
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c056:	81a3      	strh	r3, [r4, #12]
 800c058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c05c:	e78e      	b.n	800bf7c <__sflush_r+0x1c>
 800c05e:	4407      	add	r7, r0
 800c060:	eba8 0800 	sub.w	r8, r8, r0
 800c064:	e7e9      	b.n	800c03a <__sflush_r+0xda>
 800c066:	bf00      	nop
 800c068:	20400001 	.word	0x20400001

0800c06c <_fflush_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	690b      	ldr	r3, [r1, #16]
 800c070:	4605      	mov	r5, r0
 800c072:	460c      	mov	r4, r1
 800c074:	b913      	cbnz	r3, 800c07c <_fflush_r+0x10>
 800c076:	2500      	movs	r5, #0
 800c078:	4628      	mov	r0, r5
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	b118      	cbz	r0, 800c086 <_fflush_r+0x1a>
 800c07e:	6983      	ldr	r3, [r0, #24]
 800c080:	b90b      	cbnz	r3, 800c086 <_fflush_r+0x1a>
 800c082:	f000 f887 	bl	800c194 <__sinit>
 800c086:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <_fflush_r+0x6c>)
 800c088:	429c      	cmp	r4, r3
 800c08a:	d11b      	bne.n	800c0c4 <_fflush_r+0x58>
 800c08c:	686c      	ldr	r4, [r5, #4]
 800c08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0ef      	beq.n	800c076 <_fflush_r+0xa>
 800c096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c098:	07d0      	lsls	r0, r2, #31
 800c09a:	d404      	bmi.n	800c0a6 <_fflush_r+0x3a>
 800c09c:	0599      	lsls	r1, r3, #22
 800c09e:	d402      	bmi.n	800c0a6 <_fflush_r+0x3a>
 800c0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0a2:	f000 f915 	bl	800c2d0 <__retarget_lock_acquire_recursive>
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	f7ff ff59 	bl	800bf60 <__sflush_r>
 800c0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0b0:	07da      	lsls	r2, r3, #31
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	d4e0      	bmi.n	800c078 <_fflush_r+0xc>
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	059b      	lsls	r3, r3, #22
 800c0ba:	d4dd      	bmi.n	800c078 <_fflush_r+0xc>
 800c0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0be:	f000 f908 	bl	800c2d2 <__retarget_lock_release_recursive>
 800c0c2:	e7d9      	b.n	800c078 <_fflush_r+0xc>
 800c0c4:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <_fflush_r+0x70>)
 800c0c6:	429c      	cmp	r4, r3
 800c0c8:	d101      	bne.n	800c0ce <_fflush_r+0x62>
 800c0ca:	68ac      	ldr	r4, [r5, #8]
 800c0cc:	e7df      	b.n	800c08e <_fflush_r+0x22>
 800c0ce:	4b04      	ldr	r3, [pc, #16]	; (800c0e0 <_fflush_r+0x74>)
 800c0d0:	429c      	cmp	r4, r3
 800c0d2:	bf08      	it	eq
 800c0d4:	68ec      	ldreq	r4, [r5, #12]
 800c0d6:	e7da      	b.n	800c08e <_fflush_r+0x22>
 800c0d8:	0800ca38 	.word	0x0800ca38
 800c0dc:	0800ca58 	.word	0x0800ca58
 800c0e0:	0800ca18 	.word	0x0800ca18

0800c0e4 <std>:
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0f2:	6083      	str	r3, [r0, #8]
 800c0f4:	8181      	strh	r1, [r0, #12]
 800c0f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c0f8:	81c2      	strh	r2, [r0, #14]
 800c0fa:	6183      	str	r3, [r0, #24]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	2208      	movs	r2, #8
 800c100:	305c      	adds	r0, #92	; 0x5c
 800c102:	f7ff f817 	bl	800b134 <memset>
 800c106:	4b05      	ldr	r3, [pc, #20]	; (800c11c <std+0x38>)
 800c108:	6263      	str	r3, [r4, #36]	; 0x24
 800c10a:	4b05      	ldr	r3, [pc, #20]	; (800c120 <std+0x3c>)
 800c10c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c10e:	4b05      	ldr	r3, [pc, #20]	; (800c124 <std+0x40>)
 800c110:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c112:	4b05      	ldr	r3, [pc, #20]	; (800c128 <std+0x44>)
 800c114:	6224      	str	r4, [r4, #32]
 800c116:	6323      	str	r3, [r4, #48]	; 0x30
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	bf00      	nop
 800c11c:	0800c4bd 	.word	0x0800c4bd
 800c120:	0800c4df 	.word	0x0800c4df
 800c124:	0800c517 	.word	0x0800c517
 800c128:	0800c53b 	.word	0x0800c53b

0800c12c <_cleanup_r>:
 800c12c:	4901      	ldr	r1, [pc, #4]	; (800c134 <_cleanup_r+0x8>)
 800c12e:	f000 b8af 	b.w	800c290 <_fwalk_reent>
 800c132:	bf00      	nop
 800c134:	0800c06d 	.word	0x0800c06d

0800c138 <__sfmoreglue>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	1e4a      	subs	r2, r1, #1
 800c13c:	2568      	movs	r5, #104	; 0x68
 800c13e:	4355      	muls	r5, r2
 800c140:	460e      	mov	r6, r1
 800c142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c146:	f7ff f98f 	bl	800b468 <_malloc_r>
 800c14a:	4604      	mov	r4, r0
 800c14c:	b140      	cbz	r0, 800c160 <__sfmoreglue+0x28>
 800c14e:	2100      	movs	r1, #0
 800c150:	e9c0 1600 	strd	r1, r6, [r0]
 800c154:	300c      	adds	r0, #12
 800c156:	60a0      	str	r0, [r4, #8]
 800c158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c15c:	f7fe ffea 	bl	800b134 <memset>
 800c160:	4620      	mov	r0, r4
 800c162:	bd70      	pop	{r4, r5, r6, pc}

0800c164 <__sfp_lock_acquire>:
 800c164:	4801      	ldr	r0, [pc, #4]	; (800c16c <__sfp_lock_acquire+0x8>)
 800c166:	f000 b8b3 	b.w	800c2d0 <__retarget_lock_acquire_recursive>
 800c16a:	bf00      	nop
 800c16c:	20002030 	.word	0x20002030

0800c170 <__sfp_lock_release>:
 800c170:	4801      	ldr	r0, [pc, #4]	; (800c178 <__sfp_lock_release+0x8>)
 800c172:	f000 b8ae 	b.w	800c2d2 <__retarget_lock_release_recursive>
 800c176:	bf00      	nop
 800c178:	20002030 	.word	0x20002030

0800c17c <__sinit_lock_acquire>:
 800c17c:	4801      	ldr	r0, [pc, #4]	; (800c184 <__sinit_lock_acquire+0x8>)
 800c17e:	f000 b8a7 	b.w	800c2d0 <__retarget_lock_acquire_recursive>
 800c182:	bf00      	nop
 800c184:	2000202b 	.word	0x2000202b

0800c188 <__sinit_lock_release>:
 800c188:	4801      	ldr	r0, [pc, #4]	; (800c190 <__sinit_lock_release+0x8>)
 800c18a:	f000 b8a2 	b.w	800c2d2 <__retarget_lock_release_recursive>
 800c18e:	bf00      	nop
 800c190:	2000202b 	.word	0x2000202b

0800c194 <__sinit>:
 800c194:	b510      	push	{r4, lr}
 800c196:	4604      	mov	r4, r0
 800c198:	f7ff fff0 	bl	800c17c <__sinit_lock_acquire>
 800c19c:	69a3      	ldr	r3, [r4, #24]
 800c19e:	b11b      	cbz	r3, 800c1a8 <__sinit+0x14>
 800c1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a4:	f7ff bff0 	b.w	800c188 <__sinit_lock_release>
 800c1a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1ac:	6523      	str	r3, [r4, #80]	; 0x50
 800c1ae:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <__sinit+0x68>)
 800c1b0:	4a13      	ldr	r2, [pc, #76]	; (800c200 <__sinit+0x6c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1b6:	42a3      	cmp	r3, r4
 800c1b8:	bf04      	itt	eq
 800c1ba:	2301      	moveq	r3, #1
 800c1bc:	61a3      	streq	r3, [r4, #24]
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f000 f820 	bl	800c204 <__sfp>
 800c1c4:	6060      	str	r0, [r4, #4]
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 f81c 	bl	800c204 <__sfp>
 800c1cc:	60a0      	str	r0, [r4, #8]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 f818 	bl	800c204 <__sfp>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	60e0      	str	r0, [r4, #12]
 800c1d8:	2104      	movs	r1, #4
 800c1da:	6860      	ldr	r0, [r4, #4]
 800c1dc:	f7ff ff82 	bl	800c0e4 <std>
 800c1e0:	68a0      	ldr	r0, [r4, #8]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	2109      	movs	r1, #9
 800c1e6:	f7ff ff7d 	bl	800c0e4 <std>
 800c1ea:	68e0      	ldr	r0, [r4, #12]
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	2112      	movs	r1, #18
 800c1f0:	f7ff ff78 	bl	800c0e4 <std>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	61a3      	str	r3, [r4, #24]
 800c1f8:	e7d2      	b.n	800c1a0 <__sinit+0xc>
 800c1fa:	bf00      	nop
 800c1fc:	0800c82c 	.word	0x0800c82c
 800c200:	0800c12d 	.word	0x0800c12d

0800c204 <__sfp>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	4607      	mov	r7, r0
 800c208:	f7ff ffac 	bl	800c164 <__sfp_lock_acquire>
 800c20c:	4b1e      	ldr	r3, [pc, #120]	; (800c288 <__sfp+0x84>)
 800c20e:	681e      	ldr	r6, [r3, #0]
 800c210:	69b3      	ldr	r3, [r6, #24]
 800c212:	b913      	cbnz	r3, 800c21a <__sfp+0x16>
 800c214:	4630      	mov	r0, r6
 800c216:	f7ff ffbd 	bl	800c194 <__sinit>
 800c21a:	3648      	adds	r6, #72	; 0x48
 800c21c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c220:	3b01      	subs	r3, #1
 800c222:	d503      	bpl.n	800c22c <__sfp+0x28>
 800c224:	6833      	ldr	r3, [r6, #0]
 800c226:	b30b      	cbz	r3, 800c26c <__sfp+0x68>
 800c228:	6836      	ldr	r6, [r6, #0]
 800c22a:	e7f7      	b.n	800c21c <__sfp+0x18>
 800c22c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c230:	b9d5      	cbnz	r5, 800c268 <__sfp+0x64>
 800c232:	4b16      	ldr	r3, [pc, #88]	; (800c28c <__sfp+0x88>)
 800c234:	60e3      	str	r3, [r4, #12]
 800c236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c23a:	6665      	str	r5, [r4, #100]	; 0x64
 800c23c:	f000 f847 	bl	800c2ce <__retarget_lock_init_recursive>
 800c240:	f7ff ff96 	bl	800c170 <__sfp_lock_release>
 800c244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c24c:	6025      	str	r5, [r4, #0]
 800c24e:	61a5      	str	r5, [r4, #24]
 800c250:	2208      	movs	r2, #8
 800c252:	4629      	mov	r1, r5
 800c254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c258:	f7fe ff6c 	bl	800b134 <memset>
 800c25c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c264:	4620      	mov	r0, r4
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c268:	3468      	adds	r4, #104	; 0x68
 800c26a:	e7d9      	b.n	800c220 <__sfp+0x1c>
 800c26c:	2104      	movs	r1, #4
 800c26e:	4638      	mov	r0, r7
 800c270:	f7ff ff62 	bl	800c138 <__sfmoreglue>
 800c274:	4604      	mov	r4, r0
 800c276:	6030      	str	r0, [r6, #0]
 800c278:	2800      	cmp	r0, #0
 800c27a:	d1d5      	bne.n	800c228 <__sfp+0x24>
 800c27c:	f7ff ff78 	bl	800c170 <__sfp_lock_release>
 800c280:	230c      	movs	r3, #12
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	e7ee      	b.n	800c264 <__sfp+0x60>
 800c286:	bf00      	nop
 800c288:	0800c82c 	.word	0x0800c82c
 800c28c:	ffff0001 	.word	0xffff0001

0800c290 <_fwalk_reent>:
 800c290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c294:	4606      	mov	r6, r0
 800c296:	4688      	mov	r8, r1
 800c298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c29c:	2700      	movs	r7, #0
 800c29e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c2a6:	d505      	bpl.n	800c2b4 <_fwalk_reent+0x24>
 800c2a8:	6824      	ldr	r4, [r4, #0]
 800c2aa:	2c00      	cmp	r4, #0
 800c2ac:	d1f7      	bne.n	800c29e <_fwalk_reent+0xe>
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b4:	89ab      	ldrh	r3, [r5, #12]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d907      	bls.n	800c2ca <_fwalk_reent+0x3a>
 800c2ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	d003      	beq.n	800c2ca <_fwalk_reent+0x3a>
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	47c0      	blx	r8
 800c2c8:	4307      	orrs	r7, r0
 800c2ca:	3568      	adds	r5, #104	; 0x68
 800c2cc:	e7e9      	b.n	800c2a2 <_fwalk_reent+0x12>

0800c2ce <__retarget_lock_init_recursive>:
 800c2ce:	4770      	bx	lr

0800c2d0 <__retarget_lock_acquire_recursive>:
 800c2d0:	4770      	bx	lr

0800c2d2 <__retarget_lock_release_recursive>:
 800c2d2:	4770      	bx	lr

0800c2d4 <__swhatbuf_r>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	460e      	mov	r6, r1
 800c2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2dc:	2900      	cmp	r1, #0
 800c2de:	b096      	sub	sp, #88	; 0x58
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	461d      	mov	r5, r3
 800c2e4:	da07      	bge.n	800c2f6 <__swhatbuf_r+0x22>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	602b      	str	r3, [r5, #0]
 800c2ea:	89b3      	ldrh	r3, [r6, #12]
 800c2ec:	061a      	lsls	r2, r3, #24
 800c2ee:	d410      	bmi.n	800c312 <__swhatbuf_r+0x3e>
 800c2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2f4:	e00e      	b.n	800c314 <__swhatbuf_r+0x40>
 800c2f6:	466a      	mov	r2, sp
 800c2f8:	f000 f946 	bl	800c588 <_fstat_r>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	dbf2      	blt.n	800c2e6 <__swhatbuf_r+0x12>
 800c300:	9a01      	ldr	r2, [sp, #4]
 800c302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c30a:	425a      	negs	r2, r3
 800c30c:	415a      	adcs	r2, r3
 800c30e:	602a      	str	r2, [r5, #0]
 800c310:	e7ee      	b.n	800c2f0 <__swhatbuf_r+0x1c>
 800c312:	2340      	movs	r3, #64	; 0x40
 800c314:	2000      	movs	r0, #0
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	b016      	add	sp, #88	; 0x58
 800c31a:	bd70      	pop	{r4, r5, r6, pc}

0800c31c <__smakebuf_r>:
 800c31c:	898b      	ldrh	r3, [r1, #12]
 800c31e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c320:	079d      	lsls	r5, r3, #30
 800c322:	4606      	mov	r6, r0
 800c324:	460c      	mov	r4, r1
 800c326:	d507      	bpl.n	800c338 <__smakebuf_r+0x1c>
 800c328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	6123      	str	r3, [r4, #16]
 800c330:	2301      	movs	r3, #1
 800c332:	6163      	str	r3, [r4, #20]
 800c334:	b002      	add	sp, #8
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	ab01      	add	r3, sp, #4
 800c33a:	466a      	mov	r2, sp
 800c33c:	f7ff ffca 	bl	800c2d4 <__swhatbuf_r>
 800c340:	9900      	ldr	r1, [sp, #0]
 800c342:	4605      	mov	r5, r0
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff f88f 	bl	800b468 <_malloc_r>
 800c34a:	b948      	cbnz	r0, 800c360 <__smakebuf_r+0x44>
 800c34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c350:	059a      	lsls	r2, r3, #22
 800c352:	d4ef      	bmi.n	800c334 <__smakebuf_r+0x18>
 800c354:	f023 0303 	bic.w	r3, r3, #3
 800c358:	f043 0302 	orr.w	r3, r3, #2
 800c35c:	81a3      	strh	r3, [r4, #12]
 800c35e:	e7e3      	b.n	800c328 <__smakebuf_r+0xc>
 800c360:	4b0d      	ldr	r3, [pc, #52]	; (800c398 <__smakebuf_r+0x7c>)
 800c362:	62b3      	str	r3, [r6, #40]	; 0x28
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	6020      	str	r0, [r4, #0]
 800c368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c36c:	81a3      	strh	r3, [r4, #12]
 800c36e:	9b00      	ldr	r3, [sp, #0]
 800c370:	6163      	str	r3, [r4, #20]
 800c372:	9b01      	ldr	r3, [sp, #4]
 800c374:	6120      	str	r0, [r4, #16]
 800c376:	b15b      	cbz	r3, 800c390 <__smakebuf_r+0x74>
 800c378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c37c:	4630      	mov	r0, r6
 800c37e:	f000 f915 	bl	800c5ac <_isatty_r>
 800c382:	b128      	cbz	r0, 800c390 <__smakebuf_r+0x74>
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	f023 0303 	bic.w	r3, r3, #3
 800c38a:	f043 0301 	orr.w	r3, r3, #1
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	89a0      	ldrh	r0, [r4, #12]
 800c392:	4305      	orrs	r5, r0
 800c394:	81a5      	strh	r5, [r4, #12]
 800c396:	e7cd      	b.n	800c334 <__smakebuf_r+0x18>
 800c398:	0800c12d 	.word	0x0800c12d

0800c39c <memmove>:
 800c39c:	4288      	cmp	r0, r1
 800c39e:	b510      	push	{r4, lr}
 800c3a0:	eb01 0402 	add.w	r4, r1, r2
 800c3a4:	d902      	bls.n	800c3ac <memmove+0x10>
 800c3a6:	4284      	cmp	r4, r0
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	d807      	bhi.n	800c3bc <memmove+0x20>
 800c3ac:	1e43      	subs	r3, r0, #1
 800c3ae:	42a1      	cmp	r1, r4
 800c3b0:	d008      	beq.n	800c3c4 <memmove+0x28>
 800c3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ba:	e7f8      	b.n	800c3ae <memmove+0x12>
 800c3bc:	4402      	add	r2, r0
 800c3be:	4601      	mov	r1, r0
 800c3c0:	428a      	cmp	r2, r1
 800c3c2:	d100      	bne.n	800c3c6 <memmove+0x2a>
 800c3c4:	bd10      	pop	{r4, pc}
 800c3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ce:	e7f7      	b.n	800c3c0 <memmove+0x24>

0800c3d0 <__malloc_lock>:
 800c3d0:	4801      	ldr	r0, [pc, #4]	; (800c3d8 <__malloc_lock+0x8>)
 800c3d2:	f7ff bf7d 	b.w	800c2d0 <__retarget_lock_acquire_recursive>
 800c3d6:	bf00      	nop
 800c3d8:	2000202c 	.word	0x2000202c

0800c3dc <__malloc_unlock>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	; (800c3e4 <__malloc_unlock+0x8>)
 800c3de:	f7ff bf78 	b.w	800c2d2 <__retarget_lock_release_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	2000202c 	.word	0x2000202c

0800c3e8 <_realloc_r>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	4607      	mov	r7, r0
 800c3ec:	4614      	mov	r4, r2
 800c3ee:	460e      	mov	r6, r1
 800c3f0:	b921      	cbnz	r1, 800c3fc <_realloc_r+0x14>
 800c3f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	f7ff b836 	b.w	800b468 <_malloc_r>
 800c3fc:	b922      	cbnz	r2, 800c408 <_realloc_r+0x20>
 800c3fe:	f7fe ffe3 	bl	800b3c8 <_free_r>
 800c402:	4625      	mov	r5, r4
 800c404:	4628      	mov	r0, r5
 800c406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c408:	f000 f8f2 	bl	800c5f0 <_malloc_usable_size_r>
 800c40c:	42a0      	cmp	r0, r4
 800c40e:	d20f      	bcs.n	800c430 <_realloc_r+0x48>
 800c410:	4621      	mov	r1, r4
 800c412:	4638      	mov	r0, r7
 800c414:	f7ff f828 	bl	800b468 <_malloc_r>
 800c418:	4605      	mov	r5, r0
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d0f2      	beq.n	800c404 <_realloc_r+0x1c>
 800c41e:	4631      	mov	r1, r6
 800c420:	4622      	mov	r2, r4
 800c422:	f7fe fe79 	bl	800b118 <memcpy>
 800c426:	4631      	mov	r1, r6
 800c428:	4638      	mov	r0, r7
 800c42a:	f7fe ffcd 	bl	800b3c8 <_free_r>
 800c42e:	e7e9      	b.n	800c404 <_realloc_r+0x1c>
 800c430:	4635      	mov	r5, r6
 800c432:	e7e7      	b.n	800c404 <_realloc_r+0x1c>

0800c434 <_raise_r>:
 800c434:	291f      	cmp	r1, #31
 800c436:	b538      	push	{r3, r4, r5, lr}
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	d904      	bls.n	800c448 <_raise_r+0x14>
 800c43e:	2316      	movs	r3, #22
 800c440:	6003      	str	r3, [r0, #0]
 800c442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c44a:	b112      	cbz	r2, 800c452 <_raise_r+0x1e>
 800c44c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c450:	b94b      	cbnz	r3, 800c466 <_raise_r+0x32>
 800c452:	4620      	mov	r0, r4
 800c454:	f000 f830 	bl	800c4b8 <_getpid_r>
 800c458:	462a      	mov	r2, r5
 800c45a:	4601      	mov	r1, r0
 800c45c:	4620      	mov	r0, r4
 800c45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c462:	f000 b817 	b.w	800c494 <_kill_r>
 800c466:	2b01      	cmp	r3, #1
 800c468:	d00a      	beq.n	800c480 <_raise_r+0x4c>
 800c46a:	1c59      	adds	r1, r3, #1
 800c46c:	d103      	bne.n	800c476 <_raise_r+0x42>
 800c46e:	2316      	movs	r3, #22
 800c470:	6003      	str	r3, [r0, #0]
 800c472:	2001      	movs	r0, #1
 800c474:	e7e7      	b.n	800c446 <_raise_r+0x12>
 800c476:	2400      	movs	r4, #0
 800c478:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c47c:	4628      	mov	r0, r5
 800c47e:	4798      	blx	r3
 800c480:	2000      	movs	r0, #0
 800c482:	e7e0      	b.n	800c446 <_raise_r+0x12>

0800c484 <raise>:
 800c484:	4b02      	ldr	r3, [pc, #8]	; (800c490 <raise+0xc>)
 800c486:	4601      	mov	r1, r0
 800c488:	6818      	ldr	r0, [r3, #0]
 800c48a:	f7ff bfd3 	b.w	800c434 <_raise_r>
 800c48e:	bf00      	nop
 800c490:	2000001c 	.word	0x2000001c

0800c494 <_kill_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4d07      	ldr	r5, [pc, #28]	; (800c4b4 <_kill_r+0x20>)
 800c498:	2300      	movs	r3, #0
 800c49a:	4604      	mov	r4, r0
 800c49c:	4608      	mov	r0, r1
 800c49e:	4611      	mov	r1, r2
 800c4a0:	602b      	str	r3, [r5, #0]
 800c4a2:	f7f5 f827 	bl	80014f4 <_kill>
 800c4a6:	1c43      	adds	r3, r0, #1
 800c4a8:	d102      	bne.n	800c4b0 <_kill_r+0x1c>
 800c4aa:	682b      	ldr	r3, [r5, #0]
 800c4ac:	b103      	cbz	r3, 800c4b0 <_kill_r+0x1c>
 800c4ae:	6023      	str	r3, [r4, #0]
 800c4b0:	bd38      	pop	{r3, r4, r5, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20002034 	.word	0x20002034

0800c4b8 <_getpid_r>:
 800c4b8:	f7f5 b814 	b.w	80014e4 <_getpid>

0800c4bc <__sread>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	460c      	mov	r4, r1
 800c4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c4:	f000 f89c 	bl	800c600 <_read_r>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	bfab      	itete	ge
 800c4cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c4d0:	181b      	addge	r3, r3, r0
 800c4d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4d6:	bfac      	ite	ge
 800c4d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4da:	81a3      	strhlt	r3, [r4, #12]
 800c4dc:	bd10      	pop	{r4, pc}

0800c4de <__swrite>:
 800c4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e2:	461f      	mov	r7, r3
 800c4e4:	898b      	ldrh	r3, [r1, #12]
 800c4e6:	05db      	lsls	r3, r3, #23
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	4616      	mov	r6, r2
 800c4ee:	d505      	bpl.n	800c4fc <__swrite+0x1e>
 800c4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f000 f868 	bl	800c5cc <_lseek_r>
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c506:	81a3      	strh	r3, [r4, #12]
 800c508:	4632      	mov	r2, r6
 800c50a:	463b      	mov	r3, r7
 800c50c:	4628      	mov	r0, r5
 800c50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c512:	f000 b817 	b.w	800c544 <_write_r>

0800c516 <__sseek>:
 800c516:	b510      	push	{r4, lr}
 800c518:	460c      	mov	r4, r1
 800c51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c51e:	f000 f855 	bl	800c5cc <_lseek_r>
 800c522:	1c43      	adds	r3, r0, #1
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	bf15      	itete	ne
 800c528:	6560      	strne	r0, [r4, #84]	; 0x54
 800c52a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c52e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c532:	81a3      	strheq	r3, [r4, #12]
 800c534:	bf18      	it	ne
 800c536:	81a3      	strhne	r3, [r4, #12]
 800c538:	bd10      	pop	{r4, pc}

0800c53a <__sclose>:
 800c53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c53e:	f000 b813 	b.w	800c568 <_close_r>
	...

0800c544 <_write_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d07      	ldr	r5, [pc, #28]	; (800c564 <_write_r+0x20>)
 800c548:	4604      	mov	r4, r0
 800c54a:	4608      	mov	r0, r1
 800c54c:	4611      	mov	r1, r2
 800c54e:	2200      	movs	r2, #0
 800c550:	602a      	str	r2, [r5, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	f7f5 f805 	bl	8001562 <_write>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_write_r+0x1e>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_write_r+0x1e>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20002034 	.word	0x20002034

0800c568 <_close_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d06      	ldr	r5, [pc, #24]	; (800c584 <_close_r+0x1c>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	f7f5 f811 	bl	800159a <_close>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_close_r+0x1a>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_close_r+0x1a>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	20002034 	.word	0x20002034

0800c588 <_fstat_r>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4d07      	ldr	r5, [pc, #28]	; (800c5a8 <_fstat_r+0x20>)
 800c58c:	2300      	movs	r3, #0
 800c58e:	4604      	mov	r4, r0
 800c590:	4608      	mov	r0, r1
 800c592:	4611      	mov	r1, r2
 800c594:	602b      	str	r3, [r5, #0]
 800c596:	f7f5 f80c 	bl	80015b2 <_fstat>
 800c59a:	1c43      	adds	r3, r0, #1
 800c59c:	d102      	bne.n	800c5a4 <_fstat_r+0x1c>
 800c59e:	682b      	ldr	r3, [r5, #0]
 800c5a0:	b103      	cbz	r3, 800c5a4 <_fstat_r+0x1c>
 800c5a2:	6023      	str	r3, [r4, #0]
 800c5a4:	bd38      	pop	{r3, r4, r5, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20002034 	.word	0x20002034

0800c5ac <_isatty_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	4d06      	ldr	r5, [pc, #24]	; (800c5c8 <_isatty_r+0x1c>)
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	602b      	str	r3, [r5, #0]
 800c5b8:	f7f5 f80b 	bl	80015d2 <_isatty>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_isatty_r+0x1a>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_isatty_r+0x1a>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	20002034 	.word	0x20002034

0800c5cc <_lseek_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	4d07      	ldr	r5, [pc, #28]	; (800c5ec <_lseek_r+0x20>)
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	4608      	mov	r0, r1
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	602a      	str	r2, [r5, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f7f5 f804 	bl	80015e8 <_lseek>
 800c5e0:	1c43      	adds	r3, r0, #1
 800c5e2:	d102      	bne.n	800c5ea <_lseek_r+0x1e>
 800c5e4:	682b      	ldr	r3, [r5, #0]
 800c5e6:	b103      	cbz	r3, 800c5ea <_lseek_r+0x1e>
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
 800c5ec:	20002034 	.word	0x20002034

0800c5f0 <_malloc_usable_size_r>:
 800c5f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5f4:	1f18      	subs	r0, r3, #4
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	bfbc      	itt	lt
 800c5fa:	580b      	ldrlt	r3, [r1, r0]
 800c5fc:	18c0      	addlt	r0, r0, r3
 800c5fe:	4770      	bx	lr

0800c600 <_read_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d07      	ldr	r5, [pc, #28]	; (800c620 <_read_r+0x20>)
 800c604:	4604      	mov	r4, r0
 800c606:	4608      	mov	r0, r1
 800c608:	4611      	mov	r1, r2
 800c60a:	2200      	movs	r2, #0
 800c60c:	602a      	str	r2, [r5, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	f7f4 ff8a 	bl	8001528 <_read>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_read_r+0x1e>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_read_r+0x1e>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	20002034 	.word	0x20002034

0800c624 <_init>:
 800c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c626:	bf00      	nop
 800c628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c62a:	bc08      	pop	{r3}
 800c62c:	469e      	mov	lr, r3
 800c62e:	4770      	bx	lr

0800c630 <_fini>:
 800c630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c632:	bf00      	nop
 800c634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c636:	bc08      	pop	{r3}
 800c638:	469e      	mov	lr, r3
 800c63a:	4770      	bx	lr
