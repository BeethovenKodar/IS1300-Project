
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb4  08004bb4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bbc  08004bbc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000020  08004be4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08004be4  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eea1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e6  00000000  00000000  0003eef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  000425d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  00043cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f78  00000000  00000000  000452b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001affc  00000000  00000000  00049228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff4d7  00000000  00000000  00064224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001636fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e4  00000000  00000000  00163750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b54 	.word	0x08004b54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08004b54 	.word	0x08004b54

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b44      	ldr	r3, [pc, #272]	; (80005f0 <MX_GPIO_Init+0x128>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a43      	ldr	r2, [pc, #268]	; (80005f0 <MX_GPIO_Init+0x128>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b41      	ldr	r3, [pc, #260]	; (80005f0 <MX_GPIO_Init+0x128>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	4b3e      	ldr	r3, [pc, #248]	; (80005f0 <MX_GPIO_Init+0x128>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a3d      	ldr	r2, [pc, #244]	; (80005f0 <MX_GPIO_Init+0x128>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <MX_GPIO_Init+0x128>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <MX_GPIO_Init+0x128>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a37      	ldr	r2, [pc, #220]	; (80005f0 <MX_GPIO_Init+0x128>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <MX_GPIO_Init+0x128>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <MX_GPIO_Init+0x128>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a31      	ldr	r2, [pc, #196]	; (80005f0 <MX_GPIO_Init+0x128>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <MX_GPIO_Init+0x128>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <MX_GPIO_Init+0x128>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <MX_GPIO_Init+0x128>)
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <MX_GPIO_Init+0x128>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0308 	and.w	r3, r3, #8
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f000 fedd 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Backlight_Pin|Green_Backlight_Pin|White_backlight_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000568:	4822      	ldr	r0, [pc, #136]	; (80005f4 <MX_GPIO_Init+0x12c>)
 800056a:	f000 fed7 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000574:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	481b      	ldr	r0, [pc, #108]	; (80005f4 <MX_GPIO_Init+0x12c>)
 8000586:	f000 fd1f 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800058a:	230c      	movs	r3, #12
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800059a:	2307      	movs	r3, #7
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fd0e 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ac:	2320      	movs	r3, #32
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f000 fcff 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Red_Backlight_Pin|Green_Backlight_Pin|White_backlight_Pin;
 80005ca:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_GPIO_Init+0x12c>)
 80005e4:	f000 fcf0 	bl	8000fc8 <HAL_GPIO_Init>

}
 80005e8:	bf00      	nop
 80005ea:	3728      	adds	r7, #40	; 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48000800 	.word	0x48000800

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fb1e 	bl	8000c3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f816 	bl	8000630 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f7ff ff60 	bl	80004c8 <MX_GPIO_Init>
  MX_UART5_Init();
 8000608:	f000 fa24 	bl	8000a54 <MX_UART5_Init>
  MX_SPI2_Init();
 800060c:	f000 f87a 	bl	8000704 <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
//	uart_transmit(Buffer, (uint16_t) 22);
//	uart_receive(Buffer, (uint16_t) 22);
	HAL_GPIO_WritePin(White_backlight_GPIO_Port, White_backlight_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <main+0x34>)
 8000618:	f000 fe80 	bl	800131c <HAL_GPIO_WritePin>
	display_init();
 800061c:	f000 f92a 	bl	8000874 <display_init>
	HAL_GPIO_WritePin(Red_Backlight_GPIO_Port, Red_Backlight_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4801      	ldr	r0, [pc, #4]	; (800062c <main+0x34>)
 8000626:	f000 fe79 	bl	800131c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(White_backlight_GPIO_Port, White_backlight_Pin, GPIO_PIN_SET);
 800062a:	e7f1      	b.n	8000610 <main+0x18>
 800062c:	48000800 	.word	0x48000800

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	; 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fa80 	bl	8004b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000656:	f000 fe87 	bl	8001368 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f000 f84a 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000676:	2302      	movs	r3, #2
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067e:	230a      	movs	r3, #10
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4618      	mov	r0, r3
 8000694:	f000 febe 	bl	8001414 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800069e:	f000 f82b 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2303      	movs	r3, #3
 80006a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fa90 	bl	8001be0 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c6:	f000 f817 	bl	80006f8 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3758      	adds	r7, #88	; 0x58
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d101      	bne.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006e6:	f000 fac9 	bl	8000c7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40012c00 	.word	0x40012c00

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_SPI2_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_SPI2_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_SPI2_Init+0x74>)
 8000710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_SPI2_Init+0x74>)
 8000718:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800071c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_SPI2_Init+0x74>)
 8000720:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000724:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_SPI2_Init+0x74>)
 8000728:	2202      	movs	r2, #2
 800072a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_SPI2_Init+0x74>)
 800072e:	2201      	movs	r2, #1
 8000730:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI2_Init+0x74>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_SPI2_Init+0x74>)
 800073c:	2230      	movs	r2, #48	; 0x30
 800073e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_SPI2_Init+0x74>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_SPI2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI2_Init+0x74>)
 8000754:	2207      	movs	r2, #7
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_SPI2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_SPI2_Init+0x74>)
 8000766:	f002 f92f 	bl	80029c8 <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000770:	f7ff ffc2 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200004c8 	.word	0x200004c8
 800077c:	40003800 	.word	0x40003800

08000780 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <HAL_SPI_MspInit+0xb4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d144      	bne.n	800082c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6593      	str	r3, [r2, #88]	; 0x58
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_SPI_MspInit+0xb8>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ea:	2308      	movs	r3, #8
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fa:	2305      	movs	r3, #5
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <HAL_SPI_MspInit+0xbc>)
 8000806:	f000 fbdf 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800081c:	2305      	movs	r3, #5
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <HAL_SPI_MspInit+0xc0>)
 8000828:	f000 fbce 	bl	8000fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40003800 	.word	0x40003800
 8000838:	40021000 	.word	0x40021000
 800083c:	48000800 	.word	0x48000800
 8000840:	48000400 	.word	0x48000400

08000844 <adjust2>:
    0x38, //0x1f0803
    0x0F  //0x1f0F00
};


void adjust2(uint8_t data) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
    buf[1] = ((data & 0x0F));
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 030f 	and.w	r3, r3, #15
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <adjust2+0x2c>)
 8000858:	705a      	strb	r2, [r3, #1]
    buf[2] = ((data & 0xF0) >> 4);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <adjust2+0x2c>)
 8000862:	709a      	strb	r2, [r3, #2]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000000 	.word	0x20000000

08000874 <display_init>:

void display_init() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 800087a:	2064      	movs	r0, #100	; 0x64
 800087c:	f000 fa1e 	bl	8000cbc <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	e014      	b.n	80008b0 <display_init+0x3c>
	adjust2(opps[i]);
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <display_init+0x4c>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffd8 	bl	8000844 <adjust2>
	if (HAL_SPI_Transmit(&hspi2, (uint8_t*)buf, 3, 50) != HAL_OK) {
 8000894:	2332      	movs	r3, #50	; 0x32
 8000896:	2203      	movs	r2, #3
 8000898:	490a      	ldr	r1, [pc, #40]	; (80008c4 <display_init+0x50>)
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <display_init+0x54>)
 800089c:	f002 f937 	bl	8002b0e <HAL_SPI_Transmit>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <display_init+0x36>
	    SPI_Error();
 80008a6:	f000 f811 	bl	80008cc <SPI_Error>
    for (int i = 0; i < 11; i++) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b0a      	cmp	r3, #10
 80008b4:	dde7      	ble.n	8000886 <display_init+0x12>
	}
    }
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000000 	.word	0x20000000
 80008c8:	200004c8 	.word	0x200004c8

080008cc <SPI_Error>:

void SPI_Error() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2120      	movs	r1, #32
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fd20 	bl	800131c <HAL_GPIO_WritePin>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_MspInit+0x4c>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	; 0x60
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_MspInit+0x4c>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_MspInit+0x4c>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	210f      	movs	r1, #15
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f000 faa9 	bl	8000e74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	2019      	movs	r0, #25
 8000946:	f000 fa95 	bl	8000e74 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800094a:	2019      	movs	r0, #25
 800094c:	f000 faae 	bl	8000eac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_InitTick+0x9c>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000954:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <HAL_InitTick+0x9c>)
 8000956:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800095a:	6613      	str	r3, [r2, #96]	; 0x60
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_InitTick+0x9c>)
 800095e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fada 	bl	8001f2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000978:	f001 fac2 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 800097c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <HAL_InitTick+0xa0>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0c9b      	lsrs	r3, r3, #18
 8000988:	3b01      	subs	r3, #1
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_InitTick+0xa4>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <HAL_InitTick+0xa8>)
 8000990:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_InitTick+0xa4>)
 8000994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000998:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_InitTick+0xa4>)
 800099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_InitTick+0xa4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_InitTick+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <HAL_InitTick+0xa4>)
 80009ae:	f002 fb81 	bl	80030b4 <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d104      	bne.n	80009c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009b8:	4806      	ldr	r0, [pc, #24]	; (80009d4 <HAL_InitTick+0xa4>)
 80009ba:	f002 fbdd 	bl	8003178 <HAL_TIM_Base_Start_IT>
 80009be:	4603      	mov	r3, r0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	431bde83 	.word	0x431bde83
 80009d4:	2000052c 	.word	0x2000052c
 80009d8:	40012c00 	.word	0x40012c00

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a0e:	f002 fc23 	bl	8003258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000052c 	.word	0x2000052c

08000a1c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <UART5_IRQHandler+0x10>)
 8000a22:	f002 fe67 	bl	80036f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000578 	.word	0x20000578

08000a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_UART5_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_UART5_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_UART5_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_UART5_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_UART5_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_UART5_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_UART5_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_UART5_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_UART5_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_UART5_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_UART5_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_UART5_Init+0x58>)
 8000a98:	f002 fdde 	bl	8003658 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f7ff fe29 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000578 	.word	0x20000578
 8000ab0:	40005000 	.word	0x40005000

08000ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ac      	sub	sp, #176	; 0xb0
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2288      	movs	r2, #136	; 0x88
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 f835 	bl	8004b44 <memset>
  if(uartHandle->Instance==UART5)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <HAL_UART_MspInit+0x104>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d164      	bne.n	8000bae <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 faad 	bl	8002050 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff fdfc 	bl	80006f8 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <HAL_UART_MspInit+0x108>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b62:	2308      	movs	r3, #8
 8000b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <HAL_UART_MspInit+0x10c>)
 8000b70:	f000 fa2a 	bl	8000fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b74:	2304      	movs	r3, #4
 8000b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b96:	4619      	mov	r1, r3
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <HAL_UART_MspInit+0x110>)
 8000b9a:	f000 fa15 	bl	8000fc8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2105      	movs	r1, #5
 8000ba2:	2035      	movs	r0, #53	; 0x35
 8000ba4:	f000 f966 	bl	8000e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000ba8:	2035      	movs	r0, #53	; 0x35
 8000baa:	f000 f97f 	bl	8000eac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000bae:	bf00      	nop
 8000bb0:	37b0      	adds	r7, #176	; 0xb0
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40005000 	.word	0x40005000
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	48000c00 	.word	0x48000c00

08000bc8 <HAL_UART_TxCpltCallback>:
	    Error_Uart();
	}
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <HAL_UART_TxCpltCallback+0x1c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000014 	.word	0x20000014

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff ff20 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f003 ff71 	bl	8004afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fced 	bl	80005f8 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c2c:	08004bc4 	.word	0x08004bc4
  ldr r2, =_sbss
 8000c30:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c34:	20000600 	.word	0x20000600

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_Init+0x3c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <HAL_Init+0x3c>)
 8000c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f000 f903 	bl	8000e5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c58:	200f      	movs	r0, #15
 8000c5a:	f7ff fe69 	bl	8000930 <HAL_InitTick>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	e001      	b.n	8000c6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c6a:	f7ff fe39 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	2000001c 	.word	0x2000001c
 8000ca0:	200005fc 	.word	0x200005fc

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200005fc 	.word	0x200005fc

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff ffee 	bl	8000ca4 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffde 	bl	8000ca4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000001c 	.word	0x2000001c

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff4c 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e86:	f7ff ff61 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68b9      	ldr	r1, [r7, #8]
 8000e90:	6978      	ldr	r0, [r7, #20]
 8000e92:	f7ff ffb1 	bl	8000df8 <NVIC_EncodePriority>
 8000e96:	4602      	mov	r2, r0
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff80 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff54 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d008      	beq.n	8000ef2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e022      	b.n	8000f38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 020e 	bic.w	r2, r2, #14
 8000f00:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0201 	bic.w	r2, r2, #1
 8000f10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 021c 	and.w	r2, r3, #28
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d005      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2204      	movs	r2, #4
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e029      	b.n	8000fbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 020e 	bic.w	r2, r2, #14
 8000f76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0201 	bic.w	r2, r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	f003 021c 	and.w	r2, r3, #28
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	4798      	blx	r3
    }
  }
  return status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd6:	e17f      	b.n	80012d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8171 	beq.w	80012d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d005      	beq.n	8001008 <HAL_GPIO_Init+0x40>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d130      	bne.n	800106a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	f003 0201 	and.w	r2, r3, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b03      	cmp	r3, #3
 8001074:	d118      	bne.n	80010a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	08db      	lsrs	r3, r3, #3
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80ac 	beq.w	80012d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <HAL_GPIO_Init+0x330>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a5e      	ldr	r2, [pc, #376]	; (80012f8 <HAL_GPIO_Init+0x330>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_GPIO_Init+0x330>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001192:	4a5a      	ldr	r2, [pc, #360]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011bc:	d025      	beq.n	800120a <HAL_GPIO_Init+0x242>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x338>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01f      	beq.n	8001206 <HAL_GPIO_Init+0x23e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <HAL_GPIO_Init+0x33c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x23a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_GPIO_Init+0x340>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x236>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_GPIO_Init+0x344>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x232>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <HAL_GPIO_Init+0x348>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x22e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x34c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x22a>
 80011ee:	2306      	movs	r3, #6
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x244>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x244>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x244>
 800120a:	2300      	movs	r3, #0
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121c:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x334>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_GPIO_Init+0x350>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800124e:	4a32      	ldr	r2, [pc, #200]	; (8001318 <HAL_GPIO_Init+0x350>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_GPIO_Init+0x350>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <HAL_GPIO_Init+0x350>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_GPIO_Init+0x350>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_GPIO_Init+0x350>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_GPIO_Init+0x350>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_GPIO_Init+0x350>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f47f ae78 	bne.w	8000fd8 <HAL_GPIO_Init+0x10>
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	48001800 	.word	0x48001800
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_PWREx_GetVoltageRange+0x18>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001376:	d130      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001384:	d038      	beq.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2232      	movs	r2, #50	; 0x32
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ac:	e002      	b.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c0:	d102      	bne.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f2      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d4:	d110      	bne.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e00f      	b.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e6:	d007      	beq.n	80013f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40007000 	.word	0x40007000
 800140c:	20000010 	.word	0x20000010
 8001410:	431bde83 	.word	0x431bde83

08001414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e3d4      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001426:	4ba1      	ldr	r3, [pc, #644]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001430:	4b9e      	ldr	r3, [pc, #632]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80e4 	beq.w	8001610 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_RCC_OscConfig+0x4a>
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	f040 808b 	bne.w	800156c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	f040 8087 	bne.w	800156c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145e:	4b93      	ldr	r3, [pc, #588]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <HAL_RCC_OscConfig+0x62>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e3ac      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1a      	ldr	r2, [r3, #32]
 800147a:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <HAL_RCC_OscConfig+0x7c>
 8001486:	4b89      	ldr	r3, [pc, #548]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148e:	e005      	b.n	800149c <HAL_RCC_OscConfig+0x88>
 8001490:	4b86      	ldr	r3, [pc, #536]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800149c:	4293      	cmp	r3, r2
 800149e:	d223      	bcs.n	80014e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fd73 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e38d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b4:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a7c      	ldr	r2, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4977      	ldr	r1, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	4972      	ldr	r1, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
 80014e6:	e025      	b.n	8001534 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a6f      	ldr	r2, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	496a      	ldr	r1, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001506:	4b69      	ldr	r3, [pc, #420]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	4965      	ldr	r1, [pc, #404]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fd33 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e34d      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001534:	f000 fc36 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	495a      	ldr	r1, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x29c>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_RCC_OscConfig+0x2a0>)
 8001552:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_RCC_OscConfig+0x2a4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f9e9 	bl	8000930 <HAL_InitTick>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d052      	beq.n	800160e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	e331      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d032      	beq.n	80015da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001574:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb90 	bl	8000ca4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001588:	f7ff fb8c 	bl	8000ca4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e31a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800159a:	4b44      	ldr	r3, [pc, #272]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a40      	ldr	r2, [pc, #256]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	493b      	ldr	r1, [pc, #236]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	4936      	ldr	r1, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
 80015d8:	e01a      	b.n	8001610 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a33      	ldr	r2, [pc, #204]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb5d 	bl	8000ca4 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ee:	f7ff fb59 	bl	8000ca4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e2e7      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x1da>
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800160e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d074      	beq.n	8001706 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2b08      	cmp	r3, #8
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x21a>
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d10e      	bne.n	8001646 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d10b      	bne.n	8001646 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d064      	beq.n	8001704 <HAL_RCC_OscConfig+0x2f0>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d160      	bne.n	8001704 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e2c4      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x24a>
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a15      	ldr	r2, [pc, #84]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e01d      	b.n	800169a <HAL_RCC_OscConfig+0x286>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001666:	d10c      	bne.n	8001682 <HAL_RCC_OscConfig+0x26e>
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 800166e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e00b      	b.n	800169a <HAL_RCC_OscConfig+0x286>
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x298>)
 8001694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d01c      	beq.n	80016dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff faff 	bl	8000ca4 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a8:	e011      	b.n	80016ce <HAL_RCC_OscConfig+0x2ba>
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08004b6c 	.word	0x08004b6c
 80016b4:	20000010 	.word	0x20000010
 80016b8:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff faf2 	bl	8000ca4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e280      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	4baf      	ldr	r3, [pc, #700]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x2a8>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fae2 	bl	8000ca4 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fade 	bl	8000ca4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e26c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	4ba5      	ldr	r3, [pc, #660]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2d0>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d060      	beq.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d005      	beq.n	8001724 <HAL_RCC_OscConfig+0x310>
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d119      	bne.n	8001752 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d116      	bne.n	8001752 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001724:	4b99      	ldr	r3, [pc, #612]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_OscConfig+0x328>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e249      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b93      	ldr	r3, [pc, #588]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	4990      	ldr	r1, [pc, #576]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001750:	e040      	b.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d023      	beq.n	80017a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175a:	4b8c      	ldr	r3, [pc, #560]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff fa9d 	bl	8000ca4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fa99 	bl	8000ca4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e227      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001780:	4b82      	ldr	r3, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b7f      	ldr	r3, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	061b      	lsls	r3, r3, #24
 800179a:	497c      	ldr	r1, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
 80017a0:	e018      	b.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b7a      	ldr	r3, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a79      	ldr	r2, [pc, #484]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80017a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff fa79 	bl	8000ca4 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b6:	f7ff fa75 	bl	8000ca4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e203      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c8:	4b70      	ldr	r3, [pc, #448]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d03c      	beq.n	800185a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01c      	beq.n	8001822 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e8:	4b68      	ldr	r3, [pc, #416]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80017ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ee:	4a67      	ldr	r2, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fa54 	bl	8000ca4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fa50 	bl	8000ca4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1de      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001812:	4b5e      	ldr	r3, [pc, #376]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ef      	beq.n	8001800 <HAL_RCC_OscConfig+0x3ec>
 8001820:	e01b      	b.n	800185a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001828:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fa37 	bl	8000ca4 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183a:	f7ff fa33 	bl	8000ca4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1c1      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ef      	bne.n	800183a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80a6 	beq.w	80019b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10d      	bne.n	8001894 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	4b44      	ldr	r3, [pc, #272]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a43      	ldr	r2, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001890:	2301      	movs	r3, #1
 8001892:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001894:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <HAL_RCC_OscConfig+0x57c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d118      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_RCC_OscConfig+0x57c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <HAL_RCC_OscConfig+0x57c>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ac:	f7ff f9fa 	bl	8000ca4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b4:	f7ff f9f6 	bl	8000ca4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e184      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x57c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_RCC_OscConfig+0x4d8>
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80018dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e0:	4a2a      	ldr	r2, [pc, #168]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ea:	e024      	b.n	8001936 <HAL_RCC_OscConfig+0x522>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d110      	bne.n	8001916 <HAL_RCC_OscConfig+0x502>
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x578>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001914:	e00f      	b.n	8001936 <HAL_RCC_OscConfig+0x522>
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191c:	4a1b      	ldr	r2, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_RCC_OscConfig+0x578>)
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800192e:	f023 0304 	bic.w	r3, r3, #4
 8001932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff f9b1 	bl	8000ca4 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff f9ad 	bl	8000ca4 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e139      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x578>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ed      	beq.n	8001946 <HAL_RCC_OscConfig+0x532>
 800196a:	e01a      	b.n	80019a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f99a 	bl	8000ca4 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001972:	e00f      	b.n	8001994 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f996 	bl	8000ca4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d906      	bls.n	8001994 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e122      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001994:	4b90      	ldr	r3, [pc, #576]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1e8      	bne.n	8001974 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b8b      	ldr	r3, [pc, #556]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	4a8a      	ldr	r2, [pc, #552]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8108 	beq.w	8001bce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	f040 80d0 	bne.w	8001b68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019c8:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	429a      	cmp	r2, r3
 80019da:	d130      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	3b01      	subs	r3, #1
 80019e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d127      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d11f      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a08:	2a07      	cmp	r2, #7
 8001a0a:	bf14      	ite	ne
 8001a0c:	2201      	movne	r2, #1
 8001a0e:	2200      	moveq	r2, #0
 8001a10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d113      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d06e      	beq.n	8001b1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d069      	beq.n	8001b18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a50:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0b7      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a60:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5c      	ldr	r2, [pc, #368]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a6c:	f7ff f91a 	bl	8000ca4 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f916 	bl	8000ca4 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e0a4      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a86:	4b54      	ldr	r3, [pc, #336]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a92:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <HAL_RCC_OscConfig+0x7c8>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa2:	3a01      	subs	r2, #1
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aac:	0212      	lsls	r2, r2, #8
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab4:	0852      	lsrs	r2, r2, #1
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	0552      	lsls	r2, r2, #21
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ac0:	0852      	lsrs	r2, r2, #1
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0652      	lsls	r2, r2, #25
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001acc:	0912      	lsrs	r2, r2, #4
 8001ace:	0452      	lsls	r2, r2, #17
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	4941      	ldr	r1, [pc, #260]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ad8:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a3e      	ldr	r2, [pc, #248]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4a3b      	ldr	r2, [pc, #236]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001af0:	f7ff f8d8 	bl	8000ca4 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff f8d4 	bl	8000ca4 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e062      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b16:	e05a      	b.n	8001bce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e059      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d152      	bne.n	8001bce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b40:	f7ff f8b0 	bl	8000ca4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f8ac 	bl	8000ca4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e03a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x734>
 8001b66:	e032      	b.n	8001bce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d02d      	beq.n	8001bca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b78:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b8c:	f023 0303 	bic.w	r3, r3, #3
 8001b90:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001b98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f87f 	bl	8000ca4 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f87b 	bl	8000ca4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e009      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x7c4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x796>
 8001bc8:	e001      	b.n	8001bce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	f99d808c 	.word	0xf99d808c

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0c8      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	4961      	ldr	r1, [pc, #388]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0b0      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d04c      	beq.n	8001cca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d121      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e09e      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d115      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e092      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c68:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e086      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e07e      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 0203 	bic.w	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	493f      	ldr	r1, [pc, #252]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c9a:	f7ff f803 	bl	8000ca4 <HAL_GetTick>
 8001c9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca2:	f7fe ffff 	bl	8000ca4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e066      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 020c 	and.w	r2, r3, #12
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d1eb      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	492c      	ldr	r1, [pc, #176]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d210      	bcs.n	8001d18 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0207 	bic.w	r2, r3, #7
 8001cfe:	4924      	ldr	r1, [pc, #144]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_RCC_ClockConfig+0x1b0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e036      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4918      	ldr	r1, [pc, #96]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4910      	ldr	r1, [pc, #64]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d56:	f000 f825 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	490c      	ldr	r1, [pc, #48]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	5ccb      	ldrb	r3, [r1, r3]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fdd8 	bl	8000930 <HAL_InitTick>
 8001d80:	4603      	mov	r3, r0
 8001d82:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d84:	7afb      	ldrb	r3, [r7, #11]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08004b6c 	.word	0x08004b6c
 8001d9c:	20000010 	.word	0x20000010
 8001da0:	20000018 	.word	0x20000018

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d121      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d11e      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e005      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e00:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	e004      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d134      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d003      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xac>
 8001e48:	e005      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4c:	617b      	str	r3, [r7, #20]
      break;
 8001e4e:	e005      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e52:	617b      	str	r3, [r7, #20]
      break;
 8001e54:	e002      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	617b      	str	r3, [r7, #20]
      break;
 8001e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	3301      	adds	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	fb02 f203 	mul.w	r2, r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0e5b      	lsrs	r3, r3, #25
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08004b84 	.word	0x08004b84
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000010 	.word	0x20000010

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4904      	ldr	r1, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08004b7c 	.word	0x08004b7c

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f04:	f7ff ffda 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4904      	ldr	r1, [pc, #16]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	08004b7c 	.word	0x08004b7c

08001f2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	220f      	movs	r2, #15
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_RCC_GetClockConfig+0x5c>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RCC_GetClockConfig+0x5c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_GetClockConfig+0x5c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCC_GetClockConfig+0x60>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0207 	and.w	r2, r3, #7
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	601a      	str	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40022000 	.word	0x40022000

08001f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fa8:	f7ff f9d0 	bl	800134c <HAL_PWREx_GetVoltageRange>
 8001fac:	6178      	str	r0, [r7, #20]
 8001fae:	e014      	b.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	4a24      	ldr	r2, [pc, #144]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fc8:	f7ff f9c0 	bl	800134c <HAL_PWREx_GetVoltageRange>
 8001fcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe0:	d10b      	bne.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d919      	bls.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2ba0      	cmp	r3, #160	; 0xa0
 8001fec:	d902      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fee:	2302      	movs	r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e013      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e010      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d902      	bls.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002000:	2303      	movs	r3, #3
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e00a      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d102      	bne.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800200c:	2302      	movs	r3, #2
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e004      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b70      	cmp	r3, #112	; 0x70
 8002016:	d101      	bne.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002018:	2301      	movs	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 0207 	bic.w	r2, r3, #7
 8002024:	4909      	ldr	r1, [pc, #36]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	40022000 	.word	0x40022000

08002050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002058:	2300      	movs	r3, #0
 800205a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800205c:	2300      	movs	r3, #0
 800205e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002068:	2b00      	cmp	r3, #0
 800206a:	d041      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002070:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002074:	d02a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002076:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800207a:	d824      	bhi.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800207c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002080:	d008      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002086:	d81e      	bhi.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800208c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002090:	d010      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002092:	e018      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002094:	4b86      	ldr	r3, [pc, #536]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a85      	ldr	r2, [pc, #532]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a0:	e015      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fabb 	bl	8002624 <RCCEx_PLLSAI1_Config>
 80020ae:	4603      	mov	r3, r0
 80020b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020b2:	e00c      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3320      	adds	r3, #32
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fba6 	bl	800280c <RCCEx_PLLSAI2_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020c4:	e003      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	74fb      	strb	r3, [r7, #19]
      break;
 80020ca:	e000      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d4:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e2:	4973      	ldr	r1, [pc, #460]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ea:	e001      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d041      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002100:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002104:	d02a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002106:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800210a:	d824      	bhi.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800210c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002110:	d008      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002116:	d81e      	bhi.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800211c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002120:	d010      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002122:	e018      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002124:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a61      	ldr	r2, [pc, #388]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002130:	e015      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fa73 	bl	8002624 <RCCEx_PLLSAI1_Config>
 800213e:	4603      	mov	r3, r0
 8002140:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002142:	e00c      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3320      	adds	r3, #32
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fb5e 	bl	800280c <RCCEx_PLLSAI2_Config>
 8002150:	4603      	mov	r3, r0
 8002152:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002154:	e003      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	74fb      	strb	r3, [r7, #19]
      break;
 800215a:	e000      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800215c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002164:	4b52      	ldr	r3, [pc, #328]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002172:	494f      	ldr	r1, [pc, #316]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800217a:	e001      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a0 	beq.w	80022ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6593      	str	r3, [r2, #88]	; 0x58
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c4:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021d0:	f7fe fd68 	bl	8000ca4 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d6:	e009      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d8:	f7fe fd64 	bl	8000ca4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d902      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	74fb      	strb	r3, [r7, #19]
        break;
 80021ea:	e005      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ef      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d15c      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002208:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01f      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	d019      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d016      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fd23 	bl	8000ca4 <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002260:	e00b      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fd1f 	bl	8000ca4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d902      	bls.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	74fb      	strb	r3, [r7, #19]
            break;
 8002278:	e006      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ec      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229e:	4904      	ldr	r1, [pc, #16]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022a6:	e009      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
 80022ac:	e006      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022bc:	7c7b      	ldrb	r3, [r7, #17]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d105      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	4b9e      	ldr	r3, [pc, #632]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a9d      	ldr	r2, [pc, #628]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022da:	4b98      	ldr	r3, [pc, #608]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 0203 	bic.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	4994      	ldr	r1, [pc, #592]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022fc:	4b8f      	ldr	r3, [pc, #572]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 020c 	bic.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	498c      	ldr	r1, [pc, #560]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800231e:	4b87      	ldr	r3, [pc, #540]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4983      	ldr	r1, [pc, #524]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	497b      	ldr	r1, [pc, #492]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	4972      	ldr	r1, [pc, #456]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002384:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	496a      	ldr	r1, [pc, #424]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	4961      	ldr	r1, [pc, #388]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023c8:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	4959      	ldr	r1, [pc, #356]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ea:	4b54      	ldr	r3, [pc, #336]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f8:	4950      	ldr	r1, [pc, #320]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800240c:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4948      	ldr	r1, [pc, #288]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800242e:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	493f      	ldr	r1, [pc, #252]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d028      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002450:	4b3a      	ldr	r3, [pc, #232]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245e:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246e:	d106      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	e011      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002486:	d10c      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	2101      	movs	r1, #1
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f8c8 	bl	8002624 <RCCEx_PLLSAI1_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d028      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	491f      	ldr	r1, [pc, #124]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024cc:	d106      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d8:	60d3      	str	r3, [r2, #12]
 80024da:	e011      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f899 	bl	8002624 <RCCEx_PLLSAI1_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02b      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252a:	d109      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a02      	ldr	r2, [pc, #8]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002536:	60d3      	str	r3, [r2, #12]
 8002538:	e014      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002548:	d10c      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f867 	bl	8002624 <RCCEx_PLLSAI1_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02f      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800257e:	4928      	ldr	r1, [pc, #160]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800258a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800258e:	d10d      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	2102      	movs	r1, #2
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f844 	bl	8002624 <RCCEx_PLLSAI1_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d014      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	74bb      	strb	r3, [r7, #18]
 80025aa:	e011      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3320      	adds	r3, #32
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f925 	bl	800280c <RCCEx_PLLSAI2_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ea:	490d      	ldr	r1, [pc, #52]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260e:	4904      	ldr	r1, [pc, #16]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002616:	7cbb      	ldrb	r3, [r7, #18]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002632:	4b75      	ldr	r3, [pc, #468]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d10d      	bne.n	800266a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
       ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002656:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
       ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d047      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e044      	b.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d018      	beq.n	80026aa <RCCEx_PLLSAI1_Config+0x86>
 8002678:	2b03      	cmp	r3, #3
 800267a:	d825      	bhi.n	80026c8 <RCCEx_PLLSAI1_Config+0xa4>
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <RCCEx_PLLSAI1_Config+0x62>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d009      	beq.n	8002698 <RCCEx_PLLSAI1_Config+0x74>
 8002684:	e020      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002686:	4b60      	ldr	r3, [pc, #384]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11d      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e01a      	b.n	80026ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002698:	4b5b      	ldr	r3, [pc, #364]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e013      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026aa:	4b57      	ldr	r3, [pc, #348]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026c6:	e006      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e004      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026de:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	430b      	orrs	r3, r1
 80026f4:	4944      	ldr	r1, [pc, #272]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d17d      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a40      	ldr	r2, [pc, #256]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800270a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270c:	f7fe faca 	bl	8000ca4 <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002712:	e009      	b.n	8002728 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002714:	f7fe fac6 	bl	8000ca4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	73fb      	strb	r3, [r7, #15]
        break;
 8002726:	e005      	b.n	8002734 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ef      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d160      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6892      	ldr	r2, [r2, #8]
 8002750:	0211      	lsls	r1, r2, #8
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	0912      	lsrs	r2, r2, #4
 8002758:	0452      	lsls	r2, r2, #17
 800275a:	430a      	orrs	r2, r1
 800275c:	492a      	ldr	r1, [pc, #168]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	610b      	str	r3, [r1, #16]
 8002762:	e027      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d112      	bne.n	8002790 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800276a:	4b27      	ldr	r3, [pc, #156]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002772:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6892      	ldr	r2, [r2, #8]
 800277a:	0211      	lsls	r1, r2, #8
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6912      	ldr	r2, [r2, #16]
 8002780:	0852      	lsrs	r2, r2, #1
 8002782:	3a01      	subs	r2, #1
 8002784:	0552      	lsls	r2, r2, #21
 8002786:	430a      	orrs	r2, r1
 8002788:	491f      	ldr	r1, [pc, #124]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	610b      	str	r3, [r1, #16]
 800278e:	e011      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	0211      	lsls	r1, r2, #8
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6952      	ldr	r2, [r2, #20]
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0652      	lsls	r2, r2, #25
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4916      	ldr	r1, [pc, #88]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fa70 	bl	8000ca4 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c6:	e009      	b.n	80027dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c8:	f7fe fa6c 	bl	8000ca4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	73fb      	strb	r3, [r7, #15]
          break;
 80027da:	e005      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	4904      	ldr	r1, [pc, #16]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800281a:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d018      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0203 	and.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d10d      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
       ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800283e:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
       ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d047      	beq.n	80028e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e044      	b.n	80028e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d018      	beq.n	8002892 <RCCEx_PLLSAI2_Config+0x86>
 8002860:	2b03      	cmp	r3, #3
 8002862:	d825      	bhi.n	80028b0 <RCCEx_PLLSAI2_Config+0xa4>
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <RCCEx_PLLSAI2_Config+0x62>
 8002868:	2b02      	cmp	r3, #2
 800286a:	d009      	beq.n	8002880 <RCCEx_PLLSAI2_Config+0x74>
 800286c:	e020      	b.n	80028b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800286e:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11d      	bne.n	80028b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287e:	e01a      	b.n	80028b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e013      	b.n	80028ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002892:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ae:	e006      	b.n	80028be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	e004      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028b6:	bf00      	nop
 80028b8:	e002      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028be:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	430b      	orrs	r3, r1
 80028dc:	4939      	ldr	r1, [pc, #228]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d167      	bne.n	80029b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7fe f9d6 	bl	8000ca4 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028fa:	e009      	b.n	8002910 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028fc:	f7fe f9d2 	bl	8000ca4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	73fb      	strb	r3, [r7, #15]
        break;
 800290e:	e005      	b.n	800291c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ef      	bne.n	80028fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d14a      	bne.n	80029b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	0211      	lsls	r1, r2, #8
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68d2      	ldr	r2, [r2, #12]
 800293e:	0912      	lsrs	r2, r2, #4
 8002940:	0452      	lsls	r2, r2, #17
 8002942:	430a      	orrs	r2, r1
 8002944:	491f      	ldr	r1, [pc, #124]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	614b      	str	r3, [r1, #20]
 800294a:	e011      	b.n	8002970 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6892      	ldr	r2, [r2, #8]
 800295c:	0211      	lsls	r1, r2, #8
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6912      	ldr	r2, [r2, #16]
 8002962:	0852      	lsrs	r2, r2, #1
 8002964:	3a01      	subs	r2, #1
 8002966:	0652      	lsls	r2, r2, #25
 8002968:	430a      	orrs	r2, r1
 800296a:	4916      	ldr	r1, [pc, #88]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	4313      	orrs	r3, r2
 800296e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe f992 	bl	8000ca4 <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002982:	e009      	b.n	8002998 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002984:	f7fe f98e 	bl	8000ca4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d902      	bls.n	8002998 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	73fb      	strb	r3, [r7, #15]
          break;
 8002996:	e005      	b.n	80029a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4904      	ldr	r1, [pc, #16]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e095      	b.n	8002b06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ea:	d009      	beq.n	8002a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
 80029f2:	e005      	b.n	8002a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd feb0 	bl	8000780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a40:	d902      	bls.n	8002a48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e002      	b.n	8002a4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a56:	d007      	beq.n	8002a68 <HAL_SPI_Init+0xa0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	ea42 0103 	orr.w	r1, r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	f003 0204 	and.w	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ae4:	ea42 0103 	orr.w	r1, r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b088      	sub	sp, #32
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_SPI_Transmit+0x22>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e158      	b.n	8002de2 <HAL_SPI_Transmit+0x2d4>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b38:	f7fe f8b4 	bl	8000ca4 <HAL_GetTick>
 8002b3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d002      	beq.n	8002b54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b52:	e13d      	b.n	8002dd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_SPI_Transmit+0x52>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b64:	e134      	b.n	8002dd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d007      	beq.n	8002bf0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf8:	d94b      	bls.n	8002c92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_SPI_Transmit+0xfa>
 8002c02:	8afb      	ldrh	r3, [r7, #22]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d13e      	bne.n	8002c86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	881a      	ldrh	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	1c9a      	adds	r2, r3, #2
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c2c:	e02b      	b.n	8002c86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d112      	bne.n	8002c62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	881a      	ldrh	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	1c9a      	adds	r2, r3, #2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c60:	e011      	b.n	8002c86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c62:	f7fe f81f 	bl	8000ca4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d803      	bhi.n	8002c7a <HAL_SPI_Transmit+0x16c>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c78:	d102      	bne.n	8002c80 <HAL_SPI_Transmit+0x172>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c84:	e0a4      	b.n	8002dd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ce      	bne.n	8002c2e <HAL_SPI_Transmit+0x120>
 8002c90:	e07c      	b.n	8002d8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0x192>
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d170      	bne.n	8002d82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d912      	bls.n	8002cd0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b02      	subs	r3, #2
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cce:	e058      	b.n	8002d82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	7812      	ldrb	r2, [r2, #0]
 8002cdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002cf6:	e044      	b.n	8002d82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d12b      	bne.n	8002d5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d912      	bls.n	8002d36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	1c9a      	adds	r2, r3, #2
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b02      	subs	r3, #2
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d34:	e025      	b.n	8002d82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d5c:	e011      	b.n	8002d82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5e:	f7fd ffa1 	bl	8000ca4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d803      	bhi.n	8002d76 <HAL_SPI_Transmit+0x268>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d74:	d102      	bne.n	8002d7c <HAL_SPI_Transmit+0x26e>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d80:	e026      	b.n	8002dd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1b5      	bne.n	8002cf8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	6839      	ldr	r1, [r7, #0]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f949 	bl	8003028 <SPI_EndRxTxTransaction>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e000      	b.n	8002dd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dfc:	f7fd ff52 	bl	8000ca4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e0c:	f7fd ff4a 	bl	8000ca4 <HAL_GetTick>
 8002e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	015b      	lsls	r3, r3, #5
 8002e18:	0d1b      	lsrs	r3, r3, #20
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e22:	e054      	b.n	8002ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2a:	d050      	beq.n	8002ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e2c:	f7fd ff3a 	bl	8000ca4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d902      	bls.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d13d      	bne.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5a:	d111      	bne.n	8002e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	d004      	beq.n	8002e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d107      	bne.n	8002e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e88:	d10f      	bne.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e017      	b.n	8002eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d19b      	bne.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000010 	.word	0x20000010

08002efc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f0e:	f7fd fec9 	bl	8000ca4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f1e:	f7fd fec1 	bl	8000ca4 <HAL_GetTick>
 8002f22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f2c:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00da      	lsls	r2, r3, #3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	0d1b      	lsrs	r3, r3, #20
 8002f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f44:	e060      	b.n	8003008 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f4c:	d107      	bne.n	8002f5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f64:	d050      	beq.n	8003008 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f66:	f7fd fe9d 	bl	8000ca4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d902      	bls.n	8002f7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13d      	bne.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f94:	d111      	bne.n	8002fba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9e:	d004      	beq.n	8002faa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa8:	d107      	bne.n	8002fba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc2:	d10f      	bne.n	8002fe4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e010      	b.n	800301a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3b01      	subs	r3, #1
 8003006:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d196      	bne.n	8002f46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000010 	.word	0x20000010

08003028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2200      	movs	r2, #0
 800303c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff ff5b 	bl	8002efc <SPI_WaitFifoStateUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e027      	b.n	80030ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2200      	movs	r2, #0
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7ff fec0 	bl	8002dec <SPI_WaitFlagStateUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e014      	b.n	80030ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff ff34 	bl	8002efc <SPI_WaitFifoStateUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e000      	b.n	80030ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e049      	b.n	800315a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f841 	bl	8003162 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f000 f9f8 	bl	80034e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e04f      	b.n	8003230 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a23      	ldr	r2, [pc, #140]	; (800323c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d018      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1f      	ldr	r2, [pc, #124]	; (8003240 <HAL_TIM_Base_Start_IT+0xc8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_TIM_Base_Start_IT+0xcc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_TIM_Base_Start_IT+0xd0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <HAL_TIM_Base_Start_IT+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a19      	ldr	r2, [pc, #100]	; (8003250 <HAL_TIM_Base_Start_IT+0xd8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d115      	bne.n	800321a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_TIM_Base_Start_IT+0xdc>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d015      	beq.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003206:	d011      	beq.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003218:	e008      	b.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e000      	b.n	800322e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40013400 	.word	0x40013400
 8003250:	40014000 	.word	0x40014000
 8003254:	00010007 	.word	0x00010007

08003258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d122      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0202 	mvn.w	r2, #2
 8003284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f905 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8f7 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f908 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d122      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11b      	bne.n	8003308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0204 	mvn.w	r2, #4
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8db 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8cd 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f8de 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b08      	cmp	r3, #8
 8003314:	d122      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b08      	cmp	r3, #8
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0208 	mvn.w	r2, #8
 800332c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2204      	movs	r2, #4
 8003332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8b1 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8a3 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8b4 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b10      	cmp	r3, #16
 8003368:	d122      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d11b      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0210 	mvn.w	r2, #16
 8003380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2208      	movs	r2, #8
 8003386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f887 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 800339c:	e005      	b.n	80033aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f879 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f88a 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0201 	mvn.w	r2, #1
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd f97c 	bl	80006d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	2b80      	cmp	r3, #128	; 0x80
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f914 	bl	8003630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003416:	d10e      	bne.n	8003436 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d107      	bne.n	8003436 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800342e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f907 	bl	8003644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d107      	bne.n	8003462 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f838 	bl	80034d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b20      	cmp	r3, #32
 800346e:	d10e      	bne.n	800348e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	d107      	bne.n	800348e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0220 	mvn.w	r2, #32
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8c7 	bl	800361c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a40      	ldr	r2, [pc, #256]	; (80035fc <TIM_Base_SetConfig+0x114>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d00f      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <TIM_Base_SetConfig+0x118>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3c      	ldr	r2, [pc, #240]	; (8003604 <TIM_Base_SetConfig+0x11c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <TIM_Base_SetConfig+0x120>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3a      	ldr	r2, [pc, #232]	; (800360c <TIM_Base_SetConfig+0x124>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2f      	ldr	r2, [pc, #188]	; (80035fc <TIM_Base_SetConfig+0x114>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01f      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003548:	d01b      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <TIM_Base_SetConfig+0x118>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d017      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <TIM_Base_SetConfig+0x11c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <TIM_Base_SetConfig+0x120>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00f      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a29      	ldr	r2, [pc, #164]	; (800360c <TIM_Base_SetConfig+0x124>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <TIM_Base_SetConfig+0x128>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <TIM_Base_SetConfig+0x12c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0x9a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <TIM_Base_SetConfig+0x130>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a10      	ldr	r2, [pc, #64]	; (80035fc <TIM_Base_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00f      	beq.n	80035e0 <TIM_Base_SetConfig+0xf8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <TIM_Base_SetConfig+0xf8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a11      	ldr	r2, [pc, #68]	; (8003610 <TIM_Base_SetConfig+0x128>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <TIM_Base_SetConfig+0xf8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <TIM_Base_SetConfig+0x12c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_Base_SetConfig+0xf8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <TIM_Base_SetConfig+0x130>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d103      	bne.n	80035e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	615a      	str	r2, [r3, #20]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40013400 	.word	0x40013400
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800

0800361c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e040      	b.n	80036ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd fa1a 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	; 0x24
 8003684:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fb24 	bl	8003ce4 <UART_SetConfig>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e022      	b.n	80036ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fda2 	bl	80041f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fe29 	bl	800433c <UART_CheckIdleState>
 80036ea:	4603      	mov	r3, r0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b0ba      	sub	sp, #232	; 0xe8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800371a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800371e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003722:	4013      	ands	r3, r2
 8003724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d115      	bne.n	800375c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00f      	beq.n	800375c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d009      	beq.n	800375c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 82a6 	beq.w	8003c9e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
      }
      return;
 800375a:	e2a0      	b.n	8003c9e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800375c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8117 	beq.w	8003994 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003772:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003776:	4b85      	ldr	r3, [pc, #532]	; (800398c <HAL_UART_IRQHandler+0x298>)
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 810a 	beq.w	8003994 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d011      	beq.n	80037b0 <HAL_UART_IRQHandler+0xbc>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2201      	movs	r2, #1
 800379e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d011      	beq.n	80037e0 <HAL_UART_IRQHandler+0xec>
 80037bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2202      	movs	r2, #2
 80037ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d6:	f043 0204 	orr.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <HAL_UART_IRQHandler+0x11c>
 80037ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2204      	movs	r2, #4
 80037fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003806:	f043 0202 	orr.w	r2, r3, #2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2208      	movs	r2, #8
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_UART_IRQHandler+0x18a>
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00c      	beq.n	800387e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800386c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 820c 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d005      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04f      	beq.n	8003976 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fe3d 	bl	8004556 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d141      	bne.n	800396e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800391a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800392e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1d9      	bne.n	80038ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	2b00      	cmp	r3, #0
 800393c:	d013      	beq.n	8003966 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <HAL_UART_IRQHandler+0x29c>)
 8003944:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fafa 	bl	8000f44 <HAL_DMA_Abort_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d017      	beq.n	8003986 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003960:	4610      	mov	r0, r2
 8003962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e00f      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9a6 	bl	8003cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e00b      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9a2 	bl	8003cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e007      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f99e 	bl	8003cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003984:	e18d      	b.n	8003ca2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003986:	bf00      	nop
    return;
 8003988:	e18b      	b.n	8003ca2 <HAL_UART_IRQHandler+0x5ae>
 800398a:	bf00      	nop
 800398c:	04000120 	.word	0x04000120
 8003990:	0800461d 	.word	0x0800461d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 8146 	bne.w	8003c2a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 813f 	beq.w	8003c2a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8138 	beq.w	8003c2a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2210      	movs	r2, #16
 80039c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	f040 80b4 	bne.w	8003b3a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 815f 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039f2:	429a      	cmp	r2, r3
 80039f4:	f080 8157 	bcs.w	8003ca6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 8085 	bne.w	8003b1e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1da      	bne.n	8003a14 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3308      	adds	r3, #8
 8003a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e1      	bne.n	8003a5e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e3      	bne.n	8003a9a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e4      	bne.n	8003ade <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd f9d5 	bl	8000ec8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8ca 	bl	8003ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b38:	e0b5      	b.n	8003ca6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80a7 	beq.w	8003caa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a2 	beq.w	8003caa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e4      	bne.n	8003b66 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	623b      	str	r3, [r7, #32]
   return(result);
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bc0:	633a      	str	r2, [r7, #48]	; 0x30
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0310 	bic.w	r3, r3, #16
 8003bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	69b9      	ldr	r1, [r7, #24]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	617b      	str	r3, [r7, #20]
   return(result);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e4      	bne.n	8003be6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f852 	bl	8003ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c28:	e03f      	b.n	8003caa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <HAL_UART_IRQHandler+0x560>
 8003c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fd25 	bl	800469c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c52:	e02d      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01c      	beq.n	8003cae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
    }
    return;
 8003c7c:	e017      	b.n	8003cae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
 8003c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fcd6 	bl	8004648 <UART_EndTransmit_IT>
    return;
 8003c9c:	e008      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c9e:	bf00      	nop
 8003ca0:	e006      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003ca2:	bf00      	nop
 8003ca4:	e004      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003cae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cb0:	37e8      	adds	r7, #232	; 0xe8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop

08003cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b5b0      	push	{r4, r5, r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4bad      	ldr	r3, [pc, #692]	; (8003fc4 <UART_SetConfig+0x2e0>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	69f9      	ldr	r1, [r7, #28]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4aa2      	ldr	r2, [pc, #648]	; (8003fc8 <UART_SetConfig+0x2e4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a99      	ldr	r2, [pc, #612]	; (8003fcc <UART_SetConfig+0x2e8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d121      	bne.n	8003dae <UART_SetConfig+0xca>
 8003d6a:	4b99      	ldr	r3, [pc, #612]	; (8003fd0 <UART_SetConfig+0x2ec>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d817      	bhi.n	8003da8 <UART_SetConfig+0xc4>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <UART_SetConfig+0x9c>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003d9d 	.word	0x08003d9d
 8003d88:	08003d97 	.word	0x08003d97
 8003d8c:	08003da3 	.word	0x08003da3
 8003d90:	2301      	movs	r3, #1
 8003d92:	76fb      	strb	r3, [r7, #27]
 8003d94:	e0e7      	b.n	8003f66 <UART_SetConfig+0x282>
 8003d96:	2302      	movs	r3, #2
 8003d98:	76fb      	strb	r3, [r7, #27]
 8003d9a:	e0e4      	b.n	8003f66 <UART_SetConfig+0x282>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	76fb      	strb	r3, [r7, #27]
 8003da0:	e0e1      	b.n	8003f66 <UART_SetConfig+0x282>
 8003da2:	2308      	movs	r3, #8
 8003da4:	76fb      	strb	r3, [r7, #27]
 8003da6:	e0de      	b.n	8003f66 <UART_SetConfig+0x282>
 8003da8:	2310      	movs	r3, #16
 8003daa:	76fb      	strb	r3, [r7, #27]
 8003dac:	e0db      	b.n	8003f66 <UART_SetConfig+0x282>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a88      	ldr	r2, [pc, #544]	; (8003fd4 <UART_SetConfig+0x2f0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d132      	bne.n	8003e1e <UART_SetConfig+0x13a>
 8003db8:	4b85      	ldr	r3, [pc, #532]	; (8003fd0 <UART_SetConfig+0x2ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d828      	bhi.n	8003e18 <UART_SetConfig+0x134>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0xe8>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e19 	.word	0x08003e19
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e0d 	.word	0x08003e0d
 8003de0:	08003e19 	.word	0x08003e19
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e07 	.word	0x08003e07
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e19 	.word	0x08003e19
 8003dfc:	08003e13 	.word	0x08003e13
 8003e00:	2300      	movs	r3, #0
 8003e02:	76fb      	strb	r3, [r7, #27]
 8003e04:	e0af      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e06:	2302      	movs	r3, #2
 8003e08:	76fb      	strb	r3, [r7, #27]
 8003e0a:	e0ac      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	76fb      	strb	r3, [r7, #27]
 8003e10:	e0a9      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e12:	2308      	movs	r3, #8
 8003e14:	76fb      	strb	r3, [r7, #27]
 8003e16:	e0a6      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	76fb      	strb	r3, [r7, #27]
 8003e1c:	e0a3      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6d      	ldr	r2, [pc, #436]	; (8003fd8 <UART_SetConfig+0x2f4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d120      	bne.n	8003e6a <UART_SetConfig+0x186>
 8003e28:	4b69      	ldr	r3, [pc, #420]	; (8003fd0 <UART_SetConfig+0x2ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e32:	2b30      	cmp	r3, #48	; 0x30
 8003e34:	d013      	beq.n	8003e5e <UART_SetConfig+0x17a>
 8003e36:	2b30      	cmp	r3, #48	; 0x30
 8003e38:	d814      	bhi.n	8003e64 <UART_SetConfig+0x180>
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d009      	beq.n	8003e52 <UART_SetConfig+0x16e>
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d810      	bhi.n	8003e64 <UART_SetConfig+0x180>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <UART_SetConfig+0x168>
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d006      	beq.n	8003e58 <UART_SetConfig+0x174>
 8003e4a:	e00b      	b.n	8003e64 <UART_SetConfig+0x180>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	76fb      	strb	r3, [r7, #27]
 8003e50:	e089      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e52:	2302      	movs	r3, #2
 8003e54:	76fb      	strb	r3, [r7, #27]
 8003e56:	e086      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	76fb      	strb	r3, [r7, #27]
 8003e5c:	e083      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	76fb      	strb	r3, [r7, #27]
 8003e62:	e080      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e64:	2310      	movs	r3, #16
 8003e66:	76fb      	strb	r3, [r7, #27]
 8003e68:	e07d      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <UART_SetConfig+0x2f8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d120      	bne.n	8003eb6 <UART_SetConfig+0x1d2>
 8003e74:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <UART_SetConfig+0x2ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e80:	d013      	beq.n	8003eaa <UART_SetConfig+0x1c6>
 8003e82:	2bc0      	cmp	r3, #192	; 0xc0
 8003e84:	d814      	bhi.n	8003eb0 <UART_SetConfig+0x1cc>
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d009      	beq.n	8003e9e <UART_SetConfig+0x1ba>
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	d810      	bhi.n	8003eb0 <UART_SetConfig+0x1cc>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <UART_SetConfig+0x1b4>
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d006      	beq.n	8003ea4 <UART_SetConfig+0x1c0>
 8003e96:	e00b      	b.n	8003eb0 <UART_SetConfig+0x1cc>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	e063      	b.n	8003f66 <UART_SetConfig+0x282>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	76fb      	strb	r3, [r7, #27]
 8003ea2:	e060      	b.n	8003f66 <UART_SetConfig+0x282>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	76fb      	strb	r3, [r7, #27]
 8003ea8:	e05d      	b.n	8003f66 <UART_SetConfig+0x282>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	76fb      	strb	r3, [r7, #27]
 8003eae:	e05a      	b.n	8003f66 <UART_SetConfig+0x282>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	76fb      	strb	r3, [r7, #27]
 8003eb4:	e057      	b.n	8003f66 <UART_SetConfig+0x282>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a49      	ldr	r2, [pc, #292]	; (8003fe0 <UART_SetConfig+0x2fc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d125      	bne.n	8003f0c <UART_SetConfig+0x228>
 8003ec0:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <UART_SetConfig+0x2ec>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ece:	d017      	beq.n	8003f00 <UART_SetConfig+0x21c>
 8003ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed4:	d817      	bhi.n	8003f06 <UART_SetConfig+0x222>
 8003ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eda:	d00b      	beq.n	8003ef4 <UART_SetConfig+0x210>
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee0:	d811      	bhi.n	8003f06 <UART_SetConfig+0x222>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <UART_SetConfig+0x20a>
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eea:	d006      	beq.n	8003efa <UART_SetConfig+0x216>
 8003eec:	e00b      	b.n	8003f06 <UART_SetConfig+0x222>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	76fb      	strb	r3, [r7, #27]
 8003ef2:	e038      	b.n	8003f66 <UART_SetConfig+0x282>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	76fb      	strb	r3, [r7, #27]
 8003ef8:	e035      	b.n	8003f66 <UART_SetConfig+0x282>
 8003efa:	2304      	movs	r3, #4
 8003efc:	76fb      	strb	r3, [r7, #27]
 8003efe:	e032      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f00:	2308      	movs	r3, #8
 8003f02:	76fb      	strb	r3, [r7, #27]
 8003f04:	e02f      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f06:	2310      	movs	r3, #16
 8003f08:	76fb      	strb	r3, [r7, #27]
 8003f0a:	e02c      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2d      	ldr	r2, [pc, #180]	; (8003fc8 <UART_SetConfig+0x2e4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d125      	bne.n	8003f62 <UART_SetConfig+0x27e>
 8003f16:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <UART_SetConfig+0x2ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f24:	d017      	beq.n	8003f56 <UART_SetConfig+0x272>
 8003f26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f2a:	d817      	bhi.n	8003f5c <UART_SetConfig+0x278>
 8003f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f30:	d00b      	beq.n	8003f4a <UART_SetConfig+0x266>
 8003f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f36:	d811      	bhi.n	8003f5c <UART_SetConfig+0x278>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <UART_SetConfig+0x260>
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d006      	beq.n	8003f50 <UART_SetConfig+0x26c>
 8003f42:	e00b      	b.n	8003f5c <UART_SetConfig+0x278>
 8003f44:	2300      	movs	r3, #0
 8003f46:	76fb      	strb	r3, [r7, #27]
 8003f48:	e00d      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	76fb      	strb	r3, [r7, #27]
 8003f4e:	e00a      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f50:	2304      	movs	r3, #4
 8003f52:	76fb      	strb	r3, [r7, #27]
 8003f54:	e007      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f56:	2308      	movs	r3, #8
 8003f58:	76fb      	strb	r3, [r7, #27]
 8003f5a:	e004      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	76fb      	strb	r3, [r7, #27]
 8003f60:	e001      	b.n	8003f66 <UART_SetConfig+0x282>
 8003f62:	2310      	movs	r3, #16
 8003f64:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <UART_SetConfig+0x2e4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	f040 8087 	bne.w	8004080 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f72:	7efb      	ldrb	r3, [r7, #27]
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d837      	bhi.n	8003fe8 <UART_SetConfig+0x304>
 8003f78:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <UART_SetConfig+0x29c>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fe9 	.word	0x08003fe9
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fe9 	.word	0x08003fe9
 8003f90:	08003fb3 	.word	0x08003fb3
 8003f94:	08003fe9 	.word	0x08003fe9
 8003f98:	08003fe9 	.word	0x08003fe9
 8003f9c:	08003fe9 	.word	0x08003fe9
 8003fa0:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fd ff96 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	6178      	str	r0, [r7, #20]
        break;
 8003faa:	e022      	b.n	8003ff2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <UART_SetConfig+0x300>)
 8003fae:	617b      	str	r3, [r7, #20]
        break;
 8003fb0:	e01f      	b.n	8003ff2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7fd fef7 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8003fb6:	6178      	str	r0, [r7, #20]
        break;
 8003fb8:	e01b      	b.n	8003ff2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fbe:	617b      	str	r3, [r7, #20]
        break;
 8003fc0:	e017      	b.n	8003ff2 <UART_SetConfig+0x30e>
 8003fc2:	bf00      	nop
 8003fc4:	efff69f3 	.word	0xefff69f3
 8003fc8:	40008000 	.word	0x40008000
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	40004800 	.word	0x40004800
 8003fdc:	40004c00 	.word	0x40004c00
 8003fe0:	40005000 	.word	0x40005000
 8003fe4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	76bb      	strb	r3, [r7, #26]
        break;
 8003ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80f1 	beq.w	80041dc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	429a      	cmp	r2, r3
 8004008:	d305      	bcc.n	8004016 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	429a      	cmp	r2, r3
 8004014:	d902      	bls.n	800401c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	76bb      	strb	r3, [r7, #26]
 800401a:	e0df      	b.n	80041dc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4618      	mov	r0, r3
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	020b      	lsls	r3, r1, #8
 800402e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004032:	0202      	lsls	r2, r0, #8
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	6849      	ldr	r1, [r1, #4]
 8004038:	0849      	lsrs	r1, r1, #1
 800403a:	4608      	mov	r0, r1
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	1814      	adds	r4, r2, r0
 8004042:	eb43 0501 	adc.w	r5, r3, r1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	461a      	mov	r2, r3
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc f8bc 	bl	80001d0 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004066:	d308      	bcc.n	800407a <UART_SetConfig+0x396>
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406e:	d204      	bcs.n	800407a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	e0b0      	b.n	80041dc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	76bb      	strb	r3, [r7, #26]
 800407e:	e0ad      	b.n	80041dc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004088:	d15b      	bne.n	8004142 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800408a:	7efb      	ldrb	r3, [r7, #27]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d828      	bhi.n	80040e2 <UART_SetConfig+0x3fe>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <UART_SetConfig+0x3b4>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	080040e3 	.word	0x080040e3
 80040a8:	080040d3 	.word	0x080040d3
 80040ac:	080040e3 	.word	0x080040e3
 80040b0:	080040e3 	.word	0x080040e3
 80040b4:	080040e3 	.word	0x080040e3
 80040b8:	080040db 	.word	0x080040db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fd ff0a 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 80040c0:	6178      	str	r0, [r7, #20]
        break;
 80040c2:	e013      	b.n	80040ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c4:	f7fd ff1c 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 80040c8:	6178      	str	r0, [r7, #20]
        break;
 80040ca:	e00f      	b.n	80040ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040cc:	4b49      	ldr	r3, [pc, #292]	; (80041f4 <UART_SetConfig+0x510>)
 80040ce:	617b      	str	r3, [r7, #20]
        break;
 80040d0:	e00c      	b.n	80040ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d2:	f7fd fe67 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 80040d6:	6178      	str	r0, [r7, #20]
        break;
 80040d8:	e008      	b.n	80040ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040de:	617b      	str	r3, [r7, #20]
        break;
 80040e0:	e004      	b.n	80040ec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	76bb      	strb	r3, [r7, #26]
        break;
 80040ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d074      	beq.n	80041dc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	005a      	lsls	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	441a      	add	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	d916      	bls.n	800413c <UART_SetConfig+0x458>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d212      	bcs.n	800413c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f023 030f 	bic.w	r3, r3, #15
 800411e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	b29b      	uxth	r3, r3
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	b29a      	uxth	r2, r3
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	4313      	orrs	r3, r2
 8004130:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	89fa      	ldrh	r2, [r7, #14]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	e04f      	b.n	80041dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	76bb      	strb	r3, [r7, #26]
 8004140:	e04c      	b.n	80041dc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004142:	7efb      	ldrb	r3, [r7, #27]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d828      	bhi.n	800419a <UART_SetConfig+0x4b6>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0x46c>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004175 	.word	0x08004175
 8004154:	0800417d 	.word	0x0800417d
 8004158:	08004185 	.word	0x08004185
 800415c:	0800419b 	.word	0x0800419b
 8004160:	0800418b 	.word	0x0800418b
 8004164:	0800419b 	.word	0x0800419b
 8004168:	0800419b 	.word	0x0800419b
 800416c:	0800419b 	.word	0x0800419b
 8004170:	08004193 	.word	0x08004193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004174:	f7fd feae 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8004178:	6178      	str	r0, [r7, #20]
        break;
 800417a:	e013      	b.n	80041a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7fd fec0 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8004180:	6178      	str	r0, [r7, #20]
        break;
 8004182:	e00f      	b.n	80041a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <UART_SetConfig+0x510>)
 8004186:	617b      	str	r3, [r7, #20]
        break;
 8004188:	e00c      	b.n	80041a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418a:	f7fd fe0b 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 800418e:	6178      	str	r0, [r7, #20]
        break;
 8004190:	e008      	b.n	80041a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004196:	617b      	str	r3, [r7, #20]
        break;
 8004198:	e004      	b.n	80041a4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	76bb      	strb	r3, [r7, #26]
        break;
 80041a2:	bf00      	nop
    }

    if (pclk != 0U)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	085a      	lsrs	r2, r3, #1
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	441a      	add	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b0f      	cmp	r3, #15
 80041c2:	d909      	bls.n	80041d8 <UART_SetConfig+0x4f4>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ca:	d205      	bcs.n	80041d8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	e001      	b.n	80041dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bdb0      	pop	{r4, r5, r7, pc}
 80041f2:	bf00      	nop
 80041f4:	00f42400 	.word	0x00f42400

080041f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01a      	beq.n	800430e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f6:	d10a      	bne.n	800430e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  }
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800434c:	f7fc fcaa 	bl	8000ca4 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d10e      	bne.n	800437e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f82d 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e023      	b.n	80043c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d10e      	bne.n	80043aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f817 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00d      	b.n	80043c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b09c      	sub	sp, #112	; 0x70
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043de:	e0a5      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e6:	f000 80a1 	beq.w	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fc fc5b 	bl	8000ca4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <UART_WaitOnFlagUntilTimeout+0x32>
 80043fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d13e      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004414:	667b      	str	r3, [r7, #100]	; 0x64
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004420:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3308      	adds	r3, #8
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	663b      	str	r3, [r7, #96]	; 0x60
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004452:	64ba      	str	r2, [r7, #72]	; 0x48
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e067      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d04f      	beq.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449a:	d147      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e6      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	613b      	str	r3, [r7, #16]
   return(result);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044f8:	623a      	str	r2, [r7, #32]
 80044fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69f9      	ldr	r1, [r7, #28]
 80044fe:	6a3a      	ldr	r2, [r7, #32]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	61bb      	str	r3, [r7, #24]
   return(result);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e010      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69da      	ldr	r2, [r3, #28]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	429a      	cmp	r2, r3
 8004548:	f43f af4a 	beq.w	80043e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3770      	adds	r7, #112	; 0x70
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004556:	b480      	push	{r7}
 8004558:	b095      	sub	sp, #84	; 0x54
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457c:	643b      	str	r3, [r7, #64]	; 0x40
 800457e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e6      	bne.n	800455e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3308      	adds	r3, #8
 8004596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d118      	bne.n	80045fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	613b      	str	r3, [r7, #16]
   return(result);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e6      	bne.n	80045cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004610:	bf00      	nop
 8004612:	3754      	adds	r7, #84	; 0x54
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff fb3c 	bl	8003cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	60bb      	str	r3, [r7, #8]
   return(result);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	613b      	str	r3, [r7, #16]
   return(result);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e6      	bne.n	8004650 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc fa9a 	bl	8000bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004694:	bf00      	nop
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <SysTick_Handler+0x1c>)
 80046b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046b8:	f000 f990 	bl	80049dc <xTaskGetSchedulerState>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046c2:	f000 f9f9 	bl	8004ab8 <xPortSysTickHandler>
  }
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	e000e010 	.word	0xe000e010

080046d0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6892      	ldr	r2, [r2, #8]
 800472e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6852      	ldr	r2, [r2, #4]
 8004738:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d103      	bne.n	800474c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	1e5a      	subs	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004776:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <xTaskIncrementTick+0x148>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 808f 	bne.w	800489e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004780:	4b4d      	ldr	r3, [pc, #308]	; (80048b8 <xTaskIncrementTick+0x14c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3301      	adds	r3, #1
 8004786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004788:	4a4b      	ldr	r2, [pc, #300]	; (80048b8 <xTaskIncrementTick+0x14c>)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d120      	bne.n	80047d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004794:	4b49      	ldr	r3, [pc, #292]	; (80048bc <xTaskIncrementTick+0x150>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <xTaskIncrementTick+0x46>
 80047b4:	4b41      	ldr	r3, [pc, #260]	; (80048bc <xTaskIncrementTick+0x150>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <xTaskIncrementTick+0x154>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a3f      	ldr	r2, [pc, #252]	; (80048bc <xTaskIncrementTick+0x150>)
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4a3f      	ldr	r2, [pc, #252]	; (80048c0 <xTaskIncrementTick+0x154>)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <xTaskIncrementTick+0x158>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	4a3d      	ldr	r2, [pc, #244]	; (80048c4 <xTaskIncrementTick+0x158>)
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	f000 f8e3 	bl	800499c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047d6:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <xTaskIncrementTick+0x15c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d349      	bcc.n	8004874 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e0:	4b36      	ldr	r3, [pc, #216]	; (80048bc <xTaskIncrementTick+0x150>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ea:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <xTaskIncrementTick+0x15c>)
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f0:	601a      	str	r2, [r3, #0]
					break;
 80047f2:	e03f      	b.n	8004874 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f4:	4b31      	ldr	r3, [pc, #196]	; (80048bc <xTaskIncrementTick+0x150>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d203      	bcs.n	8004814 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800480c:	4a2e      	ldr	r2, [pc, #184]	; (80048c8 <xTaskIncrementTick+0x15c>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004812:	e02f      	b.n	8004874 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	3304      	adds	r3, #4
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ff7d 	bl	8004718 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3318      	adds	r3, #24
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff ff74 	bl	8004718 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <xTaskIncrementTick+0x160>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d903      	bls.n	8004844 <xTaskIncrementTick+0xd8>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a22      	ldr	r2, [pc, #136]	; (80048cc <xTaskIncrementTick+0x160>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <xTaskIncrementTick+0x164>)
 8004852:	441a      	add	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7ff ff38 	bl	80046d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <xTaskIncrementTick+0x168>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	429a      	cmp	r2, r3
 800486c:	d3b8      	bcc.n	80047e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004872:	e7b5      	b.n	80047e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <xTaskIncrementTick+0x168>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487a:	4915      	ldr	r1, [pc, #84]	; (80048d0 <xTaskIncrementTick+0x164>)
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d901      	bls.n	8004890 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <xTaskIncrementTick+0x16c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e004      	b.n	80048a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <xTaskIncrementTick+0x170>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <xTaskIncrementTick+0x170>)
 80048a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048a8:	697b      	ldr	r3, [r7, #20]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200004c4 	.word	0x200004c4
 80048b8:	200004a8 	.word	0x200004a8
 80048bc:	200004a0 	.word	0x200004a0
 80048c0:	200004a4 	.word	0x200004a4
 80048c4:	200004bc 	.word	0x200004bc
 80048c8:	200004c0 	.word	0x200004c0
 80048cc:	200004ac 	.word	0x200004ac
 80048d0:	20000040 	.word	0x20000040
 80048d4:	2000003c 	.word	0x2000003c
 80048d8:	200004b8 	.word	0x200004b8
 80048dc:	200004b4 	.word	0x200004b4

080048e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048e6:	4b28      	ldr	r3, [pc, #160]	; (8004988 <vTaskSwitchContext+0xa8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048ee:	4b27      	ldr	r3, [pc, #156]	; (800498c <vTaskSwitchContext+0xac>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048f4:	e041      	b.n	800497a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80048f6:	4b25      	ldr	r3, [pc, #148]	; (800498c <vTaskSwitchContext+0xac>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <vTaskSwitchContext+0xb0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e010      	b.n	8004926 <vTaskSwitchContext+0x46>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <vTaskSwitchContext+0x40>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <vTaskSwitchContext+0x3e>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b01      	subs	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	491b      	ldr	r1, [pc, #108]	; (8004994 <vTaskSwitchContext+0xb4>)
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0e4      	beq.n	8004904 <vTaskSwitchContext+0x24>
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4a13      	ldr	r2, [pc, #76]	; (8004994 <vTaskSwitchContext+0xb4>)
 8004946:	4413      	add	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	3308      	adds	r3, #8
 800495c:	429a      	cmp	r2, r3
 800495e:	d104      	bne.n	800496a <vTaskSwitchContext+0x8a>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4a09      	ldr	r2, [pc, #36]	; (8004998 <vTaskSwitchContext+0xb8>)
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4a06      	ldr	r2, [pc, #24]	; (8004990 <vTaskSwitchContext+0xb0>)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6013      	str	r3, [r2, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200004c4 	.word	0x200004c4
 800498c:	200004b8 	.word	0x200004b8
 8004990:	200004ac 	.word	0x200004ac
 8004994:	20000040 	.word	0x20000040
 8004998:	2000003c 	.word	0x2000003c

0800499c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <prvResetNextTaskUnblockTime+0x38>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <prvResetNextTaskUnblockTime+0x3c>)
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049b4:	e008      	b.n	80049c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <prvResetNextTaskUnblockTime+0x38>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <prvResetNextTaskUnblockTime+0x3c>)
 80049c6:	6013      	str	r3, [r2, #0]
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	200004a0 	.word	0x200004a0
 80049d8:	200004c0 	.word	0x200004c0

080049dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <xTaskGetSchedulerState+0x34>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049ea:	2301      	movs	r3, #1
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	e008      	b.n	8004a02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <xTaskGetSchedulerState+0x38>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049f8:	2302      	movs	r3, #2
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	e001      	b.n	8004a02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a02:	687b      	ldr	r3, [r7, #4]
	}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	200004b0 	.word	0x200004b0
 8004a14:	200004c4 	.word	0x200004c4
	...

08004a20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <pxCurrentTCBConst2>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	6808      	ldr	r0, [r1, #0]
 8004a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	f380 8809 	msr	PSP, r0
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8811 	msr	BASEPRI, r0
 8004a3a:	4770      	bx	lr
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst2>:
 8004a40:	2000003c 	.word	0x2000003c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
	...

08004a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a50:	f3ef 8009 	mrs	r0, PSP
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <pxCurrentTCBConst>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	f01e 0f10 	tst.w	lr, #16
 8004a60:	bf08      	it	eq
 8004a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6a:	6010      	str	r0, [r2, #0]
 8004a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a74:	f380 8811 	msr	BASEPRI, r0
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f7ff ff2e 	bl	80048e0 <vTaskSwitchContext>
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	f380 8811 	msr	BASEPRI, r0
 8004a8c:	bc09      	pop	{r0, r3}
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a96:	f01e 0f10 	tst.w	lr, #16
 8004a9a:	bf08      	it	eq
 8004a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004aa0:	f380 8809 	msr	PSP, r0
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	f3af 8000 	nop.w

08004ab0 <pxCurrentTCBConst>:
 8004ab0:	2000003c 	.word	0x2000003c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop

08004ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	607b      	str	r3, [r7, #4]
}
 8004ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ad2:	f7ff fe4b 	bl	800476c <xTaskIncrementTick>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <xPortSysTickHandler+0x40>)
 8004ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <__libc_init_array>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4d0d      	ldr	r5, [pc, #52]	; (8004b34 <__libc_init_array+0x38>)
 8004b00:	4c0d      	ldr	r4, [pc, #52]	; (8004b38 <__libc_init_array+0x3c>)
 8004b02:	1b64      	subs	r4, r4, r5
 8004b04:	10a4      	asrs	r4, r4, #2
 8004b06:	2600      	movs	r6, #0
 8004b08:	42a6      	cmp	r6, r4
 8004b0a:	d109      	bne.n	8004b20 <__libc_init_array+0x24>
 8004b0c:	4d0b      	ldr	r5, [pc, #44]	; (8004b3c <__libc_init_array+0x40>)
 8004b0e:	4c0c      	ldr	r4, [pc, #48]	; (8004b40 <__libc_init_array+0x44>)
 8004b10:	f000 f820 	bl	8004b54 <_init>
 8004b14:	1b64      	subs	r4, r4, r5
 8004b16:	10a4      	asrs	r4, r4, #2
 8004b18:	2600      	movs	r6, #0
 8004b1a:	42a6      	cmp	r6, r4
 8004b1c:	d105      	bne.n	8004b2a <__libc_init_array+0x2e>
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b24:	4798      	blx	r3
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7ee      	b.n	8004b08 <__libc_init_array+0xc>
 8004b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2e:	4798      	blx	r3
 8004b30:	3601      	adds	r6, #1
 8004b32:	e7f2      	b.n	8004b1a <__libc_init_array+0x1e>
 8004b34:	08004bbc 	.word	0x08004bbc
 8004b38:	08004bbc 	.word	0x08004bbc
 8004b3c:	08004bbc 	.word	0x08004bbc
 8004b40:	08004bc0 	.word	0x08004bc0

08004b44 <memset>:
 8004b44:	4402      	add	r2, r0
 8004b46:	4603      	mov	r3, r0
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d100      	bne.n	8004b4e <memset+0xa>
 8004b4c:	4770      	bx	lr
 8004b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b52:	e7f9      	b.n	8004b48 <memset+0x4>

08004b54 <_init>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	bf00      	nop
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr

08004b60 <_fini>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr
