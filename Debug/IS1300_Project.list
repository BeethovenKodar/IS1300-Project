
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007848  08007848  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007848  08007848  00017848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007850  08007850  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000084  080078dc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  080078dc  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234c4  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb6  00000000  00000000  00043578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00047530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00048e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bc3  00000000  00000000  0004a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df15  00000000  00000000  000501eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b86  00000000  00000000  0006e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007588  00000000  00000000  00175cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007564 	.word	0x08007564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007564 	.word	0x08007564

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a47      	ldr	r2, [pc, #284]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <MX_GPIO_Init+0x138>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a41      	ldr	r2, [pc, #260]	; (80006a0 <MX_GPIO_Init+0x138>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f001 fa47 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000608:	4826      	ldr	r0, [pc, #152]	; (80006a4 <MX_GPIO_Init+0x13c>)
 800060a:	f001 fa41 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f001 fa3a 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <MX_GPIO_Init+0x13c>)
 8000634:	f001 f882 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000638:	230c      	movs	r3, #12
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000648:	2307      	movs	r3, #7
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f001 f871 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800065a:	f248 0320 	movw	r3, #32800	; 0x8020
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 f861 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin;
 800067a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x13c>)
 8000694:	f001 f852 	bl	800173c <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fe7f 	bl	80013b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f849 	bl	8000748 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f7ff ff57 	bl	8000568 <MX_GPIO_Init>
  MX_UART5_Init();
 80006ba:	f000 fd17 	bl	80010ec <MX_UART5_Init>
  MX_SPI2_Init();
 80006be:	f000 f9c5 	bl	8000a4c <MX_SPI2_Init>
  MX_RTC_Init();
 80006c2:	f000 f8ad 	bl	8000820 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
    display_init();
 80006c6:	f000 fb09 	bl	8000cdc <display_init>
    uint8_t time[8];
    uart_transmit((uint8_t*)"0x00", 1);
 80006ca:	2101      	movs	r1, #1
 80006cc:	481b      	ldr	r0, [pc, #108]	; (800073c <main+0x94>)
 80006ce:	f000 fdd1 	bl	8001274 <uart_transmit>
    HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 feac 	bl	8001430 <HAL_Delay>
    uart_transmit((uint8_t*)"set time HH:MM:SS\r\n", 19);
 80006d8:	2113      	movs	r1, #19
 80006da:	4819      	ldr	r0, [pc, #100]	; (8000740 <main+0x98>)
 80006dc:	f000 fdca 	bl	8001274 <uart_transmit>
    HAL_Delay(1);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f000 fea5 	bl	8001430 <HAL_Delay>
    uart_receive(time, 8);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2108      	movs	r1, #8
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fde7 	bl	80012c0 <uart_receive>
    HAL_Delay(5000);
 80006f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80006f6:	f000 fe9b 	bl	8001430 <HAL_Delay>
    rtc_set_time(time);
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f926 	bl	8000950 <rtc_set_time>

    uint8_t current_time[8];
    while (1) {
	rtc_get_time(current_time);
 8000704:	463b      	mov	r3, r7
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f966 	bl	80009d8 <rtc_get_time>
	display_write_line(current_time, 8, 1);
 800070c:	463b      	mov	r3, r7
 800070e:	2201      	movs	r2, #1
 8000710:	2108      	movs	r1, #8
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fb3b 	bl	8000d8e <display_write_line>
	uart_transmit(current_time, 8);
 8000718:	463b      	mov	r3, r7
 800071a:	2108      	movs	r1, #8
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fda9 	bl	8001274 <uart_transmit>
	HAL_Delay(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f000 fe84 	bl	8001430 <HAL_Delay>
	uart_transmit((uint8_t*)"\r\n", 2);
 8000728:	2102      	movs	r1, #2
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <main+0x9c>)
 800072c:	f000 fda2 	bl	8001274 <uart_transmit>
	HAL_Delay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 fe7c 	bl	8001430 <HAL_Delay>
	rtc_get_time(current_time);
 8000738:	e7e4      	b.n	8000704 <main+0x5c>
 800073a:	bf00      	nop
 800073c:	0800757c 	.word	0x0800757c
 8000740:	08007584 	.word	0x08007584
 8000744:	08007598 	.word	0x08007598

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	; 0x58
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2244      	movs	r2, #68	; 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f005 fc8c 	bl	8006074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800076e:	f001 f9b5 	bl	8001adc <HAL_PWREx_ControlVoltageScaling>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000778:	f000 f84c 	bl	8000814 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800077c:	230a      	movs	r3, #10
 800077e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000784:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000786:	2310      	movs	r3, #16
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079a:	230a      	movs	r3, #10
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079e:	2307      	movs	r3, #7
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f9ea 	bl	8001b88 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007ba:	f000 f82b 	bl	8000814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2104      	movs	r1, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fdbc 	bl	8002354 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e2:	f000 f817 	bl	8000814 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3758      	adds	r7, #88	; 0x58
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fdf5 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40012c00 	.word	0x40012c00

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_RTC_Init+0xb0>)
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <MX_RTC_Init+0xb4>)
 800083c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_RTC_Init+0xb0>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_RTC_Init+0xb0>)
 8000846:	227f      	movs	r2, #127	; 0x7f
 8000848:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_RTC_Init+0xb0>)
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_RTC_Init+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_RTC_Init+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_RTC_Init+0xb0>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_RTC_Init+0xb0>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000868:	4819      	ldr	r0, [pc, #100]	; (80008d0 <MX_RTC_Init+0xb0>)
 800086a:	f002 fc67 	bl	800313c <HAL_RTC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000874:	f7ff ffce 	bl	8000814 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000878:	2300      	movs	r3, #0
 800087a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800087c:	2300      	movs	r3, #0
 800087e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000880:	2300      	movs	r3, #0
 8000882:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2201      	movs	r2, #1
 8000890:	4619      	mov	r1, r3
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_RTC_Init+0xb0>)
 8000894:	f002 fccd 	bl	8003232 <HAL_RTC_SetTime>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800089e:	f7ff ffb9 	bl	8000814 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80008a2:	2303      	movs	r3, #3
 80008a4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 80008a6:	2312      	movs	r3, #18
 80008a8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 80008aa:	2322      	movs	r3, #34	; 0x22
 80008ac:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80008ae:	2321      	movs	r3, #33	; 0x21
 80008b0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	2201      	movs	r2, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_RTC_Init+0xb0>)
 80008ba:	f002 fdb3 	bl	8003424 <HAL_RTC_SetDate>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80008c4:	f7ff ffa6 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000538 	.word	0x20000538
 80008d4:	40002800 	.word	0x40002800

080008d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a4      	sub	sp, #144	; 0x90
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2288      	movs	r2, #136	; 0x88
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f005 fbc3 	bl	8006074 <memset>
  if(rtcHandle->Instance==RTC)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_RTC_MspInit+0x5c>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d118      	bne.n	800092a <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4618      	mov	r0, r3
 800090c:	f001 ff5a 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000916:	f7ff ff7d 	bl	8000814 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <HAL_RTC_MspInit+0x60>)
 800091c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <HAL_RTC_MspInit+0x60>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3790      	adds	r7, #144	; 0x90
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40002800 	.word	0x40002800
 8000938:	40021000 	.word	0x40021000

0800093c <RTC_Error>:
/**
 * @brief Error function called upon error generated
 * during exeuction of RTC functions.
 * @note Activates the LD2 led on the Nucleo board and loops infinitely.
 */
void RTC_Error() {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2120      	movs	r1, #32
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f001 f8a2 	bl	8001a90 <HAL_GPIO_WritePin>
    while (1) {}
 800094c:	e7fe      	b.n	800094c <RTC_Error+0x10>
	...

08000950 <rtc_set_time>:
/**
 * @brief Real Time Clock (RTC) function to set the RTC time.
 * @param tstr: time string of format "hh:mm:ss".
 * @retval None.
 */
void rtc_set_time(uint8_t tstr[]) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <rtc_set_time+0x80>)
 800096a:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, del); //tokenize tstr on given delimiter
 800096c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f005 fba8 	bl	80060c4 <strtok>
 8000974:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000976:	6a38      	ldr	r0, [r7, #32]
 8000978:	f005 fb40 	bl	8005ffc <atoi>
 800097c:	4603      	mov	r3, r0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 8000982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000984:	2000      	movs	r0, #0
 8000986:	f005 fb9d 	bl	80060c4 <strtok>
 800098a:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 800098c:	6a38      	ldr	r0, [r7, #32]
 800098e:	f005 fb35 	bl	8005ffc <atoi>
 8000992:	4603      	mov	r3, r0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800099a:	2000      	movs	r0, #0
 800099c:	f005 fb92 	bl	80060c4 <strtok>
 80009a0:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 80009a2:	6a38      	ldr	r0, [r7, #32]
 80009a4:	f005 fb2a 	bl	8005ffc <atoi>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	73bb      	strb	r3, [r7, #14]

    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4807      	ldr	r0, [pc, #28]	; (80009d4 <rtc_set_time+0x84>)
 80009b8:	f002 fc3b 	bl	8003232 <HAL_RTC_SetTime>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <rtc_set_time+0x76>
	RTC_Error();
 80009c2:	f7ff ffbb 	bl	800093c <RTC_Error>
    }
}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800759c 	.word	0x0800759c
 80009d4:	20000538 	.word	0x20000538

080009d8 <rtc_get_time>:
  * @brief Real Time Clock (RTC) function to get the current time.
  * @param buffer: buffer to store the current time.
  * @note GetDate() is called to properly retreive the time.
  * @retval None.
  */
void rtc_get_time(uint8_t buffer[]) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af02      	add	r7, sp, #8
 80009de:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <rtc_get_time+0x6c>)
 80009fe:	f002 fcb5 	bl	800336c <HAL_RTC_GetTime>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <rtc_get_time+0x34>
	RTC_Error();
 8000a08:	f7ff ff98 	bl	800093c <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <rtc_get_time+0x6c>)
 8000a16:	f002 fd8c 	bl	8003532 <HAL_RTC_GetDate>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <rtc_get_time+0x4c>
	RTC_Error();
 8000a20:	f7ff ff8c 	bl	800093c <RTC_Error>
    }

    sprintf((char*)buffer, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000a24:	7b3b      	ldrb	r3, [r7, #12]
 8000a26:	461a      	mov	r2, r3
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	460b      	mov	r3, r1
 8000a32:	4905      	ldr	r1, [pc, #20]	; (8000a48 <rtc_get_time+0x70>)
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f005 fb25 	bl	8006084 <siprintf>
}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000538 	.word	0x20000538
 8000a48:	080075a0 	.word	0x080075a0

08000a4c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_SPI2_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a64:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a84:	2230      	movs	r2, #48	; 0x30
 8000a86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_SPI2_Init+0x74>)
 8000aae:	f002 fe5f 	bl	8003770 <HAL_SPI_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000ab8:	f7ff feac 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000055c 	.word	0x2000055c
 8000ac4:	40003800 	.word	0x40003800

08000ac8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <HAL_SPI_MspInit+0xb4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d144      	bne.n	8000b74 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6593      	str	r3, [r2, #88]	; 0x58
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_SPI_MspInit+0xb8>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b32:	2308      	movs	r3, #8
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b42:	2305      	movs	r3, #5
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <HAL_SPI_MspInit+0xbc>)
 8000b4e:	f000 fdf5 	bl	800173c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b64:	2305      	movs	r3, #5
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_SPI_MspInit+0xc0>)
 8000b70:	f000 fde4 	bl	800173c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40003800 	.word	0x40003800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000800 	.word	0x48000800
 8000b88:	48000400 	.word	0x48000400

08000b8c <SPI_Error>:
/**
 * @brief Error function that handles any error produced while
 * using SPI communication.
 * @note Enables LD2 LED on the Nucleo board and loops infinitely.
 */
void SPI_Error() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2120      	movs	r1, #32
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f000 ff7a 	bl	8001a90 <HAL_GPIO_WritePin>
    while(1) {}
 8000b9c:	e7fe      	b.n	8000b9c <SPI_Error+0x10>
	...

08000ba0 <set_startbyte>:
  * @param nibble: the sequence to set.
  * @note  nibble in format of "0|RS|R/W|1" (MSB first representation).
  * Placed at bits 4-7 in the startbyte.
  * @retval None
  */
void set_startbyte(uint8_t nibble) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
    instr[0] = ((instr[0] & 0x0F) | (nibble << 4));
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <set_startbyte+0x34>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	b25a      	sxtb	r2, r3
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <set_startbyte+0x34>)
 8000bc4:	701a      	strb	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <set_byte>:
  * to follow convention.
  * @param byte: the byte to set up transmission for
  * @note LSB first ordering in the instruction array instr[].
  * @retval None
  */
void set_byte(uint8_t byte) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
    instr[1] = (byte & 0x0F);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <set_byte+0x2c>)
 8000bec:	705a      	strb	r2, [r3, #1]
    instr[2] = ((byte & 0xF0) >> 4);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	091b      	lsrs	r3, r3, #4
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <set_byte+0x2c>)
 8000bf6:	709a      	strb	r2, [r3, #2]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000000 	.word	0x20000000

08000c08 <display_set_backlight>:

/**
 * @brief This functions sets the backlight color of the display.
 * @param color: color mapped to an integer used in the switch statement below.
 */
void display_set_backlight(uint8_t color) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
    switch(color) {
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d013      	beq.n	8000c40 <display_set_backlight+0x38>
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	dc18      	bgt.n	8000c4e <display_set_backlight+0x46>
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <display_set_backlight+0x1e>
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d006      	beq.n	8000c32 <display_set_backlight+0x2a>
	  break;
	case 2:
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
	  break;
    }
}
 8000c24:	e013      	b.n	8000c4e <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Red_Backlight_GPIO_Port, Red_Backlight_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <display_set_backlight+0x50>)
 8000c2c:	f000 ff30 	bl	8001a90 <HAL_GPIO_WritePin>
	  break;
 8000c30:	e00d      	b.n	8000c4e <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(White_Backlight_GPIO_Port, White_Backlight_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <display_set_backlight+0x50>)
 8000c3a:	f000 ff29 	bl	8001a90 <HAL_GPIO_WritePin>
	  break;
 8000c3e:	e006      	b.n	8000c4e <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <display_set_backlight+0x50>)
 8000c48:	f000 ff22 	bl	8001a90 <HAL_GPIO_WritePin>
	  break;
 8000c4c:	bf00      	nop
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	48000800 	.word	0x48000800

08000c5c <display_hw_reset>:

/**
 * @brief Before using the display it should be reset by toggling the
 * Disp_Reset pin: high->low->high with sufficient delays in between.
 */
void display_hw_reset() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000c60:	2005      	movs	r0, #5
 8000c62:	f000 fbe5 	bl	8001430 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 ff0e 	bl	8001a90 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c74:	200a      	movs	r0, #10
 8000c76:	f000 fbdb 	bl	8001430 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c84:	f000 ff04 	bl	8001a90 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f000 fbd1 	bl	8001430 <HAL_Delay>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <send>:

/**
 * @brief sends the current data in the instructions array instr[] over SPI.
 */
void send() {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    if (HAL_SPI_Transmit(&hspi2, (uint8_t*)instr, 3, 50) != HAL_OK) {
 8000c98:	2332      	movs	r3, #50	; 0x32
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <send+0x20>)
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <send+0x24>)
 8000ca0:	f002 fe09 	bl	80038b6 <HAL_SPI_Transmit>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <send+0x1a>
	SPI_Error();
 8000caa:	f7ff ff6f 	bl	8000b8c <SPI_Error>
    }
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	2000055c 	.word	0x2000055c

08000cbc <display_clear>:

/**
 * @brief Sets all segments of the display to 20H, i.e. invisible character.
 */
void display_clear() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    set_startbyte(RS0_RW0);
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff6c 	bl	8000ba0 <set_startbyte>
    set_byte(CLEAR_DISPLAY);
 8000cc8:	2301      	movs	r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff83 	bl	8000bd8 <set_byte>
    send();
 8000cd2:	f7ff ffdf 	bl	8000c94 <send>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <display_init>:

/**
 * @brief Initialization routine to set up the running conditions for the display.
 * @note Sequence needed is predefined. Hardware reset required beforehand.
 */
void display_init() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

    display_hw_reset();
 8000ce2:	f7ff ffbb 	bl	8000c5c <display_hw_reset>

    display_set_backlight(WHITE);
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff8d 	bl	8000c08 <display_set_backlight>

    set_startbyte(RS0_RW0);
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff55 	bl	8000ba0 <set_startbyte>
    for (int i = 0; i < 11; i++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	e00e      	b.n	8000d1a <display_init+0x3e>
	set_byte(init_seq[i]);
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <display_init+0x50>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff67 	bl	8000bd8 <set_byte>
	send();
 8000d0a:	f7ff ffc3 	bl	8000c94 <send>
	HAL_Delay(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fb8e 	bl	8001430 <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3301      	adds	r3, #1
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0a      	cmp	r3, #10
 8000d1e:	dded      	ble.n	8000cfc <display_init+0x20>
    }

    display_clear();
 8000d20:	f7ff ffcc 	bl	8000cbc <display_clear>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000004 	.word	0x20000004

08000d30 <display_set_line>:

/**
 * @brief Instructs the display to target the line specified.
 * @param line: the line to target, 1, 2, 3 or 4.
 */
void display_set_line(uint8_t line) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS0_RW0);
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff2f 	bl	8000ba0 <set_startbyte>
    set_byte(DDRAM_L[line - 1]);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <display_set_line+0x2c>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff44 	bl	8000bd8 <set_byte>
    send();
 8000d50:	f7ff ffa0 	bl	8000c94 <send>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	080075b0 	.word	0x080075b0

08000d60 <display_write>:

/**
 * @brief writes the current instruction loaded to the display.
 * @param the data to send.
 */
void display_write(uint8_t data) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS1_RW0);
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff17 	bl	8000ba0 <set_startbyte>
    set_byte(data);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff2f 	bl	8000bd8 <set_byte>
    send();
 8000d7a:	f7ff ff8b 	bl	8000c94 <send>
    set_startbyte(RS0_RW0);
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff0d 	bl	8000ba0 <set_startbyte>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <display_write_line>:
 * @brief Receives a buffer to write to the display.
 * @param buf: the buffer of data to send.
 * @param len: length of the buffer.
 * @param line: the line of the display to target.
 */
void display_write_line(uint8_t *buf, uint8_t len, uint8_t line) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	70bb      	strb	r3, [r7, #2]
    display_set_line(line);
 8000d9e:	78bb      	ldrb	r3, [r7, #2]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc5 	bl	8000d30 <display_set_line>

    uint8_t i = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
    while (i < len) {
 8000daa:	e00c      	b.n	8000dc6 <display_write_line+0x38>
	display_write(buf[i++]);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	73fa      	strb	r2, [r7, #15]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffd0 	bl	8000d60 <display_write>
	HAL_Delay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 fb35 	bl	8001430 <HAL_Delay>
    while (i < len) {
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3ee      	bcc.n	8000dac <display_write_line+0x1e>
    }

    while (i < 10) { //set remaining segments to blank
 8000dce:	e005      	b.n	8000ddc <display_write_line+0x4e>
	display_write((uint8_t) 0x20);
 8000dd0:	2020      	movs	r0, #32
 8000dd2:	f7ff ffc5 	bl	8000d60 <display_write>
	i++;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
    while (i < 10) { //set remaining segments to blank
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b09      	cmp	r3, #9
 8000de0:	d9f6      	bls.n	8000dd0 <display_write_line+0x42>
    }
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	210f      	movs	r1, #15
 8000e26:	f06f 0001 	mvn.w	r0, #1
 8000e2a:	f000 fbdd 	bl	80015e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	2019      	movs	r0, #25
 8000e52:	f000 fbc9 	bl	80015e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e56:	2019      	movs	r0, #25
 8000e58:	f000 fbe2 	bl	8001620 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_InitTick+0x9c>)
 8000e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_InitTick+0x9c>)
 8000e62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e66:	6613      	str	r3, [r2, #96]	; 0x60
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_InitTick+0x9c>)
 8000e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e74:	f107 0210 	add.w	r2, r7, #16
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fc0e 	bl	80026a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e84:	f001 fbf6 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 8000e88:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <HAL_InitTick+0xa0>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	0c9b      	lsrs	r3, r3, #18
 8000e94:	3b01      	subs	r3, #1
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_InitTick+0xa4>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <HAL_InitTick+0xa8>)
 8000e9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_InitTick+0xa4>)
 8000ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_InitTick+0xa4>)
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_InitTick+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_InitTick+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <HAL_InitTick+0xa4>)
 8000eba:	f002 ffcf 	bl	8003e5c <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d104      	bne.n	8000ece <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_InitTick+0xa4>)
 8000ec6:	f003 f82b 	bl	8003f20 <HAL_TIM_Base_Start_IT>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3730      	adds	r7, #48	; 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	431bde83 	.word	0x431bde83
 8000ee0:	200005c0 	.word	0x200005c0
 8000ee4:	40012c00 	.word	0x40012c00

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f1a:	f003 f871 	bl	8004000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200005c0 	.word	0x200005c0

08000f28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <UART5_IRQHandler+0x10>)
 8000f2e:	f003 fb79 	bl	8004624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000060c 	.word	0x2000060c

08000f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	return 1;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_kill>:

int _kill(int pid, int sig)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f56:	f005 f855 	bl	8006004 <__errno>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2216      	movs	r2, #22
 8000f5e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_exit>:

void _exit (int status)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ffe7 	bl	8000f4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f7e:	e7fe      	b.n	8000f7e <_exit+0x12>

08000f80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e00a      	b.n	8000fa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f92:	f3af 8000 	nop.w
 8000f96:	4601      	mov	r1, r0
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	60ba      	str	r2, [r7, #8]
 8000f9e:	b2ca      	uxtb	r2, r1
 8000fa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf0      	blt.n	8000f92 <_read+0x12>
	}

return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e009      	b.n	8000fe0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbf1      	blt.n	8000fcc <_write+0x12>
	}
	return len;
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_close>:

int _close(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101a:	605a      	str	r2, [r3, #4]
	return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_isatty>:

int _isatty(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	return 1;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f004 ffba 	bl	8006004 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20018000 	.word	0x20018000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	200000a0 	.word	0x200000a0
 80010c4:	200006a8 	.word	0x200006a8

080010c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_UART5_Init+0x58>)
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <MX_UART5_Init+0x5c>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_UART5_Init+0x58>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_UART5_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_UART5_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_UART5_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_UART5_Init+0x58>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_UART5_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_UART5_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_UART5_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_UART5_Init+0x58>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_UART5_Init+0x58>)
 8001130:	f003 f966 	bl	8004400 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800113a:	f7ff fb6b 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000060c 	.word	0x2000060c
 8001148:	40005000 	.word	0x40005000

0800114c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ac      	sub	sp, #176	; 0xb0
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2288      	movs	r2, #136	; 0x88
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 ff81 	bl	8006074 <memset>
  if(uartHandle->Instance==UART5)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a36      	ldr	r2, [pc, #216]	; (8001250 <HAL_UART_MspInit+0x104>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d164      	bne.n	8001246 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800117c:	2310      	movs	r3, #16
 800117e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fb1b 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001194:	f7ff fb3e 	bl	8000814 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <HAL_UART_MspInit+0x108>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <HAL_UART_MspInit+0x108>)
 800119e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011a2:	6593      	str	r3, [r2, #88]	; 0x58
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_UART_MspInit+0x108>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_UART_MspInit+0x108>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <HAL_UART_MspInit+0x108>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_UART_MspInit+0x108>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_UART_MspInit+0x108>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <HAL_UART_MspInit+0x108>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_UART_MspInit+0x108>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011fa:	2308      	movs	r3, #8
 80011fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001204:	4619      	mov	r1, r3
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <HAL_UART_MspInit+0x10c>)
 8001208:	f000 fa98 	bl	800173c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120c:	2304      	movs	r3, #4
 800120e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001224:	2308      	movs	r3, #8
 8001226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800122e:	4619      	mov	r1, r3
 8001230:	480a      	ldr	r0, [pc, #40]	; (800125c <HAL_UART_MspInit+0x110>)
 8001232:	f000 fa83 	bl	800173c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2105      	movs	r1, #5
 800123a:	2035      	movs	r0, #53	; 0x35
 800123c:	f000 f9d4 	bl	80015e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001240:	2035      	movs	r0, #53	; 0x35
 8001242:	f000 f9ed 	bl	8001620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	37b0      	adds	r7, #176	; 0xb0
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40005000 	.word	0x40005000
 8001254:	40021000 	.word	0x40021000
 8001258:	48000800 	.word	0x48000800
 800125c:	48000c00 	.word	0x48000c00

08001260 <UART_Error>:
/**
 * @brief Error function called upon error generated
 * during UART communication.
 * @note Enables the LD2 LED on the Nucleo board and loops infinitely.
 */
void UART_Error(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2120      	movs	r1, #32
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f000 fc10 	bl	8001a90 <HAL_GPIO_WritePin>
    while (1) {}
 8001270:	e7fe      	b.n	8001270 <UART_Error+0x10>
	...

08001274 <uart_transmit>:
  * @param size: amount of bytes to transmit.
  * @note Starting the interrupt handler for transmitting.
  * Not allowed to receive if transmission not finished.
  * @retval None
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
    if (UartDoneR == SET) {
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <uart_transmit+0x40>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d110      	bne.n	80012aa <uart_transmit+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <uart_transmit+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <uart_transmit+0x44>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	461a      	mov	r2, r3
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4808      	ldr	r0, [pc, #32]	; (80012bc <uart_transmit+0x48>)
 800129c:	f003 f8fe 	bl	800449c <HAL_UART_Transmit_IT>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <uart_transmit+0x36>
	    UART_Error();
 80012a6:	f7ff ffdb 	bl	8001260 <UART_Error>
	}
    }
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000015 	.word	0x20000015
 80012b8:	20000014 	.word	0x20000014
 80012bc:	2000060c 	.word	0x2000060c

080012c0 <uart_receive>:
  * @param size: amount of bytes to receive.
  * @note Starting the interrupt handler for receiving.
  * Not allowed to transmit if reception not finished.
  * @retval None.
  */
void uart_receive(uint8_t buffer[], uint16_t size) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
    if (UartDoneT == SET) {
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <uart_receive+0x40>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d110      	bne.n	80012f6 <uart_receive+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <uart_receive+0x44>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <uart_receive+0x40>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	461a      	mov	r2, r3
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <uart_receive+0x48>)
 80012e8:	f003 f946 	bl	8004578 <HAL_UART_Receive_IT>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <uart_receive+0x36>
	    UART_Error();
 80012f2:	f7ff ffb5 	bl	8001260 <UART_Error>
	}
    }
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000014 	.word	0x20000014
 8001304:	20000015 	.word	0x20000015
 8001308:	2000060c 	.word	0x2000060c

0800130c <HAL_UART_TxCpltCallback>:
  * @brief UART transfer completion callback.
  * @param UartHandle: UART handle to use.
  * @note Reporting that the tranmission over UART is complete.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_UART_TxCpltCallback+0x20>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
    UartDoneR = SET;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_UART_TxCpltCallback+0x24>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	20000014 	.word	0x20000014
 8001330:	20000015 	.word	0x20000015

08001334 <HAL_UART_RxCpltCallback>:
* @brief UART reception completion callback.
* @param UartHandle: UART handle to use.
* @note Reporting that the reception over UART is complete.
* @retval None.
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    UartDoneR = SET;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_UART_RxCpltCallback+0x20>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
    UartDoneT = SET;
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_UART_RxCpltCallback+0x24>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000015 	.word	0x20000015
 8001358:	20000014 	.word	0x20000014

0800135c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001360:	f7ff feb2 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <LoopForever+0x6>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	; (800139c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <LoopForever+0xe>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	; (80013a8 <LoopForever+0x16>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f004 fe41 	bl	8006010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800138e:	f7ff f98b 	bl	80006a8 <main>

08001392 <LoopForever>:

LoopForever:
    b LoopForever
 8001392:	e7fe      	b.n	8001392 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001394:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80013a0:	08007858 	.word	0x08007858
  ldr r2, =_sbss
 80013a4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80013a8:	200006a4 	.word	0x200006a4

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_Init+0x3c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_Init+0x3c>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f000 f903 	bl	80015d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013cc:	200f      	movs	r0, #15
 80013ce:	f7ff fd35 	bl	8000e3c <HAL_InitTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	e001      	b.n	80013e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013de:	f7ff fd05 	bl	8000dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e2:	79fb      	ldrb	r3, [r7, #7]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2000001c 	.word	0x2000001c
 8001414:	20000690 	.word	0x20000690

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000690 	.word	0x20000690

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000001c 	.word	0x2000001c

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff4c 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015fa:	f7ff ff61 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 80015fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f7ff ffb1 	bl	800156c <NVIC_EncodePriority>
 800160a:	4602      	mov	r2, r0
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff80 	bl	8001518 <__NVIC_SetPriority>
}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff54 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d008      	beq.n	8001666 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2204      	movs	r2, #4
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e022      	b.n	80016ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020e 	bic.w	r2, r2, #14
 8001674:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f003 021c 	and.w	r2, r3, #28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d005      	beq.n	80016dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2204      	movs	r2, #4
 80016d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e029      	b.n	8001730 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 020e 	bic.w	r2, r2, #14
 80016ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f003 021c 	and.w	r2, r3, #28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
    }
  }
  return status;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e17f      	b.n	8001a4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8171 	beq.w	8001a46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x40>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0201 	and.w	r2, r3, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d118      	bne.n	800181c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017f0:	2201      	movs	r2, #1
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	f003 0201 	and.w	r2, r3, #1
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b03      	cmp	r3, #3
 8001826:	d017      	beq.n	8001858 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d123      	bne.n	80018ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80ac 	beq.w	8001a46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b5f      	ldr	r3, [pc, #380]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	4a5e      	ldr	r2, [pc, #376]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6613      	str	r3, [r2, #96]	; 0x60
 80018fa:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <HAL_GPIO_Init+0x330>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001906:	4a5a      	ldr	r2, [pc, #360]	; (8001a70 <HAL_GPIO_Init+0x334>)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x242>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_GPIO_Init+0x338>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x23e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_GPIO_Init+0x33c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x23a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x340>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x236>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_GPIO_Init+0x344>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x232>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_GPIO_Init+0x348>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x22e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_GPIO_Init+0x34c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x22a>
 8001962:	2306      	movs	r3, #6
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x244>
 8001966:	2307      	movs	r3, #7
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x244>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x244>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x244>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x244>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x244>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x244>
 800197e:	2300      	movs	r3, #0
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001990:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_GPIO_Init+0x334>)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_GPIO_Init+0x350>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c2:	4a32      	ldr	r2, [pc, #200]	; (8001a8c <HAL_GPIO_Init+0x350>)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c8:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_GPIO_Init+0x350>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <HAL_GPIO_Init+0x350>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_GPIO_Init+0x350>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_GPIO_Init+0x350>)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x350>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <HAL_GPIO_Init+0x350>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f47f ae78 	bne.w	800174c <HAL_GPIO_Init+0x10>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	48000400 	.word	0x48000400
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48000c00 	.word	0x48000c00
 8001a80:	48001000 	.word	0x48001000
 8001a84:	48001400 	.word	0x48001400
 8001a88:	48001800 	.word	0x48001800
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aea:	d130      	bne.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af8:	d038      	beq.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2232      	movs	r2, #50	; 0x32
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0c9b      	lsrs	r3, r3, #18
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b20:	e002      	b.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b34:	d102      	bne.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f2      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d110      	bne.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e00f      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d007      	beq.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	20000010 	.word	0x20000010
 8001b84:	431bde83 	.word	0x431bde83

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e3d4      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4ba1      	ldr	r3, [pc, #644]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b9e      	ldr	r3, [pc, #632]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80e4 	beq.w	8001d84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4a>
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	f040 808b 	bne.w	8001ce0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f040 8087 	bne.w	8001ce0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd2:	4b93      	ldr	r3, [pc, #588]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x62>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e3ac      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <HAL_RCC_OscConfig+0x7c>
 8001bfa:	4b89      	ldr	r3, [pc, #548]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_OscConfig+0x88>
 8001c04:	4b86      	ldr	r3, [pc, #536]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d223      	bcs.n	8001c5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fd73 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e38d      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c28:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a7c      	ldr	r2, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4977      	ldr	r1, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c46:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	4972      	ldr	r1, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
 8001c5a:	e025      	b.n	8001ca8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5c:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6f      	ldr	r2, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	496a      	ldr	r1, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7a:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	4965      	ldr	r1, [pc, #404]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fd33 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e34d      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca8:	f000 fc36 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	495a      	ldr	r1, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x29c>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x2a0>)
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cc8:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x2a4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f8b5 	bl	8000e3c <HAL_InitTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d052      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	e331      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d032      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce8:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fb90 	bl	8001418 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fb8c 	bl	8001418 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e31a      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0e:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	493b      	ldr	r1, [pc, #236]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	4936      	ldr	r1, [pc, #216]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	e01a      	b.n	8001d84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a33      	ldr	r2, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fb5d 	bl	8001418 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d62:	f7ff fb59 	bl	8001418 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e2e7      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1da>
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d074      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x21a>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d10e      	bne.n	8001dba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d10b      	bne.n	8001dba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d064      	beq.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d160      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e2c4      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x24a>
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e01d      	b.n	8001e0e <HAL_RCC_OscConfig+0x286>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x26e>
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001de2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e00b      	b.n	8001e0e <HAL_RCC_OscConfig+0x286>
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x298>)
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff faff 	bl	8001418 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1c:	e011      	b.n	8001e42 <HAL_RCC_OscConfig+0x2ba>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	080075b4 	.word	0x080075b4
 8001e28:	20000010 	.word	0x20000010
 8001e2c:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff faf2 	bl	8001418 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e280      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	4baf      	ldr	r3, [pc, #700]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2a8>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff fae2 	bl	8001418 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff fade 	bl	8001418 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e26c      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6a:	4ba5      	ldr	r3, [pc, #660]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2d0>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d060      	beq.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x310>
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d116      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e98:	4b99      	ldr	r3, [pc, #612]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x328>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e249      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b93      	ldr	r3, [pc, #588]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4990      	ldr	r1, [pc, #576]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec4:	e040      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d023      	beq.n	8001f16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a8b      	ldr	r2, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff fa9d 	bl	8001418 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fa99 	bl	8001418 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e227      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef4:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	497c      	ldr	r1, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e018      	b.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a79      	ldr	r2, [pc, #484]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa79 	bl	8001418 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa75 	bl	8001418 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e203      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3c:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d03c      	beq.n	8001fce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	4a67      	ldr	r2, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fa54 	bl	8001418 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff fa50 	bl	8001418 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1de      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f86:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ef      	beq.n	8001f74 <HAL_RCC_OscConfig+0x3ec>
 8001f94:	e01b      	b.n	8001fce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fa37 	bl	8001418 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff fa33 	bl	8001418 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1c1      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ef      	bne.n	8001fae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80a6 	beq.w	8002128 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	4a43      	ldr	r2, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002004:	2301      	movs	r3, #1
 8002006:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002008:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d118      	bne.n	8002046 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002020:	f7ff f9fa 	bl	8001418 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7ff f9f6 	bl	8001418 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e184      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203a:	4b32      	ldr	r3, [pc, #200]	; (8002104 <HAL_RCC_OscConfig+0x57c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0x4d8>
 800204e:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205e:	e024      	b.n	80020aa <HAL_RCC_OscConfig+0x522>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d110      	bne.n	800208a <HAL_RCC_OscConfig+0x502>
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002088:	e00f      	b.n	80020aa <HAL_RCC_OscConfig+0x522>
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7ff f9b1 	bl	8001418 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7ff f9ad 	bl	8001418 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e139      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x578>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ed      	beq.n	80020ba <HAL_RCC_OscConfig+0x532>
 80020de:	e01a      	b.n	8002116 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7ff f99a 	bl	8001418 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7ff f996 	bl	8001418 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d906      	bls.n	8002108 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e122      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002108:	4b90      	ldr	r3, [pc, #576]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e8      	bne.n	80020e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b8b      	ldr	r3, [pc, #556]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a8a      	ldr	r2, [pc, #552]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8108 	beq.w	8002342 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	2b02      	cmp	r3, #2
 8002138:	f040 80d0 	bne.w	80022dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800213c:	4b83      	ldr	r3, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	429a      	cmp	r2, r3
 800214e:	d130      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	3b01      	subs	r3, #1
 800215c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d127      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d11f      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217c:	2a07      	cmp	r2, #7
 800217e:	bf14      	ite	ne
 8002180:	2201      	movne	r2, #1
 8002182:	2200      	moveq	r2, #0
 8002184:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002186:	4293      	cmp	r3, r2
 8002188:	d113      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	3b01      	subs	r3, #1
 80021ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d06e      	beq.n	8002290 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	d069      	beq.n	800228c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021b8:	4b64      	ldr	r3, [pc, #400]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0b7      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021d4:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a5c      	ldr	r2, [pc, #368]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021e0:	f7ff f91a 	bl	8001418 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f916 	bl	8001418 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0a4      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fa:	4b54      	ldr	r3, [pc, #336]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_RCC_OscConfig+0x7c8>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002216:	3a01      	subs	r2, #1
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002220:	0212      	lsls	r2, r2, #8
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002228:	0852      	lsrs	r2, r2, #1
 800222a:	3a01      	subs	r2, #1
 800222c:	0552      	lsls	r2, r2, #21
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002234:	0852      	lsrs	r2, r2, #1
 8002236:	3a01      	subs	r2, #1
 8002238:	0652      	lsls	r2, r2, #25
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002240:	0912      	lsrs	r2, r2, #4
 8002242:	0452      	lsls	r2, r2, #17
 8002244:	430a      	orrs	r2, r1
 8002246:	4941      	ldr	r1, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800224c:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3e      	ldr	r2, [pc, #248]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002258:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a3b      	ldr	r2, [pc, #236]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002264:	f7ff f8d8 	bl	8001418 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f8d4 	bl	8001418 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e062      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b33      	ldr	r3, [pc, #204]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228a:	e05a      	b.n	8002342 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e059      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d152      	bne.n	8002342 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b4:	f7ff f8b0 	bl	8001418 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff f8ac 	bl	8001418 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e03a      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x734>
 80022da:	e032      	b.n	8002342 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d02d      	beq.n	800233e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002300:	f023 0303 	bic.w	r3, r3, #3
 8002304:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 800230c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff f87f 	bl	8001418 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff f87b 	bl	8001418 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e009      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x7c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x796>
 800233c:	e001      	b.n	8002342 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	f99d808c 	.word	0xf99d808c

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0c8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d910      	bls.n	8002398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4961      	ldr	r1, [pc, #388]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b0      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d04c      	beq.n	800243e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ac:	4b56      	ldr	r3, [pc, #344]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d121      	bne.n	80023fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e09e      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c4:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d115      	bne.n	80023fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e092      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023dc:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e086      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ec:	4b46      	ldr	r3, [pc, #280]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e07e      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fc:	4b42      	ldr	r3, [pc, #264]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 0203 	bic.w	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	493f      	ldr	r1, [pc, #252]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240e:	f7ff f803 	bl	8001418 <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002414:	e00a      	b.n	800242c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002416:	f7fe ffff 	bl	8001418 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e066      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 020c 	and.w	r2, r3, #12
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	429a      	cmp	r2, r3
 800243c:	d1eb      	bne.n	8002416 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	492c      	ldr	r1, [pc, #176]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d210      	bcs.n	800248c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4924      	ldr	r1, [pc, #144]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_ClockConfig+0x1b0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e036      	b.n	80024fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4918      	ldr	r1, [pc, #96]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4910      	ldr	r1, [pc, #64]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ca:	f000 f825 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCC_ClockConfig+0x1b4>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490c      	ldr	r1, [pc, #48]	; (800250c <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fca4 	bl	8000e3c <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
 80024f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80024f8:	7afb      	ldrb	r3, [r7, #11]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000
 8002508:	40021000 	.word	0x40021000
 800250c:	080075b4 	.word	0x080075b4
 8002510:	20000010 	.word	0x20000010
 8002514:	20000018 	.word	0x20000018

08002518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002530:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x34>
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d121      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d11e      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002558:	4b31      	ldr	r3, [pc, #196]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 800255a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e005      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002568:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002574:	4a2b      	ldr	r2, [pc, #172]	; (8002624 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d102      	bne.n	8002596 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_GetSysClockFreq+0x110>)
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	e004      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <HAL_RCC_GetSysClockFreq+0x114>)
 800259e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d134      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0xa6>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d003      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0xac>
 80025bc:	e005      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_RCC_GetSysClockFreq+0x110>)
 80025c0:	617b      	str	r3, [r7, #20]
      break;
 80025c2:	e005      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_GetSysClockFreq+0x114>)
 80025c6:	617b      	str	r3, [r7, #20]
      break;
 80025c8:	e002      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	617b      	str	r3, [r7, #20]
      break;
 80025ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	3301      	adds	r3, #1
 80025dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	fb02 f203 	mul.w	r2, r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	0e5b      	lsrs	r3, r3, #25
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	3301      	adds	r3, #1
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002610:	69bb      	ldr	r3, [r7, #24]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	080075cc 	.word	0x080075cc
 8002628:	00f42400 	.word	0x00f42400
 800262c:	007a1200 	.word	0x007a1200

08002630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_RCC_GetHCLKFreq+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000010 	.word	0x20000010

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800264c:	f7ff fff0 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4904      	ldr	r1, [pc, #16]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	080075c4 	.word	0x080075c4

08002674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002678:	f7ff ffda 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	0adb      	lsrs	r3, r3, #11
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4904      	ldr	r1, [pc, #16]	; (800269c <HAL_RCC_GetPCLK2Freq+0x28>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	080075c4 	.word	0x080075c4

080026a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	220f      	movs	r2, #15
 80026ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_GetClockConfig+0x5c>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_GetClockConfig+0x5c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_GetClockConfig+0x5c>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_GetClockConfig+0x5c>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_RCC_GetClockConfig+0x60>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40022000 	.word	0x40022000

08002704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800271c:	f7ff f9d0 	bl	8001ac0 <HAL_PWREx_GetVoltageRange>
 8002720:	6178      	str	r0, [r7, #20]
 8002722:	e014      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	; 0x58
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800273c:	f7ff f9c0 	bl	8001ac0 <HAL_PWREx_GetVoltageRange>
 8002740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002754:	d10b      	bne.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d919      	bls.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2ba0      	cmp	r3, #160	; 0xa0
 8002760:	d902      	bls.n	8002768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002762:	2302      	movs	r3, #2
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	e013      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e010      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d902      	bls.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002774:	2303      	movs	r3, #3
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e00a      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d102      	bne.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e004      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b70      	cmp	r3, #112	; 0x70
 800278a:	d101      	bne.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800278c:	2301      	movs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 0207 	bic.w	r2, r3, #7
 8002798:	4909      	ldr	r1, [pc, #36]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40022000 	.word	0x40022000

080027c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d0:	2300      	movs	r3, #0
 80027d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d041      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027e8:	d02a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ee:	d824      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027fa:	d81e      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002804:	d010      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002806:	e018      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002808:	4b86      	ldr	r3, [pc, #536]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a85      	ldr	r2, [pc, #532]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002812:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002814:	e015      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fabb 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002826:	e00c      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3320      	adds	r3, #32
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fba6 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002838:	e003      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	74fb      	strb	r3, [r7, #19]
      break;
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002856:	4973      	ldr	r1, [pc, #460]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800285e:	e001      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d041      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002874:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002878:	d02a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800287a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800287e:	d824      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002884:	d008      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800288a:	d81e      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002894:	d010      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002896:	e018      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002898:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a61      	ldr	r2, [pc, #388]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028a4:	e015      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fa73 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028b6:	e00c      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3320      	adds	r3, #32
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fb5e 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028c8:	e003      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	74fb      	strb	r3, [r7, #19]
      break;
 80028ce:	e000      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028d8:	4b52      	ldr	r3, [pc, #328]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e6:	494f      	ldr	r1, [pc, #316]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ee:	e001      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a0 	beq.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	4a40      	ldr	r2, [pc, #256]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002926:	6593      	str	r3, [r2, #88]	; 0x58
 8002928:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002934:	2301      	movs	r3, #1
 8002936:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002944:	f7fe fd68 	bl	8001418 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800294a:	e009      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294c:	f7fe fd64 	bl	8001418 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	74fb      	strb	r3, [r7, #19]
        break;
 800295e:	e005      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ef      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d15c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	d019      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fd23 	bl	8001418 <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	e00b      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fd1f 	bl	8001418 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d902      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	74fb      	strb	r3, [r7, #19]
            break;
 80029ec:	e006      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ec      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a12:	4904      	ldr	r1, [pc, #16]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a1a:	e009      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	74bb      	strb	r3, [r7, #18]
 8002a20:	e006      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a30:	7c7b      	ldrb	r3, [r7, #17]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b9e      	ldr	r3, [pc, #632]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	4a9d      	ldr	r2, [pc, #628]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a4e:	4b98      	ldr	r3, [pc, #608]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f023 0203 	bic.w	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	4994      	ldr	r1, [pc, #592]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a70:	4b8f      	ldr	r3, [pc, #572]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 020c 	bic.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	498c      	ldr	r1, [pc, #560]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a92:	4b87      	ldr	r3, [pc, #540]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4983      	ldr	r1, [pc, #524]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ab4:	4b7e      	ldr	r3, [pc, #504]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	497b      	ldr	r1, [pc, #492]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae4:	4972      	ldr	r1, [pc, #456]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	496a      	ldr	r1, [pc, #424]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	4961      	ldr	r1, [pc, #388]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b3c:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	4959      	ldr	r1, [pc, #356]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	4950      	ldr	r1, [pc, #320]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	4948      	ldr	r1, [pc, #288]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ba2:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	493f      	ldr	r1, [pc, #252]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d028      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd2:	4937      	ldr	r1, [pc, #220]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be4:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a31      	ldr	r2, [pc, #196]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bee:	60d3      	str	r3, [r2, #12]
 8002bf0:	e011      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f8c8 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d028      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	491f      	ldr	r1, [pc, #124]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c40:	d106      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4c:	60d3      	str	r3, [r2, #12]
 8002c4e:	e011      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f899 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02b      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4a02      	ldr	r2, [pc, #8]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002caa:	60d3      	str	r3, [r2, #12]
 8002cac:	e014      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f867 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cce:	7cfb      	ldrb	r3, [r7, #19]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d02f      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf2:	4928      	ldr	r1, [pc, #160]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d02:	d10d      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f844 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d014      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	74bb      	strb	r3, [r7, #18]
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3320      	adds	r3, #32
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f925 	bl	8002f80 <RCCEx_PLLSAI2_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5e:	490d      	ldr	r1, [pc, #52]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d82:	4904      	ldr	r1, [pc, #16]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000

08002d98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002da6:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002db2:	4b72      	ldr	r3, [pc, #456]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10d      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d047      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e044      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d018      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0x86>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d825      	bhi.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d002      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x62>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d009      	beq.n	8002e0c <RCCEx_PLLSAI1_Config+0x74>
 8002df8:	e020      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dfa:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11d      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0a:	e01a      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e013      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1e:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e3a:	e006      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e004      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e52:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	430b      	orrs	r3, r1
 8002e68:	4944      	ldr	r1, [pc, #272]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d17d      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e74:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a40      	ldr	r2, [pc, #256]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fe faca 	bl	8001418 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fe fac6 	bl	8001418 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
        break;
 8002e9a:	e005      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ef      	bne.n	8002e88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d160      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d111      	bne.n	8002ed8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	0912      	lsrs	r2, r2, #4
 8002ecc:	0452      	lsls	r2, r2, #17
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	492a      	ldr	r1, [pc, #168]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	610b      	str	r3, [r1, #16]
 8002ed6:	e027      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d112      	bne.n	8002f04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ee6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6892      	ldr	r2, [r2, #8]
 8002eee:	0211      	lsls	r1, r2, #8
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6912      	ldr	r2, [r2, #16]
 8002ef4:	0852      	lsrs	r2, r2, #1
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	0552      	lsls	r2, r2, #21
 8002efa:	430a      	orrs	r2, r1
 8002efc:	491f      	ldr	r1, [pc, #124]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
 8002f02:	e011      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	0211      	lsls	r1, r2, #8
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6952      	ldr	r2, [r2, #20]
 8002f1a:	0852      	lsrs	r2, r2, #1
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	0652      	lsls	r2, r2, #25
 8002f20:	430a      	orrs	r2, r1
 8002f22:	4916      	ldr	r1, [pc, #88]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe fa70 	bl	8001418 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f3a:	e009      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3c:	f7fe fa6c 	bl	8001418 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f4e:	e005      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ef      	beq.n	8002f3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	4904      	ldr	r1, [pc, #16]	; (8002f7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0203 	and.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10d      	bne.n	8002fc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
       ||
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d047      	beq.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	e044      	b.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d018      	beq.n	8003006 <RCCEx_PLLSAI2_Config+0x86>
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d825      	bhi.n	8003024 <RCCEx_PLLSAI2_Config+0xa4>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <RCCEx_PLLSAI2_Config+0x62>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d009      	beq.n	8002ff4 <RCCEx_PLLSAI2_Config+0x74>
 8002fe0:	e020      	b.n	8003024 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe2:	4b55      	ldr	r3, [pc, #340]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff2:	e01a      	b.n	800302a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e013      	b.n	800302e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003012:	4b49      	ldr	r3, [pc, #292]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003022:	e006      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      break;
 8003028:	e004      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
    }

    if(status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800303a:	4b3f      	ldr	r3, [pc, #252]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	430b      	orrs	r3, r1
 8003050:	4939      	ldr	r1, [pc, #228]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d167      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a35      	ldr	r2, [pc, #212]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe f9d6 	bl	8001418 <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800306e:	e009      	b.n	8003084 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003070:	f7fe f9d2 	bl	8001418 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	73fb      	strb	r3, [r7, #15]
        break;
 8003082:	e005      	b.n	8003090 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1ef      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d14a      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	0912      	lsrs	r2, r2, #4
 80030b4:	0452      	lsls	r2, r2, #17
 80030b6:	430a      	orrs	r2, r1
 80030b8:	491f      	ldr	r1, [pc, #124]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	614b      	str	r3, [r1, #20]
 80030be:	e011      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6892      	ldr	r2, [r2, #8]
 80030d0:	0211      	lsls	r1, r2, #8
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6912      	ldr	r2, [r2, #16]
 80030d6:	0852      	lsrs	r2, r2, #1
 80030d8:	3a01      	subs	r2, #1
 80030da:	0652      	lsls	r2, r2, #25
 80030dc:	430a      	orrs	r2, r1
 80030de:	4916      	ldr	r1, [pc, #88]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a13      	ldr	r2, [pc, #76]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe f992 	bl	8001418 <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f6:	e009      	b.n	800310c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f8:	f7fe f98e 	bl	8001418 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	73fb      	strb	r3, [r7, #15]
          break;
 800310a:	e005      	b.n	8003118 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ef      	beq.n	80030f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4904      	ldr	r1, [pc, #16]	; (8003138 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d06c      	beq.n	8003228 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fbb8 	bl	80008d8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	22ca      	movs	r2, #202	; 0xca
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2253      	movs	r2, #83	; 0x53
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fa49 	bl	8003618 <RTC_EnterInitMode>
 8003186:	4603      	mov	r3, r0
 8003188:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d14b      	bne.n	8003228 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800319e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68d2      	ldr	r2, [r2, #12]
 80031ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6919      	ldr	r1, [r3, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	041a      	lsls	r2, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fa4d 	bl	8003680 <RTC_ExitInitMode>
 80031e6:	4603      	mov	r3, r0
 80031e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11b      	bne.n	8003228 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0203 	bic.w	r2, r2, #3
 80031fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_RTC_SetTime+0x1a>
 8003248:	2302      	movs	r3, #2
 800324a:	e08b      	b.n	8003364 <HAL_RTC_SetTime+0x132>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	22ca      	movs	r2, #202	; 0xca
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2253      	movs	r2, #83	; 0x53
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f9d3 	bl	8003618 <RTC_EnterInitMode>
 8003272:	4603      	mov	r3, r0
 8003274:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d163      	bne.n	8003344 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d126      	bne.n	80032d0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fa2e 	bl	80036fc <RTC_ByteToBcd2>
 80032a0:	4603      	mov	r3, r0
 80032a2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa27 	bl	80036fc <RTC_ByteToBcd2>
 80032ae:	4603      	mov	r3, r0
 80032b0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032b2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	789b      	ldrb	r3, [r3, #2]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fa1f 	bl	80036fc <RTC_ByteToBcd2>
 80032be:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032c0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	78db      	ldrb	r3, [r3, #3]
 80032c8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e018      	b.n	8003302 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032f0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032f6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	78db      	ldrb	r3, [r3, #3]
 80032fc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800330c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003310:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003320:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f9a0 	bl	8003680 <RTC_ExitInitMode>
 8003340:	4603      	mov	r3, r0
 8003342:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003362:	7cfb      	ldrb	r3, [r7, #19]
}
 8003364:	4618      	mov	r0, r3
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}

0800336c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800339a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800339e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	0d9b      	lsrs	r3, r3, #22
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11a      	bne.n	800341a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f9a7 	bl	800373c <RTC_Bcd2ToByte>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	785b      	ldrb	r3, [r3, #1]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f99e 	bl	800373c <RTC_Bcd2ToByte>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	789b      	ldrb	r3, [r3, #2]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f995 	bl	800373c <RTC_Bcd2ToByte>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_RTC_SetDate+0x1a>
 800343a:	2302      	movs	r3, #2
 800343c:	e075      	b.n	800352a <HAL_RTC_SetDate+0x106>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10e      	bne.n	8003472 <HAL_RTC_SetDate+0x4e>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	f023 0310 	bic.w	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	330a      	adds	r3, #10
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11c      	bne.n	80034b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	78db      	ldrb	r3, [r3, #3]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f93d 	bl	80036fc <RTC_ByteToBcd2>
 8003482:	4603      	mov	r3, r0
 8003484:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f936 	bl	80036fc <RTC_ByteToBcd2>
 8003490:	4603      	mov	r3, r0
 8003492:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003494:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	789b      	ldrb	r3, [r3, #2]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f92e 	bl	80036fc <RTC_ByteToBcd2>
 80034a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e00e      	b.n	80034d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	785b      	ldrb	r3, [r3, #1]
 80034bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	22ca      	movs	r2, #202	; 0xca
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2253      	movs	r2, #83	; 0x53
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f899 	bl	8003618 <RTC_EnterInitMode>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10c      	bne.n	800350a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034fe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f8bd 	bl	8003680 <RTC_ExitInitMode>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	22ff      	movs	r2, #255	; 0xff
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
}
 800352a:	4618      	mov	r0, r3
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd90      	pop	{r4, r7, pc}

08003532 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003548:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800354c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b2da      	uxtb	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	0b5b      	lsrs	r3, r3, #13
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11a      	bne.n	80035c2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	78db      	ldrb	r3, [r3, #3]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f8d3 	bl	800373c <RTC_Bcd2ToByte>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f8ca 	bl	800373c <RTC_Bcd2ToByte>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	789b      	ldrb	r3, [r3, #2]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f8c1 	bl	800373c <RTC_Bcd2ToByte>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80035e4:	f7fd ff18 	bl	8001418 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035ea:	e009      	b.n	8003600 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035ec:	f7fd ff14 	bl	8001418 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035fa:	d901      	bls.n	8003600 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e007      	b.n	8003610 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ee      	beq.n	80035ec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d120      	bne.n	8003674 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800363a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800363c:	f7fd feec 	bl	8001418 <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003642:	e00d      	b.n	8003660 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003644:	f7fd fee8 	bl	8001418 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003652:	d905      	bls.n	8003660 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2203      	movs	r2, #3
 800365c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <RTC_EnterInitMode+0x5c>
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d1e7      	bne.n	8003644 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <RTC_ExitInitMode+0x78>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <RTC_ExitInitMode+0x78>)
 8003692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003696:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <RTC_ExitInitMode+0x78>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10c      	bne.n	80036be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff91 	bl	80035cc <HAL_RTC_WaitForSynchro>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01e      	beq.n	80036ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2203      	movs	r2, #3
 80036b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e017      	b.n	80036ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <RTC_ExitInitMode+0x78>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <RTC_ExitInitMode+0x78>)
 80036c4:	f023 0320 	bic.w	r3, r3, #32
 80036c8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff7e 	bl	80035cc <HAL_RTC_WaitForSynchro>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2203      	movs	r2, #3
 80036da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <RTC_ExitInitMode+0x78>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <RTC_ExitInitMode+0x78>)
 80036e8:	f043 0320 	orr.w	r3, r3, #32
 80036ec:	6093      	str	r3, [r2, #8]
  }

  return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40002800 	.word	0x40002800

080036fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800370e:	e005      	b.n	800371c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003716:	7afb      	ldrb	r3, [r7, #11]
 8003718:	3b0a      	subs	r3, #10
 800371a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800371c:	7afb      	ldrb	r3, [r7, #11]
 800371e:	2b09      	cmp	r3, #9
 8003720:	d8f6      	bhi.n	8003710 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	b2da      	uxtb	r2, r3
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	4313      	orrs	r3, r2
 800372e:	b2db      	uxtb	r3, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	4413      	add	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	b2da      	uxtb	r2, r3
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	4413      	add	r3, r2
 8003762:	b2db      	uxtb	r3, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e095      	b.n	80038ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003792:	d009      	beq.n	80037a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	61da      	str	r2, [r3, #28]
 800379a:	e005      	b.n	80037a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd f980 	bl	8000ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e8:	d902      	bls.n	80037f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	e002      	b.n	80037f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037fe:	d007      	beq.n	8003810 <HAL_SPI_Init+0xa0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003808:	d002      	beq.n	8003810 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	ea42 0103 	orr.w	r1, r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	f003 0204 	and.w	r2, r3, #4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800388c:	ea42 0103 	orr.w	r1, r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b088      	sub	sp, #32
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_SPI_Transmit+0x22>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e158      	b.n	8003b8a <HAL_SPI_Transmit+0x2d4>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038e0:	f7fd fd9a 	bl	8001418 <HAL_GetTick>
 80038e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
 80038f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038fa:	e13d      	b.n	8003b78 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_SPI_Transmit+0x52>
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800390c:	e134      	b.n	8003b78 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2203      	movs	r2, #3
 8003912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003958:	d10f      	bne.n	800397a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003968:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003978:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d007      	beq.n	8003998 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a0:	d94b      	bls.n	8003a3a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_Transmit+0xfa>
 80039aa:	8afb      	ldrh	r3, [r7, #22]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d13e      	bne.n	8003a2e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039d4:	e02b      	b.n	8003a2e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d112      	bne.n	8003a0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a08:	e011      	b.n	8003a2e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a0a:	f7fd fd05 	bl	8001418 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d803      	bhi.n	8003a22 <HAL_SPI_Transmit+0x16c>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a20:	d102      	bne.n	8003a28 <HAL_SPI_Transmit+0x172>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a2c:	e0a4      	b.n	8003b78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ce      	bne.n	80039d6 <HAL_SPI_Transmit+0x120>
 8003a38:	e07c      	b.n	8003b34 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Transmit+0x192>
 8003a42:	8afb      	ldrh	r3, [r7, #22]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d170      	bne.n	8003b2a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d912      	bls.n	8003a78 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	881a      	ldrh	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	1c9a      	adds	r2, r3, #2
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b02      	subs	r3, #2
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a76:	e058      	b.n	8003b2a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	7812      	ldrb	r2, [r2, #0]
 8003a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a9e:	e044      	b.n	8003b2a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d12b      	bne.n	8003b06 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d912      	bls.n	8003ade <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b02      	subs	r3, #2
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003adc:	e025      	b.n	8003b2a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b04:	e011      	b.n	8003b2a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b06:	f7fd fc87 	bl	8001418 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d803      	bhi.n	8003b1e <HAL_SPI_Transmit+0x268>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Transmit+0x26e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b28:	e026      	b.n	8003b78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1b5      	bne.n	8003aa0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f949 	bl	8003dd0 <SPI_EndRxTxTransaction>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e000      	b.n	8003b78 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba4:	f7fd fc38 	bl	8001418 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bb4:	f7fd fc30 	bl	8001418 <HAL_GetTick>
 8003bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	015b      	lsls	r3, r3, #5
 8003bc0:	0d1b      	lsrs	r3, r3, #20
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	e054      	b.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd2:	d050      	beq.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd4:	f7fd fc20 	bl	8001418 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d902      	bls.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13d      	bne.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c02:	d111      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0c:	d004      	beq.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d107      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d10f      	bne.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e017      	b.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d19b      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000010 	.word	0x20000010

08003ca4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cb6:	f7fd fbaf 	bl	8001418 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cc6:	f7fd fba7 	bl	8001418 <HAL_GetTick>
 8003cca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cd4:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	00da      	lsls	r2, r3, #3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	0d1b      	lsrs	r3, r3, #20
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cec:	e060      	b.n	8003db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003cf4:	d107      	bne.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0c:	d050      	beq.n	8003db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0e:	f7fd fb83 	bl	8001418 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d902      	bls.n	8003d24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d13d      	bne.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3c:	d111      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d46:	d004      	beq.n	8003d52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d50:	d107      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d10f      	bne.n	8003d8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e010      	b.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d196      	bne.n	8003cee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000010 	.word	0x20000010

08003dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff ff5b 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e027      	b.n	8003e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2180      	movs	r1, #128	; 0x80
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff fec0 	bl	8003b94 <SPI_WaitFlagStateUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e014      	b.n	8003e54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff ff34 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e000      	b.n	8003e54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e049      	b.n	8003f02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f841 	bl	8003f0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 f9f8 	bl	8004290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d001      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e04f      	b.n	8003fd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d01d      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x76>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f62:	d018      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x76>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x76>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <HAL_TIM_Base_Start_IT+0xcc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x76>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x76>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1b      	ldr	r2, [pc, #108]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIM_Base_Start_IT+0x76>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d115      	bne.n	8003fc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_TIM_Base_Start_IT+0xdc>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b06      	cmp	r3, #6
 8003fa6:	d015      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0xb4>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d011      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	e008      	b.n	8003fd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e000      	b.n	8003fd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40013400 	.word	0x40013400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	00010007 	.word	0x00010007

08004000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0202 	mvn.w	r2, #2
 800402c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f905 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8f7 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f908 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b04      	cmp	r3, #4
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0204 	mvn.w	r2, #4
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8db 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8cd 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8de 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0208 	mvn.w	r2, #8
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2204      	movs	r2, #4
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8b1 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8a3 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8b4 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0210 	mvn.w	r2, #16
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2208      	movs	r2, #8
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f887 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f879 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f88a 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0201 	mvn.w	r2, #1
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fc fb36 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f914 	bl	80043d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041be:	d10e      	bne.n	80041de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d107      	bne.n	80041de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f907 	bl	80043ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d10e      	bne.n	800420a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d107      	bne.n	800420a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f838 	bl	800427a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b20      	cmp	r3, #32
 8004216:	d10e      	bne.n	8004236 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b20      	cmp	r3, #32
 8004224:	d107      	bne.n	8004236 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f06f 0220 	mvn.w	r2, #32
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8c7 	bl	80043c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a40      	ldr	r2, [pc, #256]	; (80043a4 <TIM_Base_SetConfig+0x114>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d00f      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3d      	ldr	r2, [pc, #244]	; (80043a8 <TIM_Base_SetConfig+0x118>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00b      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3c      	ldr	r2, [pc, #240]	; (80043ac <TIM_Base_SetConfig+0x11c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d007      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <TIM_Base_SetConfig+0x120>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3a      	ldr	r2, [pc, #232]	; (80043b4 <TIM_Base_SetConfig+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d108      	bne.n	80042e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2f      	ldr	r2, [pc, #188]	; (80043a4 <TIM_Base_SetConfig+0x114>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01f      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f0:	d01b      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <TIM_Base_SetConfig+0x118>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d017      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <TIM_Base_SetConfig+0x11c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <TIM_Base_SetConfig+0x120>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00f      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <TIM_Base_SetConfig+0x124>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00b      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <TIM_Base_SetConfig+0x128>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d007      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a27      	ldr	r2, [pc, #156]	; (80043bc <TIM_Base_SetConfig+0x12c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_Base_SetConfig+0x9a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <TIM_Base_SetConfig+0x130>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d108      	bne.n	800433c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <TIM_Base_SetConfig+0x114>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00f      	beq.n	8004388 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <TIM_Base_SetConfig+0x124>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0xf8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <TIM_Base_SetConfig+0x128>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0xf8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <TIM_Base_SetConfig+0x12c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0xf8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <TIM_Base_SetConfig+0x130>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d103      	bne.n	8004390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	615a      	str	r2, [r3, #20]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40013400 	.word	0x40013400
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40014400 	.word	0x40014400
 80043c0:	40014800 	.word	0x40014800

080043c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e040      	b.n	8004494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fe92 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fbe8 	bl	8004c14 <UART_SetConfig>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fe66 	bl	8005128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800446a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800447a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 feed 	bl	800526c <UART_CheckIdleState>
 8004492:	4603      	mov	r3, r0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800449c:	b480      	push	{r7}
 800449e:	b08b      	sub	sp, #44	; 0x2c
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d156      	bne.n	8004560 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_UART_Transmit_IT+0x22>
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e04f      	b.n	8004562 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Transmit_IT+0x34>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e048      	b.n	8004562 <HAL_UART_Transmit_IT+0xc6>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2221      	movs	r2, #33	; 0x21
 8004500:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d107      	bne.n	800451c <HAL_UART_Transmit_IT+0x80>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_UART_Transmit_IT+0xd4>)
 8004518:	669a      	str	r2, [r3, #104]	; 0x68
 800451a:	e002      	b.n	8004522 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <HAL_UART_Transmit_IT+0xd8>)
 8004520:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	613b      	str	r3, [r7, #16]
   return(result);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	69f9      	ldr	r1, [r7, #28]
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	61bb      	str	r3, [r7, #24]
   return(result);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e6      	bne.n	800452a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	372c      	adds	r7, #44	; 0x2c
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	080057c7 	.word	0x080057c7
 8004574:	0800570f 	.word	0x0800570f

08004578 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458a:	2b20      	cmp	r3, #32
 800458c:	d142      	bne.n	8004614 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_UART_Receive_IT+0x22>
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e03b      	b.n	8004616 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_UART_Receive_IT+0x34>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e034      	b.n	8004616 <HAL_UART_Receive_IT+0x9e>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_UART_Receive_IT+0xa8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d01f      	beq.n	8004604 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d018      	beq.n	8004604 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	613b      	str	r3, [r7, #16]
   return(result);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	69f9      	ldr	r1, [r7, #28]
 80045f6:	6a3a      	ldr	r2, [r7, #32]
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e6      	bne.n	80045d2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	461a      	mov	r2, r3
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 ff3c 	bl	8005488 <UART_Start_Receive_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	e000      	b.n	8004616 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3728      	adds	r7, #40	; 0x28
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40008000 	.word	0x40008000

08004624 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b0ba      	sub	sp, #232	; 0xe8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800464a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800464e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004652:	4013      	ands	r3, r2
 8004654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d115      	bne.n	800468c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00f      	beq.n	800468c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 82a6 	beq.w	8004bce <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
      }
      return;
 800468a:	e2a0      	b.n	8004bce <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800468c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8117 	beq.w	80048c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046a6:	4b85      	ldr	r3, [pc, #532]	; (80048bc <HAL_UART_IRQHandler+0x298>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 810a 	beq.w	80048c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d011      	beq.n	80046e0 <HAL_UART_IRQHandler+0xbc>
 80046bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <HAL_UART_IRQHandler+0xec>
 80046ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2202      	movs	r2, #2
 80046fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d011      	beq.n	8004740 <HAL_UART_IRQHandler+0x11c>
 800471c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2204      	movs	r2, #4
 800472e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004736:	f043 0202 	orr.w	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d017      	beq.n	800477c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2208      	movs	r2, #8
 800476a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	f043 0208 	orr.w	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_UART_IRQHandler+0x18a>
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00c      	beq.n	80047ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800479c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 820c 	beq.w	8004bd2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d005      	beq.n	8004806 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004802:	2b00      	cmp	r3, #0
 8004804:	d04f      	beq.n	80048a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 ff08 	bl	800561c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d141      	bne.n	800489e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3308      	adds	r3, #8
 8004820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004846:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800484a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800485e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1d9      	bne.n	800481a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	2b00      	cmp	r3, #0
 800486c:	d013      	beq.n	8004896 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <HAL_UART_IRQHandler+0x29c>)
 8004874:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	4618      	mov	r0, r3
 800487c:	f7fc ff1c 	bl	80016b8 <HAL_DMA_Abort_IT>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d017      	beq.n	80048b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004890:	4610      	mov	r0, r2
 8004892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e00f      	b.n	80048b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f9a6 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	e00b      	b.n	80048b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9a2 	bl	8004be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	e007      	b.n	80048b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f99e 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80048b4:	e18d      	b.n	8004bd2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b6:	bf00      	nop
    return;
 80048b8:	e18b      	b.n	8004bd2 <HAL_UART_IRQHandler+0x5ae>
 80048ba:	bf00      	nop
 80048bc:	04000120 	.word	0x04000120
 80048c0:	080056e3 	.word	0x080056e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	f040 8146 	bne.w	8004b5a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 813f 	beq.w	8004b5a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8138 	beq.w	8004b5a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2210      	movs	r2, #16
 80048f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	f040 80b4 	bne.w	8004a6a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800490e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 815f 	beq.w	8004bd6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800491e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004922:	429a      	cmp	r2, r3
 8004924:	f080 8157 	bcs.w	8004bd6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800492e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 8085 	bne.w	8004a4e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800495c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800496e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004972:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800497a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1da      	bne.n	8004944 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800499e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e1      	bne.n	800498e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e3      	bne.n	80049ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1e:	f023 0310 	bic.w	r3, r3, #16
 8004a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e4      	bne.n	8004a0e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fc fdf7 	bl	800163c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8ca 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a68:	e0b5      	b.n	8004bd6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80a7 	beq.w	8004bda <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80a2 	beq.w	8004bda <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e4      	bne.n	8004a96 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	623b      	str	r3, [r7, #32]
   return(result);
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3308      	adds	r3, #8
 8004aec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004af0:	633a      	str	r2, [r7, #48]	; 0x30
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e3      	bne.n	8004acc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	617b      	str	r3, [r7, #20]
   return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e4      	bne.n	8004b16 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f852 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b58:	e03f      	b.n	8004bda <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <HAL_UART_IRQHandler+0x560>
 8004b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 f80c 	bl	8005b9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b82:	e02d      	b.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00e      	beq.n	8004bae <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01c      	beq.n	8004bde <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
    }
    return;
 8004bac:	e017      	b.n	8004bde <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d012      	beq.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
 8004bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fe5d 	bl	8005886 <UART_EndTransmit_IT>
    return;
 8004bcc:	e008      	b.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bce:	bf00      	nop
 8004bd0:	e006      	b.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bd2:	bf00      	nop
 8004bd4:	e004      	b.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bde:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004be0:	37e8      	adds	r7, #232	; 0xe8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop

08004be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b5b0      	push	{r4, r5, r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4bad      	ldr	r3, [pc, #692]	; (8004ef4 <UART_SetConfig+0x2e0>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4aa2      	ldr	r2, [pc, #648]	; (8004ef8 <UART_SetConfig+0x2e4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a99      	ldr	r2, [pc, #612]	; (8004efc <UART_SetConfig+0x2e8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d121      	bne.n	8004cde <UART_SetConfig+0xca>
 8004c9a:	4b99      	ldr	r3, [pc, #612]	; (8004f00 <UART_SetConfig+0x2ec>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d817      	bhi.n	8004cd8 <UART_SetConfig+0xc4>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x9c>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cc1 	.word	0x08004cc1
 8004cb4:	08004ccd 	.word	0x08004ccd
 8004cb8:	08004cc7 	.word	0x08004cc7
 8004cbc:	08004cd3 	.word	0x08004cd3
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	76fb      	strb	r3, [r7, #27]
 8004cc4:	e0e7      	b.n	8004e96 <UART_SetConfig+0x282>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	76fb      	strb	r3, [r7, #27]
 8004cca:	e0e4      	b.n	8004e96 <UART_SetConfig+0x282>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	76fb      	strb	r3, [r7, #27]
 8004cd0:	e0e1      	b.n	8004e96 <UART_SetConfig+0x282>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	76fb      	strb	r3, [r7, #27]
 8004cd6:	e0de      	b.n	8004e96 <UART_SetConfig+0x282>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	76fb      	strb	r3, [r7, #27]
 8004cdc:	e0db      	b.n	8004e96 <UART_SetConfig+0x282>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a88      	ldr	r2, [pc, #544]	; (8004f04 <UART_SetConfig+0x2f0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d132      	bne.n	8004d4e <UART_SetConfig+0x13a>
 8004ce8:	4b85      	ldr	r3, [pc, #532]	; (8004f00 <UART_SetConfig+0x2ec>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d828      	bhi.n	8004d48 <UART_SetConfig+0x134>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0xe8>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	08004d49 	.word	0x08004d49
 8004d08:	08004d49 	.word	0x08004d49
 8004d0c:	08004d3d 	.word	0x08004d3d
 8004d10:	08004d49 	.word	0x08004d49
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08004d49 	.word	0x08004d49
 8004d1c:	08004d37 	.word	0x08004d37
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d49 	.word	0x08004d49
 8004d2c:	08004d43 	.word	0x08004d43
 8004d30:	2300      	movs	r3, #0
 8004d32:	76fb      	strb	r3, [r7, #27]
 8004d34:	e0af      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d36:	2302      	movs	r3, #2
 8004d38:	76fb      	strb	r3, [r7, #27]
 8004d3a:	e0ac      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	76fb      	strb	r3, [r7, #27]
 8004d40:	e0a9      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d42:	2308      	movs	r3, #8
 8004d44:	76fb      	strb	r3, [r7, #27]
 8004d46:	e0a6      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	76fb      	strb	r3, [r7, #27]
 8004d4c:	e0a3      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6d      	ldr	r2, [pc, #436]	; (8004f08 <UART_SetConfig+0x2f4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d120      	bne.n	8004d9a <UART_SetConfig+0x186>
 8004d58:	4b69      	ldr	r3, [pc, #420]	; (8004f00 <UART_SetConfig+0x2ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d62:	2b30      	cmp	r3, #48	; 0x30
 8004d64:	d013      	beq.n	8004d8e <UART_SetConfig+0x17a>
 8004d66:	2b30      	cmp	r3, #48	; 0x30
 8004d68:	d814      	bhi.n	8004d94 <UART_SetConfig+0x180>
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d009      	beq.n	8004d82 <UART_SetConfig+0x16e>
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d810      	bhi.n	8004d94 <UART_SetConfig+0x180>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <UART_SetConfig+0x168>
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d006      	beq.n	8004d88 <UART_SetConfig+0x174>
 8004d7a:	e00b      	b.n	8004d94 <UART_SetConfig+0x180>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	76fb      	strb	r3, [r7, #27]
 8004d80:	e089      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d82:	2302      	movs	r3, #2
 8004d84:	76fb      	strb	r3, [r7, #27]
 8004d86:	e086      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	76fb      	strb	r3, [r7, #27]
 8004d8c:	e083      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d8e:	2308      	movs	r3, #8
 8004d90:	76fb      	strb	r3, [r7, #27]
 8004d92:	e080      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d94:	2310      	movs	r3, #16
 8004d96:	76fb      	strb	r3, [r7, #27]
 8004d98:	e07d      	b.n	8004e96 <UART_SetConfig+0x282>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5b      	ldr	r2, [pc, #364]	; (8004f0c <UART_SetConfig+0x2f8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d120      	bne.n	8004de6 <UART_SetConfig+0x1d2>
 8004da4:	4b56      	ldr	r3, [pc, #344]	; (8004f00 <UART_SetConfig+0x2ec>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dae:	2bc0      	cmp	r3, #192	; 0xc0
 8004db0:	d013      	beq.n	8004dda <UART_SetConfig+0x1c6>
 8004db2:	2bc0      	cmp	r3, #192	; 0xc0
 8004db4:	d814      	bhi.n	8004de0 <UART_SetConfig+0x1cc>
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d009      	beq.n	8004dce <UART_SetConfig+0x1ba>
 8004dba:	2b80      	cmp	r3, #128	; 0x80
 8004dbc:	d810      	bhi.n	8004de0 <UART_SetConfig+0x1cc>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <UART_SetConfig+0x1b4>
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d006      	beq.n	8004dd4 <UART_SetConfig+0x1c0>
 8004dc6:	e00b      	b.n	8004de0 <UART_SetConfig+0x1cc>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	76fb      	strb	r3, [r7, #27]
 8004dcc:	e063      	b.n	8004e96 <UART_SetConfig+0x282>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	76fb      	strb	r3, [r7, #27]
 8004dd2:	e060      	b.n	8004e96 <UART_SetConfig+0x282>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	76fb      	strb	r3, [r7, #27]
 8004dd8:	e05d      	b.n	8004e96 <UART_SetConfig+0x282>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	76fb      	strb	r3, [r7, #27]
 8004dde:	e05a      	b.n	8004e96 <UART_SetConfig+0x282>
 8004de0:	2310      	movs	r3, #16
 8004de2:	76fb      	strb	r3, [r7, #27]
 8004de4:	e057      	b.n	8004e96 <UART_SetConfig+0x282>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a49      	ldr	r2, [pc, #292]	; (8004f10 <UART_SetConfig+0x2fc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d125      	bne.n	8004e3c <UART_SetConfig+0x228>
 8004df0:	4b43      	ldr	r3, [pc, #268]	; (8004f00 <UART_SetConfig+0x2ec>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfe:	d017      	beq.n	8004e30 <UART_SetConfig+0x21c>
 8004e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e04:	d817      	bhi.n	8004e36 <UART_SetConfig+0x222>
 8004e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0a:	d00b      	beq.n	8004e24 <UART_SetConfig+0x210>
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d811      	bhi.n	8004e36 <UART_SetConfig+0x222>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <UART_SetConfig+0x20a>
 8004e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1a:	d006      	beq.n	8004e2a <UART_SetConfig+0x216>
 8004e1c:	e00b      	b.n	8004e36 <UART_SetConfig+0x222>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	76fb      	strb	r3, [r7, #27]
 8004e22:	e038      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e24:	2302      	movs	r3, #2
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e035      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	76fb      	strb	r3, [r7, #27]
 8004e2e:	e032      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e30:	2308      	movs	r3, #8
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	e02f      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e36:	2310      	movs	r3, #16
 8004e38:	76fb      	strb	r3, [r7, #27]
 8004e3a:	e02c      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2d      	ldr	r2, [pc, #180]	; (8004ef8 <UART_SetConfig+0x2e4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d125      	bne.n	8004e92 <UART_SetConfig+0x27e>
 8004e46:	4b2e      	ldr	r3, [pc, #184]	; (8004f00 <UART_SetConfig+0x2ec>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e54:	d017      	beq.n	8004e86 <UART_SetConfig+0x272>
 8004e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e5a:	d817      	bhi.n	8004e8c <UART_SetConfig+0x278>
 8004e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e60:	d00b      	beq.n	8004e7a <UART_SetConfig+0x266>
 8004e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e66:	d811      	bhi.n	8004e8c <UART_SetConfig+0x278>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <UART_SetConfig+0x260>
 8004e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e70:	d006      	beq.n	8004e80 <UART_SetConfig+0x26c>
 8004e72:	e00b      	b.n	8004e8c <UART_SetConfig+0x278>
 8004e74:	2300      	movs	r3, #0
 8004e76:	76fb      	strb	r3, [r7, #27]
 8004e78:	e00d      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	76fb      	strb	r3, [r7, #27]
 8004e7e:	e00a      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e80:	2304      	movs	r3, #4
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e007      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e86:	2308      	movs	r3, #8
 8004e88:	76fb      	strb	r3, [r7, #27]
 8004e8a:	e004      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e001      	b.n	8004e96 <UART_SetConfig+0x282>
 8004e92:	2310      	movs	r3, #16
 8004e94:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <UART_SetConfig+0x2e4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	f040 8087 	bne.w	8004fb0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea2:	7efb      	ldrb	r3, [r7, #27]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d837      	bhi.n	8004f18 <UART_SetConfig+0x304>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0x29c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004f19 	.word	0x08004f19
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004f19 	.word	0x08004f19
 8004ec0:	08004ee3 	.word	0x08004ee3
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	08004f19 	.word	0x08004f19
 8004ecc:	08004f19 	.word	0x08004f19
 8004ed0:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fd fbb8 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	6178      	str	r0, [r7, #20]
        break;
 8004eda:	e022      	b.n	8004f22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <UART_SetConfig+0x300>)
 8004ede:	617b      	str	r3, [r7, #20]
        break;
 8004ee0:	e01f      	b.n	8004f22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fd fb19 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 8004ee6:	6178      	str	r0, [r7, #20]
        break;
 8004ee8:	e01b      	b.n	8004f22 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eee:	617b      	str	r3, [r7, #20]
        break;
 8004ef0:	e017      	b.n	8004f22 <UART_SetConfig+0x30e>
 8004ef2:	bf00      	nop
 8004ef4:	efff69f3 	.word	0xefff69f3
 8004ef8:	40008000 	.word	0x40008000
 8004efc:	40013800 	.word	0x40013800
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40004400 	.word	0x40004400
 8004f08:	40004800 	.word	0x40004800
 8004f0c:	40004c00 	.word	0x40004c00
 8004f10:	40005000 	.word	0x40005000
 8004f14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	76bb      	strb	r3, [r7, #26]
        break;
 8004f20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80f1 	beq.w	800510c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d305      	bcc.n	8004f46 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d902      	bls.n	8004f4c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	76bb      	strb	r3, [r7, #26]
 8004f4a:	e0df      	b.n	800510c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	020b      	lsls	r3, r1, #8
 8004f5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f62:	0202      	lsls	r2, r0, #8
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	6849      	ldr	r1, [r1, #4]
 8004f68:	0849      	lsrs	r1, r1, #1
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	1814      	adds	r4, r2, r0
 8004f72:	eb43 0501 	adc.w	r5, r3, r1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	4620      	mov	r0, r4
 8004f82:	4629      	mov	r1, r5
 8004f84:	f7fb f974 	bl	8000270 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f96:	d308      	bcc.n	8004faa <UART_SetConfig+0x396>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9e:	d204      	bcs.n	8004faa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e0b0      	b.n	800510c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	76bb      	strb	r3, [r7, #26]
 8004fae:	e0ad      	b.n	800510c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d15b      	bne.n	8005072 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004fba:	7efb      	ldrb	r3, [r7, #27]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d828      	bhi.n	8005012 <UART_SetConfig+0x3fe>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x3b4>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005013 	.word	0x08005013
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7fd fb2c 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8004ff0:	6178      	str	r0, [r7, #20]
        break;
 8004ff2:	e013      	b.n	800501c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fd fb3e 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	6178      	str	r0, [r7, #20]
        break;
 8004ffa:	e00f      	b.n	800501c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b49      	ldr	r3, [pc, #292]	; (8005124 <UART_SetConfig+0x510>)
 8004ffe:	617b      	str	r3, [r7, #20]
        break;
 8005000:	e00c      	b.n	800501c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fd fa89 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 8005006:	6178      	str	r0, [r7, #20]
        break;
 8005008:	e008      	b.n	800501c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	617b      	str	r3, [r7, #20]
        break;
 8005010:	e004      	b.n	800501c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	76bb      	strb	r3, [r7, #26]
        break;
 800501a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d074      	beq.n	800510c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	005a      	lsls	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b0f      	cmp	r3, #15
 800503c:	d916      	bls.n	800506c <UART_SetConfig+0x458>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d212      	bcs.n	800506c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f023 030f 	bic.w	r3, r3, #15
 800504e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	b29b      	uxth	r3, r3
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	b29a      	uxth	r2, r3
 800505c:	89fb      	ldrh	r3, [r7, #14]
 800505e:	4313      	orrs	r3, r2
 8005060:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	89fa      	ldrh	r2, [r7, #14]
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	e04f      	b.n	800510c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	76bb      	strb	r3, [r7, #26]
 8005070:	e04c      	b.n	800510c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005072:	7efb      	ldrb	r3, [r7, #27]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d828      	bhi.n	80050ca <UART_SetConfig+0x4b6>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <UART_SetConfig+0x46c>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	080050cb 	.word	0x080050cb
 8005090:	080050bb 	.word	0x080050bb
 8005094:	080050cb 	.word	0x080050cb
 8005098:	080050cb 	.word	0x080050cb
 800509c:	080050cb 	.word	0x080050cb
 80050a0:	080050c3 	.word	0x080050c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a4:	f7fd fad0 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 80050a8:	6178      	str	r0, [r7, #20]
        break;
 80050aa:	e013      	b.n	80050d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ac:	f7fd fae2 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 80050b0:	6178      	str	r0, [r7, #20]
        break;
 80050b2:	e00f      	b.n	80050d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b4:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <UART_SetConfig+0x510>)
 80050b6:	617b      	str	r3, [r7, #20]
        break;
 80050b8:	e00c      	b.n	80050d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ba:	f7fd fa2d 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80050be:	6178      	str	r0, [r7, #20]
        break;
 80050c0:	e008      	b.n	80050d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c6:	617b      	str	r3, [r7, #20]
        break;
 80050c8:	e004      	b.n	80050d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	76bb      	strb	r3, [r7, #26]
        break;
 80050d2:	bf00      	nop
    }

    if (pclk != 0U)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	085a      	lsrs	r2, r3, #1
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	441a      	add	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b0f      	cmp	r3, #15
 80050f2:	d909      	bls.n	8005108 <UART_SetConfig+0x4f4>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fa:	d205      	bcs.n	8005108 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	e001      	b.n	800510c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005118:	7ebb      	ldrb	r3, [r7, #26]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bdb0      	pop	{r4, r5, r7, pc}
 8005122:	bf00      	nop
 8005124:	00f42400 	.word	0x00f42400

08005128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01a      	beq.n	800523e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005226:	d10a      	bne.n	800523e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800527c:	f7fc f8cc 	bl	8001418 <HAL_GetTick>
 8005280:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b08      	cmp	r3, #8
 800528e:	d10e      	bne.n	80052ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f82d 	bl	80052fe <UART_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e023      	b.n	80052f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d10e      	bne.n	80052da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f817 	bl	80052fe <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e00d      	b.n	80052f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b09c      	sub	sp, #112	; 0x70
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	603b      	str	r3, [r7, #0]
 800530a:	4613      	mov	r3, r2
 800530c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	e0a5      	b.n	800545c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005316:	f000 80a1 	beq.w	800545c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fc f87d 	bl	8001418 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <UART_WaitOnFlagUntilTimeout+0x32>
 800532a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532c:	2b00      	cmp	r3, #0
 800532e:	d13e      	bne.n	80053ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800533e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005344:	667b      	str	r3, [r7, #100]	; 0x64
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005350:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800535c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e6      	bne.n	8005330 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	663b      	str	r3, [r7, #96]	; 0x60
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005382:	64ba      	str	r2, [r7, #72]	; 0x48
 8005384:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e067      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d04f      	beq.n	800545c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ca:	d147      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
 80053f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e6      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	613b      	str	r3, [r7, #16]
   return(result);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005428:	623a      	str	r2, [r7, #32]
 800542a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	6a3a      	ldr	r2, [r7, #32]
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	61bb      	str	r3, [r7, #24]
   return(result);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e5      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e010      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	429a      	cmp	r2, r3
 8005478:	f43f af4a 	beq.w	8005310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3770      	adds	r7, #112	; 0x70
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005488:	b480      	push	{r7}
 800548a:	b097      	sub	sp, #92	; 0x5c
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	88fa      	ldrh	r2, [r7, #6]
 80054a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ba:	d10e      	bne.n	80054da <UART_Start_Receive_IT+0x52>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <UART_Start_Receive_IT+0x48>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ce:	e02d      	b.n	800552c <UART_Start_Receive_IT+0xa4>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	22ff      	movs	r2, #255	; 0xff
 80054d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054d8:	e028      	b.n	800552c <UART_Start_Receive_IT+0xa4>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <UART_Start_Receive_IT+0x76>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <UART_Start_Receive_IT+0x6c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	22ff      	movs	r2, #255	; 0xff
 80054ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054f2:	e01b      	b.n	800552c <UART_Start_Receive_IT+0xa4>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	227f      	movs	r2, #127	; 0x7f
 80054f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054fc:	e016      	b.n	800552c <UART_Start_Receive_IT+0xa4>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005506:	d10d      	bne.n	8005524 <UART_Start_Receive_IT+0x9c>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <UART_Start_Receive_IT+0x92>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	227f      	movs	r2, #127	; 0x7f
 8005514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005518:	e008      	b.n	800552c <UART_Start_Receive_IT+0xa4>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	223f      	movs	r2, #63	; 0x3f
 800551e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005522:	e003      	b.n	800552c <UART_Start_Receive_IT+0xa4>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2222      	movs	r2, #34	; 0x22
 8005538:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3308      	adds	r3, #8
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	657b      	str	r3, [r7, #84]	; 0x54
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800555a:	64ba      	str	r2, [r7, #72]	; 0x48
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e5      	bne.n	800553a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d107      	bne.n	8005588 <UART_Start_Receive_IT+0x100>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a24      	ldr	r2, [pc, #144]	; (8005614 <UART_Start_Receive_IT+0x18c>)
 8005584:	665a      	str	r2, [r3, #100]	; 0x64
 8005586:	e002      	b.n	800558e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a23      	ldr	r2, [pc, #140]	; (8005618 <UART_Start_Receive_IT+0x190>)
 800558c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d019      	beq.n	80055d2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
 80055be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e6      	bne.n	800559e <UART_Start_Receive_IT+0x116>
 80055d0:	e018      	b.n	8005604 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	613b      	str	r3, [r7, #16]
   return(result);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f043 0320 	orr.w	r3, r3, #32
 80055e6:	653b      	str	r3, [r7, #80]	; 0x50
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	69f9      	ldr	r1, [r7, #28]
 80055f6:	6a3a      	ldr	r2, [r7, #32]
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	375c      	adds	r7, #92	; 0x5c
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	08005a3b 	.word	0x08005a3b
 8005618:	080058db 	.word	0x080058db

0800561c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b095      	sub	sp, #84	; 0x54
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005642:	643b      	str	r3, [r7, #64]	; 0x40
 8005644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	61fb      	str	r3, [r7, #28]
   return(result);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	64bb      	str	r3, [r7, #72]	; 0x48
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800567c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568e:	2b01      	cmp	r3, #1
 8005690:	d118      	bne.n	80056c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 0310 	bic.w	r3, r3, #16
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6979      	ldr	r1, [r7, #20]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	613b      	str	r3, [r7, #16]
   return(result);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056d6:	bf00      	nop
 80056d8:	3754      	adds	r7, #84	; 0x54
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fa71 	bl	8004be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800570e:	b480      	push	{r7}
 8005710:	b08f      	sub	sp, #60	; 0x3c
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571a:	2b21      	cmp	r3, #33	; 0x21
 800571c:	d14d      	bne.n	80057ba <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d132      	bne.n	8005790 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	61fb      	str	r3, [r7, #28]
   return(result);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800574e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e6      	bne.n	800572a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	60bb      	str	r3, [r7, #8]
   return(result);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	613b      	str	r3, [r7, #16]
   return(result);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800578e:	e014      	b.n	80057ba <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	b292      	uxth	r2, r2
 800579c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80057ba:	bf00      	nop
 80057bc:	373c      	adds	r7, #60	; 0x3c
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b091      	sub	sp, #68	; 0x44
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057d2:	2b21      	cmp	r3, #33	; 0x21
 80057d4:	d151      	bne.n	800587a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d132      	bne.n	8005848 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	623b      	str	r3, [r7, #32]
   return(result);
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	633b      	str	r3, [r7, #48]	; 0x30
 8005802:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e6      	bne.n	80057e2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	60fb      	str	r3, [r7, #12]
   return(result);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	69b9      	ldr	r1, [r7, #24]
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	617b      	str	r3, [r7, #20]
   return(result);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005846:	e018      	b.n	800587a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800585a:	b292      	uxth	r2, r2
 800585c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800587a:	bf00      	nop
 800587c:	3744      	adds	r7, #68	; 0x44
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b088      	sub	sp, #32
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	60bb      	str	r3, [r7, #8]
   return(result);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6979      	ldr	r1, [r7, #20]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e6      	bne.n	800588e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fb fd1d 	bl	800130c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d2:	bf00      	nop
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b096      	sub	sp, #88	; 0x58
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f0:	2b22      	cmp	r3, #34	; 0x22
 80058f2:	f040 8094 	bne.w	8005a1e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005900:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005904:	b2d9      	uxtb	r1, r3
 8005906:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800590a:	b2da      	uxtb	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	400a      	ands	r2, r1
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d179      	bne.n	8005a32 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800594c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005952:	653b      	str	r3, [r7, #80]	; 0x50
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595c:	647b      	str	r3, [r7, #68]	; 0x44
 800595e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800596a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e6      	bne.n	800593e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3308      	adds	r3, #8
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	623b      	str	r3, [r7, #32]
   return(result);
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3308      	adds	r3, #8
 800598e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005990:	633a      	str	r2, [r7, #48]	; 0x30
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e5      	bne.n	8005970 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d12e      	bne.n	8005a16 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0310 	bic.w	r3, r3, #16
 80059d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059dc:	61fb      	str	r3, [r7, #28]
 80059de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e6      	bne.n	80059be <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d103      	bne.n	8005a06 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2210      	movs	r2, #16
 8005a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff f8f4 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a14:	e00d      	b.n	8005a32 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fb fc8c 	bl	8001334 <HAL_UART_RxCpltCallback>
}
 8005a1c:	e009      	b.n	8005a32 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	8b1b      	ldrh	r3, [r3, #24]
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0208 	orr.w	r2, r2, #8
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	831a      	strh	r2, [r3, #24]
}
 8005a32:	bf00      	nop
 8005a34:	3758      	adds	r7, #88	; 0x58
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b096      	sub	sp, #88	; 0x58
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a50:	2b22      	cmp	r3, #34	; 0x22
 8005a52:	f040 8094 	bne.w	8005b7e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a66:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005a6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a6e:	4013      	ands	r3, r2
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d179      	bne.n	8005b92 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	643b      	str	r3, [r7, #64]	; 0x40
 8005abe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3308      	adds	r3, #8
 8005aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d12e      	bne.n	8005b76 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d103      	bne.n	8005b66 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff f844 	bl	8004bfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b74:	e00d      	b.n	8005b92 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fbdc 	bl	8001334 <HAL_UART_RxCpltCallback>
}
 8005b7c:	e009      	b.n	8005b92 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	8b1b      	ldrh	r3, [r3, #24]
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0208 	orr.w	r2, r2, #8
 8005b8e:	b292      	uxth	r2, r2
 8005b90:	831a      	strh	r2, [r3, #24]
}
 8005b92:	bf00      	nop
 8005b94:	3758      	adds	r7, #88	; 0x58
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <SysTick_Handler+0x1c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005bb8:	f000 f990 	bl	8005edc <xTaskGetSchedulerState>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d001      	beq.n	8005bc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005bc2:	f000 f9f9 	bl	8005fb8 <xPortSysTickHandler>
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	e000e010 	.word	0xe000e010

08005bd0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	601a      	str	r2, [r3, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6852      	ldr	r2, [r2, #4]
 8005c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d103      	bne.n	8005c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1e5a      	subs	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c76:	4b4f      	ldr	r3, [pc, #316]	; (8005db4 <xTaskIncrementTick+0x148>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f040 808f 	bne.w	8005d9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c80:	4b4d      	ldr	r3, [pc, #308]	; (8005db8 <xTaskIncrementTick+0x14c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c88:	4a4b      	ldr	r2, [pc, #300]	; (8005db8 <xTaskIncrementTick+0x14c>)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d120      	bne.n	8005cd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c94:	4b49      	ldr	r3, [pc, #292]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <xTaskIncrementTick+0x46>
 8005cb4:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	4b41      	ldr	r3, [pc, #260]	; (8005dc0 <xTaskIncrementTick+0x154>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a3f      	ldr	r2, [pc, #252]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4a3f      	ldr	r2, [pc, #252]	; (8005dc0 <xTaskIncrementTick+0x154>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <xTaskIncrementTick+0x158>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a3d      	ldr	r2, [pc, #244]	; (8005dc4 <xTaskIncrementTick+0x158>)
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	f000 f8e3 	bl	8005e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cd6:	4b3c      	ldr	r3, [pc, #240]	; (8005dc8 <xTaskIncrementTick+0x15c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d349      	bcc.n	8005d74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce0:	4b36      	ldr	r3, [pc, #216]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cea:	4b37      	ldr	r3, [pc, #220]	; (8005dc8 <xTaskIncrementTick+0x15c>)
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cf0:	601a      	str	r2, [r3, #0]
					break;
 8005cf2:	e03f      	b.n	8005d74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf4:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <xTaskIncrementTick+0x150>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d203      	bcs.n	8005d14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <xTaskIncrementTick+0x15c>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d12:	e02f      	b.n	8005d74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ff7d 	bl	8005c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	3318      	adds	r3, #24
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff ff74 	bl	8005c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <xTaskIncrementTick+0x160>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d903      	bls.n	8005d44 <xTaskIncrementTick+0xd8>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a22      	ldr	r2, [pc, #136]	; (8005dcc <xTaskIncrementTick+0x160>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <xTaskIncrementTick+0x164>)
 8005d52:	441a      	add	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7ff ff38 	bl	8005bd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <xTaskIncrementTick+0x168>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d3b8      	bcc.n	8005ce0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d72:	e7b5      	b.n	8005ce0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d74:	4b17      	ldr	r3, [pc, #92]	; (8005dd4 <xTaskIncrementTick+0x168>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4915      	ldr	r1, [pc, #84]	; (8005dd0 <xTaskIncrementTick+0x164>)
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d901      	bls.n	8005d90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <xTaskIncrementTick+0x16c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e004      	b.n	8005da8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <xTaskIncrementTick+0x170>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <xTaskIncrementTick+0x170>)
 8005da6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005da8:	697b      	ldr	r3, [r7, #20]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	2000052c 	.word	0x2000052c
 8005db8:	20000510 	.word	0x20000510
 8005dbc:	20000508 	.word	0x20000508
 8005dc0:	2000050c 	.word	0x2000050c
 8005dc4:	20000524 	.word	0x20000524
 8005dc8:	20000528 	.word	0x20000528
 8005dcc:	20000514 	.word	0x20000514
 8005dd0:	200000a8 	.word	0x200000a8
 8005dd4:	200000a4 	.word	0x200000a4
 8005dd8:	20000520 	.word	0x20000520
 8005ddc:	2000051c 	.word	0x2000051c

08005de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005de6:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <vTaskSwitchContext+0xa8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dee:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <vTaskSwitchContext+0xac>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005df4:	e041      	b.n	8005e7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005df6:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <vTaskSwitchContext+0xac>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfc:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <vTaskSwitchContext+0xb0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e010      	b.n	8005e26 <vTaskSwitchContext+0x46>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	607b      	str	r3, [r7, #4]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <vTaskSwitchContext+0x3e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	491b      	ldr	r1, [pc, #108]	; (8005e94 <vTaskSwitchContext+0xb4>)
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0e4      	beq.n	8005e04 <vTaskSwitchContext+0x24>
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <vTaskSwitchContext+0xb4>)
 8005e46:	4413      	add	r3, r2
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	605a      	str	r2, [r3, #4]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d104      	bne.n	8005e6a <vTaskSwitchContext+0x8a>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <vTaskSwitchContext+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <vTaskSwitchContext+0xb0>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6013      	str	r3, [r2, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	2000052c 	.word	0x2000052c
 8005e8c:	20000520 	.word	0x20000520
 8005e90:	20000514 	.word	0x20000514
 8005e94:	200000a8 	.word	0x200000a8
 8005e98:	200000a4 	.word	0x200000a4

08005e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <prvResetNextTaskUnblockTime+0x38>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eb4:	e008      	b.n	8005ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <prvResetNextTaskUnblockTime+0x38>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ec6:	6013      	str	r3, [r2, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000508 	.word	0x20000508
 8005ed8:	20000528 	.word	0x20000528

08005edc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <xTaskGetSchedulerState+0x34>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eea:	2301      	movs	r3, #1
 8005eec:	607b      	str	r3, [r7, #4]
 8005eee:	e008      	b.n	8005f02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef0:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <xTaskGetSchedulerState+0x38>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	e001      	b.n	8005f02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f02:	687b      	ldr	r3, [r7, #4]
	}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	20000518 	.word	0x20000518
 8005f14:	2000052c 	.word	0x2000052c
	...

08005f20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <pxCurrentTCBConst2>)
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	6808      	ldr	r0, [r1, #0]
 8005f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2a:	f380 8809 	msr	PSP, r0
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8811 	msr	BASEPRI, r0
 8005f3a:	4770      	bx	lr
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst2>:
 8005f40:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
	...

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <pxCurrentTCBConst>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f01e 0f10 	tst.w	lr, #16
 8005f60:	bf08      	it	eq
 8005f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f74:	f380 8811 	msr	BASEPRI, r0
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f7ff ff2e 	bl	8005de0 <vTaskSwitchContext>
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f380 8811 	msr	BASEPRI, r0
 8005f8c:	bc09      	pop	{r0, r3}
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	6808      	ldr	r0, [r1, #0]
 8005f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f96:	f01e 0f10 	tst.w	lr, #16
 8005f9a:	bf08      	it	eq
 8005f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fa0:	f380 8809 	msr	PSP, r0
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst>:
 8005fb0:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fd2:	f7ff fe4b 	bl	8005c6c <xTaskIncrementTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <xPortSysTickHandler+0x40>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <atoi>:
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	2100      	movs	r1, #0
 8006000:	f000 b940 	b.w	8006284 <strtol>

08006004 <__errno>:
 8006004:	4b01      	ldr	r3, [pc, #4]	; (800600c <__errno+0x8>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	20000020 	.word	0x20000020

08006010 <__libc_init_array>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4d0d      	ldr	r5, [pc, #52]	; (8006048 <__libc_init_array+0x38>)
 8006014:	4c0d      	ldr	r4, [pc, #52]	; (800604c <__libc_init_array+0x3c>)
 8006016:	1b64      	subs	r4, r4, r5
 8006018:	10a4      	asrs	r4, r4, #2
 800601a:	2600      	movs	r6, #0
 800601c:	42a6      	cmp	r6, r4
 800601e:	d109      	bne.n	8006034 <__libc_init_array+0x24>
 8006020:	4d0b      	ldr	r5, [pc, #44]	; (8006050 <__libc_init_array+0x40>)
 8006022:	4c0c      	ldr	r4, [pc, #48]	; (8006054 <__libc_init_array+0x44>)
 8006024:	f001 fa9e 	bl	8007564 <_init>
 8006028:	1b64      	subs	r4, r4, r5
 800602a:	10a4      	asrs	r4, r4, #2
 800602c:	2600      	movs	r6, #0
 800602e:	42a6      	cmp	r6, r4
 8006030:	d105      	bne.n	800603e <__libc_init_array+0x2e>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	f855 3b04 	ldr.w	r3, [r5], #4
 8006038:	4798      	blx	r3
 800603a:	3601      	adds	r6, #1
 800603c:	e7ee      	b.n	800601c <__libc_init_array+0xc>
 800603e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006042:	4798      	blx	r3
 8006044:	3601      	adds	r6, #1
 8006046:	e7f2      	b.n	800602e <__libc_init_array+0x1e>
 8006048:	08007850 	.word	0x08007850
 800604c:	08007850 	.word	0x08007850
 8006050:	08007850 	.word	0x08007850
 8006054:	08007854 	.word	0x08007854

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800606e:	4291      	cmp	r1, r2
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <memset>:
 8006074:	4402      	add	r2, r0
 8006076:	4603      	mov	r3, r0
 8006078:	4293      	cmp	r3, r2
 800607a:	d100      	bne.n	800607e <memset+0xa>
 800607c:	4770      	bx	lr
 800607e:	f803 1b01 	strb.w	r1, [r3], #1
 8006082:	e7f9      	b.n	8006078 <memset+0x4>

08006084 <siprintf>:
 8006084:	b40e      	push	{r1, r2, r3}
 8006086:	b500      	push	{lr}
 8006088:	b09c      	sub	sp, #112	; 0x70
 800608a:	ab1d      	add	r3, sp, #116	; 0x74
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	9006      	str	r0, [sp, #24]
 8006090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <siprintf+0x38>)
 8006096:	9107      	str	r1, [sp, #28]
 8006098:	9104      	str	r1, [sp, #16]
 800609a:	4909      	ldr	r1, [pc, #36]	; (80060c0 <siprintf+0x3c>)
 800609c:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a0:	9105      	str	r1, [sp, #20]
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	a902      	add	r1, sp, #8
 80060a8:	f000 fa34 	bl	8006514 <_svfiprintf_r>
 80060ac:	9b02      	ldr	r3, [sp, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	b01c      	add	sp, #112	; 0x70
 80060b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b8:	b003      	add	sp, #12
 80060ba:	4770      	bx	lr
 80060bc:	20000020 	.word	0x20000020
 80060c0:	ffff0208 	.word	0xffff0208

080060c4 <strtok>:
 80060c4:	4b16      	ldr	r3, [pc, #88]	; (8006120 <strtok+0x5c>)
 80060c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060c8:	681e      	ldr	r6, [r3, #0]
 80060ca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80060cc:	4605      	mov	r5, r0
 80060ce:	b9fc      	cbnz	r4, 8006110 <strtok+0x4c>
 80060d0:	2050      	movs	r0, #80	; 0x50
 80060d2:	9101      	str	r1, [sp, #4]
 80060d4:	f000 f910 	bl	80062f8 <malloc>
 80060d8:	9901      	ldr	r1, [sp, #4]
 80060da:	65b0      	str	r0, [r6, #88]	; 0x58
 80060dc:	4602      	mov	r2, r0
 80060de:	b920      	cbnz	r0, 80060ea <strtok+0x26>
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <strtok+0x60>)
 80060e2:	4811      	ldr	r0, [pc, #68]	; (8006128 <strtok+0x64>)
 80060e4:	2157      	movs	r1, #87	; 0x57
 80060e6:	f000 f8d7 	bl	8006298 <__assert_func>
 80060ea:	e9c0 4400 	strd	r4, r4, [r0]
 80060ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80060f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80060f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80060fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80060fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006102:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006106:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800610a:	6184      	str	r4, [r0, #24]
 800610c:	7704      	strb	r4, [r0, #28]
 800610e:	6244      	str	r4, [r0, #36]	; 0x24
 8006110:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006112:	2301      	movs	r3, #1
 8006114:	4628      	mov	r0, r5
 8006116:	b002      	add	sp, #8
 8006118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800611c:	f000 b806 	b.w	800612c <__strtok_r>
 8006120:	20000020 	.word	0x20000020
 8006124:	08007600 	.word	0x08007600
 8006128:	08007617 	.word	0x08007617

0800612c <__strtok_r>:
 800612c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612e:	b908      	cbnz	r0, 8006134 <__strtok_r+0x8>
 8006130:	6810      	ldr	r0, [r2, #0]
 8006132:	b188      	cbz	r0, 8006158 <__strtok_r+0x2c>
 8006134:	4604      	mov	r4, r0
 8006136:	4620      	mov	r0, r4
 8006138:	f814 5b01 	ldrb.w	r5, [r4], #1
 800613c:	460f      	mov	r7, r1
 800613e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006142:	b91e      	cbnz	r6, 800614c <__strtok_r+0x20>
 8006144:	b965      	cbnz	r5, 8006160 <__strtok_r+0x34>
 8006146:	6015      	str	r5, [r2, #0]
 8006148:	4628      	mov	r0, r5
 800614a:	e005      	b.n	8006158 <__strtok_r+0x2c>
 800614c:	42b5      	cmp	r5, r6
 800614e:	d1f6      	bne.n	800613e <__strtok_r+0x12>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f0      	bne.n	8006136 <__strtok_r+0xa>
 8006154:	6014      	str	r4, [r2, #0]
 8006156:	7003      	strb	r3, [r0, #0]
 8006158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800615a:	461c      	mov	r4, r3
 800615c:	e00c      	b.n	8006178 <__strtok_r+0x4c>
 800615e:	b915      	cbnz	r5, 8006166 <__strtok_r+0x3a>
 8006160:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006164:	460e      	mov	r6, r1
 8006166:	f816 5b01 	ldrb.w	r5, [r6], #1
 800616a:	42ab      	cmp	r3, r5
 800616c:	d1f7      	bne.n	800615e <__strtok_r+0x32>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f3      	beq.n	800615a <__strtok_r+0x2e>
 8006172:	2300      	movs	r3, #0
 8006174:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006178:	6014      	str	r4, [r2, #0]
 800617a:	e7ed      	b.n	8006158 <__strtok_r+0x2c>

0800617c <_strtol_l.isra.0>:
 800617c:	2b01      	cmp	r3, #1
 800617e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006182:	d001      	beq.n	8006188 <_strtol_l.isra.0+0xc>
 8006184:	2b24      	cmp	r3, #36	; 0x24
 8006186:	d906      	bls.n	8006196 <_strtol_l.isra.0+0x1a>
 8006188:	f7ff ff3c 	bl	8006004 <__errno>
 800618c:	2316      	movs	r3, #22
 800618e:	6003      	str	r3, [r0, #0]
 8006190:	2000      	movs	r0, #0
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	4f3a      	ldr	r7, [pc, #232]	; (8006280 <_strtol_l.isra.0+0x104>)
 8006198:	468e      	mov	lr, r1
 800619a:	4676      	mov	r6, lr
 800619c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80061a0:	5de5      	ldrb	r5, [r4, r7]
 80061a2:	f015 0508 	ands.w	r5, r5, #8
 80061a6:	d1f8      	bne.n	800619a <_strtol_l.isra.0+0x1e>
 80061a8:	2c2d      	cmp	r4, #45	; 0x2d
 80061aa:	d134      	bne.n	8006216 <_strtol_l.isra.0+0x9a>
 80061ac:	f89e 4000 	ldrb.w	r4, [lr]
 80061b0:	f04f 0801 	mov.w	r8, #1
 80061b4:	f106 0e02 	add.w	lr, r6, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d05c      	beq.n	8006276 <_strtol_l.isra.0+0xfa>
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d10c      	bne.n	80061da <_strtol_l.isra.0+0x5e>
 80061c0:	2c30      	cmp	r4, #48	; 0x30
 80061c2:	d10a      	bne.n	80061da <_strtol_l.isra.0+0x5e>
 80061c4:	f89e 4000 	ldrb.w	r4, [lr]
 80061c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061cc:	2c58      	cmp	r4, #88	; 0x58
 80061ce:	d14d      	bne.n	800626c <_strtol_l.isra.0+0xf0>
 80061d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80061d4:	2310      	movs	r3, #16
 80061d6:	f10e 0e02 	add.w	lr, lr, #2
 80061da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80061de:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80061e2:	2600      	movs	r6, #0
 80061e4:	fbbc f9f3 	udiv	r9, ip, r3
 80061e8:	4635      	mov	r5, r6
 80061ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80061ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80061f2:	2f09      	cmp	r7, #9
 80061f4:	d818      	bhi.n	8006228 <_strtol_l.isra.0+0xac>
 80061f6:	463c      	mov	r4, r7
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	dd24      	ble.n	8006246 <_strtol_l.isra.0+0xca>
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	db1f      	blt.n	8006240 <_strtol_l.isra.0+0xc4>
 8006200:	45a9      	cmp	r9, r5
 8006202:	d31d      	bcc.n	8006240 <_strtol_l.isra.0+0xc4>
 8006204:	d101      	bne.n	800620a <_strtol_l.isra.0+0x8e>
 8006206:	45a2      	cmp	sl, r4
 8006208:	db1a      	blt.n	8006240 <_strtol_l.isra.0+0xc4>
 800620a:	fb05 4503 	mla	r5, r5, r3, r4
 800620e:	2601      	movs	r6, #1
 8006210:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006214:	e7eb      	b.n	80061ee <_strtol_l.isra.0+0x72>
 8006216:	2c2b      	cmp	r4, #43	; 0x2b
 8006218:	bf08      	it	eq
 800621a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800621e:	46a8      	mov	r8, r5
 8006220:	bf08      	it	eq
 8006222:	f106 0e02 	addeq.w	lr, r6, #2
 8006226:	e7c7      	b.n	80061b8 <_strtol_l.isra.0+0x3c>
 8006228:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800622c:	2f19      	cmp	r7, #25
 800622e:	d801      	bhi.n	8006234 <_strtol_l.isra.0+0xb8>
 8006230:	3c37      	subs	r4, #55	; 0x37
 8006232:	e7e1      	b.n	80061f8 <_strtol_l.isra.0+0x7c>
 8006234:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006238:	2f19      	cmp	r7, #25
 800623a:	d804      	bhi.n	8006246 <_strtol_l.isra.0+0xca>
 800623c:	3c57      	subs	r4, #87	; 0x57
 800623e:	e7db      	b.n	80061f8 <_strtol_l.isra.0+0x7c>
 8006240:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006244:	e7e4      	b.n	8006210 <_strtol_l.isra.0+0x94>
 8006246:	2e00      	cmp	r6, #0
 8006248:	da05      	bge.n	8006256 <_strtol_l.isra.0+0xda>
 800624a:	2322      	movs	r3, #34	; 0x22
 800624c:	6003      	str	r3, [r0, #0]
 800624e:	4665      	mov	r5, ip
 8006250:	b942      	cbnz	r2, 8006264 <_strtol_l.isra.0+0xe8>
 8006252:	4628      	mov	r0, r5
 8006254:	e79d      	b.n	8006192 <_strtol_l.isra.0+0x16>
 8006256:	f1b8 0f00 	cmp.w	r8, #0
 800625a:	d000      	beq.n	800625e <_strtol_l.isra.0+0xe2>
 800625c:	426d      	negs	r5, r5
 800625e:	2a00      	cmp	r2, #0
 8006260:	d0f7      	beq.n	8006252 <_strtol_l.isra.0+0xd6>
 8006262:	b10e      	cbz	r6, 8006268 <_strtol_l.isra.0+0xec>
 8006264:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	e7f2      	b.n	8006252 <_strtol_l.isra.0+0xd6>
 800626c:	2430      	movs	r4, #48	; 0x30
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1b3      	bne.n	80061da <_strtol_l.isra.0+0x5e>
 8006272:	2308      	movs	r3, #8
 8006274:	e7b1      	b.n	80061da <_strtol_l.isra.0+0x5e>
 8006276:	2c30      	cmp	r4, #48	; 0x30
 8006278:	d0a4      	beq.n	80061c4 <_strtol_l.isra.0+0x48>
 800627a:	230a      	movs	r3, #10
 800627c:	e7ad      	b.n	80061da <_strtol_l.isra.0+0x5e>
 800627e:	bf00      	nop
 8006280:	080076b5 	.word	0x080076b5

08006284 <strtol>:
 8006284:	4613      	mov	r3, r2
 8006286:	460a      	mov	r2, r1
 8006288:	4601      	mov	r1, r0
 800628a:	4802      	ldr	r0, [pc, #8]	; (8006294 <strtol+0x10>)
 800628c:	6800      	ldr	r0, [r0, #0]
 800628e:	f7ff bf75 	b.w	800617c <_strtol_l.isra.0>
 8006292:	bf00      	nop
 8006294:	20000020 	.word	0x20000020

08006298 <__assert_func>:
 8006298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800629a:	4614      	mov	r4, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <__assert_func+0x2c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4605      	mov	r5, r0
 80062a4:	68d8      	ldr	r0, [r3, #12]
 80062a6:	b14c      	cbz	r4, 80062bc <__assert_func+0x24>
 80062a8:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <__assert_func+0x30>)
 80062aa:	9100      	str	r1, [sp, #0]
 80062ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062b0:	4906      	ldr	r1, [pc, #24]	; (80062cc <__assert_func+0x34>)
 80062b2:	462b      	mov	r3, r5
 80062b4:	f000 f80e 	bl	80062d4 <fiprintf>
 80062b8:	f000 fdea 	bl	8006e90 <abort>
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <__assert_func+0x38>)
 80062be:	461c      	mov	r4, r3
 80062c0:	e7f3      	b.n	80062aa <__assert_func+0x12>
 80062c2:	bf00      	nop
 80062c4:	20000020 	.word	0x20000020
 80062c8:	08007678 	.word	0x08007678
 80062cc:	08007685 	.word	0x08007685
 80062d0:	080076b3 	.word	0x080076b3

080062d4 <fiprintf>:
 80062d4:	b40e      	push	{r1, r2, r3}
 80062d6:	b503      	push	{r0, r1, lr}
 80062d8:	4601      	mov	r1, r0
 80062da:	ab03      	add	r3, sp, #12
 80062dc:	4805      	ldr	r0, [pc, #20]	; (80062f4 <fiprintf+0x20>)
 80062de:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e2:	6800      	ldr	r0, [r0, #0]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	f000 fa3f 	bl	8006768 <_vfiprintf_r>
 80062ea:	b002      	add	sp, #8
 80062ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80062f0:	b003      	add	sp, #12
 80062f2:	4770      	bx	lr
 80062f4:	20000020 	.word	0x20000020

080062f8 <malloc>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <malloc+0xc>)
 80062fa:	4601      	mov	r1, r0
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f000 b853 	b.w	80063a8 <_malloc_r>
 8006302:	bf00      	nop
 8006304:	20000020 	.word	0x20000020

08006308 <_free_r>:
 8006308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800630a:	2900      	cmp	r1, #0
 800630c:	d048      	beq.n	80063a0 <_free_r+0x98>
 800630e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006312:	9001      	str	r0, [sp, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f1a1 0404 	sub.w	r4, r1, #4
 800631a:	bfb8      	it	lt
 800631c:	18e4      	addlt	r4, r4, r3
 800631e:	f000 fff7 	bl	8007310 <__malloc_lock>
 8006322:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <_free_r+0x9c>)
 8006324:	9801      	ldr	r0, [sp, #4]
 8006326:	6813      	ldr	r3, [r2, #0]
 8006328:	4615      	mov	r5, r2
 800632a:	b933      	cbnz	r3, 800633a <_free_r+0x32>
 800632c:	6063      	str	r3, [r4, #4]
 800632e:	6014      	str	r4, [r2, #0]
 8006330:	b003      	add	sp, #12
 8006332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006336:	f000 bff1 	b.w	800731c <__malloc_unlock>
 800633a:	42a3      	cmp	r3, r4
 800633c:	d90b      	bls.n	8006356 <_free_r+0x4e>
 800633e:	6821      	ldr	r1, [r4, #0]
 8006340:	1862      	adds	r2, r4, r1
 8006342:	4293      	cmp	r3, r2
 8006344:	bf04      	itt	eq
 8006346:	681a      	ldreq	r2, [r3, #0]
 8006348:	685b      	ldreq	r3, [r3, #4]
 800634a:	6063      	str	r3, [r4, #4]
 800634c:	bf04      	itt	eq
 800634e:	1852      	addeq	r2, r2, r1
 8006350:	6022      	streq	r2, [r4, #0]
 8006352:	602c      	str	r4, [r5, #0]
 8006354:	e7ec      	b.n	8006330 <_free_r+0x28>
 8006356:	461a      	mov	r2, r3
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	b10b      	cbz	r3, 8006360 <_free_r+0x58>
 800635c:	42a3      	cmp	r3, r4
 800635e:	d9fa      	bls.n	8006356 <_free_r+0x4e>
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	1855      	adds	r5, r2, r1
 8006364:	42a5      	cmp	r5, r4
 8006366:	d10b      	bne.n	8006380 <_free_r+0x78>
 8006368:	6824      	ldr	r4, [r4, #0]
 800636a:	4421      	add	r1, r4
 800636c:	1854      	adds	r4, r2, r1
 800636e:	42a3      	cmp	r3, r4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	d1dd      	bne.n	8006330 <_free_r+0x28>
 8006374:	681c      	ldr	r4, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	4421      	add	r1, r4
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	e7d7      	b.n	8006330 <_free_r+0x28>
 8006380:	d902      	bls.n	8006388 <_free_r+0x80>
 8006382:	230c      	movs	r3, #12
 8006384:	6003      	str	r3, [r0, #0]
 8006386:	e7d3      	b.n	8006330 <_free_r+0x28>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	1961      	adds	r1, r4, r5
 800638c:	428b      	cmp	r3, r1
 800638e:	bf04      	itt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	bf04      	itt	eq
 8006398:	1949      	addeq	r1, r1, r5
 800639a:	6021      	streq	r1, [r4, #0]
 800639c:	6054      	str	r4, [r2, #4]
 800639e:	e7c7      	b.n	8006330 <_free_r+0x28>
 80063a0:	b003      	add	sp, #12
 80063a2:	bd30      	pop	{r4, r5, pc}
 80063a4:	20000530 	.word	0x20000530

080063a8 <_malloc_r>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	1ccd      	adds	r5, r1, #3
 80063ac:	f025 0503 	bic.w	r5, r5, #3
 80063b0:	3508      	adds	r5, #8
 80063b2:	2d0c      	cmp	r5, #12
 80063b4:	bf38      	it	cc
 80063b6:	250c      	movcc	r5, #12
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	4606      	mov	r6, r0
 80063bc:	db01      	blt.n	80063c2 <_malloc_r+0x1a>
 80063be:	42a9      	cmp	r1, r5
 80063c0:	d903      	bls.n	80063ca <_malloc_r+0x22>
 80063c2:	230c      	movs	r3, #12
 80063c4:	6033      	str	r3, [r6, #0]
 80063c6:	2000      	movs	r0, #0
 80063c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ca:	f000 ffa1 	bl	8007310 <__malloc_lock>
 80063ce:	4921      	ldr	r1, [pc, #132]	; (8006454 <_malloc_r+0xac>)
 80063d0:	680a      	ldr	r2, [r1, #0]
 80063d2:	4614      	mov	r4, r2
 80063d4:	b99c      	cbnz	r4, 80063fe <_malloc_r+0x56>
 80063d6:	4f20      	ldr	r7, [pc, #128]	; (8006458 <_malloc_r+0xb0>)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	b923      	cbnz	r3, 80063e6 <_malloc_r+0x3e>
 80063dc:	4621      	mov	r1, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 fc86 	bl	8006cf0 <_sbrk_r>
 80063e4:	6038      	str	r0, [r7, #0]
 80063e6:	4629      	mov	r1, r5
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 fc81 	bl	8006cf0 <_sbrk_r>
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	d123      	bne.n	800643a <_malloc_r+0x92>
 80063f2:	230c      	movs	r3, #12
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	4630      	mov	r0, r6
 80063f8:	f000 ff90 	bl	800731c <__malloc_unlock>
 80063fc:	e7e3      	b.n	80063c6 <_malloc_r+0x1e>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	1b5b      	subs	r3, r3, r5
 8006402:	d417      	bmi.n	8006434 <_malloc_r+0x8c>
 8006404:	2b0b      	cmp	r3, #11
 8006406:	d903      	bls.n	8006410 <_malloc_r+0x68>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	441c      	add	r4, r3
 800640c:	6025      	str	r5, [r4, #0]
 800640e:	e004      	b.n	800641a <_malloc_r+0x72>
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	42a2      	cmp	r2, r4
 8006414:	bf0c      	ite	eq
 8006416:	600b      	streq	r3, [r1, #0]
 8006418:	6053      	strne	r3, [r2, #4]
 800641a:	4630      	mov	r0, r6
 800641c:	f000 ff7e 	bl	800731c <__malloc_unlock>
 8006420:	f104 000b 	add.w	r0, r4, #11
 8006424:	1d23      	adds	r3, r4, #4
 8006426:	f020 0007 	bic.w	r0, r0, #7
 800642a:	1ac2      	subs	r2, r0, r3
 800642c:	d0cc      	beq.n	80063c8 <_malloc_r+0x20>
 800642e:	1a1b      	subs	r3, r3, r0
 8006430:	50a3      	str	r3, [r4, r2]
 8006432:	e7c9      	b.n	80063c8 <_malloc_r+0x20>
 8006434:	4622      	mov	r2, r4
 8006436:	6864      	ldr	r4, [r4, #4]
 8006438:	e7cc      	b.n	80063d4 <_malloc_r+0x2c>
 800643a:	1cc4      	adds	r4, r0, #3
 800643c:	f024 0403 	bic.w	r4, r4, #3
 8006440:	42a0      	cmp	r0, r4
 8006442:	d0e3      	beq.n	800640c <_malloc_r+0x64>
 8006444:	1a21      	subs	r1, r4, r0
 8006446:	4630      	mov	r0, r6
 8006448:	f000 fc52 	bl	8006cf0 <_sbrk_r>
 800644c:	3001      	adds	r0, #1
 800644e:	d1dd      	bne.n	800640c <_malloc_r+0x64>
 8006450:	e7cf      	b.n	80063f2 <_malloc_r+0x4a>
 8006452:	bf00      	nop
 8006454:	20000530 	.word	0x20000530
 8006458:	20000534 	.word	0x20000534

0800645c <__ssputs_r>:
 800645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	688e      	ldr	r6, [r1, #8]
 8006462:	429e      	cmp	r6, r3
 8006464:	4682      	mov	sl, r0
 8006466:	460c      	mov	r4, r1
 8006468:	4690      	mov	r8, r2
 800646a:	461f      	mov	r7, r3
 800646c:	d838      	bhi.n	80064e0 <__ssputs_r+0x84>
 800646e:	898a      	ldrh	r2, [r1, #12]
 8006470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006474:	d032      	beq.n	80064dc <__ssputs_r+0x80>
 8006476:	6825      	ldr	r5, [r4, #0]
 8006478:	6909      	ldr	r1, [r1, #16]
 800647a:	eba5 0901 	sub.w	r9, r5, r1
 800647e:	6965      	ldr	r5, [r4, #20]
 8006480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006488:	3301      	adds	r3, #1
 800648a:	444b      	add	r3, r9
 800648c:	106d      	asrs	r5, r5, #1
 800648e:	429d      	cmp	r5, r3
 8006490:	bf38      	it	cc
 8006492:	461d      	movcc	r5, r3
 8006494:	0553      	lsls	r3, r2, #21
 8006496:	d531      	bpl.n	80064fc <__ssputs_r+0xa0>
 8006498:	4629      	mov	r1, r5
 800649a:	f7ff ff85 	bl	80063a8 <_malloc_r>
 800649e:	4606      	mov	r6, r0
 80064a0:	b950      	cbnz	r0, 80064b8 <__ssputs_r+0x5c>
 80064a2:	230c      	movs	r3, #12
 80064a4:	f8ca 3000 	str.w	r3, [sl]
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b8:	6921      	ldr	r1, [r4, #16]
 80064ba:	464a      	mov	r2, r9
 80064bc:	f7ff fdcc 	bl	8006058 <memcpy>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	6126      	str	r6, [r4, #16]
 80064ce:	6165      	str	r5, [r4, #20]
 80064d0:	444e      	add	r6, r9
 80064d2:	eba5 0509 	sub.w	r5, r5, r9
 80064d6:	6026      	str	r6, [r4, #0]
 80064d8:	60a5      	str	r5, [r4, #8]
 80064da:	463e      	mov	r6, r7
 80064dc:	42be      	cmp	r6, r7
 80064de:	d900      	bls.n	80064e2 <__ssputs_r+0x86>
 80064e0:	463e      	mov	r6, r7
 80064e2:	4632      	mov	r2, r6
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	4641      	mov	r1, r8
 80064e8:	f000 fef8 	bl	80072dc <memmove>
 80064ec:	68a3      	ldr	r3, [r4, #8]
 80064ee:	6822      	ldr	r2, [r4, #0]
 80064f0:	1b9b      	subs	r3, r3, r6
 80064f2:	4432      	add	r2, r6
 80064f4:	60a3      	str	r3, [r4, #8]
 80064f6:	6022      	str	r2, [r4, #0]
 80064f8:	2000      	movs	r0, #0
 80064fa:	e7db      	b.n	80064b4 <__ssputs_r+0x58>
 80064fc:	462a      	mov	r2, r5
 80064fe:	f000 ff13 	bl	8007328 <_realloc_r>
 8006502:	4606      	mov	r6, r0
 8006504:	2800      	cmp	r0, #0
 8006506:	d1e1      	bne.n	80064cc <__ssputs_r+0x70>
 8006508:	6921      	ldr	r1, [r4, #16]
 800650a:	4650      	mov	r0, sl
 800650c:	f7ff fefc 	bl	8006308 <_free_r>
 8006510:	e7c7      	b.n	80064a2 <__ssputs_r+0x46>
	...

08006514 <_svfiprintf_r>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	4698      	mov	r8, r3
 800651a:	898b      	ldrh	r3, [r1, #12]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	b09d      	sub	sp, #116	; 0x74
 8006520:	4607      	mov	r7, r0
 8006522:	460d      	mov	r5, r1
 8006524:	4614      	mov	r4, r2
 8006526:	d50e      	bpl.n	8006546 <_svfiprintf_r+0x32>
 8006528:	690b      	ldr	r3, [r1, #16]
 800652a:	b963      	cbnz	r3, 8006546 <_svfiprintf_r+0x32>
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	f7ff ff3b 	bl	80063a8 <_malloc_r>
 8006532:	6028      	str	r0, [r5, #0]
 8006534:	6128      	str	r0, [r5, #16]
 8006536:	b920      	cbnz	r0, 8006542 <_svfiprintf_r+0x2e>
 8006538:	230c      	movs	r3, #12
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006540:	e0d1      	b.n	80066e6 <_svfiprintf_r+0x1d2>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	616b      	str	r3, [r5, #20]
 8006546:	2300      	movs	r3, #0
 8006548:	9309      	str	r3, [sp, #36]	; 0x24
 800654a:	2320      	movs	r3, #32
 800654c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006550:	f8cd 800c 	str.w	r8, [sp, #12]
 8006554:	2330      	movs	r3, #48	; 0x30
 8006556:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006700 <_svfiprintf_r+0x1ec>
 800655a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800655e:	f04f 0901 	mov.w	r9, #1
 8006562:	4623      	mov	r3, r4
 8006564:	469a      	mov	sl, r3
 8006566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656a:	b10a      	cbz	r2, 8006570 <_svfiprintf_r+0x5c>
 800656c:	2a25      	cmp	r2, #37	; 0x25
 800656e:	d1f9      	bne.n	8006564 <_svfiprintf_r+0x50>
 8006570:	ebba 0b04 	subs.w	fp, sl, r4
 8006574:	d00b      	beq.n	800658e <_svfiprintf_r+0x7a>
 8006576:	465b      	mov	r3, fp
 8006578:	4622      	mov	r2, r4
 800657a:	4629      	mov	r1, r5
 800657c:	4638      	mov	r0, r7
 800657e:	f7ff ff6d 	bl	800645c <__ssputs_r>
 8006582:	3001      	adds	r0, #1
 8006584:	f000 80aa 	beq.w	80066dc <_svfiprintf_r+0x1c8>
 8006588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800658a:	445a      	add	r2, fp
 800658c:	9209      	str	r2, [sp, #36]	; 0x24
 800658e:	f89a 3000 	ldrb.w	r3, [sl]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80a2 	beq.w	80066dc <_svfiprintf_r+0x1c8>
 8006598:	2300      	movs	r3, #0
 800659a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a2:	f10a 0a01 	add.w	sl, sl, #1
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	9307      	str	r3, [sp, #28]
 80065aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ae:	931a      	str	r3, [sp, #104]	; 0x68
 80065b0:	4654      	mov	r4, sl
 80065b2:	2205      	movs	r2, #5
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	4851      	ldr	r0, [pc, #324]	; (8006700 <_svfiprintf_r+0x1ec>)
 80065ba:	f7f9 fe09 	bl	80001d0 <memchr>
 80065be:	9a04      	ldr	r2, [sp, #16]
 80065c0:	b9d8      	cbnz	r0, 80065fa <_svfiprintf_r+0xe6>
 80065c2:	06d0      	lsls	r0, r2, #27
 80065c4:	bf44      	itt	mi
 80065c6:	2320      	movmi	r3, #32
 80065c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065cc:	0711      	lsls	r1, r2, #28
 80065ce:	bf44      	itt	mi
 80065d0:	232b      	movmi	r3, #43	; 0x2b
 80065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d6:	f89a 3000 	ldrb.w	r3, [sl]
 80065da:	2b2a      	cmp	r3, #42	; 0x2a
 80065dc:	d015      	beq.n	800660a <_svfiprintf_r+0xf6>
 80065de:	9a07      	ldr	r2, [sp, #28]
 80065e0:	4654      	mov	r4, sl
 80065e2:	2000      	movs	r0, #0
 80065e4:	f04f 0c0a 	mov.w	ip, #10
 80065e8:	4621      	mov	r1, r4
 80065ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ee:	3b30      	subs	r3, #48	; 0x30
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d94e      	bls.n	8006692 <_svfiprintf_r+0x17e>
 80065f4:	b1b0      	cbz	r0, 8006624 <_svfiprintf_r+0x110>
 80065f6:	9207      	str	r2, [sp, #28]
 80065f8:	e014      	b.n	8006624 <_svfiprintf_r+0x110>
 80065fa:	eba0 0308 	sub.w	r3, r0, r8
 80065fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006602:	4313      	orrs	r3, r2
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	46a2      	mov	sl, r4
 8006608:	e7d2      	b.n	80065b0 <_svfiprintf_r+0x9c>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	1d19      	adds	r1, r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	9103      	str	r1, [sp, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbb      	ittet	lt
 8006616:	425b      	neglt	r3, r3
 8006618:	f042 0202 	orrlt.w	r2, r2, #2
 800661c:	9307      	strge	r3, [sp, #28]
 800661e:	9307      	strlt	r3, [sp, #28]
 8006620:	bfb8      	it	lt
 8006622:	9204      	strlt	r2, [sp, #16]
 8006624:	7823      	ldrb	r3, [r4, #0]
 8006626:	2b2e      	cmp	r3, #46	; 0x2e
 8006628:	d10c      	bne.n	8006644 <_svfiprintf_r+0x130>
 800662a:	7863      	ldrb	r3, [r4, #1]
 800662c:	2b2a      	cmp	r3, #42	; 0x2a
 800662e:	d135      	bne.n	800669c <_svfiprintf_r+0x188>
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	1d1a      	adds	r2, r3, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	9203      	str	r2, [sp, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfb8      	it	lt
 800663c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006640:	3402      	adds	r4, #2
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006710 <_svfiprintf_r+0x1fc>
 8006648:	7821      	ldrb	r1, [r4, #0]
 800664a:	2203      	movs	r2, #3
 800664c:	4650      	mov	r0, sl
 800664e:	f7f9 fdbf 	bl	80001d0 <memchr>
 8006652:	b140      	cbz	r0, 8006666 <_svfiprintf_r+0x152>
 8006654:	2340      	movs	r3, #64	; 0x40
 8006656:	eba0 000a 	sub.w	r0, r0, sl
 800665a:	fa03 f000 	lsl.w	r0, r3, r0
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	4303      	orrs	r3, r0
 8006662:	3401      	adds	r4, #1
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666a:	4826      	ldr	r0, [pc, #152]	; (8006704 <_svfiprintf_r+0x1f0>)
 800666c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006670:	2206      	movs	r2, #6
 8006672:	f7f9 fdad 	bl	80001d0 <memchr>
 8006676:	2800      	cmp	r0, #0
 8006678:	d038      	beq.n	80066ec <_svfiprintf_r+0x1d8>
 800667a:	4b23      	ldr	r3, [pc, #140]	; (8006708 <_svfiprintf_r+0x1f4>)
 800667c:	bb1b      	cbnz	r3, 80066c6 <_svfiprintf_r+0x1b2>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	3307      	adds	r3, #7
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	3308      	adds	r3, #8
 8006688:	9303      	str	r3, [sp, #12]
 800668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668c:	4433      	add	r3, r6
 800668e:	9309      	str	r3, [sp, #36]	; 0x24
 8006690:	e767      	b.n	8006562 <_svfiprintf_r+0x4e>
 8006692:	fb0c 3202 	mla	r2, ip, r2, r3
 8006696:	460c      	mov	r4, r1
 8006698:	2001      	movs	r0, #1
 800669a:	e7a5      	b.n	80065e8 <_svfiprintf_r+0xd4>
 800669c:	2300      	movs	r3, #0
 800669e:	3401      	adds	r4, #1
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	4619      	mov	r1, r3
 80066a4:	f04f 0c0a 	mov.w	ip, #10
 80066a8:	4620      	mov	r0, r4
 80066aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ae:	3a30      	subs	r2, #48	; 0x30
 80066b0:	2a09      	cmp	r2, #9
 80066b2:	d903      	bls.n	80066bc <_svfiprintf_r+0x1a8>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0c5      	beq.n	8006644 <_svfiprintf_r+0x130>
 80066b8:	9105      	str	r1, [sp, #20]
 80066ba:	e7c3      	b.n	8006644 <_svfiprintf_r+0x130>
 80066bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80066c0:	4604      	mov	r4, r0
 80066c2:	2301      	movs	r3, #1
 80066c4:	e7f0      	b.n	80066a8 <_svfiprintf_r+0x194>
 80066c6:	ab03      	add	r3, sp, #12
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	462a      	mov	r2, r5
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <_svfiprintf_r+0x1f8>)
 80066ce:	a904      	add	r1, sp, #16
 80066d0:	4638      	mov	r0, r7
 80066d2:	f3af 8000 	nop.w
 80066d6:	1c42      	adds	r2, r0, #1
 80066d8:	4606      	mov	r6, r0
 80066da:	d1d6      	bne.n	800668a <_svfiprintf_r+0x176>
 80066dc:	89ab      	ldrh	r3, [r5, #12]
 80066de:	065b      	lsls	r3, r3, #25
 80066e0:	f53f af2c 	bmi.w	800653c <_svfiprintf_r+0x28>
 80066e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e6:	b01d      	add	sp, #116	; 0x74
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	ab03      	add	r3, sp, #12
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	462a      	mov	r2, r5
 80066f2:	4b06      	ldr	r3, [pc, #24]	; (800670c <_svfiprintf_r+0x1f8>)
 80066f4:	a904      	add	r1, sp, #16
 80066f6:	4638      	mov	r0, r7
 80066f8:	f000 f9d4 	bl	8006aa4 <_printf_i>
 80066fc:	e7eb      	b.n	80066d6 <_svfiprintf_r+0x1c2>
 80066fe:	bf00      	nop
 8006700:	080077b5 	.word	0x080077b5
 8006704:	080077bf 	.word	0x080077bf
 8006708:	00000000 	.word	0x00000000
 800670c:	0800645d 	.word	0x0800645d
 8006710:	080077bb 	.word	0x080077bb

08006714 <__sfputc_r>:
 8006714:	6893      	ldr	r3, [r2, #8]
 8006716:	3b01      	subs	r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	b410      	push	{r4}
 800671c:	6093      	str	r3, [r2, #8]
 800671e:	da08      	bge.n	8006732 <__sfputc_r+0x1e>
 8006720:	6994      	ldr	r4, [r2, #24]
 8006722:	42a3      	cmp	r3, r4
 8006724:	db01      	blt.n	800672a <__sfputc_r+0x16>
 8006726:	290a      	cmp	r1, #10
 8006728:	d103      	bne.n	8006732 <__sfputc_r+0x1e>
 800672a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800672e:	f000 baef 	b.w	8006d10 <__swbuf_r>
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	1c58      	adds	r0, r3, #1
 8006736:	6010      	str	r0, [r2, #0]
 8006738:	7019      	strb	r1, [r3, #0]
 800673a:	4608      	mov	r0, r1
 800673c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006740:	4770      	bx	lr

08006742 <__sfputs_r>:
 8006742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006744:	4606      	mov	r6, r0
 8006746:	460f      	mov	r7, r1
 8006748:	4614      	mov	r4, r2
 800674a:	18d5      	adds	r5, r2, r3
 800674c:	42ac      	cmp	r4, r5
 800674e:	d101      	bne.n	8006754 <__sfputs_r+0x12>
 8006750:	2000      	movs	r0, #0
 8006752:	e007      	b.n	8006764 <__sfputs_r+0x22>
 8006754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006758:	463a      	mov	r2, r7
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff ffda 	bl	8006714 <__sfputc_r>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d1f3      	bne.n	800674c <__sfputs_r+0xa>
 8006764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006768 <_vfiprintf_r>:
 8006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676c:	460d      	mov	r5, r1
 800676e:	b09d      	sub	sp, #116	; 0x74
 8006770:	4614      	mov	r4, r2
 8006772:	4698      	mov	r8, r3
 8006774:	4606      	mov	r6, r0
 8006776:	b118      	cbz	r0, 8006780 <_vfiprintf_r+0x18>
 8006778:	6983      	ldr	r3, [r0, #24]
 800677a:	b90b      	cbnz	r3, 8006780 <_vfiprintf_r+0x18>
 800677c:	f000 fcaa 	bl	80070d4 <__sinit>
 8006780:	4b89      	ldr	r3, [pc, #548]	; (80069a8 <_vfiprintf_r+0x240>)
 8006782:	429d      	cmp	r5, r3
 8006784:	d11b      	bne.n	80067be <_vfiprintf_r+0x56>
 8006786:	6875      	ldr	r5, [r6, #4]
 8006788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800678a:	07d9      	lsls	r1, r3, #31
 800678c:	d405      	bmi.n	800679a <_vfiprintf_r+0x32>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	059a      	lsls	r2, r3, #22
 8006792:	d402      	bmi.n	800679a <_vfiprintf_r+0x32>
 8006794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006796:	f000 fd3b 	bl	8007210 <__retarget_lock_acquire_recursive>
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	071b      	lsls	r3, r3, #28
 800679e:	d501      	bpl.n	80067a4 <_vfiprintf_r+0x3c>
 80067a0:	692b      	ldr	r3, [r5, #16]
 80067a2:	b9eb      	cbnz	r3, 80067e0 <_vfiprintf_r+0x78>
 80067a4:	4629      	mov	r1, r5
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 fb04 	bl	8006db4 <__swsetup_r>
 80067ac:	b1c0      	cbz	r0, 80067e0 <_vfiprintf_r+0x78>
 80067ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b0:	07dc      	lsls	r4, r3, #31
 80067b2:	d50e      	bpl.n	80067d2 <_vfiprintf_r+0x6a>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067b8:	b01d      	add	sp, #116	; 0x74
 80067ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067be:	4b7b      	ldr	r3, [pc, #492]	; (80069ac <_vfiprintf_r+0x244>)
 80067c0:	429d      	cmp	r5, r3
 80067c2:	d101      	bne.n	80067c8 <_vfiprintf_r+0x60>
 80067c4:	68b5      	ldr	r5, [r6, #8]
 80067c6:	e7df      	b.n	8006788 <_vfiprintf_r+0x20>
 80067c8:	4b79      	ldr	r3, [pc, #484]	; (80069b0 <_vfiprintf_r+0x248>)
 80067ca:	429d      	cmp	r5, r3
 80067cc:	bf08      	it	eq
 80067ce:	68f5      	ldreq	r5, [r6, #12]
 80067d0:	e7da      	b.n	8006788 <_vfiprintf_r+0x20>
 80067d2:	89ab      	ldrh	r3, [r5, #12]
 80067d4:	0598      	lsls	r0, r3, #22
 80067d6:	d4ed      	bmi.n	80067b4 <_vfiprintf_r+0x4c>
 80067d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067da:	f000 fd1a 	bl	8007212 <__retarget_lock_release_recursive>
 80067de:	e7e9      	b.n	80067b4 <_vfiprintf_r+0x4c>
 80067e0:	2300      	movs	r3, #0
 80067e2:	9309      	str	r3, [sp, #36]	; 0x24
 80067e4:	2320      	movs	r3, #32
 80067e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ee:	2330      	movs	r3, #48	; 0x30
 80067f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069b4 <_vfiprintf_r+0x24c>
 80067f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f8:	f04f 0901 	mov.w	r9, #1
 80067fc:	4623      	mov	r3, r4
 80067fe:	469a      	mov	sl, r3
 8006800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006804:	b10a      	cbz	r2, 800680a <_vfiprintf_r+0xa2>
 8006806:	2a25      	cmp	r2, #37	; 0x25
 8006808:	d1f9      	bne.n	80067fe <_vfiprintf_r+0x96>
 800680a:	ebba 0b04 	subs.w	fp, sl, r4
 800680e:	d00b      	beq.n	8006828 <_vfiprintf_r+0xc0>
 8006810:	465b      	mov	r3, fp
 8006812:	4622      	mov	r2, r4
 8006814:	4629      	mov	r1, r5
 8006816:	4630      	mov	r0, r6
 8006818:	f7ff ff93 	bl	8006742 <__sfputs_r>
 800681c:	3001      	adds	r0, #1
 800681e:	f000 80aa 	beq.w	8006976 <_vfiprintf_r+0x20e>
 8006822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006824:	445a      	add	r2, fp
 8006826:	9209      	str	r2, [sp, #36]	; 0x24
 8006828:	f89a 3000 	ldrb.w	r3, [sl]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80a2 	beq.w	8006976 <_vfiprintf_r+0x20e>
 8006832:	2300      	movs	r3, #0
 8006834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800683c:	f10a 0a01 	add.w	sl, sl, #1
 8006840:	9304      	str	r3, [sp, #16]
 8006842:	9307      	str	r3, [sp, #28]
 8006844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006848:	931a      	str	r3, [sp, #104]	; 0x68
 800684a:	4654      	mov	r4, sl
 800684c:	2205      	movs	r2, #5
 800684e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006852:	4858      	ldr	r0, [pc, #352]	; (80069b4 <_vfiprintf_r+0x24c>)
 8006854:	f7f9 fcbc 	bl	80001d0 <memchr>
 8006858:	9a04      	ldr	r2, [sp, #16]
 800685a:	b9d8      	cbnz	r0, 8006894 <_vfiprintf_r+0x12c>
 800685c:	06d1      	lsls	r1, r2, #27
 800685e:	bf44      	itt	mi
 8006860:	2320      	movmi	r3, #32
 8006862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006866:	0713      	lsls	r3, r2, #28
 8006868:	bf44      	itt	mi
 800686a:	232b      	movmi	r3, #43	; 0x2b
 800686c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006870:	f89a 3000 	ldrb.w	r3, [sl]
 8006874:	2b2a      	cmp	r3, #42	; 0x2a
 8006876:	d015      	beq.n	80068a4 <_vfiprintf_r+0x13c>
 8006878:	9a07      	ldr	r2, [sp, #28]
 800687a:	4654      	mov	r4, sl
 800687c:	2000      	movs	r0, #0
 800687e:	f04f 0c0a 	mov.w	ip, #10
 8006882:	4621      	mov	r1, r4
 8006884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006888:	3b30      	subs	r3, #48	; 0x30
 800688a:	2b09      	cmp	r3, #9
 800688c:	d94e      	bls.n	800692c <_vfiprintf_r+0x1c4>
 800688e:	b1b0      	cbz	r0, 80068be <_vfiprintf_r+0x156>
 8006890:	9207      	str	r2, [sp, #28]
 8006892:	e014      	b.n	80068be <_vfiprintf_r+0x156>
 8006894:	eba0 0308 	sub.w	r3, r0, r8
 8006898:	fa09 f303 	lsl.w	r3, r9, r3
 800689c:	4313      	orrs	r3, r2
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	46a2      	mov	sl, r4
 80068a2:	e7d2      	b.n	800684a <_vfiprintf_r+0xe2>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	1d19      	adds	r1, r3, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	9103      	str	r1, [sp, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfbb      	ittet	lt
 80068b0:	425b      	neglt	r3, r3
 80068b2:	f042 0202 	orrlt.w	r2, r2, #2
 80068b6:	9307      	strge	r3, [sp, #28]
 80068b8:	9307      	strlt	r3, [sp, #28]
 80068ba:	bfb8      	it	lt
 80068bc:	9204      	strlt	r2, [sp, #16]
 80068be:	7823      	ldrb	r3, [r4, #0]
 80068c0:	2b2e      	cmp	r3, #46	; 0x2e
 80068c2:	d10c      	bne.n	80068de <_vfiprintf_r+0x176>
 80068c4:	7863      	ldrb	r3, [r4, #1]
 80068c6:	2b2a      	cmp	r3, #42	; 0x2a
 80068c8:	d135      	bne.n	8006936 <_vfiprintf_r+0x1ce>
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	1d1a      	adds	r2, r3, #4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	9203      	str	r2, [sp, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bfb8      	it	lt
 80068d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068da:	3402      	adds	r4, #2
 80068dc:	9305      	str	r3, [sp, #20]
 80068de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069c4 <_vfiprintf_r+0x25c>
 80068e2:	7821      	ldrb	r1, [r4, #0]
 80068e4:	2203      	movs	r2, #3
 80068e6:	4650      	mov	r0, sl
 80068e8:	f7f9 fc72 	bl	80001d0 <memchr>
 80068ec:	b140      	cbz	r0, 8006900 <_vfiprintf_r+0x198>
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	eba0 000a 	sub.w	r0, r0, sl
 80068f4:	fa03 f000 	lsl.w	r0, r3, r0
 80068f8:	9b04      	ldr	r3, [sp, #16]
 80068fa:	4303      	orrs	r3, r0
 80068fc:	3401      	adds	r4, #1
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006904:	482c      	ldr	r0, [pc, #176]	; (80069b8 <_vfiprintf_r+0x250>)
 8006906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800690a:	2206      	movs	r2, #6
 800690c:	f7f9 fc60 	bl	80001d0 <memchr>
 8006910:	2800      	cmp	r0, #0
 8006912:	d03f      	beq.n	8006994 <_vfiprintf_r+0x22c>
 8006914:	4b29      	ldr	r3, [pc, #164]	; (80069bc <_vfiprintf_r+0x254>)
 8006916:	bb1b      	cbnz	r3, 8006960 <_vfiprintf_r+0x1f8>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	3307      	adds	r3, #7
 800691c:	f023 0307 	bic.w	r3, r3, #7
 8006920:	3308      	adds	r3, #8
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	443b      	add	r3, r7
 8006928:	9309      	str	r3, [sp, #36]	; 0x24
 800692a:	e767      	b.n	80067fc <_vfiprintf_r+0x94>
 800692c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006930:	460c      	mov	r4, r1
 8006932:	2001      	movs	r0, #1
 8006934:	e7a5      	b.n	8006882 <_vfiprintf_r+0x11a>
 8006936:	2300      	movs	r3, #0
 8006938:	3401      	adds	r4, #1
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	4619      	mov	r1, r3
 800693e:	f04f 0c0a 	mov.w	ip, #10
 8006942:	4620      	mov	r0, r4
 8006944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006948:	3a30      	subs	r2, #48	; 0x30
 800694a:	2a09      	cmp	r2, #9
 800694c:	d903      	bls.n	8006956 <_vfiprintf_r+0x1ee>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0c5      	beq.n	80068de <_vfiprintf_r+0x176>
 8006952:	9105      	str	r1, [sp, #20]
 8006954:	e7c3      	b.n	80068de <_vfiprintf_r+0x176>
 8006956:	fb0c 2101 	mla	r1, ip, r1, r2
 800695a:	4604      	mov	r4, r0
 800695c:	2301      	movs	r3, #1
 800695e:	e7f0      	b.n	8006942 <_vfiprintf_r+0x1da>
 8006960:	ab03      	add	r3, sp, #12
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	462a      	mov	r2, r5
 8006966:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <_vfiprintf_r+0x258>)
 8006968:	a904      	add	r1, sp, #16
 800696a:	4630      	mov	r0, r6
 800696c:	f3af 8000 	nop.w
 8006970:	4607      	mov	r7, r0
 8006972:	1c78      	adds	r0, r7, #1
 8006974:	d1d6      	bne.n	8006924 <_vfiprintf_r+0x1bc>
 8006976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006978:	07d9      	lsls	r1, r3, #31
 800697a:	d405      	bmi.n	8006988 <_vfiprintf_r+0x220>
 800697c:	89ab      	ldrh	r3, [r5, #12]
 800697e:	059a      	lsls	r2, r3, #22
 8006980:	d402      	bmi.n	8006988 <_vfiprintf_r+0x220>
 8006982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006984:	f000 fc45 	bl	8007212 <__retarget_lock_release_recursive>
 8006988:	89ab      	ldrh	r3, [r5, #12]
 800698a:	065b      	lsls	r3, r3, #25
 800698c:	f53f af12 	bmi.w	80067b4 <_vfiprintf_r+0x4c>
 8006990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006992:	e711      	b.n	80067b8 <_vfiprintf_r+0x50>
 8006994:	ab03      	add	r3, sp, #12
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	462a      	mov	r2, r5
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <_vfiprintf_r+0x258>)
 800699c:	a904      	add	r1, sp, #16
 800699e:	4630      	mov	r0, r6
 80069a0:	f000 f880 	bl	8006aa4 <_printf_i>
 80069a4:	e7e4      	b.n	8006970 <_vfiprintf_r+0x208>
 80069a6:	bf00      	nop
 80069a8:	08007808 	.word	0x08007808
 80069ac:	08007828 	.word	0x08007828
 80069b0:	080077e8 	.word	0x080077e8
 80069b4:	080077b5 	.word	0x080077b5
 80069b8:	080077bf 	.word	0x080077bf
 80069bc:	00000000 	.word	0x00000000
 80069c0:	08006743 	.word	0x08006743
 80069c4:	080077bb 	.word	0x080077bb

080069c8 <_printf_common>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	4616      	mov	r6, r2
 80069ce:	4699      	mov	r9, r3
 80069d0:	688a      	ldr	r2, [r1, #8]
 80069d2:	690b      	ldr	r3, [r1, #16]
 80069d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069d8:	4293      	cmp	r3, r2
 80069da:	bfb8      	it	lt
 80069dc:	4613      	movlt	r3, r2
 80069de:	6033      	str	r3, [r6, #0]
 80069e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069e4:	4607      	mov	r7, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b10a      	cbz	r2, 80069ee <_printf_common+0x26>
 80069ea:	3301      	adds	r3, #1
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	0699      	lsls	r1, r3, #26
 80069f2:	bf42      	ittt	mi
 80069f4:	6833      	ldrmi	r3, [r6, #0]
 80069f6:	3302      	addmi	r3, #2
 80069f8:	6033      	strmi	r3, [r6, #0]
 80069fa:	6825      	ldr	r5, [r4, #0]
 80069fc:	f015 0506 	ands.w	r5, r5, #6
 8006a00:	d106      	bne.n	8006a10 <_printf_common+0x48>
 8006a02:	f104 0a19 	add.w	sl, r4, #25
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	6832      	ldr	r2, [r6, #0]
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dc26      	bgt.n	8006a5e <_printf_common+0x96>
 8006a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a14:	1e13      	subs	r3, r2, #0
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	bf18      	it	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	0692      	lsls	r2, r2, #26
 8006a1e:	d42b      	bmi.n	8006a78 <_printf_common+0xb0>
 8006a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a24:	4649      	mov	r1, r9
 8006a26:	4638      	mov	r0, r7
 8006a28:	47c0      	blx	r8
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d01e      	beq.n	8006a6c <_printf_common+0xa4>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	68e5      	ldr	r5, [r4, #12]
 8006a32:	6832      	ldr	r2, [r6, #0]
 8006a34:	f003 0306 	and.w	r3, r3, #6
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	bf08      	it	eq
 8006a3c:	1aad      	subeq	r5, r5, r2
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	bf0c      	ite	eq
 8006a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a48:	2500      	movne	r5, #0
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	bfc4      	itt	gt
 8006a4e:	1a9b      	subgt	r3, r3, r2
 8006a50:	18ed      	addgt	r5, r5, r3
 8006a52:	2600      	movs	r6, #0
 8006a54:	341a      	adds	r4, #26
 8006a56:	42b5      	cmp	r5, r6
 8006a58:	d11a      	bne.n	8006a90 <_printf_common+0xc8>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e008      	b.n	8006a70 <_printf_common+0xa8>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4649      	mov	r1, r9
 8006a64:	4638      	mov	r0, r7
 8006a66:	47c0      	blx	r8
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d103      	bne.n	8006a74 <_printf_common+0xac>
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a74:	3501      	adds	r5, #1
 8006a76:	e7c6      	b.n	8006a06 <_printf_common+0x3e>
 8006a78:	18e1      	adds	r1, r4, r3
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	2030      	movs	r0, #48	; 0x30
 8006a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a82:	4422      	add	r2, r4
 8006a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	e7c7      	b.n	8006a20 <_printf_common+0x58>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4622      	mov	r2, r4
 8006a94:	4649      	mov	r1, r9
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c0      	blx	r8
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d0e6      	beq.n	8006a6c <_printf_common+0xa4>
 8006a9e:	3601      	adds	r6, #1
 8006aa0:	e7d9      	b.n	8006a56 <_printf_common+0x8e>
	...

08006aa4 <_printf_i>:
 8006aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	4691      	mov	r9, r2
 8006aac:	7e27      	ldrb	r7, [r4, #24]
 8006aae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ab0:	2f78      	cmp	r7, #120	; 0x78
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	469a      	mov	sl, r3
 8006ab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aba:	d807      	bhi.n	8006acc <_printf_i+0x28>
 8006abc:	2f62      	cmp	r7, #98	; 0x62
 8006abe:	d80a      	bhi.n	8006ad6 <_printf_i+0x32>
 8006ac0:	2f00      	cmp	r7, #0
 8006ac2:	f000 80d8 	beq.w	8006c76 <_printf_i+0x1d2>
 8006ac6:	2f58      	cmp	r7, #88	; 0x58
 8006ac8:	f000 80a3 	beq.w	8006c12 <_printf_i+0x16e>
 8006acc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad4:	e03a      	b.n	8006b4c <_printf_i+0xa8>
 8006ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ada:	2b15      	cmp	r3, #21
 8006adc:	d8f6      	bhi.n	8006acc <_printf_i+0x28>
 8006ade:	a001      	add	r0, pc, #4	; (adr r0, 8006ae4 <_printf_i+0x40>)
 8006ae0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ae4:	08006b3d 	.word	0x08006b3d
 8006ae8:	08006b51 	.word	0x08006b51
 8006aec:	08006acd 	.word	0x08006acd
 8006af0:	08006acd 	.word	0x08006acd
 8006af4:	08006acd 	.word	0x08006acd
 8006af8:	08006acd 	.word	0x08006acd
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006acd 	.word	0x08006acd
 8006b04:	08006acd 	.word	0x08006acd
 8006b08:	08006acd 	.word	0x08006acd
 8006b0c:	08006acd 	.word	0x08006acd
 8006b10:	08006c5d 	.word	0x08006c5d
 8006b14:	08006b81 	.word	0x08006b81
 8006b18:	08006c3f 	.word	0x08006c3f
 8006b1c:	08006acd 	.word	0x08006acd
 8006b20:	08006acd 	.word	0x08006acd
 8006b24:	08006c7f 	.word	0x08006c7f
 8006b28:	08006acd 	.word	0x08006acd
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006acd 	.word	0x08006acd
 8006b34:	08006acd 	.word	0x08006acd
 8006b38:	08006c47 	.word	0x08006c47
 8006b3c:	680b      	ldr	r3, [r1, #0]
 8006b3e:	1d1a      	adds	r2, r3, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	600a      	str	r2, [r1, #0]
 8006b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0a3      	b.n	8006c98 <_printf_i+0x1f4>
 8006b50:	6825      	ldr	r5, [r4, #0]
 8006b52:	6808      	ldr	r0, [r1, #0]
 8006b54:	062e      	lsls	r6, r5, #24
 8006b56:	f100 0304 	add.w	r3, r0, #4
 8006b5a:	d50a      	bpl.n	8006b72 <_printf_i+0xce>
 8006b5c:	6805      	ldr	r5, [r0, #0]
 8006b5e:	600b      	str	r3, [r1, #0]
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	da03      	bge.n	8006b6c <_printf_i+0xc8>
 8006b64:	232d      	movs	r3, #45	; 0x2d
 8006b66:	426d      	negs	r5, r5
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	485e      	ldr	r0, [pc, #376]	; (8006ce8 <_printf_i+0x244>)
 8006b6e:	230a      	movs	r3, #10
 8006b70:	e019      	b.n	8006ba6 <_printf_i+0x102>
 8006b72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b76:	6805      	ldr	r5, [r0, #0]
 8006b78:	600b      	str	r3, [r1, #0]
 8006b7a:	bf18      	it	ne
 8006b7c:	b22d      	sxthne	r5, r5
 8006b7e:	e7ef      	b.n	8006b60 <_printf_i+0xbc>
 8006b80:	680b      	ldr	r3, [r1, #0]
 8006b82:	6825      	ldr	r5, [r4, #0]
 8006b84:	1d18      	adds	r0, r3, #4
 8006b86:	6008      	str	r0, [r1, #0]
 8006b88:	0628      	lsls	r0, r5, #24
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0xec>
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	e002      	b.n	8006b96 <_printf_i+0xf2>
 8006b90:	0669      	lsls	r1, r5, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0xe8>
 8006b94:	881d      	ldrh	r5, [r3, #0]
 8006b96:	4854      	ldr	r0, [pc, #336]	; (8006ce8 <_printf_i+0x244>)
 8006b98:	2f6f      	cmp	r7, #111	; 0x6f
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2308      	moveq	r3, #8
 8006b9e:	230a      	movne	r3, #10
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ba6:	6866      	ldr	r6, [r4, #4]
 8006ba8:	60a6      	str	r6, [r4, #8]
 8006baa:	2e00      	cmp	r6, #0
 8006bac:	bfa2      	ittt	ge
 8006bae:	6821      	ldrge	r1, [r4, #0]
 8006bb0:	f021 0104 	bicge.w	r1, r1, #4
 8006bb4:	6021      	strge	r1, [r4, #0]
 8006bb6:	b90d      	cbnz	r5, 8006bbc <_printf_i+0x118>
 8006bb8:	2e00      	cmp	r6, #0
 8006bba:	d04d      	beq.n	8006c58 <_printf_i+0x1b4>
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bc2:	fb03 5711 	mls	r7, r3, r1, r5
 8006bc6:	5dc7      	ldrb	r7, [r0, r7]
 8006bc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bcc:	462f      	mov	r7, r5
 8006bce:	42bb      	cmp	r3, r7
 8006bd0:	460d      	mov	r5, r1
 8006bd2:	d9f4      	bls.n	8006bbe <_printf_i+0x11a>
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d10b      	bne.n	8006bf0 <_printf_i+0x14c>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	07df      	lsls	r7, r3, #31
 8006bdc:	d508      	bpl.n	8006bf0 <_printf_i+0x14c>
 8006bde:	6923      	ldr	r3, [r4, #16]
 8006be0:	6861      	ldr	r1, [r4, #4]
 8006be2:	4299      	cmp	r1, r3
 8006be4:	bfde      	ittt	le
 8006be6:	2330      	movle	r3, #48	; 0x30
 8006be8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006bf0:	1b92      	subs	r2, r2, r6
 8006bf2:	6122      	str	r2, [r4, #16]
 8006bf4:	f8cd a000 	str.w	sl, [sp]
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	aa03      	add	r2, sp, #12
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4640      	mov	r0, r8
 8006c00:	f7ff fee2 	bl	80069c8 <_printf_common>
 8006c04:	3001      	adds	r0, #1
 8006c06:	d14c      	bne.n	8006ca2 <_printf_i+0x1fe>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c0c:	b004      	add	sp, #16
 8006c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c12:	4835      	ldr	r0, [pc, #212]	; (8006ce8 <_printf_i+0x244>)
 8006c14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	680e      	ldr	r6, [r1, #0]
 8006c1c:	061f      	lsls	r7, r3, #24
 8006c1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c22:	600e      	str	r6, [r1, #0]
 8006c24:	d514      	bpl.n	8006c50 <_printf_i+0x1ac>
 8006c26:	07d9      	lsls	r1, r3, #31
 8006c28:	bf44      	itt	mi
 8006c2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c2e:	6023      	strmi	r3, [r4, #0]
 8006c30:	b91d      	cbnz	r5, 8006c3a <_printf_i+0x196>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	f023 0320 	bic.w	r3, r3, #32
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	e7b0      	b.n	8006ba0 <_printf_i+0xfc>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	f043 0320 	orr.w	r3, r3, #32
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	2378      	movs	r3, #120	; 0x78
 8006c48:	4828      	ldr	r0, [pc, #160]	; (8006cec <_printf_i+0x248>)
 8006c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c4e:	e7e3      	b.n	8006c18 <_printf_i+0x174>
 8006c50:	065e      	lsls	r6, r3, #25
 8006c52:	bf48      	it	mi
 8006c54:	b2ad      	uxthmi	r5, r5
 8006c56:	e7e6      	b.n	8006c26 <_printf_i+0x182>
 8006c58:	4616      	mov	r6, r2
 8006c5a:	e7bb      	b.n	8006bd4 <_printf_i+0x130>
 8006c5c:	680b      	ldr	r3, [r1, #0]
 8006c5e:	6826      	ldr	r6, [r4, #0]
 8006c60:	6960      	ldr	r0, [r4, #20]
 8006c62:	1d1d      	adds	r5, r3, #4
 8006c64:	600d      	str	r5, [r1, #0]
 8006c66:	0635      	lsls	r5, r6, #24
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	d501      	bpl.n	8006c70 <_printf_i+0x1cc>
 8006c6c:	6018      	str	r0, [r3, #0]
 8006c6e:	e002      	b.n	8006c76 <_printf_i+0x1d2>
 8006c70:	0671      	lsls	r1, r6, #25
 8006c72:	d5fb      	bpl.n	8006c6c <_printf_i+0x1c8>
 8006c74:	8018      	strh	r0, [r3, #0]
 8006c76:	2300      	movs	r3, #0
 8006c78:	6123      	str	r3, [r4, #16]
 8006c7a:	4616      	mov	r6, r2
 8006c7c:	e7ba      	b.n	8006bf4 <_printf_i+0x150>
 8006c7e:	680b      	ldr	r3, [r1, #0]
 8006c80:	1d1a      	adds	r2, r3, #4
 8006c82:	600a      	str	r2, [r1, #0]
 8006c84:	681e      	ldr	r6, [r3, #0]
 8006c86:	6862      	ldr	r2, [r4, #4]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7f9 faa0 	bl	80001d0 <memchr>
 8006c90:	b108      	cbz	r0, 8006c96 <_printf_i+0x1f2>
 8006c92:	1b80      	subs	r0, r0, r6
 8006c94:	6060      	str	r0, [r4, #4]
 8006c96:	6863      	ldr	r3, [r4, #4]
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca0:	e7a8      	b.n	8006bf4 <_printf_i+0x150>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	4640      	mov	r0, r8
 8006caa:	47d0      	blx	sl
 8006cac:	3001      	adds	r0, #1
 8006cae:	d0ab      	beq.n	8006c08 <_printf_i+0x164>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	079b      	lsls	r3, r3, #30
 8006cb4:	d413      	bmi.n	8006cde <_printf_i+0x23a>
 8006cb6:	68e0      	ldr	r0, [r4, #12]
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	4298      	cmp	r0, r3
 8006cbc:	bfb8      	it	lt
 8006cbe:	4618      	movlt	r0, r3
 8006cc0:	e7a4      	b.n	8006c0c <_printf_i+0x168>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	4640      	mov	r0, r8
 8006cca:	47d0      	blx	sl
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d09b      	beq.n	8006c08 <_printf_i+0x164>
 8006cd0:	3501      	adds	r5, #1
 8006cd2:	68e3      	ldr	r3, [r4, #12]
 8006cd4:	9903      	ldr	r1, [sp, #12]
 8006cd6:	1a5b      	subs	r3, r3, r1
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	dcf2      	bgt.n	8006cc2 <_printf_i+0x21e>
 8006cdc:	e7eb      	b.n	8006cb6 <_printf_i+0x212>
 8006cde:	2500      	movs	r5, #0
 8006ce0:	f104 0619 	add.w	r6, r4, #25
 8006ce4:	e7f5      	b.n	8006cd2 <_printf_i+0x22e>
 8006ce6:	bf00      	nop
 8006ce8:	080077c6 	.word	0x080077c6
 8006cec:	080077d7 	.word	0x080077d7

08006cf0 <_sbrk_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d06      	ldr	r5, [pc, #24]	; (8006d0c <_sbrk_r+0x1c>)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fa f9ae 	bl	800105c <_sbrk>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_sbrk_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_sbrk_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	200006a0 	.word	0x200006a0

08006d10 <__swbuf_r>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	460e      	mov	r6, r1
 8006d14:	4614      	mov	r4, r2
 8006d16:	4605      	mov	r5, r0
 8006d18:	b118      	cbz	r0, 8006d22 <__swbuf_r+0x12>
 8006d1a:	6983      	ldr	r3, [r0, #24]
 8006d1c:	b90b      	cbnz	r3, 8006d22 <__swbuf_r+0x12>
 8006d1e:	f000 f9d9 	bl	80070d4 <__sinit>
 8006d22:	4b21      	ldr	r3, [pc, #132]	; (8006da8 <__swbuf_r+0x98>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	d12b      	bne.n	8006d80 <__swbuf_r+0x70>
 8006d28:	686c      	ldr	r4, [r5, #4]
 8006d2a:	69a3      	ldr	r3, [r4, #24]
 8006d2c:	60a3      	str	r3, [r4, #8]
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	071a      	lsls	r2, r3, #28
 8006d32:	d52f      	bpl.n	8006d94 <__swbuf_r+0x84>
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	b36b      	cbz	r3, 8006d94 <__swbuf_r+0x84>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	6820      	ldr	r0, [r4, #0]
 8006d3c:	1ac0      	subs	r0, r0, r3
 8006d3e:	6963      	ldr	r3, [r4, #20]
 8006d40:	b2f6      	uxtb	r6, r6
 8006d42:	4283      	cmp	r3, r0
 8006d44:	4637      	mov	r7, r6
 8006d46:	dc04      	bgt.n	8006d52 <__swbuf_r+0x42>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 f92e 	bl	8006fac <_fflush_r>
 8006d50:	bb30      	cbnz	r0, 8006da0 <__swbuf_r+0x90>
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	6022      	str	r2, [r4, #0]
 8006d5e:	701e      	strb	r6, [r3, #0]
 8006d60:	6963      	ldr	r3, [r4, #20]
 8006d62:	3001      	adds	r0, #1
 8006d64:	4283      	cmp	r3, r0
 8006d66:	d004      	beq.n	8006d72 <__swbuf_r+0x62>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	07db      	lsls	r3, r3, #31
 8006d6c:	d506      	bpl.n	8006d7c <__swbuf_r+0x6c>
 8006d6e:	2e0a      	cmp	r6, #10
 8006d70:	d104      	bne.n	8006d7c <__swbuf_r+0x6c>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 f919 	bl	8006fac <_fflush_r>
 8006d7a:	b988      	cbnz	r0, 8006da0 <__swbuf_r+0x90>
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <__swbuf_r+0x9c>)
 8006d82:	429c      	cmp	r4, r3
 8006d84:	d101      	bne.n	8006d8a <__swbuf_r+0x7a>
 8006d86:	68ac      	ldr	r4, [r5, #8]
 8006d88:	e7cf      	b.n	8006d2a <__swbuf_r+0x1a>
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <__swbuf_r+0xa0>)
 8006d8c:	429c      	cmp	r4, r3
 8006d8e:	bf08      	it	eq
 8006d90:	68ec      	ldreq	r4, [r5, #12]
 8006d92:	e7ca      	b.n	8006d2a <__swbuf_r+0x1a>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4628      	mov	r0, r5
 8006d98:	f000 f80c 	bl	8006db4 <__swsetup_r>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d0cb      	beq.n	8006d38 <__swbuf_r+0x28>
 8006da0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006da4:	e7ea      	b.n	8006d7c <__swbuf_r+0x6c>
 8006da6:	bf00      	nop
 8006da8:	08007808 	.word	0x08007808
 8006dac:	08007828 	.word	0x08007828
 8006db0:	080077e8 	.word	0x080077e8

08006db4 <__swsetup_r>:
 8006db4:	4b32      	ldr	r3, [pc, #200]	; (8006e80 <__swsetup_r+0xcc>)
 8006db6:	b570      	push	{r4, r5, r6, lr}
 8006db8:	681d      	ldr	r5, [r3, #0]
 8006dba:	4606      	mov	r6, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	b125      	cbz	r5, 8006dca <__swsetup_r+0x16>
 8006dc0:	69ab      	ldr	r3, [r5, #24]
 8006dc2:	b913      	cbnz	r3, 8006dca <__swsetup_r+0x16>
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f985 	bl	80070d4 <__sinit>
 8006dca:	4b2e      	ldr	r3, [pc, #184]	; (8006e84 <__swsetup_r+0xd0>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	d10f      	bne.n	8006df0 <__swsetup_r+0x3c>
 8006dd0:	686c      	ldr	r4, [r5, #4]
 8006dd2:	89a3      	ldrh	r3, [r4, #12]
 8006dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd8:	0719      	lsls	r1, r3, #28
 8006dda:	d42c      	bmi.n	8006e36 <__swsetup_r+0x82>
 8006ddc:	06dd      	lsls	r5, r3, #27
 8006dde:	d411      	bmi.n	8006e04 <__swsetup_r+0x50>
 8006de0:	2309      	movs	r3, #9
 8006de2:	6033      	str	r3, [r6, #0]
 8006de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006de8:	81a3      	strh	r3, [r4, #12]
 8006dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dee:	e03e      	b.n	8006e6e <__swsetup_r+0xba>
 8006df0:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <__swsetup_r+0xd4>)
 8006df2:	429c      	cmp	r4, r3
 8006df4:	d101      	bne.n	8006dfa <__swsetup_r+0x46>
 8006df6:	68ac      	ldr	r4, [r5, #8]
 8006df8:	e7eb      	b.n	8006dd2 <__swsetup_r+0x1e>
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <__swsetup_r+0xd8>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	bf08      	it	eq
 8006e00:	68ec      	ldreq	r4, [r5, #12]
 8006e02:	e7e6      	b.n	8006dd2 <__swsetup_r+0x1e>
 8006e04:	0758      	lsls	r0, r3, #29
 8006e06:	d512      	bpl.n	8006e2e <__swsetup_r+0x7a>
 8006e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e0a:	b141      	cbz	r1, 8006e1e <__swsetup_r+0x6a>
 8006e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e10:	4299      	cmp	r1, r3
 8006e12:	d002      	beq.n	8006e1a <__swsetup_r+0x66>
 8006e14:	4630      	mov	r0, r6
 8006e16:	f7ff fa77 	bl	8006308 <_free_r>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	2300      	movs	r3, #0
 8006e28:	6063      	str	r3, [r4, #4]
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	f043 0308 	orr.w	r3, r3, #8
 8006e34:	81a3      	strh	r3, [r4, #12]
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	b94b      	cbnz	r3, 8006e4e <__swsetup_r+0x9a>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e44:	d003      	beq.n	8006e4e <__swsetup_r+0x9a>
 8006e46:	4621      	mov	r1, r4
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 fa07 	bl	800725c <__smakebuf_r>
 8006e4e:	89a0      	ldrh	r0, [r4, #12]
 8006e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e54:	f010 0301 	ands.w	r3, r0, #1
 8006e58:	d00a      	beq.n	8006e70 <__swsetup_r+0xbc>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60a3      	str	r3, [r4, #8]
 8006e5e:	6963      	ldr	r3, [r4, #20]
 8006e60:	425b      	negs	r3, r3
 8006e62:	61a3      	str	r3, [r4, #24]
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	b943      	cbnz	r3, 8006e7a <__swsetup_r+0xc6>
 8006e68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e6c:	d1ba      	bne.n	8006de4 <__swsetup_r+0x30>
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}
 8006e70:	0781      	lsls	r1, r0, #30
 8006e72:	bf58      	it	pl
 8006e74:	6963      	ldrpl	r3, [r4, #20]
 8006e76:	60a3      	str	r3, [r4, #8]
 8006e78:	e7f4      	b.n	8006e64 <__swsetup_r+0xb0>
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e7f7      	b.n	8006e6e <__swsetup_r+0xba>
 8006e7e:	bf00      	nop
 8006e80:	20000020 	.word	0x20000020
 8006e84:	08007808 	.word	0x08007808
 8006e88:	08007828 	.word	0x08007828
 8006e8c:	080077e8 	.word	0x080077e8

08006e90 <abort>:
 8006e90:	b508      	push	{r3, lr}
 8006e92:	2006      	movs	r0, #6
 8006e94:	f000 fa96 	bl	80073c4 <raise>
 8006e98:	2001      	movs	r0, #1
 8006e9a:	f7fa f867 	bl	8000f6c <_exit>
	...

08006ea0 <__sflush_r>:
 8006ea0:	898a      	ldrh	r2, [r1, #12]
 8006ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	0710      	lsls	r0, r2, #28
 8006eaa:	460c      	mov	r4, r1
 8006eac:	d458      	bmi.n	8006f60 <__sflush_r+0xc0>
 8006eae:	684b      	ldr	r3, [r1, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dc05      	bgt.n	8006ec0 <__sflush_r+0x20>
 8006eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dc02      	bgt.n	8006ec0 <__sflush_r+0x20>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d0f9      	beq.n	8006eba <__sflush_r+0x1a>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ecc:	682f      	ldr	r7, [r5, #0]
 8006ece:	602b      	str	r3, [r5, #0]
 8006ed0:	d032      	beq.n	8006f38 <__sflush_r+0x98>
 8006ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	075a      	lsls	r2, r3, #29
 8006ed8:	d505      	bpl.n	8006ee6 <__sflush_r+0x46>
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	1ac0      	subs	r0, r0, r3
 8006ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ee0:	b10b      	cbz	r3, 8006ee6 <__sflush_r+0x46>
 8006ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ee4:	1ac0      	subs	r0, r0, r3
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	4602      	mov	r2, r0
 8006eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eec:	6a21      	ldr	r1, [r4, #32]
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b0      	blx	r6
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	d106      	bne.n	8006f06 <__sflush_r+0x66>
 8006ef8:	6829      	ldr	r1, [r5, #0]
 8006efa:	291d      	cmp	r1, #29
 8006efc:	d82c      	bhi.n	8006f58 <__sflush_r+0xb8>
 8006efe:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <__sflush_r+0x108>)
 8006f00:	40ca      	lsrs	r2, r1
 8006f02:	07d6      	lsls	r6, r2, #31
 8006f04:	d528      	bpl.n	8006f58 <__sflush_r+0xb8>
 8006f06:	2200      	movs	r2, #0
 8006f08:	6062      	str	r2, [r4, #4]
 8006f0a:	04d9      	lsls	r1, r3, #19
 8006f0c:	6922      	ldr	r2, [r4, #16]
 8006f0e:	6022      	str	r2, [r4, #0]
 8006f10:	d504      	bpl.n	8006f1c <__sflush_r+0x7c>
 8006f12:	1c42      	adds	r2, r0, #1
 8006f14:	d101      	bne.n	8006f1a <__sflush_r+0x7a>
 8006f16:	682b      	ldr	r3, [r5, #0]
 8006f18:	b903      	cbnz	r3, 8006f1c <__sflush_r+0x7c>
 8006f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8006f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f1e:	602f      	str	r7, [r5, #0]
 8006f20:	2900      	cmp	r1, #0
 8006f22:	d0ca      	beq.n	8006eba <__sflush_r+0x1a>
 8006f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d002      	beq.n	8006f32 <__sflush_r+0x92>
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f7ff f9eb 	bl	8006308 <_free_r>
 8006f32:	2000      	movs	r0, #0
 8006f34:	6360      	str	r0, [r4, #52]	; 0x34
 8006f36:	e7c1      	b.n	8006ebc <__sflush_r+0x1c>
 8006f38:	6a21      	ldr	r1, [r4, #32]
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b0      	blx	r6
 8006f40:	1c41      	adds	r1, r0, #1
 8006f42:	d1c7      	bne.n	8006ed4 <__sflush_r+0x34>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0c4      	beq.n	8006ed4 <__sflush_r+0x34>
 8006f4a:	2b1d      	cmp	r3, #29
 8006f4c:	d001      	beq.n	8006f52 <__sflush_r+0xb2>
 8006f4e:	2b16      	cmp	r3, #22
 8006f50:	d101      	bne.n	8006f56 <__sflush_r+0xb6>
 8006f52:	602f      	str	r7, [r5, #0]
 8006f54:	e7b1      	b.n	8006eba <__sflush_r+0x1a>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5c:	81a3      	strh	r3, [r4, #12]
 8006f5e:	e7ad      	b.n	8006ebc <__sflush_r+0x1c>
 8006f60:	690f      	ldr	r7, [r1, #16]
 8006f62:	2f00      	cmp	r7, #0
 8006f64:	d0a9      	beq.n	8006eba <__sflush_r+0x1a>
 8006f66:	0793      	lsls	r3, r2, #30
 8006f68:	680e      	ldr	r6, [r1, #0]
 8006f6a:	bf08      	it	eq
 8006f6c:	694b      	ldreq	r3, [r1, #20]
 8006f6e:	600f      	str	r7, [r1, #0]
 8006f70:	bf18      	it	ne
 8006f72:	2300      	movne	r3, #0
 8006f74:	eba6 0807 	sub.w	r8, r6, r7
 8006f78:	608b      	str	r3, [r1, #8]
 8006f7a:	f1b8 0f00 	cmp.w	r8, #0
 8006f7e:	dd9c      	ble.n	8006eba <__sflush_r+0x1a>
 8006f80:	6a21      	ldr	r1, [r4, #32]
 8006f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f84:	4643      	mov	r3, r8
 8006f86:	463a      	mov	r2, r7
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b0      	blx	r6
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	dc06      	bgt.n	8006f9e <__sflush_r+0xfe>
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f9c:	e78e      	b.n	8006ebc <__sflush_r+0x1c>
 8006f9e:	4407      	add	r7, r0
 8006fa0:	eba8 0800 	sub.w	r8, r8, r0
 8006fa4:	e7e9      	b.n	8006f7a <__sflush_r+0xda>
 8006fa6:	bf00      	nop
 8006fa8:	20400001 	.word	0x20400001

08006fac <_fflush_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	690b      	ldr	r3, [r1, #16]
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	b913      	cbnz	r3, 8006fbc <_fflush_r+0x10>
 8006fb6:	2500      	movs	r5, #0
 8006fb8:	4628      	mov	r0, r5
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	b118      	cbz	r0, 8006fc6 <_fflush_r+0x1a>
 8006fbe:	6983      	ldr	r3, [r0, #24]
 8006fc0:	b90b      	cbnz	r3, 8006fc6 <_fflush_r+0x1a>
 8006fc2:	f000 f887 	bl	80070d4 <__sinit>
 8006fc6:	4b14      	ldr	r3, [pc, #80]	; (8007018 <_fflush_r+0x6c>)
 8006fc8:	429c      	cmp	r4, r3
 8006fca:	d11b      	bne.n	8007004 <_fflush_r+0x58>
 8006fcc:	686c      	ldr	r4, [r5, #4]
 8006fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0ef      	beq.n	8006fb6 <_fflush_r+0xa>
 8006fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fd8:	07d0      	lsls	r0, r2, #31
 8006fda:	d404      	bmi.n	8006fe6 <_fflush_r+0x3a>
 8006fdc:	0599      	lsls	r1, r3, #22
 8006fde:	d402      	bmi.n	8006fe6 <_fflush_r+0x3a>
 8006fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fe2:	f000 f915 	bl	8007210 <__retarget_lock_acquire_recursive>
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	4621      	mov	r1, r4
 8006fea:	f7ff ff59 	bl	8006ea0 <__sflush_r>
 8006fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ff0:	07da      	lsls	r2, r3, #31
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	d4e0      	bmi.n	8006fb8 <_fflush_r+0xc>
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	059b      	lsls	r3, r3, #22
 8006ffa:	d4dd      	bmi.n	8006fb8 <_fflush_r+0xc>
 8006ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ffe:	f000 f908 	bl	8007212 <__retarget_lock_release_recursive>
 8007002:	e7d9      	b.n	8006fb8 <_fflush_r+0xc>
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <_fflush_r+0x70>)
 8007006:	429c      	cmp	r4, r3
 8007008:	d101      	bne.n	800700e <_fflush_r+0x62>
 800700a:	68ac      	ldr	r4, [r5, #8]
 800700c:	e7df      	b.n	8006fce <_fflush_r+0x22>
 800700e:	4b04      	ldr	r3, [pc, #16]	; (8007020 <_fflush_r+0x74>)
 8007010:	429c      	cmp	r4, r3
 8007012:	bf08      	it	eq
 8007014:	68ec      	ldreq	r4, [r5, #12]
 8007016:	e7da      	b.n	8006fce <_fflush_r+0x22>
 8007018:	08007808 	.word	0x08007808
 800701c:	08007828 	.word	0x08007828
 8007020:	080077e8 	.word	0x080077e8

08007024 <std>:
 8007024:	2300      	movs	r3, #0
 8007026:	b510      	push	{r4, lr}
 8007028:	4604      	mov	r4, r0
 800702a:	e9c0 3300 	strd	r3, r3, [r0]
 800702e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007032:	6083      	str	r3, [r0, #8]
 8007034:	8181      	strh	r1, [r0, #12]
 8007036:	6643      	str	r3, [r0, #100]	; 0x64
 8007038:	81c2      	strh	r2, [r0, #14]
 800703a:	6183      	str	r3, [r0, #24]
 800703c:	4619      	mov	r1, r3
 800703e:	2208      	movs	r2, #8
 8007040:	305c      	adds	r0, #92	; 0x5c
 8007042:	f7ff f817 	bl	8006074 <memset>
 8007046:	4b05      	ldr	r3, [pc, #20]	; (800705c <std+0x38>)
 8007048:	6263      	str	r3, [r4, #36]	; 0x24
 800704a:	4b05      	ldr	r3, [pc, #20]	; (8007060 <std+0x3c>)
 800704c:	62a3      	str	r3, [r4, #40]	; 0x28
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <std+0x40>)
 8007050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007052:	4b05      	ldr	r3, [pc, #20]	; (8007068 <std+0x44>)
 8007054:	6224      	str	r4, [r4, #32]
 8007056:	6323      	str	r3, [r4, #48]	; 0x30
 8007058:	bd10      	pop	{r4, pc}
 800705a:	bf00      	nop
 800705c:	080073fd 	.word	0x080073fd
 8007060:	0800741f 	.word	0x0800741f
 8007064:	08007457 	.word	0x08007457
 8007068:	0800747b 	.word	0x0800747b

0800706c <_cleanup_r>:
 800706c:	4901      	ldr	r1, [pc, #4]	; (8007074 <_cleanup_r+0x8>)
 800706e:	f000 b8af 	b.w	80071d0 <_fwalk_reent>
 8007072:	bf00      	nop
 8007074:	08006fad 	.word	0x08006fad

08007078 <__sfmoreglue>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	1e4a      	subs	r2, r1, #1
 800707c:	2568      	movs	r5, #104	; 0x68
 800707e:	4355      	muls	r5, r2
 8007080:	460e      	mov	r6, r1
 8007082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007086:	f7ff f98f 	bl	80063a8 <_malloc_r>
 800708a:	4604      	mov	r4, r0
 800708c:	b140      	cbz	r0, 80070a0 <__sfmoreglue+0x28>
 800708e:	2100      	movs	r1, #0
 8007090:	e9c0 1600 	strd	r1, r6, [r0]
 8007094:	300c      	adds	r0, #12
 8007096:	60a0      	str	r0, [r4, #8]
 8007098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800709c:	f7fe ffea 	bl	8006074 <memset>
 80070a0:	4620      	mov	r0, r4
 80070a2:	bd70      	pop	{r4, r5, r6, pc}

080070a4 <__sfp_lock_acquire>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__sfp_lock_acquire+0x8>)
 80070a6:	f000 b8b3 	b.w	8007210 <__retarget_lock_acquire_recursive>
 80070aa:	bf00      	nop
 80070ac:	2000069c 	.word	0x2000069c

080070b0 <__sfp_lock_release>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__sfp_lock_release+0x8>)
 80070b2:	f000 b8ae 	b.w	8007212 <__retarget_lock_release_recursive>
 80070b6:	bf00      	nop
 80070b8:	2000069c 	.word	0x2000069c

080070bc <__sinit_lock_acquire>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__sinit_lock_acquire+0x8>)
 80070be:	f000 b8a7 	b.w	8007210 <__retarget_lock_acquire_recursive>
 80070c2:	bf00      	nop
 80070c4:	20000697 	.word	0x20000697

080070c8 <__sinit_lock_release>:
 80070c8:	4801      	ldr	r0, [pc, #4]	; (80070d0 <__sinit_lock_release+0x8>)
 80070ca:	f000 b8a2 	b.w	8007212 <__retarget_lock_release_recursive>
 80070ce:	bf00      	nop
 80070d0:	20000697 	.word	0x20000697

080070d4 <__sinit>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	4604      	mov	r4, r0
 80070d8:	f7ff fff0 	bl	80070bc <__sinit_lock_acquire>
 80070dc:	69a3      	ldr	r3, [r4, #24]
 80070de:	b11b      	cbz	r3, 80070e8 <__sinit+0x14>
 80070e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e4:	f7ff bff0 	b.w	80070c8 <__sinit_lock_release>
 80070e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070ec:	6523      	str	r3, [r4, #80]	; 0x50
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <__sinit+0x68>)
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <__sinit+0x6c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80070f6:	42a3      	cmp	r3, r4
 80070f8:	bf04      	itt	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	61a3      	streq	r3, [r4, #24]
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 f820 	bl	8007144 <__sfp>
 8007104:	6060      	str	r0, [r4, #4]
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f81c 	bl	8007144 <__sfp>
 800710c:	60a0      	str	r0, [r4, #8]
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f818 	bl	8007144 <__sfp>
 8007114:	2200      	movs	r2, #0
 8007116:	60e0      	str	r0, [r4, #12]
 8007118:	2104      	movs	r1, #4
 800711a:	6860      	ldr	r0, [r4, #4]
 800711c:	f7ff ff82 	bl	8007024 <std>
 8007120:	68a0      	ldr	r0, [r4, #8]
 8007122:	2201      	movs	r2, #1
 8007124:	2109      	movs	r1, #9
 8007126:	f7ff ff7d 	bl	8007024 <std>
 800712a:	68e0      	ldr	r0, [r4, #12]
 800712c:	2202      	movs	r2, #2
 800712e:	2112      	movs	r1, #18
 8007130:	f7ff ff78 	bl	8007024 <std>
 8007134:	2301      	movs	r3, #1
 8007136:	61a3      	str	r3, [r4, #24]
 8007138:	e7d2      	b.n	80070e0 <__sinit+0xc>
 800713a:	bf00      	nop
 800713c:	080075fc 	.word	0x080075fc
 8007140:	0800706d 	.word	0x0800706d

08007144 <__sfp>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	4607      	mov	r7, r0
 8007148:	f7ff ffac 	bl	80070a4 <__sfp_lock_acquire>
 800714c:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <__sfp+0x84>)
 800714e:	681e      	ldr	r6, [r3, #0]
 8007150:	69b3      	ldr	r3, [r6, #24]
 8007152:	b913      	cbnz	r3, 800715a <__sfp+0x16>
 8007154:	4630      	mov	r0, r6
 8007156:	f7ff ffbd 	bl	80070d4 <__sinit>
 800715a:	3648      	adds	r6, #72	; 0x48
 800715c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007160:	3b01      	subs	r3, #1
 8007162:	d503      	bpl.n	800716c <__sfp+0x28>
 8007164:	6833      	ldr	r3, [r6, #0]
 8007166:	b30b      	cbz	r3, 80071ac <__sfp+0x68>
 8007168:	6836      	ldr	r6, [r6, #0]
 800716a:	e7f7      	b.n	800715c <__sfp+0x18>
 800716c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007170:	b9d5      	cbnz	r5, 80071a8 <__sfp+0x64>
 8007172:	4b16      	ldr	r3, [pc, #88]	; (80071cc <__sfp+0x88>)
 8007174:	60e3      	str	r3, [r4, #12]
 8007176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800717a:	6665      	str	r5, [r4, #100]	; 0x64
 800717c:	f000 f847 	bl	800720e <__retarget_lock_init_recursive>
 8007180:	f7ff ff96 	bl	80070b0 <__sfp_lock_release>
 8007184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800718c:	6025      	str	r5, [r4, #0]
 800718e:	61a5      	str	r5, [r4, #24]
 8007190:	2208      	movs	r2, #8
 8007192:	4629      	mov	r1, r5
 8007194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007198:	f7fe ff6c 	bl	8006074 <memset>
 800719c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071a4:	4620      	mov	r0, r4
 80071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a8:	3468      	adds	r4, #104	; 0x68
 80071aa:	e7d9      	b.n	8007160 <__sfp+0x1c>
 80071ac:	2104      	movs	r1, #4
 80071ae:	4638      	mov	r0, r7
 80071b0:	f7ff ff62 	bl	8007078 <__sfmoreglue>
 80071b4:	4604      	mov	r4, r0
 80071b6:	6030      	str	r0, [r6, #0]
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d1d5      	bne.n	8007168 <__sfp+0x24>
 80071bc:	f7ff ff78 	bl	80070b0 <__sfp_lock_release>
 80071c0:	230c      	movs	r3, #12
 80071c2:	603b      	str	r3, [r7, #0]
 80071c4:	e7ee      	b.n	80071a4 <__sfp+0x60>
 80071c6:	bf00      	nop
 80071c8:	080075fc 	.word	0x080075fc
 80071cc:	ffff0001 	.word	0xffff0001

080071d0 <_fwalk_reent>:
 80071d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d4:	4606      	mov	r6, r0
 80071d6:	4688      	mov	r8, r1
 80071d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071dc:	2700      	movs	r7, #0
 80071de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071e2:	f1b9 0901 	subs.w	r9, r9, #1
 80071e6:	d505      	bpl.n	80071f4 <_fwalk_reent+0x24>
 80071e8:	6824      	ldr	r4, [r4, #0]
 80071ea:	2c00      	cmp	r4, #0
 80071ec:	d1f7      	bne.n	80071de <_fwalk_reent+0xe>
 80071ee:	4638      	mov	r0, r7
 80071f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f4:	89ab      	ldrh	r3, [r5, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d907      	bls.n	800720a <_fwalk_reent+0x3a>
 80071fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071fe:	3301      	adds	r3, #1
 8007200:	d003      	beq.n	800720a <_fwalk_reent+0x3a>
 8007202:	4629      	mov	r1, r5
 8007204:	4630      	mov	r0, r6
 8007206:	47c0      	blx	r8
 8007208:	4307      	orrs	r7, r0
 800720a:	3568      	adds	r5, #104	; 0x68
 800720c:	e7e9      	b.n	80071e2 <_fwalk_reent+0x12>

0800720e <__retarget_lock_init_recursive>:
 800720e:	4770      	bx	lr

08007210 <__retarget_lock_acquire_recursive>:
 8007210:	4770      	bx	lr

08007212 <__retarget_lock_release_recursive>:
 8007212:	4770      	bx	lr

08007214 <__swhatbuf_r>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	460e      	mov	r6, r1
 8007218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721c:	2900      	cmp	r1, #0
 800721e:	b096      	sub	sp, #88	; 0x58
 8007220:	4614      	mov	r4, r2
 8007222:	461d      	mov	r5, r3
 8007224:	da07      	bge.n	8007236 <__swhatbuf_r+0x22>
 8007226:	2300      	movs	r3, #0
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	89b3      	ldrh	r3, [r6, #12]
 800722c:	061a      	lsls	r2, r3, #24
 800722e:	d410      	bmi.n	8007252 <__swhatbuf_r+0x3e>
 8007230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007234:	e00e      	b.n	8007254 <__swhatbuf_r+0x40>
 8007236:	466a      	mov	r2, sp
 8007238:	f000 f946 	bl	80074c8 <_fstat_r>
 800723c:	2800      	cmp	r0, #0
 800723e:	dbf2      	blt.n	8007226 <__swhatbuf_r+0x12>
 8007240:	9a01      	ldr	r2, [sp, #4]
 8007242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800724a:	425a      	negs	r2, r3
 800724c:	415a      	adcs	r2, r3
 800724e:	602a      	str	r2, [r5, #0]
 8007250:	e7ee      	b.n	8007230 <__swhatbuf_r+0x1c>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	2000      	movs	r0, #0
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	b016      	add	sp, #88	; 0x58
 800725a:	bd70      	pop	{r4, r5, r6, pc}

0800725c <__smakebuf_r>:
 800725c:	898b      	ldrh	r3, [r1, #12]
 800725e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007260:	079d      	lsls	r5, r3, #30
 8007262:	4606      	mov	r6, r0
 8007264:	460c      	mov	r4, r1
 8007266:	d507      	bpl.n	8007278 <__smakebuf_r+0x1c>
 8007268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	2301      	movs	r3, #1
 8007272:	6163      	str	r3, [r4, #20]
 8007274:	b002      	add	sp, #8
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	ab01      	add	r3, sp, #4
 800727a:	466a      	mov	r2, sp
 800727c:	f7ff ffca 	bl	8007214 <__swhatbuf_r>
 8007280:	9900      	ldr	r1, [sp, #0]
 8007282:	4605      	mov	r5, r0
 8007284:	4630      	mov	r0, r6
 8007286:	f7ff f88f 	bl	80063a8 <_malloc_r>
 800728a:	b948      	cbnz	r0, 80072a0 <__smakebuf_r+0x44>
 800728c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007290:	059a      	lsls	r2, r3, #22
 8007292:	d4ef      	bmi.n	8007274 <__smakebuf_r+0x18>
 8007294:	f023 0303 	bic.w	r3, r3, #3
 8007298:	f043 0302 	orr.w	r3, r3, #2
 800729c:	81a3      	strh	r3, [r4, #12]
 800729e:	e7e3      	b.n	8007268 <__smakebuf_r+0xc>
 80072a0:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <__smakebuf_r+0x7c>)
 80072a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	6020      	str	r0, [r4, #0]
 80072a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	9b00      	ldr	r3, [sp, #0]
 80072b0:	6163      	str	r3, [r4, #20]
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	6120      	str	r0, [r4, #16]
 80072b6:	b15b      	cbz	r3, 80072d0 <__smakebuf_r+0x74>
 80072b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f915 	bl	80074ec <_isatty_r>
 80072c2:	b128      	cbz	r0, 80072d0 <__smakebuf_r+0x74>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	89a0      	ldrh	r0, [r4, #12]
 80072d2:	4305      	orrs	r5, r0
 80072d4:	81a5      	strh	r5, [r4, #12]
 80072d6:	e7cd      	b.n	8007274 <__smakebuf_r+0x18>
 80072d8:	0800706d 	.word	0x0800706d

080072dc <memmove>:
 80072dc:	4288      	cmp	r0, r1
 80072de:	b510      	push	{r4, lr}
 80072e0:	eb01 0402 	add.w	r4, r1, r2
 80072e4:	d902      	bls.n	80072ec <memmove+0x10>
 80072e6:	4284      	cmp	r4, r0
 80072e8:	4623      	mov	r3, r4
 80072ea:	d807      	bhi.n	80072fc <memmove+0x20>
 80072ec:	1e43      	subs	r3, r0, #1
 80072ee:	42a1      	cmp	r1, r4
 80072f0:	d008      	beq.n	8007304 <memmove+0x28>
 80072f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072fa:	e7f8      	b.n	80072ee <memmove+0x12>
 80072fc:	4402      	add	r2, r0
 80072fe:	4601      	mov	r1, r0
 8007300:	428a      	cmp	r2, r1
 8007302:	d100      	bne.n	8007306 <memmove+0x2a>
 8007304:	bd10      	pop	{r4, pc}
 8007306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800730a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800730e:	e7f7      	b.n	8007300 <memmove+0x24>

08007310 <__malloc_lock>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__malloc_lock+0x8>)
 8007312:	f7ff bf7d 	b.w	8007210 <__retarget_lock_acquire_recursive>
 8007316:	bf00      	nop
 8007318:	20000698 	.word	0x20000698

0800731c <__malloc_unlock>:
 800731c:	4801      	ldr	r0, [pc, #4]	; (8007324 <__malloc_unlock+0x8>)
 800731e:	f7ff bf78 	b.w	8007212 <__retarget_lock_release_recursive>
 8007322:	bf00      	nop
 8007324:	20000698 	.word	0x20000698

08007328 <_realloc_r>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	4607      	mov	r7, r0
 800732c:	4614      	mov	r4, r2
 800732e:	460e      	mov	r6, r1
 8007330:	b921      	cbnz	r1, 800733c <_realloc_r+0x14>
 8007332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007336:	4611      	mov	r1, r2
 8007338:	f7ff b836 	b.w	80063a8 <_malloc_r>
 800733c:	b922      	cbnz	r2, 8007348 <_realloc_r+0x20>
 800733e:	f7fe ffe3 	bl	8006308 <_free_r>
 8007342:	4625      	mov	r5, r4
 8007344:	4628      	mov	r0, r5
 8007346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007348:	f000 f8f2 	bl	8007530 <_malloc_usable_size_r>
 800734c:	42a0      	cmp	r0, r4
 800734e:	d20f      	bcs.n	8007370 <_realloc_r+0x48>
 8007350:	4621      	mov	r1, r4
 8007352:	4638      	mov	r0, r7
 8007354:	f7ff f828 	bl	80063a8 <_malloc_r>
 8007358:	4605      	mov	r5, r0
 800735a:	2800      	cmp	r0, #0
 800735c:	d0f2      	beq.n	8007344 <_realloc_r+0x1c>
 800735e:	4631      	mov	r1, r6
 8007360:	4622      	mov	r2, r4
 8007362:	f7fe fe79 	bl	8006058 <memcpy>
 8007366:	4631      	mov	r1, r6
 8007368:	4638      	mov	r0, r7
 800736a:	f7fe ffcd 	bl	8006308 <_free_r>
 800736e:	e7e9      	b.n	8007344 <_realloc_r+0x1c>
 8007370:	4635      	mov	r5, r6
 8007372:	e7e7      	b.n	8007344 <_realloc_r+0x1c>

08007374 <_raise_r>:
 8007374:	291f      	cmp	r1, #31
 8007376:	b538      	push	{r3, r4, r5, lr}
 8007378:	4604      	mov	r4, r0
 800737a:	460d      	mov	r5, r1
 800737c:	d904      	bls.n	8007388 <_raise_r+0x14>
 800737e:	2316      	movs	r3, #22
 8007380:	6003      	str	r3, [r0, #0]
 8007382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800738a:	b112      	cbz	r2, 8007392 <_raise_r+0x1e>
 800738c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007390:	b94b      	cbnz	r3, 80073a6 <_raise_r+0x32>
 8007392:	4620      	mov	r0, r4
 8007394:	f000 f830 	bl	80073f8 <_getpid_r>
 8007398:	462a      	mov	r2, r5
 800739a:	4601      	mov	r1, r0
 800739c:	4620      	mov	r0, r4
 800739e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073a2:	f000 b817 	b.w	80073d4 <_kill_r>
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d00a      	beq.n	80073c0 <_raise_r+0x4c>
 80073aa:	1c59      	adds	r1, r3, #1
 80073ac:	d103      	bne.n	80073b6 <_raise_r+0x42>
 80073ae:	2316      	movs	r3, #22
 80073b0:	6003      	str	r3, [r0, #0]
 80073b2:	2001      	movs	r0, #1
 80073b4:	e7e7      	b.n	8007386 <_raise_r+0x12>
 80073b6:	2400      	movs	r4, #0
 80073b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073bc:	4628      	mov	r0, r5
 80073be:	4798      	blx	r3
 80073c0:	2000      	movs	r0, #0
 80073c2:	e7e0      	b.n	8007386 <_raise_r+0x12>

080073c4 <raise>:
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <raise+0xc>)
 80073c6:	4601      	mov	r1, r0
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	f7ff bfd3 	b.w	8007374 <_raise_r>
 80073ce:	bf00      	nop
 80073d0:	20000020 	.word	0x20000020

080073d4 <_kill_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d07      	ldr	r5, [pc, #28]	; (80073f4 <_kill_r+0x20>)
 80073d8:	2300      	movs	r3, #0
 80073da:	4604      	mov	r4, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	602b      	str	r3, [r5, #0]
 80073e2:	f7f9 fdb3 	bl	8000f4c <_kill>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d102      	bne.n	80073f0 <_kill_r+0x1c>
 80073ea:	682b      	ldr	r3, [r5, #0]
 80073ec:	b103      	cbz	r3, 80073f0 <_kill_r+0x1c>
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	bf00      	nop
 80073f4:	200006a0 	.word	0x200006a0

080073f8 <_getpid_r>:
 80073f8:	f7f9 bda0 	b.w	8000f3c <_getpid>

080073fc <__sread>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	460c      	mov	r4, r1
 8007400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007404:	f000 f89c 	bl	8007540 <_read_r>
 8007408:	2800      	cmp	r0, #0
 800740a:	bfab      	itete	ge
 800740c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800740e:	89a3      	ldrhlt	r3, [r4, #12]
 8007410:	181b      	addge	r3, r3, r0
 8007412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007416:	bfac      	ite	ge
 8007418:	6563      	strge	r3, [r4, #84]	; 0x54
 800741a:	81a3      	strhlt	r3, [r4, #12]
 800741c:	bd10      	pop	{r4, pc}

0800741e <__swrite>:
 800741e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007422:	461f      	mov	r7, r3
 8007424:	898b      	ldrh	r3, [r1, #12]
 8007426:	05db      	lsls	r3, r3, #23
 8007428:	4605      	mov	r5, r0
 800742a:	460c      	mov	r4, r1
 800742c:	4616      	mov	r6, r2
 800742e:	d505      	bpl.n	800743c <__swrite+0x1e>
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	2302      	movs	r3, #2
 8007436:	2200      	movs	r2, #0
 8007438:	f000 f868 	bl	800750c <_lseek_r>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	4628      	mov	r0, r5
 800744e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007452:	f000 b817 	b.w	8007484 <_write_r>

08007456 <__sseek>:
 8007456:	b510      	push	{r4, lr}
 8007458:	460c      	mov	r4, r1
 800745a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745e:	f000 f855 	bl	800750c <_lseek_r>
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	bf15      	itete	ne
 8007468:	6560      	strne	r0, [r4, #84]	; 0x54
 800746a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800746e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007472:	81a3      	strheq	r3, [r4, #12]
 8007474:	bf18      	it	ne
 8007476:	81a3      	strhne	r3, [r4, #12]
 8007478:	bd10      	pop	{r4, pc}

0800747a <__sclose>:
 800747a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747e:	f000 b813 	b.w	80074a8 <_close_r>
	...

08007484 <_write_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d07      	ldr	r5, [pc, #28]	; (80074a4 <_write_r+0x20>)
 8007488:	4604      	mov	r4, r0
 800748a:	4608      	mov	r0, r1
 800748c:	4611      	mov	r1, r2
 800748e:	2200      	movs	r2, #0
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f7f9 fd91 	bl	8000fba <_write>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_write_r+0x1e>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_write_r+0x1e>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	200006a0 	.word	0x200006a0

080074a8 <_close_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4d06      	ldr	r5, [pc, #24]	; (80074c4 <_close_r+0x1c>)
 80074ac:	2300      	movs	r3, #0
 80074ae:	4604      	mov	r4, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	602b      	str	r3, [r5, #0]
 80074b4:	f7f9 fd9d 	bl	8000ff2 <_close>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_close_r+0x1a>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_close_r+0x1a>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	200006a0 	.word	0x200006a0

080074c8 <_fstat_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d07      	ldr	r5, [pc, #28]	; (80074e8 <_fstat_r+0x20>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	f7f9 fd98 	bl	800100a <_fstat>
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	d102      	bne.n	80074e4 <_fstat_r+0x1c>
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	b103      	cbz	r3, 80074e4 <_fstat_r+0x1c>
 80074e2:	6023      	str	r3, [r4, #0]
 80074e4:	bd38      	pop	{r3, r4, r5, pc}
 80074e6:	bf00      	nop
 80074e8:	200006a0 	.word	0x200006a0

080074ec <_isatty_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d06      	ldr	r5, [pc, #24]	; (8007508 <_isatty_r+0x1c>)
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	f7f9 fd97 	bl	800102a <_isatty>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_isatty_r+0x1a>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_isatty_r+0x1a>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	200006a0 	.word	0x200006a0

0800750c <_lseek_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d07      	ldr	r5, [pc, #28]	; (800752c <_lseek_r+0x20>)
 8007510:	4604      	mov	r4, r0
 8007512:	4608      	mov	r0, r1
 8007514:	4611      	mov	r1, r2
 8007516:	2200      	movs	r2, #0
 8007518:	602a      	str	r2, [r5, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	f7f9 fd90 	bl	8001040 <_lseek>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_lseek_r+0x1e>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_lseek_r+0x1e>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	200006a0 	.word	0x200006a0

08007530 <_malloc_usable_size_r>:
 8007530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007534:	1f18      	subs	r0, r3, #4
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfbc      	itt	lt
 800753a:	580b      	ldrlt	r3, [r1, r0]
 800753c:	18c0      	addlt	r0, r0, r3
 800753e:	4770      	bx	lr

08007540 <_read_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d07      	ldr	r5, [pc, #28]	; (8007560 <_read_r+0x20>)
 8007544:	4604      	mov	r4, r0
 8007546:	4608      	mov	r0, r1
 8007548:	4611      	mov	r1, r2
 800754a:	2200      	movs	r2, #0
 800754c:	602a      	str	r2, [r5, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	f7f9 fd16 	bl	8000f80 <_read>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_read_r+0x1e>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_read_r+0x1e>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	200006a0 	.word	0x200006a0

08007564 <_init>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr

08007570 <_fini>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	bf00      	nop
 8007574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007576:	bc08      	pop	{r3}
 8007578:	469e      	mov	lr, r3
 800757a:	4770      	bx	lr
