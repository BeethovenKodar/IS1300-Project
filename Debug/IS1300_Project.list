
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007820  08007820  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007828  08007828  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007828  08007828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000084  080078b4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  080078b4  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234b9  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f89  00000000  00000000  0004356d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  000474f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00048e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bc3  00000000  00000000  0004a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df0c  00000000  00000000  000501b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b79  00000000  00000000  0006e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175c38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007588  00000000  00000000  00175c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007544 	.word	0x08007544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007544 	.word	0x08007544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a47      	ldr	r2, [pc, #284]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <MX_GPIO_Init+0x138>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a41      	ldr	r2, [pc, #260]	; (80006a0 <MX_GPIO_Init+0x138>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f001 fa39 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000608:	4826      	ldr	r0, [pc, #152]	; (80006a4 <MX_GPIO_Init+0x13c>)
 800060a:	f001 fa33 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f001 fa2c 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <MX_GPIO_Init+0x13c>)
 8000634:	f001 f874 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000638:	230c      	movs	r3, #12
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000648:	2307      	movs	r3, #7
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f001 f863 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800065a:	f248 0320 	movw	r3, #32800	; 0x8020
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 f853 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin;
 800067a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x13c>)
 8000694:	f001 f844 	bl	8001720 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fe71 	bl	8001394 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f83f 	bl	8000734 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f7ff ff57 	bl	8000568 <MX_GPIO_Init>
  MX_UART5_Init();
 80006ba:	f000 fd09 	bl	80010d0 <MX_UART5_Init>
  MX_SPI2_Init();
 80006be:	f000 f9bb 	bl	8000a38 <MX_SPI2_Init>
  MX_RTC_Init();
 80006c2:	f000 f8a3 	bl	800080c <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  display_init();
 80006c6:	f000 faff 	bl	8000cc8 <display_init>
  uint8_t time[8];
  uart_transmit((uint8_t*)"set time HH:MM:SS\r\n", 19);
 80006ca:	2113      	movs	r1, #19
 80006cc:	4817      	ldr	r0, [pc, #92]	; (800072c <main+0x84>)
 80006ce:	f000 fdc3 	bl	8001258 <uart_transmit>
  HAL_Delay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fe9e 	bl	8001414 <HAL_Delay>
  uart_receive(time, 8);
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2108      	movs	r1, #8
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fde0 	bl	80012a4 <uart_receive>
  HAL_Delay(5000);
 80006e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80006e8:	f000 fe94 	bl	8001414 <HAL_Delay>
  rtc_set_time(time);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f923 	bl	800093c <rtc_set_time>

  uint8_t buf[8];
  while (1) {
      rtc_get_time(buf);
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f963 	bl	80009c4 <rtc_get_time>
      display_write_line(buf, 8, 1);
 80006fe:	463b      	mov	r3, r7
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fb34 	bl	8000d72 <display_write_line>
      uart_transmit(buf, 8);
 800070a:	463b      	mov	r3, r7
 800070c:	2108      	movs	r1, #8
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fda2 	bl	8001258 <uart_transmit>
      HAL_Delay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fe7d 	bl	8001414 <HAL_Delay>
      uart_transmit((uint8_t*)"\r\n", 2);
 800071a:	2102      	movs	r1, #2
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <main+0x88>)
 800071e:	f000 fd9b 	bl	8001258 <uart_transmit>
      HAL_Delay(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f000 fe75 	bl	8001414 <HAL_Delay>
      rtc_get_time(buf);
 800072a:	e7e4      	b.n	80006f6 <main+0x4e>
 800072c:	0800755c 	.word	0x0800755c
 8000730:	08007570 	.word	0x08007570

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	; 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	; 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fc86 	bl	8006054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075a:	f001 f9b1 	bl	8001ac0 <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000764:	f000 f84c 	bl	8000800 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000768:	230a      	movs	r3, #10
 800076a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000776:	2301      	movs	r3, #1
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077e:	2302      	movs	r3, #2
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000786:	230a      	movs	r3, #10
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800078a:	2307      	movs	r3, #7
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f9e6 	bl	8001b6c <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007a6:	f000 f82b 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	2104      	movs	r1, #4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fdb8 	bl	8002338 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ce:	f000 f817 	bl	8000800 <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3758      	adds	r7, #88	; 0x58
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 fdf1 	bl	80013d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40012c00 	.word	0x40012c00

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <MX_RTC_Init+0xb0>)
 8000826:	4a26      	ldr	r2, [pc, #152]	; (80008c0 <MX_RTC_Init+0xb4>)
 8000828:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_RTC_Init+0xb0>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_RTC_Init+0xb0>)
 8000832:	227f      	movs	r2, #127	; 0x7f
 8000834:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_RTC_Init+0xb0>)
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_RTC_Init+0xb0>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_RTC_Init+0xb0>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_RTC_Init+0xb0>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_RTC_Init+0xb0>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <MX_RTC_Init+0xb0>)
 8000856:	f002 fc63 	bl	8003120 <HAL_RTC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000860:	f7ff ffce 	bl	8000800 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000864:	2300      	movs	r3, #0
 8000866:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000868:	2300      	movs	r3, #0
 800086a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800086c:	2300      	movs	r3, #0
 800086e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	480f      	ldr	r0, [pc, #60]	; (80008bc <MX_RTC_Init+0xb0>)
 8000880:	f002 fcc9 	bl	8003216 <HAL_RTC_SetTime>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800088a:	f7ff ffb9 	bl	8000800 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800088e:	2303      	movs	r3, #3
 8000890:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000892:	2312      	movs	r3, #18
 8000894:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8000896:	2322      	movs	r3, #34	; 0x22
 8000898:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 800089a:	2321      	movs	r3, #33	; 0x21
 800089c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_RTC_Init+0xb0>)
 80008a6:	f002 fdaf 	bl	8003408 <HAL_RTC_SetDate>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80008b0:	f7ff ffa6 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000538 	.word	0x20000538
 80008c0:	40002800 	.word	0x40002800

080008c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0a4      	sub	sp, #144	; 0x90
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2288      	movs	r2, #136	; 0x88
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f005 fbbd 	bl	8006054 <memset>
  if(rtcHandle->Instance==RTC)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_RTC_MspInit+0x5c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d118      	bne.n	8000916 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 ff56 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000902:	f7ff ff7d 	bl	8000800 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <HAL_RTC_MspInit+0x60>)
 8000908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <HAL_RTC_MspInit+0x60>)
 800090e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3790      	adds	r7, #144	; 0x90
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40002800 	.word	0x40002800
 8000924:	40021000 	.word	0x40021000

08000928 <RTC_Error>:
/**
 * @brief Error function called upon error generated
 * during RTC implementations.
 * @note Activates the LD2 led and loops infinitely.
 */
void RTC_Error() {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2120      	movs	r1, #32
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 f89e 	bl	8001a74 <HAL_GPIO_WritePin>
    while (1) {}
 8000938:	e7fe      	b.n	8000938 <RTC_Error+0x10>
	...

0800093c <rtc_set_time>:

/**
 * @brief Real Time Clock (RTC) function to set the RTC time.
 * @param tstr: time string of format "hh:mm:ss"
 */
void rtc_set_time(uint8_t tstr[]) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <rtc_set_time+0x80>)
 8000956:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, del);
 8000958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f005 fba2 	bl	80060a4 <strtok>
 8000960:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000962:	6a38      	ldr	r0, [r7, #32]
 8000964:	f005 fb3a 	bl	8005fdc <atoi>
 8000968:	4603      	mov	r3, r0
 800096a:	b2db      	uxtb	r3, r3
 800096c:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 800096e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000970:	2000      	movs	r0, #0
 8000972:	f005 fb97 	bl	80060a4 <strtok>
 8000976:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 8000978:	6a38      	ldr	r0, [r7, #32]
 800097a:	f005 fb2f 	bl	8005fdc <atoi>
 800097e:	4603      	mov	r3, r0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000986:	2000      	movs	r0, #0
 8000988:	f005 fb8c 	bl	80060a4 <strtok>
 800098c:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 800098e:	6a38      	ldr	r0, [r7, #32]
 8000990:	f005 fb24 	bl	8005fdc <atoi>
 8000994:	4603      	mov	r3, r0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	73bb      	strb	r3, [r7, #14]

    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <rtc_set_time+0x84>)
 80009a4:	f002 fc37 	bl	8003216 <HAL_RTC_SetTime>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <rtc_set_time+0x76>
	RTC_Error();
 80009ae:	f7ff ffbb 	bl	8000928 <RTC_Error>
    }
}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08007574 	.word	0x08007574
 80009c0:	20000538 	.word	0x20000538

080009c4 <rtc_get_time>:
  * @brief Real Time Clock (RTC) function to get the current time.
  * @param buffer: buffer to store the current time.
  * @note GetDate() is called to properly retreive the time.
  * @retval None.
  */
void rtc_get_time(uint8_t buffer[]) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <rtc_get_time+0x6c>)
 80009ea:	f002 fcb1 	bl	8003350 <HAL_RTC_GetTime>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <rtc_get_time+0x34>
	RTC_Error();
 80009f4:	f7ff ff98 	bl	8000928 <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <rtc_get_time+0x6c>)
 8000a02:	f002 fd88 	bl	8003516 <HAL_RTC_GetDate>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <rtc_get_time+0x4c>
	RTC_Error();
 8000a0c:	f7ff ff8c 	bl	8000928 <RTC_Error>
    }

    sprintf((char*)buffer, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000a10:	7b3b      	ldrb	r3, [r7, #12]
 8000a12:	461a      	mov	r2, r3
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
 8000a16:	4619      	mov	r1, r3
 8000a18:	7bbb      	ldrb	r3, [r7, #14]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	4905      	ldr	r1, [pc, #20]	; (8000a34 <rtc_get_time+0x70>)
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f005 fb1f 	bl	8006064 <siprintf>
}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000538 	.word	0x20000538
 8000a34:	08007578 	.word	0x08007578

08000a38 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <MX_SPI2_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a50:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a70:	2230      	movs	r2, #48	; 0x30
 8000a72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_SPI2_Init+0x74>)
 8000a9a:	f002 fe5b 	bl	8003754 <HAL_SPI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f7ff feac 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000055c 	.word	0x2000055c
 8000ab0:	40003800 	.word	0x40003800

08000ab4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <HAL_SPI_MspInit+0xb4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d144      	bne.n	8000b60 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	4a24      	ldr	r2, [pc, #144]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_SPI_MspInit+0xb8>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <HAL_SPI_MspInit+0xbc>)
 8000b3a:	f000 fdf1 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b50:	2305      	movs	r3, #5
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_SPI_MspInit+0xc0>)
 8000b5c:	f000 fde0 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000800 	.word	0x48000800
 8000b74:	48000400 	.word	0x48000400

08000b78 <SPI_Error>:
    0x38, //0x1f0803	#functions set:	   8 bit data length (RE = 0, IS = 0)
    0x0C, //0x1f0E00	#display on:	   display on, cursor on, blink on
};


void SPI_Error() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2120      	movs	r1, #32
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f000 ff76 	bl	8001a74 <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <set_startbyte>:
  * @brief Set the R/W bit and RS bit in the start byte.
  * @param nibble: the sequence to set.
  * @note  0b1|R/W|RS|0
  * @retval None
  */
void set_startbyte(uint8_t nibble) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
    instr[0] = ((instr[0] & 0x0F) | (nibble << 4));
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <set_startbyte+0x34>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	b25a      	sxtb	r2, r3
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <set_startbyte+0x34>)
 8000bb0:	701a      	strb	r2, [r3, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <set_byte>:
  * @brief Set the RS and R/W bit in the start byte.
  * @param nibble: the sequence to set.
  * @note  1|RS|R/W|0
  * @retval None
  */
void set_byte(uint8_t byte) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
    instr[1] = (byte & 0x0F);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <set_byte+0x2c>)
 8000bd8:	705a      	strb	r2, [r3, #1]
    instr[2] = ((byte & 0xF0) >> 4);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <set_byte+0x2c>)
 8000be2:	709a      	strb	r2, [r3, #2]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20000000 	.word	0x20000000

08000bf4 <display_set_backlight>:


void display_set_backlight(uint8_t color) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
    switch(color) {
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d013      	beq.n	8000c2c <display_set_backlight+0x38>
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	dc18      	bgt.n	8000c3a <display_set_backlight+0x46>
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <display_set_backlight+0x1e>
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d006      	beq.n	8000c1e <display_set_backlight+0x2a>
	  break;
	case 2:
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
	  break;
    }
}
 8000c10:	e013      	b.n	8000c3a <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Red_Backlight_GPIO_Port, Red_Backlight_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <display_set_backlight+0x50>)
 8000c18:	f000 ff2c 	bl	8001a74 <HAL_GPIO_WritePin>
	  break;
 8000c1c:	e00d      	b.n	8000c3a <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(White_Backlight_GPIO_Port, White_Backlight_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <display_set_backlight+0x50>)
 8000c26:	f000 ff25 	bl	8001a74 <HAL_GPIO_WritePin>
	  break;
 8000c2a:	e006      	b.n	8000c3a <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	4804      	ldr	r0, [pc, #16]	; (8000c44 <display_set_backlight+0x50>)
 8000c34:	f000 ff1e 	bl	8001a74 <HAL_GPIO_WritePin>
	  break;
 8000c38:	bf00      	nop
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	48000800 	.word	0x48000800

08000c48 <display_hw_reset>:


void display_hw_reset() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000c4c:	2005      	movs	r0, #5
 8000c4e:	f000 fbe1 	bl	8001414 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 ff0a 	bl	8001a74 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f000 fbd7 	bl	8001414 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 ff00 	bl	8001a74 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f000 fbcd 	bl	8001414 <HAL_Delay>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <send>:


void send() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    if (HAL_SPI_Transmit(&hspi2, (uint8_t*)instr, 3, 50) != HAL_OK) {
 8000c84:	2332      	movs	r3, #50	; 0x32
 8000c86:	2203      	movs	r2, #3
 8000c88:	4905      	ldr	r1, [pc, #20]	; (8000ca0 <send+0x20>)
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <send+0x24>)
 8000c8c:	f002 fe05 	bl	800389a <HAL_SPI_Transmit>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <send+0x1a>
	SPI_Error();
 8000c96:	f7ff ff6f 	bl	8000b78 <SPI_Error>
    }
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	2000055c 	.word	0x2000055c

08000ca8 <display_clear>:


void display_clear() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    set_startbyte(RS0_RW0);
 8000cac:	2301      	movs	r3, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff6c 	bl	8000b8c <set_startbyte>
    set_byte(CLEAR_DISPLAY);
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff83 	bl	8000bc4 <set_byte>
    send();
 8000cbe:	f7ff ffdf 	bl	8000c80 <send>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <display_init>:


void display_init() {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

    display_hw_reset();
 8000cce:	f7ff ffbb 	bl	8000c48 <display_hw_reset>

    display_set_backlight(WHITE);
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff8d 	bl	8000bf4 <display_set_backlight>

    set_startbyte(RS0_RW0);
 8000cda:	2301      	movs	r3, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff55 	bl	8000b8c <set_startbyte>
    for (int i = 0; i < 11; i++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	e00e      	b.n	8000d06 <display_init+0x3e>
	set_byte(init_seq[i]);
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <display_init+0x50>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff67 	bl	8000bc4 <set_byte>
	send();
 8000cf6:	f7ff ffc3 	bl	8000c80 <send>
	HAL_Delay(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f000 fb8a 	bl	8001414 <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3301      	adds	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0a      	cmp	r3, #10
 8000d0a:	dded      	ble.n	8000ce8 <display_init+0x20>
    }

    display_clear();
 8000d0c:	f7ff ffcc 	bl	8000ca8 <display_clear>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000004 	.word	0x20000004

08000d1c <display_set_line>:

void display_set_line(uint8_t line) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS0_RW0);
 8000d26:	2301      	movs	r3, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff2f 	bl	8000b8c <set_startbyte>
    set_byte(DDRAM_L[line - 1]);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <display_set_line+0x2c>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff44 	bl	8000bc4 <set_byte>
    send();
 8000d3c:	f7ff ffa0 	bl	8000c80 <send>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	08007588 	.word	0x08007588

08000d4c <display_write>:

void display_write(uint8_t c) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS1_RW0);
 8000d56:	2305      	movs	r3, #5
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff17 	bl	8000b8c <set_startbyte>
    set_byte(c);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff2f 	bl	8000bc4 <set_byte>
    send();
 8000d66:	f7ff ff8b 	bl	8000c80 <send>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <display_write_line>:

void display_write_line(uint8_t *buf, uint8_t len, uint8_t line) {
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	70fb      	strb	r3, [r7, #3]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	70bb      	strb	r3, [r7, #2]
    display_set_line(line);
 8000d82:	78bb      	ldrb	r3, [r7, #2]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ffc9 	bl	8000d1c <display_set_line>
    uint8_t i = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]
    while (i < len) {
 8000d8e:	e00c      	b.n	8000daa <display_write_line+0x38>
	display_write(buf[i++]);
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	73fa      	strb	r2, [r7, #15]
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffd4 	bl	8000d4c <display_write>
	HAL_Delay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 fb35 	bl	8001414 <HAL_Delay>
    while (i < len) {
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3ee      	bcc.n	8000d90 <display_write_line+0x1e>
    }
    while (i < 10) {
 8000db2:	e005      	b.n	8000dc0 <display_write_line+0x4e>
	display_write((uint8_t) 0x20);	//set remaining segments to blank
 8000db4:	2020      	movs	r0, #32
 8000db6:	f7ff ffc9 	bl	8000d4c <display_write>
	i++;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
    while (i < 10) {
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b09      	cmp	r3, #9
 8000dc4:	d9f6      	bls.n	8000db4 <display_write_line+0x42>
    }
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_MspInit+0x4c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6613      	str	r3, [r2, #96]	; 0x60
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	210f      	movs	r1, #15
 8000e0a:	f06f 0001 	mvn.w	r0, #1
 8000e0e:	f000 fbdd 	bl	80015cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2019      	movs	r0, #25
 8000e36:	f000 fbc9 	bl	80015cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e3a:	2019      	movs	r0, #25
 8000e3c:	f000 fbe2 	bl	8001604 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_InitTick+0x9c>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_InitTick+0x9c>)
 8000e46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_InitTick+0x9c>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e58:	f107 0210 	add.w	r2, r7, #16
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fc0e 	bl	8002684 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e68:	f001 fbf6 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8000e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_InitTick+0xa0>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <HAL_InitTick+0xa8>)
 8000e80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000e9e:	f002 ffcf 	bl	8003e40 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d104      	bne.n	8000eb2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ea8:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <HAL_InitTick+0xa4>)
 8000eaa:	f003 f82b 	bl	8003f04 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3730      	adds	r7, #48	; 0x30
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	200005c0 	.word	0x200005c0
 8000ec8:	40012c00 	.word	0x40012c00

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000efe:	f003 f871 	bl	8003fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200005c0 	.word	0x200005c0

08000f0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <UART5_IRQHandler+0x10>)
 8000f12:	f003 fb79 	bl	8004608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000060c 	.word	0x2000060c

08000f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	return 1;
 8000f24:	2301      	movs	r3, #1
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_kill>:

int _kill(int pid, int sig)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f3a:	f005 f853 	bl	8005fe4 <__errno>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2216      	movs	r2, #22
 8000f42:	601a      	str	r2, [r3, #0]
	return -1;
 8000f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_exit>:

void _exit (int status)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ffe7 	bl	8000f30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f62:	e7fe      	b.n	8000f62 <_exit+0x12>

08000f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
	}

return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
	}
	return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	605a      	str	r2, [r3, #4]
	return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f004 ffb8 	bl	8005fe4 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20018000 	.word	0x20018000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200000a0 	.word	0x200000a0
 80010a8:	200006a8 	.word	0x200006a8

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_UART5_Init+0x58>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_UART5_Init+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_UART5_Init+0x58>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_UART5_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_UART5_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_UART5_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_UART5_Init+0x58>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_UART5_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_UART5_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_UART5_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_UART5_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_UART5_Init+0x58>)
 8001114:	f003 f966 	bl	80043e4 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800111e:	f7ff fb6f 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000060c 	.word	0x2000060c
 800112c:	40005000 	.word	0x40005000

08001130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ac      	sub	sp, #176	; 0xb0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2288      	movs	r2, #136	; 0x88
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f004 ff7f 	bl	8006054 <memset>
  if(uartHandle->Instance==UART5)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a36      	ldr	r2, [pc, #216]	; (8001234 <HAL_UART_MspInit+0x104>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d164      	bne.n	800122a <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001160:	2310      	movs	r3, #16
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fb1b 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001178:	f7ff fb42 	bl	8000800 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_UART_MspInit+0x108>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <HAL_UART_MspInit+0x108>)
 8001182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001186:	6593      	str	r3, [r2, #88]	; 0x58
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_UART_MspInit+0x108>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_UART_MspInit+0x108>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_UART_MspInit+0x108>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <HAL_UART_MspInit+0x108>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <HAL_UART_MspInit+0x108>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <HAL_UART_MspInit+0x108>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_UART_MspInit+0x108>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011de:	2308      	movs	r3, #8
 80011e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e8:	4619      	mov	r1, r3
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <HAL_UART_MspInit+0x10c>)
 80011ec:	f000 fa98 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f0:	2304      	movs	r3, #4
 80011f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001208:	2308      	movs	r3, #8
 800120a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001212:	4619      	mov	r1, r3
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <HAL_UART_MspInit+0x110>)
 8001216:	f000 fa83 	bl	8001720 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2105      	movs	r1, #5
 800121e:	2035      	movs	r0, #53	; 0x35
 8001220:	f000 f9d4 	bl	80015cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001224:	2035      	movs	r0, #53	; 0x35
 8001226:	f000 f9ed 	bl	8001604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800122a:	bf00      	nop
 800122c:	37b0      	adds	r7, #176	; 0xb0
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005000 	.word	0x40005000
 8001238:	40021000 	.word	0x40021000
 800123c:	48000800 	.word	0x48000800
 8001240:	48000c00 	.word	0x48000c00

08001244 <UART_Error>:
/**
 * @brief Error function called upon error generated
 * during UART implementations.
 * @note Activates the LD2 led and loops infinitely.
 */
void UART_Error(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2120      	movs	r1, #32
 800124c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001250:	f000 fc10 	bl	8001a74 <HAL_GPIO_WritePin>
    while (1) {}
 8001254:	e7fe      	b.n	8001254 <UART_Error+0x10>
	...

08001258 <uart_transmit>:
  * @param size: amount of bytes to transmit.
  * @note Starting the interrupt handler for transmitting.
  * Not allowed to receive if transmission not finished.
  * @retval None
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
    if (UartDoneR == SET) {
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <uart_transmit+0x40>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d110      	bne.n	800128e <uart_transmit+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <uart_transmit+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <uart_transmit+0x44>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 8001278:	887b      	ldrh	r3, [r7, #2]
 800127a:	461a      	mov	r2, r3
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <uart_transmit+0x48>)
 8001280:	f003 f8fe 	bl	8004480 <HAL_UART_Transmit_IT>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <uart_transmit+0x36>
	    UART_Error();
 800128a:	f7ff ffdb 	bl	8001244 <UART_Error>
	}
    }
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000015 	.word	0x20000015
 800129c:	20000014 	.word	0x20000014
 80012a0:	2000060c 	.word	0x2000060c

080012a4 <uart_receive>:
  * @param size: amount of bytes to receive.
  * @note Starting the interrupt handler for receiving.
  * Not allowed to transmit if reception not finished.
  * @retval None.
  */
void uart_receive(uint8_t buffer[], uint16_t size) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
    if (UartDoneT == SET) {
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <uart_receive+0x40>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d110      	bne.n	80012da <uart_receive+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <uart_receive+0x44>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <uart_receive+0x40>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	461a      	mov	r2, r3
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <uart_receive+0x48>)
 80012cc:	f003 f946 	bl	800455c <HAL_UART_Receive_IT>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <uart_receive+0x36>
	    UART_Error();
 80012d6:	f7ff ffb5 	bl	8001244 <UART_Error>
	}
    }
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000014 	.word	0x20000014
 80012e8:	20000015 	.word	0x20000015
 80012ec:	2000060c 	.word	0x2000060c

080012f0 <HAL_UART_TxCpltCallback>:
  * @brief UART transfer completion callback.
  * @param UartHandle: UART handle to use.
  * @note Reporting that the tranmission over UART is complete.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_UART_TxCpltCallback+0x20>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
    UartDoneR = SET;
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_UART_TxCpltCallback+0x24>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000014 	.word	0x20000014
 8001314:	20000015 	.word	0x20000015

08001318 <HAL_UART_RxCpltCallback>:
* @brief UART reception completion callback.
* @param UartHandle: UART handle to use.
* @note Reporting that the reception over UART is complete.
* @retval None.
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    UartDoneR = SET;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_UART_RxCpltCallback+0x20>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
    UartDoneT = SET;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_UART_RxCpltCallback+0x24>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20000015 	.word	0x20000015
 800133c:	20000014 	.word	0x20000014

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff feb2 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <LoopForever+0x6>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	; (8001380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <LoopForever+0xe>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	; (800138c <LoopForever+0x16>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f004 fe3f 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff f999 	bl	80006a8 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001378:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001384:	08007830 	.word	0x08007830
  ldr r2, =_sbss
 8001388:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800138c:	200006a4 	.word	0x200006a4

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <HAL_Init+0x3c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x3c>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f903 	bl	80015b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b0:	200f      	movs	r0, #15
 80013b2:	f7ff fd35 	bl	8000e20 <HAL_InitTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	e001      	b.n	80013c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c2:	f7ff fd05 	bl	8000dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40022000 	.word	0x40022000

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000001c 	.word	0x2000001c
 80013f8:	20000690 	.word	0x20000690

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000690 	.word	0x20000690

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000001c 	.word	0x2000001c

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff4c 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015de:	f7ff ff61 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	6978      	ldr	r0, [r7, #20]
 80015ea:	f7ff ffb1 	bl	8001550 <NVIC_EncodePriority>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff80 	bl	80014fc <__NVIC_SetPriority>
}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff54 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d008      	beq.n	800164a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e022      	b.n	8001690 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020e 	bic.w	r2, r2, #14
 8001658:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f003 021c 	and.w	r2, r3, #28
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d005      	beq.n	80016c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2204      	movs	r2, #4
 80016b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e029      	b.n	8001714 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 020e 	bic.w	r2, r2, #14
 80016ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f003 021c 	and.w	r2, r3, #28
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
    }
  }
  return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e17f      	b.n	8001a30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8171 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d118      	bne.n	8001800 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017d4:	2201      	movs	r2, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	f003 0201 	and.w	r2, r3, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b03      	cmp	r3, #3
 800180a:	d017      	beq.n	800183c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d123      	bne.n	8001890 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80ac 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	; 0x60
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ea:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x242>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <HAL_GPIO_Init+0x338>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x23e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4e      	ldr	r2, [pc, #312]	; (8001a5c <HAL_GPIO_Init+0x33c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x23a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4d      	ldr	r2, [pc, #308]	; (8001a60 <HAL_GPIO_Init+0x340>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x236>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <HAL_GPIO_Init+0x344>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x232>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4b      	ldr	r2, [pc, #300]	; (8001a68 <HAL_GPIO_Init+0x348>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x22e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4a      	ldr	r2, [pc, #296]	; (8001a6c <HAL_GPIO_Init+0x34c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x22a>
 8001946:	2306      	movs	r3, #6
 8001948:	e00c      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194a:	2307      	movs	r3, #7
 800194c:	e00a      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194e:	2305      	movs	r3, #5
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001952:	2304      	movs	r3, #4
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001962:	2300      	movs	r3, #0
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001974:	4937      	ldr	r1, [pc, #220]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_GPIO_Init+0x350>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a6:	4a32      	ldr	r2, [pc, #200]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_GPIO_Init+0x350>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <HAL_GPIO_Init+0x350>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f ae78 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	48000c00 	.word	0x48000c00
 8001a64:	48001000 	.word	0x48001000
 8001a68:	48001400 	.word	0x48001400
 8001a6c:	48001800 	.word	0x48001800
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_PWREx_GetVoltageRange+0x18>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40007000 	.word	0x40007000

08001ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ace:	d130      	bne.n	8001b32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001adc:	d038      	beq.n	8001b50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2232      	movs	r2, #50	; 0x32
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0c9b      	lsrs	r3, r3, #18
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b04:	e002      	b.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b18:	d102      	bne.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f2      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2c:	d110      	bne.n	8001b50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e00f      	b.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3e:	d007      	beq.n	8001b50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b48:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40007000 	.word	0x40007000
 8001b64:	20000010 	.word	0x20000010
 8001b68:	431bde83 	.word	0x431bde83

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e3d4      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4ba1      	ldr	r3, [pc, #644]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4b9e      	ldr	r3, [pc, #632]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80e4 	beq.w	8001d68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x4a>
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	f040 808b 	bne.w	8001cc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	f040 8087 	bne.w	8001cc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb6:	4b93      	ldr	r3, [pc, #588]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x62>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e3ac      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1a      	ldr	r2, [r3, #32]
 8001bd2:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <HAL_RCC_OscConfig+0x7c>
 8001bde:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be6:	e005      	b.n	8001bf4 <HAL_RCC_OscConfig+0x88>
 8001be8:	4b86      	ldr	r3, [pc, #536]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d223      	bcs.n	8001c40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fd73 	bl	80026e8 <RCC_SetFlashLatencyFromMSIRange>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e38d      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0c:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7c      	ldr	r2, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4977      	ldr	r1, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	4972      	ldr	r1, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	e025      	b.n	8001c8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c40:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a6f      	ldr	r2, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	496a      	ldr	r1, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5e:	4b69      	ldr	r3, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	4965      	ldr	r1, [pc, #404]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fd33 	bl	80026e8 <RCC_SetFlashLatencyFromMSIRange>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e34d      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8c:	f000 fc36 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	495a      	ldr	r1, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x29c>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_OscConfig+0x2a0>)
 8001caa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cac:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <HAL_RCC_OscConfig+0x2a4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f8b5 	bl	8000e20 <HAL_InitTick>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d052      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	e331      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d032      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fb90 	bl	80013fc <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fb8c 	bl	80013fc <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e31a      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf2:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a40      	ldr	r2, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	493b      	ldr	r1, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	4936      	ldr	r1, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
 8001d30:	e01a      	b.n	8001d68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a33      	ldr	r2, [pc, #204]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fb5d 	bl	80013fc <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d46:	f7ff fb59 	bl	80013fc <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e2e7      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x1da>
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d074      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x21a>
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d10e      	bne.n	8001d9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d10b      	bne.n	8001d9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d064      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d160      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e2c4      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x24a>
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e01d      	b.n	8001df2 <HAL_RCC_OscConfig+0x286>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x26e>
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0x286>
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01c      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff faff 	bl	80013fc <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e00:	e011      	b.n	8001e26 <HAL_RCC_OscConfig+0x2ba>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	0800758c 	.word	0x0800758c
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff faf2 	bl	80013fc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e280      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e26:	4baf      	ldr	r3, [pc, #700]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x2a8>
 8001e32:	e014      	b.n	8001e5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fae2 	bl	80013fc <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fade 	bl	80013fc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e26c      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4e:	4ba5      	ldr	r3, [pc, #660]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2d0>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d060      	beq.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x310>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d119      	bne.n	8001eaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d116      	bne.n	8001eaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7c:	4b99      	ldr	r3, [pc, #612]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x328>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e249      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b93      	ldr	r3, [pc, #588]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	4990      	ldr	r1, [pc, #576]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea8:	e040      	b.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d023      	beq.n	8001efa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb2:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a8b      	ldr	r2, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fa9d 	bl	80013fc <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fa99 	bl	80013fc <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e227      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed8:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	497c      	ldr	r1, [pc, #496]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
 8001ef8:	e018      	b.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a79      	ldr	r2, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa79 	bl	80013fc <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7ff fa75 	bl	80013fc <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e203      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f20:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d03c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f46:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa54 	bl	80013fc <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fa50 	bl	80013fc <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1de      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCC_OscConfig+0x3ec>
 8001f78:	e01b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fa37 	bl	80013fc <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f92:	f7ff fa33 	bl	80013fc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1c1      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ef      	bne.n	8001f92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80a6 	beq.w	800210c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc4:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10d      	bne.n	8001fec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
 8001fdc:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d118      	bne.n	800202a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002004:	f7ff f9fa 	bl	80013fc <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200c:	f7ff f9f6 	bl	80013fc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e184      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <HAL_RCC_OscConfig+0x4d8>
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002042:	e024      	b.n	800208e <HAL_RCC_OscConfig+0x522>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d110      	bne.n	800206e <HAL_RCC_OscConfig+0x502>
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206c:	e00f      	b.n	800208e <HAL_RCC_OscConfig+0x522>
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff f9b1 	bl	80013fc <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff f9ad 	bl	80013fc <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e139      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ed      	beq.n	800209e <HAL_RCC_OscConfig+0x532>
 80020c2:	e01a      	b.n	80020fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f99a 	bl	80013fc <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ca:	e00f      	b.n	80020ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f996 	bl	80013fc <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d906      	bls.n	80020ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e122      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	4b90      	ldr	r3, [pc, #576]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e8      	bne.n	80020cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b8b      	ldr	r3, [pc, #556]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4a8a      	ldr	r2, [pc, #552]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8108 	beq.w	8002326 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	2b02      	cmp	r3, #2
 800211c:	f040 80d0 	bne.w	80022c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002120:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	429a      	cmp	r2, r3
 8002132:	d130      	bne.n	8002196 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	3b01      	subs	r3, #1
 8002140:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d127      	bne.n	8002196 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002150:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d11f      	bne.n	8002196 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002160:	2a07      	cmp	r2, #7
 8002162:	bf14      	ite	ne
 8002164:	2201      	movne	r2, #1
 8002166:	2200      	moveq	r2, #0
 8002168:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216a:	4293      	cmp	r3, r2
 800216c:	d113      	bne.n	8002196 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d109      	bne.n	8002196 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d06e      	beq.n	8002274 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d069      	beq.n	8002270 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800219c:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021a8:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b7      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021b8:	4b5d      	ldr	r3, [pc, #372]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a5c      	ldr	r2, [pc, #368]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80021be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c4:	f7ff f91a 	bl	80013fc <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff f916 	bl	80013fc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0a4      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021de:	4b54      	ldr	r3, [pc, #336]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ea:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <HAL_RCC_OscConfig+0x7c8>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021fa:	3a01      	subs	r2, #1
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002204:	0212      	lsls	r2, r2, #8
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800220c:	0852      	lsrs	r2, r2, #1
 800220e:	3a01      	subs	r2, #1
 8002210:	0552      	lsls	r2, r2, #21
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002218:	0852      	lsrs	r2, r2, #1
 800221a:	3a01      	subs	r2, #1
 800221c:	0652      	lsls	r2, r2, #25
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002224:	0912      	lsrs	r2, r2, #4
 8002226:	0452      	lsls	r2, r2, #17
 8002228:	430a      	orrs	r2, r1
 800222a:	4941      	ldr	r1, [pc, #260]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800223c:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a3b      	ldr	r2, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002248:	f7ff f8d8 	bl	80013fc <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f8d4 	bl	80013fc <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e062      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226e:	e05a      	b.n	8002326 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e059      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002274:	4b2e      	ldr	r3, [pc, #184]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d152      	bne.n	8002326 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2a      	ldr	r2, [pc, #168]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002296:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002298:	f7ff f8b0 	bl	80013fc <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff f8ac 	bl	80013fc <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e03a      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x734>
 80022be:	e032      	b.n	8002326 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d02d      	beq.n	8002322 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022e4:	f023 0303 	bic.w	r3, r3, #3
 80022e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 80022f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff f87f 	bl	80013fc <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff f87b 	bl	80013fc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e009      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_OscConfig+0x7c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x796>
 8002320:	e001      	b.n	8002326 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	f99d808c 	.word	0xf99d808c

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0c8      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b66      	ldr	r3, [pc, #408]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4961      	ldr	r1, [pc, #388]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b0      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d04c      	beq.n	8002422 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002390:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d121      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e09e      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a8:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d115      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e092      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e086      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e07e      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 0203 	bic.w	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	493f      	ldr	r1, [pc, #252]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f2:	f7ff f803 	bl	80013fc <HAL_GetTick>
 80023f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe ffff 	bl	80013fc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e066      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 020c 	and.w	r2, r3, #12
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	429a      	cmp	r2, r3
 8002420:	d1eb      	bne.n	80023fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	492c      	ldr	r1, [pc, #176]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d210      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4924      	ldr	r1, [pc, #144]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e036      	b.n	80024de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4918      	ldr	r1, [pc, #96]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4910      	ldr	r1, [pc, #64]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ae:	f000 f825 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_ClockConfig+0x1b4>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490c      	ldr	r1, [pc, #48]	; (80024f0 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fca4 	bl	8000e20 <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
 80024da:	72fb      	strb	r3, [r7, #11]

  return status;
 80024dc:	7afb      	ldrb	r3, [r7, #11]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	0800758c 	.word	0x0800758c
 80024f4:	20000010 	.word	0x20000010
 80024f8:	20000018 	.word	0x20000018

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250a:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x34>
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d121      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d11e      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002530:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e005      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002558:	4a2b      	ldr	r2, [pc, #172]	; (8002608 <HAL_RCC_GetSysClockFreq+0x10c>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10d      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d102      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_GetSysClockFreq+0x110>)
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e004      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d101      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_RCC_GetSysClockFreq+0x114>)
 8002582:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d134      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258a:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d003      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0xac>
 80025a0:	e005      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_GetSysClockFreq+0x110>)
 80025a4:	617b      	str	r3, [r7, #20]
      break;
 80025a6:	e005      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_GetSysClockFreq+0x114>)
 80025aa:	617b      	str	r3, [r7, #20]
      break;
 80025ac:	e002      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	617b      	str	r3, [r7, #20]
      break;
 80025b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	3301      	adds	r3, #1
 80025c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	fb02 f203 	mul.w	r2, r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_RCC_GetSysClockFreq+0x108>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	0e5b      	lsrs	r3, r3, #25
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	3301      	adds	r3, #1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025f4:	69bb      	ldr	r3, [r7, #24]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	080075a4 	.word	0x080075a4
 800260c:	00f42400 	.word	0x00f42400
 8002610:	007a1200 	.word	0x007a1200

08002614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000010 	.word	0x20000010

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002630:	f7ff fff0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4904      	ldr	r1, [pc, #16]	; (8002654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	0800759c 	.word	0x0800759c

08002658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800265c:	f7ff ffda 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0adb      	lsrs	r3, r3, #11
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4904      	ldr	r1, [pc, #16]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	0800759c 	.word	0x0800759c

08002684 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	220f      	movs	r2, #15
 8002692:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_RCC_GetClockConfig+0x5c>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_GetClockConfig+0x5c>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_GetClockConfig+0x5c>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_RCC_GetClockConfig+0x60>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0207 	and.w	r2, r3, #7
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40022000 	.word	0x40022000

080026e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026f4:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002700:	f7ff f9d0 	bl	8001aa4 <HAL_PWREx_GetVoltageRange>
 8002704:	6178      	str	r0, [r7, #20]
 8002706:	e014      	b.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002712:	6593      	str	r3, [r2, #88]	; 0x58
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002720:	f7ff f9c0 	bl	8001aa4 <HAL_PWREx_GetVoltageRange>
 8002724:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002738:	d10b      	bne.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d919      	bls.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2ba0      	cmp	r3, #160	; 0xa0
 8002744:	d902      	bls.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002746:	2302      	movs	r3, #2
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	e013      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	e010      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b80      	cmp	r3, #128	; 0x80
 8002756:	d902      	bls.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002758:	2303      	movs	r3, #3
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	e00a      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d102      	bne.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002764:	2302      	movs	r3, #2
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e004      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b70      	cmp	r3, #112	; 0x70
 800276e:	d101      	bne.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 0207 	bic.w	r2, r3, #7
 800277c:	4909      	ldr	r1, [pc, #36]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40022000 	.word	0x40022000

080027a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027b0:	2300      	movs	r3, #0
 80027b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027b4:	2300      	movs	r3, #0
 80027b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d041      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027cc:	d02a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027d2:	d824      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027d8:	d008      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027de:	d81e      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e8:	d010      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ea:	e018      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027ec:	4b86      	ldr	r3, [pc, #536]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a85      	ldr	r2, [pc, #532]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f8:	e015      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fabb 	bl	8002d7c <RCCEx_PLLSAI1_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800280a:	e00c      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3320      	adds	r3, #32
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fba6 	bl	8002f64 <RCCEx_PLLSAI2_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800281c:	e003      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	74fb      	strb	r3, [r7, #19]
      break;
 8002822:	e000      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10b      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800282c:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283a:	4973      	ldr	r1, [pc, #460]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002842:	e001      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d041      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800285c:	d02a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800285e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002862:	d824      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002868:	d008      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800286a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800286e:	d81e      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d010      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800287a:	e018      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800287c:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a61      	ldr	r2, [pc, #388]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002888:	e015      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fa73 	bl	8002d7c <RCCEx_PLLSAI1_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800289a:	e00c      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3320      	adds	r3, #32
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fb5e 	bl	8002f64 <RCCEx_PLLSAI2_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	74fb      	strb	r3, [r7, #19]
      break;
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028bc:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ca:	494f      	ldr	r1, [pc, #316]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028d2:	e001      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a0 	beq.w	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6593      	str	r3, [r2, #88]	; 0x58
 800290c:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002918:	2301      	movs	r3, #1
 800291a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002928:	f7fe fd68 	bl	80013fc <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800292e:	e009      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002930:	f7fe fd64 	bl	80013fc <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	74fb      	strb	r3, [r7, #19]
        break;
 8002942:	e005      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002944:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d15c      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002956:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002960:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01f      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	d019      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd23 	bl	80013fc <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b8:	e00b      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe fd1f 	bl	80013fc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d902      	bls.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	74fb      	strb	r3, [r7, #19]
            break;
 80029d0:	e006      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ec      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f6:	4904      	ldr	r1, [pc, #16]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029fe:	e009      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	74bb      	strb	r3, [r7, #18]
 8002a04:	e006      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a14:	7c7b      	ldrb	r3, [r7, #17]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b9e      	ldr	r3, [pc, #632]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	4a9d      	ldr	r2, [pc, #628]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a32:	4b98      	ldr	r3, [pc, #608]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f023 0203 	bic.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	4994      	ldr	r1, [pc, #592]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a54:	4b8f      	ldr	r3, [pc, #572]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 020c 	bic.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	498c      	ldr	r1, [pc, #560]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a76:	4b87      	ldr	r3, [pc, #540]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	4983      	ldr	r1, [pc, #524]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a98:	4b7e      	ldr	r3, [pc, #504]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	497b      	ldr	r1, [pc, #492]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac8:	4972      	ldr	r1, [pc, #456]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002adc:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	496a      	ldr	r1, [pc, #424]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	4961      	ldr	r1, [pc, #388]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b20:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	4959      	ldr	r1, [pc, #356]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b42:	4b54      	ldr	r3, [pc, #336]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	4950      	ldr	r1, [pc, #320]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b64:	4b4b      	ldr	r3, [pc, #300]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	4948      	ldr	r1, [pc, #288]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b86:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	493f      	ldr	r1, [pc, #252]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d028      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb6:	4937      	ldr	r1, [pc, #220]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a31      	ldr	r2, [pc, #196]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd2:	60d3      	str	r3, [r2, #12]
 8002bd4:	e011      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bde:	d10c      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f8c8 	bl	8002d7c <RCCEx_PLLSAI1_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d028      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	491f      	ldr	r1, [pc, #124]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c24:	d106      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c30:	60d3      	str	r3, [r2, #12]
 8002c32:	e011      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f899 	bl	8002d7c <RCCEx_PLLSAI1_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02b      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	4908      	ldr	r1, [pc, #32]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c82:	d109      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a02      	ldr	r2, [pc, #8]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8e:	60d3      	str	r3, [r2, #12]
 8002c90:	e014      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f867 	bl	8002d7c <RCCEx_PLLSAI1_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02f      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd6:	4928      	ldr	r1, [pc, #160]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	2102      	movs	r1, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f844 	bl	8002d7c <RCCEx_PLLSAI1_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d014      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	74bb      	strb	r3, [r7, #18]
 8002d02:	e011      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3320      	adds	r3, #32
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f925 	bl	8002f64 <RCCEx_PLLSAI2_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d42:	490d      	ldr	r1, [pc, #52]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d66:	4904      	ldr	r1, [pc, #16]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000

08002d7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8a:	4b75      	ldr	r3, [pc, #468]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d018      	beq.n	8002dc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d96:	4b72      	ldr	r3, [pc, #456]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0203 	and.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d10d      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
       ||
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dae:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d047      	beq.n	8002e52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e044      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d018      	beq.n	8002e02 <RCCEx_PLLSAI1_Config+0x86>
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d825      	bhi.n	8002e20 <RCCEx_PLLSAI1_Config+0xa4>
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d002      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x62>
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d009      	beq.n	8002df0 <RCCEx_PLLSAI1_Config+0x74>
 8002ddc:	e020      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dde:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11d      	bne.n	8002e26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e01a      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df0:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e00:	e013      	b.n	8002e2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e02:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e0e:	4b54      	ldr	r3, [pc, #336]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e1e:	e006      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      break;
 8002e24:	e004      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	4944      	ldr	r1, [pc, #272]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d17d      	bne.n	8002f54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e58:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a40      	ldr	r2, [pc, #256]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fe faca 	bl	80013fc <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e6a:	e009      	b.n	8002e80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6c:	f7fe fac6 	bl	80013fc <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d902      	bls.n	8002e80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e7e:	e005      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e80:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ef      	bne.n	8002e6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d160      	bne.n	8002f54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6892      	ldr	r2, [r2, #8]
 8002ea8:	0211      	lsls	r1, r2, #8
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	0912      	lsrs	r2, r2, #4
 8002eb0:	0452      	lsls	r2, r2, #17
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	492a      	ldr	r1, [pc, #168]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	610b      	str	r3, [r1, #16]
 8002eba:	e027      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d112      	bne.n	8002ee8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	0211      	lsls	r1, r2, #8
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6912      	ldr	r2, [r2, #16]
 8002ed8:	0852      	lsrs	r2, r2, #1
 8002eda:	3a01      	subs	r2, #1
 8002edc:	0552      	lsls	r2, r2, #21
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	491f      	ldr	r1, [pc, #124]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	610b      	str	r3, [r1, #16]
 8002ee6:	e011      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6892      	ldr	r2, [r2, #8]
 8002ef8:	0211      	lsls	r1, r2, #8
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6952      	ldr	r2, [r2, #20]
 8002efe:	0852      	lsrs	r2, r2, #1
 8002f00:	3a01      	subs	r2, #1
 8002f02:	0652      	lsls	r2, r2, #25
 8002f04:	430a      	orrs	r2, r1
 8002f06:	4916      	ldr	r1, [pc, #88]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe fa70 	bl	80013fc <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f1e:	e009      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f20:	f7fe fa6c 	bl	80013fc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d902      	bls.n	8002f34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	73fb      	strb	r3, [r7, #15]
          break;
 8002f32:	e005      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ef      	beq.n	8002f20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	4904      	ldr	r1, [pc, #16]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000

08002f64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f72:	4b6a      	ldr	r3, [pc, #424]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d018      	beq.n	8002fb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f7e:	4b67      	ldr	r3, [pc, #412]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0203 	and.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d10d      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
       ||
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f96:	4b61      	ldr	r3, [pc, #388]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d047      	beq.n	800303a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e044      	b.n	800303a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d018      	beq.n	8002fea <RCCEx_PLLSAI2_Config+0x86>
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d825      	bhi.n	8003008 <RCCEx_PLLSAI2_Config+0xa4>
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <RCCEx_PLLSAI2_Config+0x62>
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d009      	beq.n	8002fd8 <RCCEx_PLLSAI2_Config+0x74>
 8002fc4:	e020      	b.n	8003008 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fc6:	4b55      	ldr	r3, [pc, #340]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11d      	bne.n	800300e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd6:	e01a      	b.n	800300e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fd8:	4b50      	ldr	r3, [pc, #320]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d116      	bne.n	8003012 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe8:	e013      	b.n	8003012 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fea:	4b4c      	ldr	r3, [pc, #304]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003006:	e006      	b.n	8003016 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e004      	b.n	8003018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003016:	bf00      	nop
    }

    if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	430b      	orrs	r3, r1
 8003034:	4939      	ldr	r1, [pc, #228]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d167      	bne.n	8003110 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a35      	ldr	r2, [pc, #212]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fe f9d6 	bl	80013fc <HAL_GetTick>
 8003050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003052:	e009      	b.n	8003068 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003054:	f7fe f9d2 	bl	80013fc <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d902      	bls.n	8003068 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	73fb      	strb	r3, [r7, #15]
        break;
 8003066:	e005      	b.n	8003074 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ef      	bne.n	8003054 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d14a      	bne.n	8003110 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	0211      	lsls	r1, r2, #8
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68d2      	ldr	r2, [r2, #12]
 8003096:	0912      	lsrs	r2, r2, #4
 8003098:	0452      	lsls	r2, r2, #17
 800309a:	430a      	orrs	r2, r1
 800309c:	491f      	ldr	r1, [pc, #124]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	614b      	str	r3, [r1, #20]
 80030a2:	e011      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6912      	ldr	r2, [r2, #16]
 80030ba:	0852      	lsrs	r2, r2, #1
 80030bc:	3a01      	subs	r2, #1
 80030be:	0652      	lsls	r2, r2, #25
 80030c0:	430a      	orrs	r2, r1
 80030c2:	4916      	ldr	r1, [pc, #88]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe f992 	bl	80013fc <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030da:	e009      	b.n	80030f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030dc:	f7fe f98e 	bl	80013fc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	73fb      	strb	r3, [r7, #15]
          break;
 80030ee:	e005      	b.n	80030fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ef      	beq.n	80030dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	4904      	ldr	r1, [pc, #16]	; (800311c <RCCEx_PLLSAI2_Config+0x1b8>)
 800310c:	4313      	orrs	r3, r2
 800310e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000

08003120 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d06c      	beq.n	800320c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fbbc 	bl	80008c4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	22ca      	movs	r2, #202	; 0xca
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2253      	movs	r2, #83	; 0x53
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fa49 	bl	80035fc <RTC_EnterInitMode>
 800316a:	4603      	mov	r3, r0
 800316c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d14b      	bne.n	800320c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003186:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	041a      	lsls	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fa4d 	bl	8003664 <RTC_ExitInitMode>
 80031ca:	4603      	mov	r3, r0
 80031cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11b      	bne.n	800320c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0203 	bic.w	r2, r2, #3
 80031e2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b087      	sub	sp, #28
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_RTC_SetTime+0x1a>
 800322c:	2302      	movs	r3, #2
 800322e:	e08b      	b.n	8003348 <HAL_RTC_SetTime+0x132>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22ca      	movs	r2, #202	; 0xca
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2253      	movs	r2, #83	; 0x53
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f9d3 	bl	80035fc <RTC_EnterInitMode>
 8003256:	4603      	mov	r3, r0
 8003258:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d163      	bne.n	8003328 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d126      	bne.n	80032b4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fa2e 	bl	80036e0 <RTC_ByteToBcd2>
 8003284:	4603      	mov	r3, r0
 8003286:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fa27 	bl	80036e0 <RTC_ByteToBcd2>
 8003292:	4603      	mov	r3, r0
 8003294:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003296:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	789b      	ldrb	r3, [r3, #2]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fa1f 	bl	80036e0 <RTC_ByteToBcd2>
 80032a2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032a4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	78db      	ldrb	r3, [r3, #3]
 80032ac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e018      	b.n	80032e6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2200      	movs	r2, #0
 80032c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032d4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032da:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	78db      	ldrb	r3, [r3, #3]
 80032e0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003304:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	431a      	orrs	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f9a0 	bl	8003664 <RTC_ExitInitMode>
 8003324:	4603      	mov	r3, r0
 8003326:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	22ff      	movs	r2, #255	; 0xff
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d103      	bne.n	800333e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003346:	7cfb      	ldrb	r3, [r7, #19]
}
 8003348:	4618      	mov	r0, r3
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd90      	pop	{r4, r7, pc}

08003350 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800337e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003382:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	0d9b      	lsrs	r3, r3, #22
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11a      	bne.n	80033fe <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f9a7 	bl	8003720 <RTC_Bcd2ToByte>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f99e 	bl	8003720 <RTC_Bcd2ToByte>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	789b      	ldrb	r3, [r3, #2]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f995 	bl	8003720 <RTC_Bcd2ToByte>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_RTC_SetDate+0x1a>
 800341e:	2302      	movs	r3, #2
 8003420:	e075      	b.n	800350e <HAL_RTC_SetDate+0x106>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10e      	bne.n	8003456 <HAL_RTC_SetDate+0x4e>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	f023 0310 	bic.w	r3, r3, #16
 800344c:	b2db      	uxtb	r3, r3
 800344e:	330a      	adds	r3, #10
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11c      	bne.n	8003496 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	78db      	ldrb	r3, [r3, #3]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f93d 	bl	80036e0 <RTC_ByteToBcd2>
 8003466:	4603      	mov	r3, r0
 8003468:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f936 	bl	80036e0 <RTC_ByteToBcd2>
 8003474:	4603      	mov	r3, r0
 8003476:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003478:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	789b      	ldrb	r3, [r3, #2]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f92e 	bl	80036e0 <RTC_ByteToBcd2>
 8003484:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003486:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e00e      	b.n	80034b4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	78db      	ldrb	r3, [r3, #3]
 800349a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034a2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	22ca      	movs	r2, #202	; 0xca
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2253      	movs	r2, #83	; 0x53
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f899 	bl	80035fc <RTC_EnterInitMode>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10c      	bne.n	80034ee <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034e2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f8bd 	bl	8003664 <RTC_ExitInitMode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	22ff      	movs	r2, #255	; 0xff
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d103      	bne.n	8003504 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800350c:	7cfb      	ldrb	r3, [r7, #19]
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}

08003516 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800352c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003530:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	0b5b      	lsrs	r3, r3, #13
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11a      	bne.n	80035a6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f8d3 	bl	8003720 <RTC_Bcd2ToByte>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f8ca 	bl	8003720 <RTC_Bcd2ToByte>
 800358c:	4603      	mov	r3, r0
 800358e:	461a      	mov	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f8c1 	bl	8003720 <RTC_Bcd2ToByte>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80035c8:	f7fd ff18 	bl	80013fc <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035ce:	e009      	b.n	80035e4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035d0:	f7fd ff14 	bl	80013fc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035de:	d901      	bls.n	80035e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e007      	b.n	80035f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d120      	bne.n	8003658 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800361e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003620:	f7fd feec 	bl	80013fc <HAL_GetTick>
 8003624:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003626:	e00d      	b.n	8003644 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003628:	f7fd fee8 	bl	80013fc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003636:	d905      	bls.n	8003644 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2203      	movs	r2, #3
 8003640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <RTC_EnterInitMode+0x5c>
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d1e7      	bne.n	8003628 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <RTC_ExitInitMode+0x78>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a19      	ldr	r2, [pc, #100]	; (80036dc <RTC_ExitInitMode+0x78>)
 8003676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800367a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <RTC_ExitInitMode+0x78>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10c      	bne.n	80036a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff91 	bl	80035b0 <HAL_RTC_WaitForSynchro>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01e      	beq.n	80036d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2203      	movs	r2, #3
 8003698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	e017      	b.n	80036d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <RTC_ExitInitMode+0x78>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4a0d      	ldr	r2, [pc, #52]	; (80036dc <RTC_ExitInitMode+0x78>)
 80036a8:	f023 0320 	bic.w	r3, r3, #32
 80036ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff7e 	bl	80035b0 <HAL_RTC_WaitForSynchro>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2203      	movs	r2, #3
 80036be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <RTC_ExitInitMode+0x78>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4a04      	ldr	r2, [pc, #16]	; (80036dc <RTC_ExitInitMode+0x78>)
 80036cc:	f043 0320 	orr.w	r3, r3, #32
 80036d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40002800 	.word	0x40002800

080036e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80036f2:	e005      	b.n	8003700 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3301      	adds	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80036fa:	7afb      	ldrb	r3, [r7, #11]
 80036fc:	3b0a      	subs	r3, #10
 80036fe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003700:	7afb      	ldrb	r3, [r7, #11]
 8003702:	2b09      	cmp	r3, #9
 8003704:	d8f6      	bhi.n	80036f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	b2da      	uxtb	r2, r3
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	4313      	orrs	r3, r2
 8003712:	b2db      	uxtb	r3, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	0092      	lsls	r2, r2, #2
 8003734:	4413      	add	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	b2da      	uxtb	r2, r3
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	4413      	add	r3, r2
 8003746:	b2db      	uxtb	r3, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e095      	b.n	8003892 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003776:	d009      	beq.n	800378c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
 800377e:	e005      	b.n	800378c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd f984 	bl	8000ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037cc:	d902      	bls.n	80037d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e002      	b.n	80037da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037e2:	d007      	beq.n	80037f4 <HAL_SPI_Init+0xa0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	ea42 0103 	orr.w	r1, r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	f003 0204 	and.w	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003870:	ea42 0103 	orr.w	r1, r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b088      	sub	sp, #32
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_SPI_Transmit+0x22>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e158      	b.n	8003b6e <HAL_SPI_Transmit+0x2d4>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c4:	f7fd fd9a 	bl	80013fc <HAL_GetTick>
 80038c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038de:	e13d      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_Transmit+0x52>
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038f0:	e134      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	d10f      	bne.n	800395e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800395c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d007      	beq.n	800397c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800397a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003984:	d94b      	bls.n	8003a1e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0xfa>
 800398e:	8afb      	ldrh	r3, [r7, #22]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d13e      	bne.n	8003a12 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	881a      	ldrh	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	1c9a      	adds	r2, r3, #2
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039b8:	e02b      	b.n	8003a12 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d112      	bne.n	80039ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	881a      	ldrh	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	1c9a      	adds	r2, r3, #2
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ec:	e011      	b.n	8003a12 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ee:	f7fd fd05 	bl	80013fc <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d803      	bhi.n	8003a06 <HAL_SPI_Transmit+0x16c>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a04:	d102      	bne.n	8003a0c <HAL_SPI_Transmit+0x172>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a10:	e0a4      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ce      	bne.n	80039ba <HAL_SPI_Transmit+0x120>
 8003a1c:	e07c      	b.n	8003b18 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_SPI_Transmit+0x192>
 8003a26:	8afb      	ldrh	r3, [r7, #22]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d170      	bne.n	8003b0e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d912      	bls.n	8003a5c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b02      	subs	r3, #2
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a5a:	e058      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a82:	e044      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d12b      	bne.n	8003aea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d912      	bls.n	8003ac2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b02      	subs	r3, #2
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ac0:	e025      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ae8:	e011      	b.n	8003b0e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aea:	f7fd fc87 	bl	80013fc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d803      	bhi.n	8003b02 <HAL_SPI_Transmit+0x268>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b00:	d102      	bne.n	8003b08 <HAL_SPI_Transmit+0x26e>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b0c:	e026      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1b5      	bne.n	8003a84 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f949 	bl	8003db4 <SPI_EndRxTxTransaction>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e000      	b.n	8003b5c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b88:	f7fd fc38 	bl	80013fc <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b98:	f7fd fc30 	bl	80013fc <HAL_GetTick>
 8003b9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	015b      	lsls	r3, r3, #5
 8003ba4:	0d1b      	lsrs	r3, r3, #20
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bae:	e054      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb6:	d050      	beq.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb8:	f7fd fc20 	bl	80013fc <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d902      	bls.n	8003bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d13d      	bne.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be6:	d111      	bne.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d004      	beq.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d107      	bne.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c14:	d10f      	bne.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e017      	b.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d19b      	bne.n	8003bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000010 	.word	0x20000010

08003c88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c9a:	f7fd fbaf 	bl	80013fc <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003caa:	f7fd fba7 	bl	80013fc <HAL_GetTick>
 8003cae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cb8:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	00da      	lsls	r2, r3, #3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	0d1b      	lsrs	r3, r3, #20
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cd0:	e060      	b.n	8003d94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003cd8:	d107      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0x62>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf0:	d050      	beq.n	8003d94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cf2:	f7fd fb83 	bl	80013fc <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d902      	bls.n	8003d08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d13d      	bne.n	8003d84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d20:	d111      	bne.n	8003d46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2a:	d004      	beq.n	8003d36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d34:	d107      	bne.n	8003d46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4e:	d10f      	bne.n	8003d70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e010      	b.n	8003da6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d196      	bne.n	8003cd2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3728      	adds	r7, #40	; 0x28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000010 	.word	0x20000010

08003db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff5b 	bl	8003c88 <SPI_WaitFifoStateUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e027      	b.n	8003e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff fec0 	bl	8003b78 <SPI_WaitFlagStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e014      	b.n	8003e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff ff34 	bl	8003c88 <SPI_WaitFifoStateUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e000      	b.n	8003e38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e049      	b.n	8003ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f841 	bl	8003eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f000 f9f8 	bl	8004274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d001      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e04f      	b.n	8003fbc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01d      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x76>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d018      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x76>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x76>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x76>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x76>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_Base_Start_IT+0x76>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d115      	bne.n	8003fa6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d015      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0xb4>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d011      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	e008      	b.n	8003fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e000      	b.n	8003fba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40013400 	.word	0x40013400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	00010007 	.word	0x00010007

08003fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d122      	bne.n	8004040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d11b      	bne.n	8004040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0202 	mvn.w	r2, #2
 8004010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f905 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8f7 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f908 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0204 	mvn.w	r2, #4
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8db 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8cd 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8de 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0208 	mvn.w	r2, #8
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2204      	movs	r2, #4
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8b1 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8a3 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f8b4 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d122      	bne.n	800413c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b10      	cmp	r3, #16
 8004102:	d11b      	bne.n	800413c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0210 	mvn.w	r2, #16
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2208      	movs	r2, #8
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f887 	bl	8004236 <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f879 	bl	8004222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f88a 	bl	800424a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0201 	mvn.w	r2, #1
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fc fb3a 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b80      	cmp	r3, #128	; 0x80
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f914 	bl	80043bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a2:	d10e      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b80      	cmp	r3, #128	; 0x80
 80041b0:	d107      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f907 	bl	80043d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d10e      	bne.n	80041ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d107      	bne.n	80041ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f838 	bl	800425e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d10e      	bne.n	800421a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b20      	cmp	r3, #32
 8004208:	d107      	bne.n	800421a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0220 	mvn.w	r2, #32
 8004212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8c7 	bl	80043a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a40      	ldr	r2, [pc, #256]	; (8004388 <TIM_Base_SetConfig+0x114>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d00f      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3d      	ldr	r2, [pc, #244]	; (800438c <TIM_Base_SetConfig+0x118>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <TIM_Base_SetConfig+0x11c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	; (8004394 <TIM_Base_SetConfig+0x120>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <TIM_Base_SetConfig+0x124>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d108      	bne.n	80042c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2f      	ldr	r2, [pc, #188]	; (8004388 <TIM_Base_SetConfig+0x114>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01f      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d4:	d01b      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <TIM_Base_SetConfig+0x118>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d017      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <TIM_Base_SetConfig+0x11c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2a      	ldr	r2, [pc, #168]	; (8004394 <TIM_Base_SetConfig+0x120>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00f      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a29      	ldr	r2, [pc, #164]	; (8004398 <TIM_Base_SetConfig+0x124>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00b      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a28      	ldr	r2, [pc, #160]	; (800439c <TIM_Base_SetConfig+0x128>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <TIM_Base_SetConfig+0x12c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_Base_SetConfig+0x9a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <TIM_Base_SetConfig+0x130>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d108      	bne.n	8004320 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <TIM_Base_SetConfig+0x114>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0xf8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <TIM_Base_SetConfig+0x124>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0xf8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a11      	ldr	r2, [pc, #68]	; (800439c <TIM_Base_SetConfig+0x128>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0xf8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <TIM_Base_SetConfig+0x12c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0xf8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a0f      	ldr	r2, [pc, #60]	; (80043a4 <TIM_Base_SetConfig+0x130>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d103      	bne.n	8004374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	615a      	str	r2, [r3, #20]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800

080043a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e040      	b.n	8004478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc fe92 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fbe8 	bl	8004bf8 <UART_SetConfig>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e022      	b.n	8004478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fe66 	bl	800510c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800444e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800445e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 feed 	bl	8005250 <UART_CheckIdleState>
 8004476:	4603      	mov	r3, r0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004480:	b480      	push	{r7}
 8004482:	b08b      	sub	sp, #44	; 0x2c
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004492:	2b20      	cmp	r3, #32
 8004494:	d156      	bne.n	8004544 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_UART_Transmit_IT+0x22>
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e04f      	b.n	8004546 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_UART_Transmit_IT+0x34>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e048      	b.n	8004546 <HAL_UART_Transmit_IT+0xc6>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	88fa      	ldrh	r2, [r7, #6]
 80044c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2221      	movs	r2, #33	; 0x21
 80044e4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ee:	d107      	bne.n	8004500 <HAL_UART_Transmit_IT+0x80>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_UART_Transmit_IT+0xd4>)
 80044fc:	669a      	str	r2, [r3, #104]	; 0x68
 80044fe:	e002      	b.n	8004506 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <HAL_UART_Transmit_IT+0xd8>)
 8004504:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	613b      	str	r3, [r7, #16]
   return(result);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	69f9      	ldr	r1, [r7, #28]
 8004532:	6a3a      	ldr	r2, [r7, #32]
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	61bb      	str	r3, [r7, #24]
   return(result);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e6      	bne.n	800450e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	372c      	adds	r7, #44	; 0x2c
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	080057ab 	.word	0x080057ab
 8004558:	080056f3 	.word	0x080056f3

0800455c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456e:	2b20      	cmp	r3, #32
 8004570:	d142      	bne.n	80045f8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_UART_Receive_IT+0x22>
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e03b      	b.n	80045fa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_UART_Receive_IT+0x34>
 800458c:	2302      	movs	r3, #2
 800458e:	e034      	b.n	80045fa <HAL_UART_Receive_IT+0x9e>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <HAL_UART_Receive_IT+0xa8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d01f      	beq.n	80045e8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	623b      	str	r3, [r7, #32]
 80045d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	69f9      	ldr	r1, [r7, #28]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e6      	bne.n	80045b6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 ff3c 	bl	800546c <UART_Start_Receive_IT>
 80045f4:	4603      	mov	r3, r0
 80045f6:	e000      	b.n	80045fa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3728      	adds	r7, #40	; 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40008000 	.word	0x40008000

08004608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0ba      	sub	sp, #232	; 0xe8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800462e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004632:	f640 030f 	movw	r3, #2063	; 0x80f
 8004636:	4013      	ands	r3, r2
 8004638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800463c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d115      	bne.n	8004670 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00f      	beq.n	8004670 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 82a6 	beq.w	8004bb2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
      }
      return;
 800466e:	e2a0      	b.n	8004bb2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8117 	beq.w	80048a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800467a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004686:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800468a:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <HAL_UART_IRQHandler+0x298>)
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 810a 	beq.w	80048a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d011      	beq.n	80046c4 <HAL_UART_IRQHandler+0xbc>
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2201      	movs	r2, #1
 80046b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	f043 0201 	orr.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <HAL_UART_IRQHandler+0xec>
 80046d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2202      	movs	r2, #2
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ea:	f043 0204 	orr.w	r2, r3, #4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d011      	beq.n	8004724 <HAL_UART_IRQHandler+0x11c>
 8004700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2204      	movs	r2, #4
 8004712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471a:	f043 0202 	orr.w	r2, r3, #2
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d017      	beq.n	8004760 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800473c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004740:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2208      	movs	r2, #8
 800474e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004756:	f043 0208 	orr.w	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004768:	2b00      	cmp	r3, #0
 800476a:	d012      	beq.n	8004792 <HAL_UART_IRQHandler+0x18a>
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00c      	beq.n	8004792 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 820c 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d005      	beq.n	80047ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04f      	beq.n	800488a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 ff08 	bl	8005600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d141      	bne.n	8004882 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3308      	adds	r3, #8
 8004826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800482a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800482e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d9      	bne.n	80047fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	2b00      	cmp	r3, #0
 8004850:	d013      	beq.n	800487a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <HAL_UART_IRQHandler+0x29c>)
 8004858:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4618      	mov	r0, r3
 8004860:	f7fc ff1c 	bl	800169c <HAL_DMA_Abort_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d017      	beq.n	800489a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004874:	4610      	mov	r0, r2
 8004876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00f      	b.n	800489a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f9a6 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e00b      	b.n	800489a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9a2 	bl	8004bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e007      	b.n	800489a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f99e 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004898:	e18d      	b.n	8004bb6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489a:	bf00      	nop
    return;
 800489c:	e18b      	b.n	8004bb6 <HAL_UART_IRQHandler+0x5ae>
 800489e:	bf00      	nop
 80048a0:	04000120 	.word	0x04000120
 80048a4:	080056c7 	.word	0x080056c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	f040 8146 	bne.w	8004b3e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 813f 	beq.w	8004b3e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8138 	beq.w	8004b3e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2210      	movs	r2, #16
 80048d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	f040 80b4 	bne.w	8004a4e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 815f 	beq.w	8004bba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004906:	429a      	cmp	r2, r3
 8004908:	f080 8157 	bcs.w	8004bba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 8085 	bne.w	8004a32 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800493c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004956:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800495e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800496a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1da      	bne.n	8004928 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3308      	adds	r3, #8
 8004978:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004996:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800499a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800499e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e1      	bne.n	8004972 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e3      	bne.n	80049ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a02:	f023 0310 	bic.w	r3, r3, #16
 8004a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a14:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e4      	bne.n	80049f2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fc fdf7 	bl	8001620 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8ca 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a4c:	e0b5      	b.n	8004bba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80a7 	beq.w	8004bbe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a2 	beq.w	8004bbe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e4      	bne.n	8004a7a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e3      	bne.n	8004ab0 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e4      	bne.n	8004afa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f852 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b3c:	e03f      	b.n	8004bbe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00e      	beq.n	8004b68 <HAL_UART_IRQHandler+0x560>
 8004b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 f80c 	bl	8005b7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b66:	e02d      	b.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01c      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
    }
    return;
 8004b90:	e017      	b.n	8004bc2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
 8004b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fe5d 	bl	800586a <UART_EndTransmit_IT>
    return;
 8004bb0:	e008      	b.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bb2:	bf00      	nop
 8004bb4:	e006      	b.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bb6:	bf00      	nop
 8004bb8:	e004      	b.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004bc4:	37e8      	adds	r7, #232	; 0xe8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop

08004bcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf8:	b5b0      	push	{r4, r5, r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4bad      	ldr	r3, [pc, #692]	; (8004ed8 <UART_SetConfig+0x2e0>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	69f9      	ldr	r1, [r7, #28]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4aa2      	ldr	r2, [pc, #648]	; (8004edc <UART_SetConfig+0x2e4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a99      	ldr	r2, [pc, #612]	; (8004ee0 <UART_SetConfig+0x2e8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d121      	bne.n	8004cc2 <UART_SetConfig+0xca>
 8004c7e:	4b99      	ldr	r3, [pc, #612]	; (8004ee4 <UART_SetConfig+0x2ec>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d817      	bhi.n	8004cbc <UART_SetConfig+0xc4>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <UART_SetConfig+0x9c>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	08004cb1 	.word	0x08004cb1
 8004c9c:	08004cab 	.word	0x08004cab
 8004ca0:	08004cb7 	.word	0x08004cb7
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	76fb      	strb	r3, [r7, #27]
 8004ca8:	e0e7      	b.n	8004e7a <UART_SetConfig+0x282>
 8004caa:	2302      	movs	r3, #2
 8004cac:	76fb      	strb	r3, [r7, #27]
 8004cae:	e0e4      	b.n	8004e7a <UART_SetConfig+0x282>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	76fb      	strb	r3, [r7, #27]
 8004cb4:	e0e1      	b.n	8004e7a <UART_SetConfig+0x282>
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	76fb      	strb	r3, [r7, #27]
 8004cba:	e0de      	b.n	8004e7a <UART_SetConfig+0x282>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	76fb      	strb	r3, [r7, #27]
 8004cc0:	e0db      	b.n	8004e7a <UART_SetConfig+0x282>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a88      	ldr	r2, [pc, #544]	; (8004ee8 <UART_SetConfig+0x2f0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d132      	bne.n	8004d32 <UART_SetConfig+0x13a>
 8004ccc:	4b85      	ldr	r3, [pc, #532]	; (8004ee4 <UART_SetConfig+0x2ec>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d828      	bhi.n	8004d2c <UART_SetConfig+0x134>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0xe8>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004d15 	.word	0x08004d15
 8004ce4:	08004d2d 	.word	0x08004d2d
 8004ce8:	08004d2d 	.word	0x08004d2d
 8004cec:	08004d2d 	.word	0x08004d2d
 8004cf0:	08004d21 	.word	0x08004d21
 8004cf4:	08004d2d 	.word	0x08004d2d
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004d2d 	.word	0x08004d2d
 8004d00:	08004d1b 	.word	0x08004d1b
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d2d 	.word	0x08004d2d
 8004d10:	08004d27 	.word	0x08004d27
 8004d14:	2300      	movs	r3, #0
 8004d16:	76fb      	strb	r3, [r7, #27]
 8004d18:	e0af      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	76fb      	strb	r3, [r7, #27]
 8004d1e:	e0ac      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d20:	2304      	movs	r3, #4
 8004d22:	76fb      	strb	r3, [r7, #27]
 8004d24:	e0a9      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d26:	2308      	movs	r3, #8
 8004d28:	76fb      	strb	r3, [r7, #27]
 8004d2a:	e0a6      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	76fb      	strb	r3, [r7, #27]
 8004d30:	e0a3      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6d      	ldr	r2, [pc, #436]	; (8004eec <UART_SetConfig+0x2f4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d120      	bne.n	8004d7e <UART_SetConfig+0x186>
 8004d3c:	4b69      	ldr	r3, [pc, #420]	; (8004ee4 <UART_SetConfig+0x2ec>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d46:	2b30      	cmp	r3, #48	; 0x30
 8004d48:	d013      	beq.n	8004d72 <UART_SetConfig+0x17a>
 8004d4a:	2b30      	cmp	r3, #48	; 0x30
 8004d4c:	d814      	bhi.n	8004d78 <UART_SetConfig+0x180>
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d009      	beq.n	8004d66 <UART_SetConfig+0x16e>
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d810      	bhi.n	8004d78 <UART_SetConfig+0x180>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <UART_SetConfig+0x168>
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d006      	beq.n	8004d6c <UART_SetConfig+0x174>
 8004d5e:	e00b      	b.n	8004d78 <UART_SetConfig+0x180>
 8004d60:	2300      	movs	r3, #0
 8004d62:	76fb      	strb	r3, [r7, #27]
 8004d64:	e089      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d66:	2302      	movs	r3, #2
 8004d68:	76fb      	strb	r3, [r7, #27]
 8004d6a:	e086      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	76fb      	strb	r3, [r7, #27]
 8004d70:	e083      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d72:	2308      	movs	r3, #8
 8004d74:	76fb      	strb	r3, [r7, #27]
 8004d76:	e080      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	76fb      	strb	r3, [r7, #27]
 8004d7c:	e07d      	b.n	8004e7a <UART_SetConfig+0x282>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a5b      	ldr	r2, [pc, #364]	; (8004ef0 <UART_SetConfig+0x2f8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d120      	bne.n	8004dca <UART_SetConfig+0x1d2>
 8004d88:	4b56      	ldr	r3, [pc, #344]	; (8004ee4 <UART_SetConfig+0x2ec>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d92:	2bc0      	cmp	r3, #192	; 0xc0
 8004d94:	d013      	beq.n	8004dbe <UART_SetConfig+0x1c6>
 8004d96:	2bc0      	cmp	r3, #192	; 0xc0
 8004d98:	d814      	bhi.n	8004dc4 <UART_SetConfig+0x1cc>
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	d009      	beq.n	8004db2 <UART_SetConfig+0x1ba>
 8004d9e:	2b80      	cmp	r3, #128	; 0x80
 8004da0:	d810      	bhi.n	8004dc4 <UART_SetConfig+0x1cc>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <UART_SetConfig+0x1b4>
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d006      	beq.n	8004db8 <UART_SetConfig+0x1c0>
 8004daa:	e00b      	b.n	8004dc4 <UART_SetConfig+0x1cc>
 8004dac:	2300      	movs	r3, #0
 8004dae:	76fb      	strb	r3, [r7, #27]
 8004db0:	e063      	b.n	8004e7a <UART_SetConfig+0x282>
 8004db2:	2302      	movs	r3, #2
 8004db4:	76fb      	strb	r3, [r7, #27]
 8004db6:	e060      	b.n	8004e7a <UART_SetConfig+0x282>
 8004db8:	2304      	movs	r3, #4
 8004dba:	76fb      	strb	r3, [r7, #27]
 8004dbc:	e05d      	b.n	8004e7a <UART_SetConfig+0x282>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	76fb      	strb	r3, [r7, #27]
 8004dc2:	e05a      	b.n	8004e7a <UART_SetConfig+0x282>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	76fb      	strb	r3, [r7, #27]
 8004dc8:	e057      	b.n	8004e7a <UART_SetConfig+0x282>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a49      	ldr	r2, [pc, #292]	; (8004ef4 <UART_SetConfig+0x2fc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d125      	bne.n	8004e20 <UART_SetConfig+0x228>
 8004dd4:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <UART_SetConfig+0x2ec>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de2:	d017      	beq.n	8004e14 <UART_SetConfig+0x21c>
 8004de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de8:	d817      	bhi.n	8004e1a <UART_SetConfig+0x222>
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dee:	d00b      	beq.n	8004e08 <UART_SetConfig+0x210>
 8004df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df4:	d811      	bhi.n	8004e1a <UART_SetConfig+0x222>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <UART_SetConfig+0x20a>
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	d006      	beq.n	8004e0e <UART_SetConfig+0x216>
 8004e00:	e00b      	b.n	8004e1a <UART_SetConfig+0x222>
 8004e02:	2300      	movs	r3, #0
 8004e04:	76fb      	strb	r3, [r7, #27]
 8004e06:	e038      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	76fb      	strb	r3, [r7, #27]
 8004e0c:	e035      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e0e:	2304      	movs	r3, #4
 8004e10:	76fb      	strb	r3, [r7, #27]
 8004e12:	e032      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e14:	2308      	movs	r3, #8
 8004e16:	76fb      	strb	r3, [r7, #27]
 8004e18:	e02f      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e1a:	2310      	movs	r3, #16
 8004e1c:	76fb      	strb	r3, [r7, #27]
 8004e1e:	e02c      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <UART_SetConfig+0x2e4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d125      	bne.n	8004e76 <UART_SetConfig+0x27e>
 8004e2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ee4 <UART_SetConfig+0x2ec>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e38:	d017      	beq.n	8004e6a <UART_SetConfig+0x272>
 8004e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e3e:	d817      	bhi.n	8004e70 <UART_SetConfig+0x278>
 8004e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e44:	d00b      	beq.n	8004e5e <UART_SetConfig+0x266>
 8004e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4a:	d811      	bhi.n	8004e70 <UART_SetConfig+0x278>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <UART_SetConfig+0x260>
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d006      	beq.n	8004e64 <UART_SetConfig+0x26c>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x278>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	76fb      	strb	r3, [r7, #27]
 8004e5c:	e00d      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	76fb      	strb	r3, [r7, #27]
 8004e62:	e00a      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e64:	2304      	movs	r3, #4
 8004e66:	76fb      	strb	r3, [r7, #27]
 8004e68:	e007      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	76fb      	strb	r3, [r7, #27]
 8004e6e:	e004      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e70:	2310      	movs	r3, #16
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e001      	b.n	8004e7a <UART_SetConfig+0x282>
 8004e76:	2310      	movs	r3, #16
 8004e78:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	; (8004edc <UART_SetConfig+0x2e4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	f040 8087 	bne.w	8004f94 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e86:	7efb      	ldrb	r3, [r7, #27]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d837      	bhi.n	8004efc <UART_SetConfig+0x304>
 8004e8c:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <UART_SetConfig+0x29c>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004eb9 	.word	0x08004eb9
 8004e98:	08004efd 	.word	0x08004efd
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004efd 	.word	0x08004efd
 8004ea4:	08004ec7 	.word	0x08004ec7
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	08004efd 	.word	0x08004efd
 8004eb4:	08004ecf 	.word	0x08004ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb8:	f7fd fbb8 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 8004ebc:	6178      	str	r0, [r7, #20]
        break;
 8004ebe:	e022      	b.n	8004f06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <UART_SetConfig+0x300>)
 8004ec2:	617b      	str	r3, [r7, #20]
        break;
 8004ec4:	e01f      	b.n	8004f06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec6:	f7fd fb19 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8004eca:	6178      	str	r0, [r7, #20]
        break;
 8004ecc:	e01b      	b.n	8004f06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed2:	617b      	str	r3, [r7, #20]
        break;
 8004ed4:	e017      	b.n	8004f06 <UART_SetConfig+0x30e>
 8004ed6:	bf00      	nop
 8004ed8:	efff69f3 	.word	0xefff69f3
 8004edc:	40008000 	.word	0x40008000
 8004ee0:	40013800 	.word	0x40013800
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40004400 	.word	0x40004400
 8004eec:	40004800 	.word	0x40004800
 8004ef0:	40004c00 	.word	0x40004c00
 8004ef4:	40005000 	.word	0x40005000
 8004ef8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	76bb      	strb	r3, [r7, #26]
        break;
 8004f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80f1 	beq.w	80050f0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d305      	bcc.n	8004f2a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d902      	bls.n	8004f30 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	76bb      	strb	r3, [r7, #26]
 8004f2e:	e0df      	b.n	80050f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f04f 0100 	mov.w	r1, #0
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	020b      	lsls	r3, r1, #8
 8004f42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f46:	0202      	lsls	r2, r0, #8
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	6849      	ldr	r1, [r1, #4]
 8004f4c:	0849      	lsrs	r1, r1, #1
 8004f4e:	4608      	mov	r0, r1
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	1814      	adds	r4, r2, r0
 8004f56:	eb43 0501 	adc.w	r5, r3, r1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	4620      	mov	r0, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	f7fb f982 	bl	8000270 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7a:	d308      	bcc.n	8004f8e <UART_SetConfig+0x396>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d204      	bcs.n	8004f8e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	e0b0      	b.n	80050f0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	76bb      	strb	r3, [r7, #26]
 8004f92:	e0ad      	b.n	80050f0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9c:	d15b      	bne.n	8005056 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004f9e:	7efb      	ldrb	r3, [r7, #27]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d828      	bhi.n	8004ff6 <UART_SetConfig+0x3fe>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <UART_SetConfig+0x3b4>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08004ff7 	.word	0x08004ff7
 8004fbc:	08004fe7 	.word	0x08004fe7
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	08004ff7 	.word	0x08004ff7
 8004fc8:	08004ff7 	.word	0x08004ff7
 8004fcc:	08004fef 	.word	0x08004fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd0:	f7fd fb2c 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 8004fd4:	6178      	str	r0, [r7, #20]
        break;
 8004fd6:	e013      	b.n	8005000 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd8:	f7fd fb3e 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8004fdc:	6178      	str	r0, [r7, #20]
        break;
 8004fde:	e00f      	b.n	8005000 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe0:	4b49      	ldr	r3, [pc, #292]	; (8005108 <UART_SetConfig+0x510>)
 8004fe2:	617b      	str	r3, [r7, #20]
        break;
 8004fe4:	e00c      	b.n	8005000 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe6:	f7fd fa89 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8004fea:	6178      	str	r0, [r7, #20]
        break;
 8004fec:	e008      	b.n	8005000 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff2:	617b      	str	r3, [r7, #20]
        break;
 8004ff4:	e004      	b.n	8005000 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	76bb      	strb	r3, [r7, #26]
        break;
 8004ffe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d074      	beq.n	80050f0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	005a      	lsls	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	d916      	bls.n	8005050 <UART_SetConfig+0x458>
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005028:	d212      	bcs.n	8005050 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f023 030f 	bic.w	r3, r3, #15
 8005032:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	b29a      	uxth	r2, r3
 8005040:	89fb      	ldrh	r3, [r7, #14]
 8005042:	4313      	orrs	r3, r2
 8005044:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	89fa      	ldrh	r2, [r7, #14]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e04f      	b.n	80050f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	76bb      	strb	r3, [r7, #26]
 8005054:	e04c      	b.n	80050f0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005056:	7efb      	ldrb	r3, [r7, #27]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d828      	bhi.n	80050ae <UART_SetConfig+0x4b6>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0x46c>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005089 	.word	0x08005089
 8005068:	08005091 	.word	0x08005091
 800506c:	08005099 	.word	0x08005099
 8005070:	080050af 	.word	0x080050af
 8005074:	0800509f 	.word	0x0800509f
 8005078:	080050af 	.word	0x080050af
 800507c:	080050af 	.word	0x080050af
 8005080:	080050af 	.word	0x080050af
 8005084:	080050a7 	.word	0x080050a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005088:	f7fd fad0 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 800508c:	6178      	str	r0, [r7, #20]
        break;
 800508e:	e013      	b.n	80050b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fd fae2 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8005094:	6178      	str	r0, [r7, #20]
        break;
 8005096:	e00f      	b.n	80050b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <UART_SetConfig+0x510>)
 800509a:	617b      	str	r3, [r7, #20]
        break;
 800509c:	e00c      	b.n	80050b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509e:	f7fd fa2d 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80050a2:	6178      	str	r0, [r7, #20]
        break;
 80050a4:	e008      	b.n	80050b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050aa:	617b      	str	r3, [r7, #20]
        break;
 80050ac:	e004      	b.n	80050b8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	76bb      	strb	r3, [r7, #26]
        break;
 80050b6:	bf00      	nop
    }

    if (pclk != 0U)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d018      	beq.n	80050f0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	085a      	lsrs	r2, r3, #1
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	441a      	add	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b0f      	cmp	r3, #15
 80050d6:	d909      	bls.n	80050ec <UART_SetConfig+0x4f4>
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050de:	d205      	bcs.n	80050ec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	e001      	b.n	80050f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bdb0      	pop	{r4, r5, r7, pc}
 8005106:	bf00      	nop
 8005108:	00f42400 	.word	0x00f42400

0800510c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01a      	beq.n	8005222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520a:	d10a      	bne.n	8005222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	605a      	str	r2, [r3, #4]
  }
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af02      	add	r7, sp, #8
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005260:	f7fc f8cc 	bl	80013fc <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d10e      	bne.n	8005292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f82d 	bl	80052e2 <UART_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e023      	b.n	80052da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b04      	cmp	r3, #4
 800529e:	d10e      	bne.n	80052be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f817 	bl	80052e2 <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e00d      	b.n	80052da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b09c      	sub	sp, #112	; 0x70
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f2:	e0a5      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fa:	f000 80a1 	beq.w	8005440 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fc f87d 	bl	80013fc <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <UART_WaitOnFlagUntilTimeout+0x32>
 800530e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005310:	2b00      	cmp	r3, #0
 8005312:	d13e      	bne.n	8005392 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005328:	667b      	str	r3, [r7, #100]	; 0x64
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005334:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e6      	bne.n	8005314 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3308      	adds	r3, #8
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	663b      	str	r3, [r7, #96]	; 0x60
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005366:	64ba      	str	r2, [r7, #72]	; 0x48
 8005368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800536c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e067      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d04f      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ae:	d147      	bne.n	8005440 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
 80053da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e6      	bne.n	80053ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3308      	adds	r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	613b      	str	r3, [r7, #16]
   return(result);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	66bb      	str	r3, [r7, #104]	; 0x68
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800540c:	623a      	str	r2, [r7, #32]
 800540e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	69f9      	ldr	r1, [r7, #28]
 8005412:	6a3a      	ldr	r2, [r7, #32]
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	61bb      	str	r3, [r7, #24]
   return(result);
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e010      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	429a      	cmp	r2, r3
 800545c:	f43f af4a 	beq.w	80052f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3770      	adds	r7, #112	; 0x70
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800546c:	b480      	push	{r7}
 800546e:	b097      	sub	sp, #92	; 0x5c
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d10e      	bne.n	80054be <UART_Start_Receive_IT+0x52>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <UART_Start_Receive_IT+0x48>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b2:	e02d      	b.n	8005510 <UART_Start_Receive_IT+0xa4>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	22ff      	movs	r2, #255	; 0xff
 80054b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054bc:	e028      	b.n	8005510 <UART_Start_Receive_IT+0xa4>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10d      	bne.n	80054e2 <UART_Start_Receive_IT+0x76>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <UART_Start_Receive_IT+0x6c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	22ff      	movs	r2, #255	; 0xff
 80054d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054d6:	e01b      	b.n	8005510 <UART_Start_Receive_IT+0xa4>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	227f      	movs	r2, #127	; 0x7f
 80054dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054e0:	e016      	b.n	8005510 <UART_Start_Receive_IT+0xa4>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ea:	d10d      	bne.n	8005508 <UART_Start_Receive_IT+0x9c>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <UART_Start_Receive_IT+0x92>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	227f      	movs	r2, #127	; 0x7f
 80054f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054fc:	e008      	b.n	8005510 <UART_Start_Receive_IT+0xa4>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	223f      	movs	r2, #63	; 0x3f
 8005502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005506:	e003      	b.n	8005510 <UART_Start_Receive_IT+0xa4>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2222      	movs	r2, #34	; 0x22
 800551c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3308      	adds	r3, #8
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	657b      	str	r3, [r7, #84]	; 0x54
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3308      	adds	r3, #8
 800553c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800553e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800554c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d107      	bne.n	800556c <UART_Start_Receive_IT+0x100>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a24      	ldr	r2, [pc, #144]	; (80055f8 <UART_Start_Receive_IT+0x18c>)
 8005568:	665a      	str	r2, [r3, #100]	; 0x64
 800556a:	e002      	b.n	8005572 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a23      	ldr	r2, [pc, #140]	; (80055fc <UART_Start_Receive_IT+0x190>)
 8005570:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d019      	beq.n	80055b6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
 80055a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e6      	bne.n	8005582 <UART_Start_Receive_IT+0x116>
 80055b4:	e018      	b.n	80055e8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	613b      	str	r3, [r7, #16]
   return(result);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f043 0320 	orr.w	r3, r3, #32
 80055ca:	653b      	str	r3, [r7, #80]	; 0x50
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	69f9      	ldr	r1, [r7, #28]
 80055da:	6a3a      	ldr	r2, [r7, #32]
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	375c      	adds	r7, #92	; 0x5c
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	08005a1f 	.word	0x08005a1f
 80055fc:	080058bf 	.word	0x080058bf

08005600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b095      	sub	sp, #84	; 0x54
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
 8005628:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800562c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	61fb      	str	r3, [r7, #28]
   return(result);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	64bb      	str	r3, [r7, #72]	; 0x48
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800565a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e5      	bne.n	800563a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005672:	2b01      	cmp	r3, #1
 8005674:	d118      	bne.n	80056a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60bb      	str	r3, [r7, #8]
   return(result);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6979      	ldr	r1, [r7, #20]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	613b      	str	r3, [r7, #16]
   return(result);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e6      	bne.n	8005676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056ba:	bf00      	nop
 80056bc:	3754      	adds	r7, #84	; 0x54
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff fa71 	bl	8004bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b08f      	sub	sp, #60	; 0x3c
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fe:	2b21      	cmp	r3, #33	; 0x21
 8005700:	d14d      	bne.n	800579e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d132      	bne.n	8005774 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	61fb      	str	r3, [r7, #28]
   return(result);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800572e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e6      	bne.n	800570e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	60bb      	str	r3, [r7, #8]
   return(result);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005754:	633b      	str	r3, [r7, #48]	; 0x30
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	613b      	str	r3, [r7, #16]
   return(result);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e6      	bne.n	8005740 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005772:	e014      	b.n	800579e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	781a      	ldrb	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	b292      	uxth	r2, r2
 8005780:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800579e:	bf00      	nop
 80057a0:	373c      	adds	r7, #60	; 0x3c
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b091      	sub	sp, #68	; 0x44
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b6:	2b21      	cmp	r3, #33	; 0x21
 80057b8:	d151      	bne.n	800585e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d132      	bne.n	800582c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	623b      	str	r3, [r7, #32]
   return(result);
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057da:	63bb      	str	r3, [r7, #56]	; 0x38
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
 80057e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	60fb      	str	r3, [r7, #12]
   return(result);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	69b9      	ldr	r1, [r7, #24]
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	617b      	str	r3, [r7, #20]
   return(result);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e6      	bne.n	80057f8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800582a:	e018      	b.n	800585e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005834:	881a      	ldrh	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583e:	b292      	uxth	r2, r2
 8005840:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	1c9a      	adds	r2, r3, #2
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800585e:	bf00      	nop
 8005860:	3744      	adds	r7, #68	; 0x44
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b088      	sub	sp, #32
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6979      	ldr	r1, [r7, #20]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	613b      	str	r3, [r7, #16]
   return(result);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e6      	bne.n	8005872 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fb fd1d 	bl	80012f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058b6:	bf00      	nop
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b096      	sub	sp, #88	; 0x58
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d4:	2b22      	cmp	r3, #34	; 0x22
 80058d6:	f040 8094 	bne.w	8005a02 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80058e8:	b2d9      	uxtb	r1, r3
 80058ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f4:	400a      	ands	r2, r1
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d179      	bne.n	8005a16 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005936:	653b      	str	r3, [r7, #80]	; 0x50
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005940:	647b      	str	r3, [r7, #68]	; 0x44
 8005942:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e6      	bne.n	8005922 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	623b      	str	r3, [r7, #32]
   return(result);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	f023 0301 	bic.w	r3, r3, #1
 800596a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005974:	633a      	str	r2, [r7, #48]	; 0x30
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800597a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e5      	bne.n	8005954 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	2b01      	cmp	r3, #1
 800599a:	d12e      	bne.n	80059fa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0310 	bic.w	r3, r3, #16
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	69b9      	ldr	r1, [r7, #24]
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	617b      	str	r3, [r7, #20]
   return(result);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e6      	bne.n	80059a2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d103      	bne.n	80059ea <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2210      	movs	r2, #16
 80059e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff f8f4 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059f8:	e00d      	b.n	8005a16 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fb fc8c 	bl	8001318 <HAL_UART_RxCpltCallback>
}
 8005a00:	e009      	b.n	8005a16 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	8b1b      	ldrh	r3, [r3, #24]
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0208 	orr.w	r2, r2, #8
 8005a12:	b292      	uxth	r2, r2
 8005a14:	831a      	strh	r2, [r3, #24]
}
 8005a16:	bf00      	nop
 8005a18:	3758      	adds	r7, #88	; 0x58
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b096      	sub	sp, #88	; 0x58
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a34:	2b22      	cmp	r3, #34	; 0x22
 8005a36:	f040 8094 	bne.w	8005b62 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a4a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005a4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a52:	4013      	ands	r3, r2
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	1c9a      	adds	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d179      	bne.n	8005b76 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8005aa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e6      	bne.n	8005a82 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e5      	bne.n	8005ab4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d12e      	bne.n	8005b5a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f023 0310 	bic.w	r3, r3, #16
 8005b16:	647b      	str	r3, [r7, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6979      	ldr	r1, [r7, #20]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e6      	bne.n	8005b02 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d103      	bne.n	8005b4a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2210      	movs	r2, #16
 8005b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff f844 	bl	8004be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b58:	e00d      	b.n	8005b76 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fb fbdc 	bl	8001318 <HAL_UART_RxCpltCallback>
}
 8005b60:	e009      	b.n	8005b76 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	8b1b      	ldrh	r3, [r3, #24]
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0208 	orr.w	r2, r2, #8
 8005b72:	b292      	uxth	r2, r2
 8005b74:	831a      	strh	r2, [r3, #24]
}
 8005b76:	bf00      	nop
 8005b78:	3758      	adds	r7, #88	; 0x58
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <SysTick_Handler+0x1c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b9c:	f000 f990 	bl	8005ec0 <xTaskGetSchedulerState>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ba6:	f000 f9f7 	bl	8005f98 <xPortSysTickHandler>
  }
}
 8005baa:	bf00      	nop
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	e000e010 	.word	0xe000e010

08005bb4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	601a      	str	r2, [r3, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6892      	ldr	r2, [r2, #8]
 8005c12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6852      	ldr	r2, [r2, #4]
 8005c1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d103      	bne.n	8005c30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c5a:	4b4f      	ldr	r3, [pc, #316]	; (8005d98 <xTaskIncrementTick+0x148>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 808f 	bne.w	8005d82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c64:	4b4d      	ldr	r3, [pc, #308]	; (8005d9c <xTaskIncrementTick+0x14c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c6c:	4a4b      	ldr	r2, [pc, #300]	; (8005d9c <xTaskIncrementTick+0x14c>)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d120      	bne.n	8005cba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c78:	4b49      	ldr	r3, [pc, #292]	; (8005da0 <xTaskIncrementTick+0x150>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xTaskIncrementTick+0x46>
 8005c98:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <xTaskIncrementTick+0x150>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	4b41      	ldr	r3, [pc, #260]	; (8005da4 <xTaskIncrementTick+0x154>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a3f      	ldr	r2, [pc, #252]	; (8005da0 <xTaskIncrementTick+0x150>)
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	4a3f      	ldr	r2, [pc, #252]	; (8005da4 <xTaskIncrementTick+0x154>)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	4b3e      	ldr	r3, [pc, #248]	; (8005da8 <xTaskIncrementTick+0x158>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	4a3d      	ldr	r2, [pc, #244]	; (8005da8 <xTaskIncrementTick+0x158>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	f000 f8e3 	bl	8005e80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cba:	4b3c      	ldr	r3, [pc, #240]	; (8005dac <xTaskIncrementTick+0x15c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d349      	bcc.n	8005d58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc4:	4b36      	ldr	r3, [pc, #216]	; (8005da0 <xTaskIncrementTick+0x150>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cce:	4b37      	ldr	r3, [pc, #220]	; (8005dac <xTaskIncrementTick+0x15c>)
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cd4:	601a      	str	r2, [r3, #0]
					break;
 8005cd6:	e03f      	b.n	8005d58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd8:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <xTaskIncrementTick+0x150>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d203      	bcs.n	8005cf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cf0:	4a2e      	ldr	r2, [pc, #184]	; (8005dac <xTaskIncrementTick+0x15c>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cf6:	e02f      	b.n	8005d58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff ff7d 	bl	8005bfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3318      	adds	r3, #24
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ff74 	bl	8005bfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <xTaskIncrementTick+0x160>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d903      	bls.n	8005d28 <xTaskIncrementTick+0xd8>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	4a22      	ldr	r2, [pc, #136]	; (8005db0 <xTaskIncrementTick+0x160>)
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4a1f      	ldr	r2, [pc, #124]	; (8005db4 <xTaskIncrementTick+0x164>)
 8005d36:	441a      	add	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f7ff ff38 	bl	8005bb4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <xTaskIncrementTick+0x168>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d3b8      	bcc.n	8005cc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d56:	e7b5      	b.n	8005cc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d58:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <xTaskIncrementTick+0x168>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5e:	4915      	ldr	r1, [pc, #84]	; (8005db4 <xTaskIncrementTick+0x164>)
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d901      	bls.n	8005d74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d70:	2301      	movs	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d74:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <xTaskIncrementTick+0x16c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e004      	b.n	8005d8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <xTaskIncrementTick+0x170>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3301      	adds	r3, #1
 8005d88:	4a0d      	ldr	r2, [pc, #52]	; (8005dc0 <xTaskIncrementTick+0x170>)
 8005d8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d8c:	697b      	ldr	r3, [r7, #20]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	2000052c 	.word	0x2000052c
 8005d9c:	20000510 	.word	0x20000510
 8005da0:	20000508 	.word	0x20000508
 8005da4:	2000050c 	.word	0x2000050c
 8005da8:	20000524 	.word	0x20000524
 8005dac:	20000528 	.word	0x20000528
 8005db0:	20000514 	.word	0x20000514
 8005db4:	200000a8 	.word	0x200000a8
 8005db8:	200000a4 	.word	0x200000a4
 8005dbc:	20000520 	.word	0x20000520
 8005dc0:	2000051c 	.word	0x2000051c

08005dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dca:	4b28      	ldr	r3, [pc, #160]	; (8005e6c <vTaskSwitchContext+0xa8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dd2:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <vTaskSwitchContext+0xac>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dd8:	e041      	b.n	8005e5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005dda:	4b25      	ldr	r3, [pc, #148]	; (8005e70 <vTaskSwitchContext+0xac>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <vTaskSwitchContext+0xb0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e010      	b.n	8005e0a <vTaskSwitchContext+0x46>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <vTaskSwitchContext+0x40>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	607b      	str	r3, [r7, #4]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <vTaskSwitchContext+0x3e>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	491b      	ldr	r1, [pc, #108]	; (8005e78 <vTaskSwitchContext+0xb4>)
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0e4      	beq.n	8005de8 <vTaskSwitchContext+0x24>
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <vTaskSwitchContext+0xb4>)
 8005e2a:	4413      	add	r3, r2
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d104      	bne.n	8005e4e <vTaskSwitchContext+0x8a>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <vTaskSwitchContext+0xb8>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <vTaskSwitchContext+0xb0>)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6013      	str	r3, [r2, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	2000052c 	.word	0x2000052c
 8005e70:	20000520 	.word	0x20000520
 8005e74:	20000514 	.word	0x20000514
 8005e78:	200000a8 	.word	0x200000a8
 8005e7c:	200000a4 	.word	0x200000a4

08005e80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e86:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <prvResetNextTaskUnblockTime+0x38>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d104      	bne.n	8005e9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <prvResetNextTaskUnblockTime+0x3c>)
 8005e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e98:	e008      	b.n	8005eac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <prvResetNextTaskUnblockTime+0x38>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a04      	ldr	r2, [pc, #16]	; (8005ebc <prvResetNextTaskUnblockTime+0x3c>)
 8005eaa:	6013      	str	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	20000508 	.word	0x20000508
 8005ebc:	20000528 	.word	0x20000528

08005ec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <xTaskGetSchedulerState+0x34>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	e008      	b.n	8005ee6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ed4:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <xTaskGetSchedulerState+0x38>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005edc:	2302      	movs	r3, #2
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	e001      	b.n	8005ee6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ee6:	687b      	ldr	r3, [r7, #4]
	}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	20000518 	.word	0x20000518
 8005ef8:	2000052c 	.word	0x2000052c
 8005efc:	00000000 	.word	0x00000000

08005f00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f00:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <pxCurrentTCBConst2>)
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	6808      	ldr	r0, [r1, #0]
 8005f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	f380 8809 	msr	PSP, r0
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f380 8811 	msr	BASEPRI, r0
 8005f1a:	4770      	bx	lr
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst2>:
 8005f20:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
	...

08005f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f30:	f3ef 8009 	mrs	r0, PSP
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <pxCurrentTCBConst>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f01e 0f10 	tst.w	lr, #16
 8005f40:	bf08      	it	eq
 8005f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	6010      	str	r0, [r2, #0]
 8005f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f54:	f380 8811 	msr	BASEPRI, r0
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f7ff ff30 	bl	8005dc4 <vTaskSwitchContext>
 8005f64:	f04f 0000 	mov.w	r0, #0
 8005f68:	f380 8811 	msr	BASEPRI, r0
 8005f6c:	bc09      	pop	{r0, r3}
 8005f6e:	6819      	ldr	r1, [r3, #0]
 8005f70:	6808      	ldr	r0, [r1, #0]
 8005f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f76:	f01e 0f10 	tst.w	lr, #16
 8005f7a:	bf08      	it	eq
 8005f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f80:	f380 8809 	msr	PSP, r0
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w

08005f90 <pxCurrentTCBConst>:
 8005f90:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop

08005f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	607b      	str	r3, [r7, #4]
}
 8005fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fb2:	f7ff fe4d 	bl	8005c50 <xTaskIncrementTick>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <xPortSysTickHandler+0x40>)
 8005fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <atoi>:
 8005fdc:	220a      	movs	r2, #10
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f000 b940 	b.w	8006264 <strtol>

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000020 	.word	0x20000020

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d0d      	ldr	r5, [pc, #52]	; (8006028 <__libc_init_array+0x38>)
 8005ff4:	4c0d      	ldr	r4, [pc, #52]	; (800602c <__libc_init_array+0x3c>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	4d0b      	ldr	r5, [pc, #44]	; (8006030 <__libc_init_array+0x40>)
 8006002:	4c0c      	ldr	r4, [pc, #48]	; (8006034 <__libc_init_array+0x44>)
 8006004:	f001 fa9e 	bl	8007544 <_init>
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	2600      	movs	r6, #0
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	08007828 	.word	0x08007828
 800602c:	08007828 	.word	0x08007828
 8006030:	08007828 	.word	0x08007828
 8006034:	0800782c 	.word	0x0800782c

08006038 <memcpy>:
 8006038:	440a      	add	r2, r1
 800603a:	4291      	cmp	r1, r2
 800603c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006040:	d100      	bne.n	8006044 <memcpy+0xc>
 8006042:	4770      	bx	lr
 8006044:	b510      	push	{r4, lr}
 8006046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800604e:	4291      	cmp	r1, r2
 8006050:	d1f9      	bne.n	8006046 <memcpy+0xe>
 8006052:	bd10      	pop	{r4, pc}

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <siprintf>:
 8006064:	b40e      	push	{r1, r2, r3}
 8006066:	b500      	push	{lr}
 8006068:	b09c      	sub	sp, #112	; 0x70
 800606a:	ab1d      	add	r3, sp, #116	; 0x74
 800606c:	9002      	str	r0, [sp, #8]
 800606e:	9006      	str	r0, [sp, #24]
 8006070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006074:	4809      	ldr	r0, [pc, #36]	; (800609c <siprintf+0x38>)
 8006076:	9107      	str	r1, [sp, #28]
 8006078:	9104      	str	r1, [sp, #16]
 800607a:	4909      	ldr	r1, [pc, #36]	; (80060a0 <siprintf+0x3c>)
 800607c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006080:	9105      	str	r1, [sp, #20]
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	a902      	add	r1, sp, #8
 8006088:	f000 fa34 	bl	80064f4 <_svfiprintf_r>
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	b01c      	add	sp, #112	; 0x70
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	20000020 	.word	0x20000020
 80060a0:	ffff0208 	.word	0xffff0208

080060a4 <strtok>:
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <strtok+0x5c>)
 80060a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060a8:	681e      	ldr	r6, [r3, #0]
 80060aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80060ac:	4605      	mov	r5, r0
 80060ae:	b9fc      	cbnz	r4, 80060f0 <strtok+0x4c>
 80060b0:	2050      	movs	r0, #80	; 0x50
 80060b2:	9101      	str	r1, [sp, #4]
 80060b4:	f000 f910 	bl	80062d8 <malloc>
 80060b8:	9901      	ldr	r1, [sp, #4]
 80060ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80060bc:	4602      	mov	r2, r0
 80060be:	b920      	cbnz	r0, 80060ca <strtok+0x26>
 80060c0:	4b10      	ldr	r3, [pc, #64]	; (8006104 <strtok+0x60>)
 80060c2:	4811      	ldr	r0, [pc, #68]	; (8006108 <strtok+0x64>)
 80060c4:	2157      	movs	r1, #87	; 0x57
 80060c6:	f000 f8d7 	bl	8006278 <__assert_func>
 80060ca:	e9c0 4400 	strd	r4, r4, [r0]
 80060ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80060d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80060d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80060da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80060de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80060e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80060e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80060ea:	6184      	str	r4, [r0, #24]
 80060ec:	7704      	strb	r4, [r0, #28]
 80060ee:	6244      	str	r4, [r0, #36]	; 0x24
 80060f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80060f2:	2301      	movs	r3, #1
 80060f4:	4628      	mov	r0, r5
 80060f6:	b002      	add	sp, #8
 80060f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060fc:	f000 b806 	b.w	800610c <__strtok_r>
 8006100:	20000020 	.word	0x20000020
 8006104:	080075d8 	.word	0x080075d8
 8006108:	080075ef 	.word	0x080075ef

0800610c <__strtok_r>:
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610e:	b908      	cbnz	r0, 8006114 <__strtok_r+0x8>
 8006110:	6810      	ldr	r0, [r2, #0]
 8006112:	b188      	cbz	r0, 8006138 <__strtok_r+0x2c>
 8006114:	4604      	mov	r4, r0
 8006116:	4620      	mov	r0, r4
 8006118:	f814 5b01 	ldrb.w	r5, [r4], #1
 800611c:	460f      	mov	r7, r1
 800611e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006122:	b91e      	cbnz	r6, 800612c <__strtok_r+0x20>
 8006124:	b965      	cbnz	r5, 8006140 <__strtok_r+0x34>
 8006126:	6015      	str	r5, [r2, #0]
 8006128:	4628      	mov	r0, r5
 800612a:	e005      	b.n	8006138 <__strtok_r+0x2c>
 800612c:	42b5      	cmp	r5, r6
 800612e:	d1f6      	bne.n	800611e <__strtok_r+0x12>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1f0      	bne.n	8006116 <__strtok_r+0xa>
 8006134:	6014      	str	r4, [r2, #0]
 8006136:	7003      	strb	r3, [r0, #0]
 8006138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800613a:	461c      	mov	r4, r3
 800613c:	e00c      	b.n	8006158 <__strtok_r+0x4c>
 800613e:	b915      	cbnz	r5, 8006146 <__strtok_r+0x3a>
 8006140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006144:	460e      	mov	r6, r1
 8006146:	f816 5b01 	ldrb.w	r5, [r6], #1
 800614a:	42ab      	cmp	r3, r5
 800614c:	d1f7      	bne.n	800613e <__strtok_r+0x32>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f3      	beq.n	800613a <__strtok_r+0x2e>
 8006152:	2300      	movs	r3, #0
 8006154:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006158:	6014      	str	r4, [r2, #0]
 800615a:	e7ed      	b.n	8006138 <__strtok_r+0x2c>

0800615c <_strtol_l.isra.0>:
 800615c:	2b01      	cmp	r3, #1
 800615e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006162:	d001      	beq.n	8006168 <_strtol_l.isra.0+0xc>
 8006164:	2b24      	cmp	r3, #36	; 0x24
 8006166:	d906      	bls.n	8006176 <_strtol_l.isra.0+0x1a>
 8006168:	f7ff ff3c 	bl	8005fe4 <__errno>
 800616c:	2316      	movs	r3, #22
 800616e:	6003      	str	r3, [r0, #0]
 8006170:	2000      	movs	r0, #0
 8006172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006176:	4f3a      	ldr	r7, [pc, #232]	; (8006260 <_strtol_l.isra.0+0x104>)
 8006178:	468e      	mov	lr, r1
 800617a:	4676      	mov	r6, lr
 800617c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006180:	5de5      	ldrb	r5, [r4, r7]
 8006182:	f015 0508 	ands.w	r5, r5, #8
 8006186:	d1f8      	bne.n	800617a <_strtol_l.isra.0+0x1e>
 8006188:	2c2d      	cmp	r4, #45	; 0x2d
 800618a:	d134      	bne.n	80061f6 <_strtol_l.isra.0+0x9a>
 800618c:	f89e 4000 	ldrb.w	r4, [lr]
 8006190:	f04f 0801 	mov.w	r8, #1
 8006194:	f106 0e02 	add.w	lr, r6, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05c      	beq.n	8006256 <_strtol_l.isra.0+0xfa>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d10c      	bne.n	80061ba <_strtol_l.isra.0+0x5e>
 80061a0:	2c30      	cmp	r4, #48	; 0x30
 80061a2:	d10a      	bne.n	80061ba <_strtol_l.isra.0+0x5e>
 80061a4:	f89e 4000 	ldrb.w	r4, [lr]
 80061a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061ac:	2c58      	cmp	r4, #88	; 0x58
 80061ae:	d14d      	bne.n	800624c <_strtol_l.isra.0+0xf0>
 80061b0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80061b4:	2310      	movs	r3, #16
 80061b6:	f10e 0e02 	add.w	lr, lr, #2
 80061ba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80061be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80061c2:	2600      	movs	r6, #0
 80061c4:	fbbc f9f3 	udiv	r9, ip, r3
 80061c8:	4635      	mov	r5, r6
 80061ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80061ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80061d2:	2f09      	cmp	r7, #9
 80061d4:	d818      	bhi.n	8006208 <_strtol_l.isra.0+0xac>
 80061d6:	463c      	mov	r4, r7
 80061d8:	42a3      	cmp	r3, r4
 80061da:	dd24      	ble.n	8006226 <_strtol_l.isra.0+0xca>
 80061dc:	2e00      	cmp	r6, #0
 80061de:	db1f      	blt.n	8006220 <_strtol_l.isra.0+0xc4>
 80061e0:	45a9      	cmp	r9, r5
 80061e2:	d31d      	bcc.n	8006220 <_strtol_l.isra.0+0xc4>
 80061e4:	d101      	bne.n	80061ea <_strtol_l.isra.0+0x8e>
 80061e6:	45a2      	cmp	sl, r4
 80061e8:	db1a      	blt.n	8006220 <_strtol_l.isra.0+0xc4>
 80061ea:	fb05 4503 	mla	r5, r5, r3, r4
 80061ee:	2601      	movs	r6, #1
 80061f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80061f4:	e7eb      	b.n	80061ce <_strtol_l.isra.0+0x72>
 80061f6:	2c2b      	cmp	r4, #43	; 0x2b
 80061f8:	bf08      	it	eq
 80061fa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80061fe:	46a8      	mov	r8, r5
 8006200:	bf08      	it	eq
 8006202:	f106 0e02 	addeq.w	lr, r6, #2
 8006206:	e7c7      	b.n	8006198 <_strtol_l.isra.0+0x3c>
 8006208:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800620c:	2f19      	cmp	r7, #25
 800620e:	d801      	bhi.n	8006214 <_strtol_l.isra.0+0xb8>
 8006210:	3c37      	subs	r4, #55	; 0x37
 8006212:	e7e1      	b.n	80061d8 <_strtol_l.isra.0+0x7c>
 8006214:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006218:	2f19      	cmp	r7, #25
 800621a:	d804      	bhi.n	8006226 <_strtol_l.isra.0+0xca>
 800621c:	3c57      	subs	r4, #87	; 0x57
 800621e:	e7db      	b.n	80061d8 <_strtol_l.isra.0+0x7c>
 8006220:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006224:	e7e4      	b.n	80061f0 <_strtol_l.isra.0+0x94>
 8006226:	2e00      	cmp	r6, #0
 8006228:	da05      	bge.n	8006236 <_strtol_l.isra.0+0xda>
 800622a:	2322      	movs	r3, #34	; 0x22
 800622c:	6003      	str	r3, [r0, #0]
 800622e:	4665      	mov	r5, ip
 8006230:	b942      	cbnz	r2, 8006244 <_strtol_l.isra.0+0xe8>
 8006232:	4628      	mov	r0, r5
 8006234:	e79d      	b.n	8006172 <_strtol_l.isra.0+0x16>
 8006236:	f1b8 0f00 	cmp.w	r8, #0
 800623a:	d000      	beq.n	800623e <_strtol_l.isra.0+0xe2>
 800623c:	426d      	negs	r5, r5
 800623e:	2a00      	cmp	r2, #0
 8006240:	d0f7      	beq.n	8006232 <_strtol_l.isra.0+0xd6>
 8006242:	b10e      	cbz	r6, 8006248 <_strtol_l.isra.0+0xec>
 8006244:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	e7f2      	b.n	8006232 <_strtol_l.isra.0+0xd6>
 800624c:	2430      	movs	r4, #48	; 0x30
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1b3      	bne.n	80061ba <_strtol_l.isra.0+0x5e>
 8006252:	2308      	movs	r3, #8
 8006254:	e7b1      	b.n	80061ba <_strtol_l.isra.0+0x5e>
 8006256:	2c30      	cmp	r4, #48	; 0x30
 8006258:	d0a4      	beq.n	80061a4 <_strtol_l.isra.0+0x48>
 800625a:	230a      	movs	r3, #10
 800625c:	e7ad      	b.n	80061ba <_strtol_l.isra.0+0x5e>
 800625e:	bf00      	nop
 8006260:	0800768d 	.word	0x0800768d

08006264 <strtol>:
 8006264:	4613      	mov	r3, r2
 8006266:	460a      	mov	r2, r1
 8006268:	4601      	mov	r1, r0
 800626a:	4802      	ldr	r0, [pc, #8]	; (8006274 <strtol+0x10>)
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f7ff bf75 	b.w	800615c <_strtol_l.isra.0>
 8006272:	bf00      	nop
 8006274:	20000020 	.word	0x20000020

08006278 <__assert_func>:
 8006278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800627a:	4614      	mov	r4, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <__assert_func+0x2c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4605      	mov	r5, r0
 8006284:	68d8      	ldr	r0, [r3, #12]
 8006286:	b14c      	cbz	r4, 800629c <__assert_func+0x24>
 8006288:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <__assert_func+0x30>)
 800628a:	9100      	str	r1, [sp, #0]
 800628c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006290:	4906      	ldr	r1, [pc, #24]	; (80062ac <__assert_func+0x34>)
 8006292:	462b      	mov	r3, r5
 8006294:	f000 f80e 	bl	80062b4 <fiprintf>
 8006298:	f000 fdea 	bl	8006e70 <abort>
 800629c:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <__assert_func+0x38>)
 800629e:	461c      	mov	r4, r3
 80062a0:	e7f3      	b.n	800628a <__assert_func+0x12>
 80062a2:	bf00      	nop
 80062a4:	20000020 	.word	0x20000020
 80062a8:	08007650 	.word	0x08007650
 80062ac:	0800765d 	.word	0x0800765d
 80062b0:	0800768b 	.word	0x0800768b

080062b4 <fiprintf>:
 80062b4:	b40e      	push	{r1, r2, r3}
 80062b6:	b503      	push	{r0, r1, lr}
 80062b8:	4601      	mov	r1, r0
 80062ba:	ab03      	add	r3, sp, #12
 80062bc:	4805      	ldr	r0, [pc, #20]	; (80062d4 <fiprintf+0x20>)
 80062be:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c2:	6800      	ldr	r0, [r0, #0]
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	f000 fa3f 	bl	8006748 <_vfiprintf_r>
 80062ca:	b002      	add	sp, #8
 80062cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d0:	b003      	add	sp, #12
 80062d2:	4770      	bx	lr
 80062d4:	20000020 	.word	0x20000020

080062d8 <malloc>:
 80062d8:	4b02      	ldr	r3, [pc, #8]	; (80062e4 <malloc+0xc>)
 80062da:	4601      	mov	r1, r0
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	f000 b853 	b.w	8006388 <_malloc_r>
 80062e2:	bf00      	nop
 80062e4:	20000020 	.word	0x20000020

080062e8 <_free_r>:
 80062e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062ea:	2900      	cmp	r1, #0
 80062ec:	d048      	beq.n	8006380 <_free_r+0x98>
 80062ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f2:	9001      	str	r0, [sp, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f1a1 0404 	sub.w	r4, r1, #4
 80062fa:	bfb8      	it	lt
 80062fc:	18e4      	addlt	r4, r4, r3
 80062fe:	f000 fff7 	bl	80072f0 <__malloc_lock>
 8006302:	4a20      	ldr	r2, [pc, #128]	; (8006384 <_free_r+0x9c>)
 8006304:	9801      	ldr	r0, [sp, #4]
 8006306:	6813      	ldr	r3, [r2, #0]
 8006308:	4615      	mov	r5, r2
 800630a:	b933      	cbnz	r3, 800631a <_free_r+0x32>
 800630c:	6063      	str	r3, [r4, #4]
 800630e:	6014      	str	r4, [r2, #0]
 8006310:	b003      	add	sp, #12
 8006312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006316:	f000 bff1 	b.w	80072fc <__malloc_unlock>
 800631a:	42a3      	cmp	r3, r4
 800631c:	d90b      	bls.n	8006336 <_free_r+0x4e>
 800631e:	6821      	ldr	r1, [r4, #0]
 8006320:	1862      	adds	r2, r4, r1
 8006322:	4293      	cmp	r3, r2
 8006324:	bf04      	itt	eq
 8006326:	681a      	ldreq	r2, [r3, #0]
 8006328:	685b      	ldreq	r3, [r3, #4]
 800632a:	6063      	str	r3, [r4, #4]
 800632c:	bf04      	itt	eq
 800632e:	1852      	addeq	r2, r2, r1
 8006330:	6022      	streq	r2, [r4, #0]
 8006332:	602c      	str	r4, [r5, #0]
 8006334:	e7ec      	b.n	8006310 <_free_r+0x28>
 8006336:	461a      	mov	r2, r3
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	b10b      	cbz	r3, 8006340 <_free_r+0x58>
 800633c:	42a3      	cmp	r3, r4
 800633e:	d9fa      	bls.n	8006336 <_free_r+0x4e>
 8006340:	6811      	ldr	r1, [r2, #0]
 8006342:	1855      	adds	r5, r2, r1
 8006344:	42a5      	cmp	r5, r4
 8006346:	d10b      	bne.n	8006360 <_free_r+0x78>
 8006348:	6824      	ldr	r4, [r4, #0]
 800634a:	4421      	add	r1, r4
 800634c:	1854      	adds	r4, r2, r1
 800634e:	42a3      	cmp	r3, r4
 8006350:	6011      	str	r1, [r2, #0]
 8006352:	d1dd      	bne.n	8006310 <_free_r+0x28>
 8006354:	681c      	ldr	r4, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	6053      	str	r3, [r2, #4]
 800635a:	4421      	add	r1, r4
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	e7d7      	b.n	8006310 <_free_r+0x28>
 8006360:	d902      	bls.n	8006368 <_free_r+0x80>
 8006362:	230c      	movs	r3, #12
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	e7d3      	b.n	8006310 <_free_r+0x28>
 8006368:	6825      	ldr	r5, [r4, #0]
 800636a:	1961      	adds	r1, r4, r5
 800636c:	428b      	cmp	r3, r1
 800636e:	bf04      	itt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	6063      	str	r3, [r4, #4]
 8006376:	bf04      	itt	eq
 8006378:	1949      	addeq	r1, r1, r5
 800637a:	6021      	streq	r1, [r4, #0]
 800637c:	6054      	str	r4, [r2, #4]
 800637e:	e7c7      	b.n	8006310 <_free_r+0x28>
 8006380:	b003      	add	sp, #12
 8006382:	bd30      	pop	{r4, r5, pc}
 8006384:	20000530 	.word	0x20000530

08006388 <_malloc_r>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	1ccd      	adds	r5, r1, #3
 800638c:	f025 0503 	bic.w	r5, r5, #3
 8006390:	3508      	adds	r5, #8
 8006392:	2d0c      	cmp	r5, #12
 8006394:	bf38      	it	cc
 8006396:	250c      	movcc	r5, #12
 8006398:	2d00      	cmp	r5, #0
 800639a:	4606      	mov	r6, r0
 800639c:	db01      	blt.n	80063a2 <_malloc_r+0x1a>
 800639e:	42a9      	cmp	r1, r5
 80063a0:	d903      	bls.n	80063aa <_malloc_r+0x22>
 80063a2:	230c      	movs	r3, #12
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	2000      	movs	r0, #0
 80063a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063aa:	f000 ffa1 	bl	80072f0 <__malloc_lock>
 80063ae:	4921      	ldr	r1, [pc, #132]	; (8006434 <_malloc_r+0xac>)
 80063b0:	680a      	ldr	r2, [r1, #0]
 80063b2:	4614      	mov	r4, r2
 80063b4:	b99c      	cbnz	r4, 80063de <_malloc_r+0x56>
 80063b6:	4f20      	ldr	r7, [pc, #128]	; (8006438 <_malloc_r+0xb0>)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	b923      	cbnz	r3, 80063c6 <_malloc_r+0x3e>
 80063bc:	4621      	mov	r1, r4
 80063be:	4630      	mov	r0, r6
 80063c0:	f000 fc86 	bl	8006cd0 <_sbrk_r>
 80063c4:	6038      	str	r0, [r7, #0]
 80063c6:	4629      	mov	r1, r5
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 fc81 	bl	8006cd0 <_sbrk_r>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d123      	bne.n	800641a <_malloc_r+0x92>
 80063d2:	230c      	movs	r3, #12
 80063d4:	6033      	str	r3, [r6, #0]
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 ff90 	bl	80072fc <__malloc_unlock>
 80063dc:	e7e3      	b.n	80063a6 <_malloc_r+0x1e>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	1b5b      	subs	r3, r3, r5
 80063e2:	d417      	bmi.n	8006414 <_malloc_r+0x8c>
 80063e4:	2b0b      	cmp	r3, #11
 80063e6:	d903      	bls.n	80063f0 <_malloc_r+0x68>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	441c      	add	r4, r3
 80063ec:	6025      	str	r5, [r4, #0]
 80063ee:	e004      	b.n	80063fa <_malloc_r+0x72>
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	42a2      	cmp	r2, r4
 80063f4:	bf0c      	ite	eq
 80063f6:	600b      	streq	r3, [r1, #0]
 80063f8:	6053      	strne	r3, [r2, #4]
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 ff7e 	bl	80072fc <__malloc_unlock>
 8006400:	f104 000b 	add.w	r0, r4, #11
 8006404:	1d23      	adds	r3, r4, #4
 8006406:	f020 0007 	bic.w	r0, r0, #7
 800640a:	1ac2      	subs	r2, r0, r3
 800640c:	d0cc      	beq.n	80063a8 <_malloc_r+0x20>
 800640e:	1a1b      	subs	r3, r3, r0
 8006410:	50a3      	str	r3, [r4, r2]
 8006412:	e7c9      	b.n	80063a8 <_malloc_r+0x20>
 8006414:	4622      	mov	r2, r4
 8006416:	6864      	ldr	r4, [r4, #4]
 8006418:	e7cc      	b.n	80063b4 <_malloc_r+0x2c>
 800641a:	1cc4      	adds	r4, r0, #3
 800641c:	f024 0403 	bic.w	r4, r4, #3
 8006420:	42a0      	cmp	r0, r4
 8006422:	d0e3      	beq.n	80063ec <_malloc_r+0x64>
 8006424:	1a21      	subs	r1, r4, r0
 8006426:	4630      	mov	r0, r6
 8006428:	f000 fc52 	bl	8006cd0 <_sbrk_r>
 800642c:	3001      	adds	r0, #1
 800642e:	d1dd      	bne.n	80063ec <_malloc_r+0x64>
 8006430:	e7cf      	b.n	80063d2 <_malloc_r+0x4a>
 8006432:	bf00      	nop
 8006434:	20000530 	.word	0x20000530
 8006438:	20000534 	.word	0x20000534

0800643c <__ssputs_r>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	688e      	ldr	r6, [r1, #8]
 8006442:	429e      	cmp	r6, r3
 8006444:	4682      	mov	sl, r0
 8006446:	460c      	mov	r4, r1
 8006448:	4690      	mov	r8, r2
 800644a:	461f      	mov	r7, r3
 800644c:	d838      	bhi.n	80064c0 <__ssputs_r+0x84>
 800644e:	898a      	ldrh	r2, [r1, #12]
 8006450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006454:	d032      	beq.n	80064bc <__ssputs_r+0x80>
 8006456:	6825      	ldr	r5, [r4, #0]
 8006458:	6909      	ldr	r1, [r1, #16]
 800645a:	eba5 0901 	sub.w	r9, r5, r1
 800645e:	6965      	ldr	r5, [r4, #20]
 8006460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006468:	3301      	adds	r3, #1
 800646a:	444b      	add	r3, r9
 800646c:	106d      	asrs	r5, r5, #1
 800646e:	429d      	cmp	r5, r3
 8006470:	bf38      	it	cc
 8006472:	461d      	movcc	r5, r3
 8006474:	0553      	lsls	r3, r2, #21
 8006476:	d531      	bpl.n	80064dc <__ssputs_r+0xa0>
 8006478:	4629      	mov	r1, r5
 800647a:	f7ff ff85 	bl	8006388 <_malloc_r>
 800647e:	4606      	mov	r6, r0
 8006480:	b950      	cbnz	r0, 8006498 <__ssputs_r+0x5c>
 8006482:	230c      	movs	r3, #12
 8006484:	f8ca 3000 	str.w	r3, [sl]
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648e:	81a3      	strh	r3, [r4, #12]
 8006490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006498:	6921      	ldr	r1, [r4, #16]
 800649a:	464a      	mov	r2, r9
 800649c:	f7ff fdcc 	bl	8006038 <memcpy>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	6126      	str	r6, [r4, #16]
 80064ae:	6165      	str	r5, [r4, #20]
 80064b0:	444e      	add	r6, r9
 80064b2:	eba5 0509 	sub.w	r5, r5, r9
 80064b6:	6026      	str	r6, [r4, #0]
 80064b8:	60a5      	str	r5, [r4, #8]
 80064ba:	463e      	mov	r6, r7
 80064bc:	42be      	cmp	r6, r7
 80064be:	d900      	bls.n	80064c2 <__ssputs_r+0x86>
 80064c0:	463e      	mov	r6, r7
 80064c2:	4632      	mov	r2, r6
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	4641      	mov	r1, r8
 80064c8:	f000 fef8 	bl	80072bc <memmove>
 80064cc:	68a3      	ldr	r3, [r4, #8]
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	1b9b      	subs	r3, r3, r6
 80064d2:	4432      	add	r2, r6
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	6022      	str	r2, [r4, #0]
 80064d8:	2000      	movs	r0, #0
 80064da:	e7db      	b.n	8006494 <__ssputs_r+0x58>
 80064dc:	462a      	mov	r2, r5
 80064de:	f000 ff13 	bl	8007308 <_realloc_r>
 80064e2:	4606      	mov	r6, r0
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d1e1      	bne.n	80064ac <__ssputs_r+0x70>
 80064e8:	6921      	ldr	r1, [r4, #16]
 80064ea:	4650      	mov	r0, sl
 80064ec:	f7ff fefc 	bl	80062e8 <_free_r>
 80064f0:	e7c7      	b.n	8006482 <__ssputs_r+0x46>
	...

080064f4 <_svfiprintf_r>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	4698      	mov	r8, r3
 80064fa:	898b      	ldrh	r3, [r1, #12]
 80064fc:	061b      	lsls	r3, r3, #24
 80064fe:	b09d      	sub	sp, #116	; 0x74
 8006500:	4607      	mov	r7, r0
 8006502:	460d      	mov	r5, r1
 8006504:	4614      	mov	r4, r2
 8006506:	d50e      	bpl.n	8006526 <_svfiprintf_r+0x32>
 8006508:	690b      	ldr	r3, [r1, #16]
 800650a:	b963      	cbnz	r3, 8006526 <_svfiprintf_r+0x32>
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	f7ff ff3b 	bl	8006388 <_malloc_r>
 8006512:	6028      	str	r0, [r5, #0]
 8006514:	6128      	str	r0, [r5, #16]
 8006516:	b920      	cbnz	r0, 8006522 <_svfiprintf_r+0x2e>
 8006518:	230c      	movs	r3, #12
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006520:	e0d1      	b.n	80066c6 <_svfiprintf_r+0x1d2>
 8006522:	2340      	movs	r3, #64	; 0x40
 8006524:	616b      	str	r3, [r5, #20]
 8006526:	2300      	movs	r3, #0
 8006528:	9309      	str	r3, [sp, #36]	; 0x24
 800652a:	2320      	movs	r3, #32
 800652c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006530:	f8cd 800c 	str.w	r8, [sp, #12]
 8006534:	2330      	movs	r3, #48	; 0x30
 8006536:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066e0 <_svfiprintf_r+0x1ec>
 800653a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800653e:	f04f 0901 	mov.w	r9, #1
 8006542:	4623      	mov	r3, r4
 8006544:	469a      	mov	sl, r3
 8006546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800654a:	b10a      	cbz	r2, 8006550 <_svfiprintf_r+0x5c>
 800654c:	2a25      	cmp	r2, #37	; 0x25
 800654e:	d1f9      	bne.n	8006544 <_svfiprintf_r+0x50>
 8006550:	ebba 0b04 	subs.w	fp, sl, r4
 8006554:	d00b      	beq.n	800656e <_svfiprintf_r+0x7a>
 8006556:	465b      	mov	r3, fp
 8006558:	4622      	mov	r2, r4
 800655a:	4629      	mov	r1, r5
 800655c:	4638      	mov	r0, r7
 800655e:	f7ff ff6d 	bl	800643c <__ssputs_r>
 8006562:	3001      	adds	r0, #1
 8006564:	f000 80aa 	beq.w	80066bc <_svfiprintf_r+0x1c8>
 8006568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800656a:	445a      	add	r2, fp
 800656c:	9209      	str	r2, [sp, #36]	; 0x24
 800656e:	f89a 3000 	ldrb.w	r3, [sl]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80a2 	beq.w	80066bc <_svfiprintf_r+0x1c8>
 8006578:	2300      	movs	r3, #0
 800657a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800657e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006582:	f10a 0a01 	add.w	sl, sl, #1
 8006586:	9304      	str	r3, [sp, #16]
 8006588:	9307      	str	r3, [sp, #28]
 800658a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800658e:	931a      	str	r3, [sp, #104]	; 0x68
 8006590:	4654      	mov	r4, sl
 8006592:	2205      	movs	r2, #5
 8006594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006598:	4851      	ldr	r0, [pc, #324]	; (80066e0 <_svfiprintf_r+0x1ec>)
 800659a:	f7f9 fe19 	bl	80001d0 <memchr>
 800659e:	9a04      	ldr	r2, [sp, #16]
 80065a0:	b9d8      	cbnz	r0, 80065da <_svfiprintf_r+0xe6>
 80065a2:	06d0      	lsls	r0, r2, #27
 80065a4:	bf44      	itt	mi
 80065a6:	2320      	movmi	r3, #32
 80065a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ac:	0711      	lsls	r1, r2, #28
 80065ae:	bf44      	itt	mi
 80065b0:	232b      	movmi	r3, #43	; 0x2b
 80065b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b6:	f89a 3000 	ldrb.w	r3, [sl]
 80065ba:	2b2a      	cmp	r3, #42	; 0x2a
 80065bc:	d015      	beq.n	80065ea <_svfiprintf_r+0xf6>
 80065be:	9a07      	ldr	r2, [sp, #28]
 80065c0:	4654      	mov	r4, sl
 80065c2:	2000      	movs	r0, #0
 80065c4:	f04f 0c0a 	mov.w	ip, #10
 80065c8:	4621      	mov	r1, r4
 80065ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ce:	3b30      	subs	r3, #48	; 0x30
 80065d0:	2b09      	cmp	r3, #9
 80065d2:	d94e      	bls.n	8006672 <_svfiprintf_r+0x17e>
 80065d4:	b1b0      	cbz	r0, 8006604 <_svfiprintf_r+0x110>
 80065d6:	9207      	str	r2, [sp, #28]
 80065d8:	e014      	b.n	8006604 <_svfiprintf_r+0x110>
 80065da:	eba0 0308 	sub.w	r3, r0, r8
 80065de:	fa09 f303 	lsl.w	r3, r9, r3
 80065e2:	4313      	orrs	r3, r2
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	46a2      	mov	sl, r4
 80065e8:	e7d2      	b.n	8006590 <_svfiprintf_r+0x9c>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	1d19      	adds	r1, r3, #4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	9103      	str	r1, [sp, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfbb      	ittet	lt
 80065f6:	425b      	neglt	r3, r3
 80065f8:	f042 0202 	orrlt.w	r2, r2, #2
 80065fc:	9307      	strge	r3, [sp, #28]
 80065fe:	9307      	strlt	r3, [sp, #28]
 8006600:	bfb8      	it	lt
 8006602:	9204      	strlt	r2, [sp, #16]
 8006604:	7823      	ldrb	r3, [r4, #0]
 8006606:	2b2e      	cmp	r3, #46	; 0x2e
 8006608:	d10c      	bne.n	8006624 <_svfiprintf_r+0x130>
 800660a:	7863      	ldrb	r3, [r4, #1]
 800660c:	2b2a      	cmp	r3, #42	; 0x2a
 800660e:	d135      	bne.n	800667c <_svfiprintf_r+0x188>
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	9203      	str	r2, [sp, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	bfb8      	it	lt
 800661c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006620:	3402      	adds	r4, #2
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066f0 <_svfiprintf_r+0x1fc>
 8006628:	7821      	ldrb	r1, [r4, #0]
 800662a:	2203      	movs	r2, #3
 800662c:	4650      	mov	r0, sl
 800662e:	f7f9 fdcf 	bl	80001d0 <memchr>
 8006632:	b140      	cbz	r0, 8006646 <_svfiprintf_r+0x152>
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	eba0 000a 	sub.w	r0, r0, sl
 800663a:	fa03 f000 	lsl.w	r0, r3, r0
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	4303      	orrs	r3, r0
 8006642:	3401      	adds	r4, #1
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664a:	4826      	ldr	r0, [pc, #152]	; (80066e4 <_svfiprintf_r+0x1f0>)
 800664c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006650:	2206      	movs	r2, #6
 8006652:	f7f9 fdbd 	bl	80001d0 <memchr>
 8006656:	2800      	cmp	r0, #0
 8006658:	d038      	beq.n	80066cc <_svfiprintf_r+0x1d8>
 800665a:	4b23      	ldr	r3, [pc, #140]	; (80066e8 <_svfiprintf_r+0x1f4>)
 800665c:	bb1b      	cbnz	r3, 80066a6 <_svfiprintf_r+0x1b2>
 800665e:	9b03      	ldr	r3, [sp, #12]
 8006660:	3307      	adds	r3, #7
 8006662:	f023 0307 	bic.w	r3, r3, #7
 8006666:	3308      	adds	r3, #8
 8006668:	9303      	str	r3, [sp, #12]
 800666a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666c:	4433      	add	r3, r6
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
 8006670:	e767      	b.n	8006542 <_svfiprintf_r+0x4e>
 8006672:	fb0c 3202 	mla	r2, ip, r2, r3
 8006676:	460c      	mov	r4, r1
 8006678:	2001      	movs	r0, #1
 800667a:	e7a5      	b.n	80065c8 <_svfiprintf_r+0xd4>
 800667c:	2300      	movs	r3, #0
 800667e:	3401      	adds	r4, #1
 8006680:	9305      	str	r3, [sp, #20]
 8006682:	4619      	mov	r1, r3
 8006684:	f04f 0c0a 	mov.w	ip, #10
 8006688:	4620      	mov	r0, r4
 800668a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800668e:	3a30      	subs	r2, #48	; 0x30
 8006690:	2a09      	cmp	r2, #9
 8006692:	d903      	bls.n	800669c <_svfiprintf_r+0x1a8>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0c5      	beq.n	8006624 <_svfiprintf_r+0x130>
 8006698:	9105      	str	r1, [sp, #20]
 800669a:	e7c3      	b.n	8006624 <_svfiprintf_r+0x130>
 800669c:	fb0c 2101 	mla	r1, ip, r1, r2
 80066a0:	4604      	mov	r4, r0
 80066a2:	2301      	movs	r3, #1
 80066a4:	e7f0      	b.n	8006688 <_svfiprintf_r+0x194>
 80066a6:	ab03      	add	r3, sp, #12
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	462a      	mov	r2, r5
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <_svfiprintf_r+0x1f8>)
 80066ae:	a904      	add	r1, sp, #16
 80066b0:	4638      	mov	r0, r7
 80066b2:	f3af 8000 	nop.w
 80066b6:	1c42      	adds	r2, r0, #1
 80066b8:	4606      	mov	r6, r0
 80066ba:	d1d6      	bne.n	800666a <_svfiprintf_r+0x176>
 80066bc:	89ab      	ldrh	r3, [r5, #12]
 80066be:	065b      	lsls	r3, r3, #25
 80066c0:	f53f af2c 	bmi.w	800651c <_svfiprintf_r+0x28>
 80066c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c6:	b01d      	add	sp, #116	; 0x74
 80066c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066cc:	ab03      	add	r3, sp, #12
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	462a      	mov	r2, r5
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <_svfiprintf_r+0x1f8>)
 80066d4:	a904      	add	r1, sp, #16
 80066d6:	4638      	mov	r0, r7
 80066d8:	f000 f9d4 	bl	8006a84 <_printf_i>
 80066dc:	e7eb      	b.n	80066b6 <_svfiprintf_r+0x1c2>
 80066de:	bf00      	nop
 80066e0:	0800778d 	.word	0x0800778d
 80066e4:	08007797 	.word	0x08007797
 80066e8:	00000000 	.word	0x00000000
 80066ec:	0800643d 	.word	0x0800643d
 80066f0:	08007793 	.word	0x08007793

080066f4 <__sfputc_r>:
 80066f4:	6893      	ldr	r3, [r2, #8]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	b410      	push	{r4}
 80066fc:	6093      	str	r3, [r2, #8]
 80066fe:	da08      	bge.n	8006712 <__sfputc_r+0x1e>
 8006700:	6994      	ldr	r4, [r2, #24]
 8006702:	42a3      	cmp	r3, r4
 8006704:	db01      	blt.n	800670a <__sfputc_r+0x16>
 8006706:	290a      	cmp	r1, #10
 8006708:	d103      	bne.n	8006712 <__sfputc_r+0x1e>
 800670a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800670e:	f000 baef 	b.w	8006cf0 <__swbuf_r>
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	1c58      	adds	r0, r3, #1
 8006716:	6010      	str	r0, [r2, #0]
 8006718:	7019      	strb	r1, [r3, #0]
 800671a:	4608      	mov	r0, r1
 800671c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006720:	4770      	bx	lr

08006722 <__sfputs_r>:
 8006722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006724:	4606      	mov	r6, r0
 8006726:	460f      	mov	r7, r1
 8006728:	4614      	mov	r4, r2
 800672a:	18d5      	adds	r5, r2, r3
 800672c:	42ac      	cmp	r4, r5
 800672e:	d101      	bne.n	8006734 <__sfputs_r+0x12>
 8006730:	2000      	movs	r0, #0
 8006732:	e007      	b.n	8006744 <__sfputs_r+0x22>
 8006734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006738:	463a      	mov	r2, r7
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff ffda 	bl	80066f4 <__sfputc_r>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d1f3      	bne.n	800672c <__sfputs_r+0xa>
 8006744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006748 <_vfiprintf_r>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	460d      	mov	r5, r1
 800674e:	b09d      	sub	sp, #116	; 0x74
 8006750:	4614      	mov	r4, r2
 8006752:	4698      	mov	r8, r3
 8006754:	4606      	mov	r6, r0
 8006756:	b118      	cbz	r0, 8006760 <_vfiprintf_r+0x18>
 8006758:	6983      	ldr	r3, [r0, #24]
 800675a:	b90b      	cbnz	r3, 8006760 <_vfiprintf_r+0x18>
 800675c:	f000 fcaa 	bl	80070b4 <__sinit>
 8006760:	4b89      	ldr	r3, [pc, #548]	; (8006988 <_vfiprintf_r+0x240>)
 8006762:	429d      	cmp	r5, r3
 8006764:	d11b      	bne.n	800679e <_vfiprintf_r+0x56>
 8006766:	6875      	ldr	r5, [r6, #4]
 8006768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800676a:	07d9      	lsls	r1, r3, #31
 800676c:	d405      	bmi.n	800677a <_vfiprintf_r+0x32>
 800676e:	89ab      	ldrh	r3, [r5, #12]
 8006770:	059a      	lsls	r2, r3, #22
 8006772:	d402      	bmi.n	800677a <_vfiprintf_r+0x32>
 8006774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006776:	f000 fd3b 	bl	80071f0 <__retarget_lock_acquire_recursive>
 800677a:	89ab      	ldrh	r3, [r5, #12]
 800677c:	071b      	lsls	r3, r3, #28
 800677e:	d501      	bpl.n	8006784 <_vfiprintf_r+0x3c>
 8006780:	692b      	ldr	r3, [r5, #16]
 8006782:	b9eb      	cbnz	r3, 80067c0 <_vfiprintf_r+0x78>
 8006784:	4629      	mov	r1, r5
 8006786:	4630      	mov	r0, r6
 8006788:	f000 fb04 	bl	8006d94 <__swsetup_r>
 800678c:	b1c0      	cbz	r0, 80067c0 <_vfiprintf_r+0x78>
 800678e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006790:	07dc      	lsls	r4, r3, #31
 8006792:	d50e      	bpl.n	80067b2 <_vfiprintf_r+0x6a>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006798:	b01d      	add	sp, #116	; 0x74
 800679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679e:	4b7b      	ldr	r3, [pc, #492]	; (800698c <_vfiprintf_r+0x244>)
 80067a0:	429d      	cmp	r5, r3
 80067a2:	d101      	bne.n	80067a8 <_vfiprintf_r+0x60>
 80067a4:	68b5      	ldr	r5, [r6, #8]
 80067a6:	e7df      	b.n	8006768 <_vfiprintf_r+0x20>
 80067a8:	4b79      	ldr	r3, [pc, #484]	; (8006990 <_vfiprintf_r+0x248>)
 80067aa:	429d      	cmp	r5, r3
 80067ac:	bf08      	it	eq
 80067ae:	68f5      	ldreq	r5, [r6, #12]
 80067b0:	e7da      	b.n	8006768 <_vfiprintf_r+0x20>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	0598      	lsls	r0, r3, #22
 80067b6:	d4ed      	bmi.n	8006794 <_vfiprintf_r+0x4c>
 80067b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ba:	f000 fd1a 	bl	80071f2 <__retarget_lock_release_recursive>
 80067be:	e7e9      	b.n	8006794 <_vfiprintf_r+0x4c>
 80067c0:	2300      	movs	r3, #0
 80067c2:	9309      	str	r3, [sp, #36]	; 0x24
 80067c4:	2320      	movs	r3, #32
 80067c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ce:	2330      	movs	r3, #48	; 0x30
 80067d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006994 <_vfiprintf_r+0x24c>
 80067d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067d8:	f04f 0901 	mov.w	r9, #1
 80067dc:	4623      	mov	r3, r4
 80067de:	469a      	mov	sl, r3
 80067e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067e4:	b10a      	cbz	r2, 80067ea <_vfiprintf_r+0xa2>
 80067e6:	2a25      	cmp	r2, #37	; 0x25
 80067e8:	d1f9      	bne.n	80067de <_vfiprintf_r+0x96>
 80067ea:	ebba 0b04 	subs.w	fp, sl, r4
 80067ee:	d00b      	beq.n	8006808 <_vfiprintf_r+0xc0>
 80067f0:	465b      	mov	r3, fp
 80067f2:	4622      	mov	r2, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	4630      	mov	r0, r6
 80067f8:	f7ff ff93 	bl	8006722 <__sfputs_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	f000 80aa 	beq.w	8006956 <_vfiprintf_r+0x20e>
 8006802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006804:	445a      	add	r2, fp
 8006806:	9209      	str	r2, [sp, #36]	; 0x24
 8006808:	f89a 3000 	ldrb.w	r3, [sl]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 80a2 	beq.w	8006956 <_vfiprintf_r+0x20e>
 8006812:	2300      	movs	r3, #0
 8006814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800681c:	f10a 0a01 	add.w	sl, sl, #1
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	9307      	str	r3, [sp, #28]
 8006824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006828:	931a      	str	r3, [sp, #104]	; 0x68
 800682a:	4654      	mov	r4, sl
 800682c:	2205      	movs	r2, #5
 800682e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006832:	4858      	ldr	r0, [pc, #352]	; (8006994 <_vfiprintf_r+0x24c>)
 8006834:	f7f9 fccc 	bl	80001d0 <memchr>
 8006838:	9a04      	ldr	r2, [sp, #16]
 800683a:	b9d8      	cbnz	r0, 8006874 <_vfiprintf_r+0x12c>
 800683c:	06d1      	lsls	r1, r2, #27
 800683e:	bf44      	itt	mi
 8006840:	2320      	movmi	r3, #32
 8006842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006846:	0713      	lsls	r3, r2, #28
 8006848:	bf44      	itt	mi
 800684a:	232b      	movmi	r3, #43	; 0x2b
 800684c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006850:	f89a 3000 	ldrb.w	r3, [sl]
 8006854:	2b2a      	cmp	r3, #42	; 0x2a
 8006856:	d015      	beq.n	8006884 <_vfiprintf_r+0x13c>
 8006858:	9a07      	ldr	r2, [sp, #28]
 800685a:	4654      	mov	r4, sl
 800685c:	2000      	movs	r0, #0
 800685e:	f04f 0c0a 	mov.w	ip, #10
 8006862:	4621      	mov	r1, r4
 8006864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006868:	3b30      	subs	r3, #48	; 0x30
 800686a:	2b09      	cmp	r3, #9
 800686c:	d94e      	bls.n	800690c <_vfiprintf_r+0x1c4>
 800686e:	b1b0      	cbz	r0, 800689e <_vfiprintf_r+0x156>
 8006870:	9207      	str	r2, [sp, #28]
 8006872:	e014      	b.n	800689e <_vfiprintf_r+0x156>
 8006874:	eba0 0308 	sub.w	r3, r0, r8
 8006878:	fa09 f303 	lsl.w	r3, r9, r3
 800687c:	4313      	orrs	r3, r2
 800687e:	9304      	str	r3, [sp, #16]
 8006880:	46a2      	mov	sl, r4
 8006882:	e7d2      	b.n	800682a <_vfiprintf_r+0xe2>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	1d19      	adds	r1, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	9103      	str	r1, [sp, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	bfbb      	ittet	lt
 8006890:	425b      	neglt	r3, r3
 8006892:	f042 0202 	orrlt.w	r2, r2, #2
 8006896:	9307      	strge	r3, [sp, #28]
 8006898:	9307      	strlt	r3, [sp, #28]
 800689a:	bfb8      	it	lt
 800689c:	9204      	strlt	r2, [sp, #16]
 800689e:	7823      	ldrb	r3, [r4, #0]
 80068a0:	2b2e      	cmp	r3, #46	; 0x2e
 80068a2:	d10c      	bne.n	80068be <_vfiprintf_r+0x176>
 80068a4:	7863      	ldrb	r3, [r4, #1]
 80068a6:	2b2a      	cmp	r3, #42	; 0x2a
 80068a8:	d135      	bne.n	8006916 <_vfiprintf_r+0x1ce>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	1d1a      	adds	r2, r3, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	9203      	str	r2, [sp, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bfb8      	it	lt
 80068b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068ba:	3402      	adds	r4, #2
 80068bc:	9305      	str	r3, [sp, #20]
 80068be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069a4 <_vfiprintf_r+0x25c>
 80068c2:	7821      	ldrb	r1, [r4, #0]
 80068c4:	2203      	movs	r2, #3
 80068c6:	4650      	mov	r0, sl
 80068c8:	f7f9 fc82 	bl	80001d0 <memchr>
 80068cc:	b140      	cbz	r0, 80068e0 <_vfiprintf_r+0x198>
 80068ce:	2340      	movs	r3, #64	; 0x40
 80068d0:	eba0 000a 	sub.w	r0, r0, sl
 80068d4:	fa03 f000 	lsl.w	r0, r3, r0
 80068d8:	9b04      	ldr	r3, [sp, #16]
 80068da:	4303      	orrs	r3, r0
 80068dc:	3401      	adds	r4, #1
 80068de:	9304      	str	r3, [sp, #16]
 80068e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e4:	482c      	ldr	r0, [pc, #176]	; (8006998 <_vfiprintf_r+0x250>)
 80068e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ea:	2206      	movs	r2, #6
 80068ec:	f7f9 fc70 	bl	80001d0 <memchr>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d03f      	beq.n	8006974 <_vfiprintf_r+0x22c>
 80068f4:	4b29      	ldr	r3, [pc, #164]	; (800699c <_vfiprintf_r+0x254>)
 80068f6:	bb1b      	cbnz	r3, 8006940 <_vfiprintf_r+0x1f8>
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	3307      	adds	r3, #7
 80068fc:	f023 0307 	bic.w	r3, r3, #7
 8006900:	3308      	adds	r3, #8
 8006902:	9303      	str	r3, [sp, #12]
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	443b      	add	r3, r7
 8006908:	9309      	str	r3, [sp, #36]	; 0x24
 800690a:	e767      	b.n	80067dc <_vfiprintf_r+0x94>
 800690c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006910:	460c      	mov	r4, r1
 8006912:	2001      	movs	r0, #1
 8006914:	e7a5      	b.n	8006862 <_vfiprintf_r+0x11a>
 8006916:	2300      	movs	r3, #0
 8006918:	3401      	adds	r4, #1
 800691a:	9305      	str	r3, [sp, #20]
 800691c:	4619      	mov	r1, r3
 800691e:	f04f 0c0a 	mov.w	ip, #10
 8006922:	4620      	mov	r0, r4
 8006924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006928:	3a30      	subs	r2, #48	; 0x30
 800692a:	2a09      	cmp	r2, #9
 800692c:	d903      	bls.n	8006936 <_vfiprintf_r+0x1ee>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0c5      	beq.n	80068be <_vfiprintf_r+0x176>
 8006932:	9105      	str	r1, [sp, #20]
 8006934:	e7c3      	b.n	80068be <_vfiprintf_r+0x176>
 8006936:	fb0c 2101 	mla	r1, ip, r1, r2
 800693a:	4604      	mov	r4, r0
 800693c:	2301      	movs	r3, #1
 800693e:	e7f0      	b.n	8006922 <_vfiprintf_r+0x1da>
 8006940:	ab03      	add	r3, sp, #12
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	462a      	mov	r2, r5
 8006946:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <_vfiprintf_r+0x258>)
 8006948:	a904      	add	r1, sp, #16
 800694a:	4630      	mov	r0, r6
 800694c:	f3af 8000 	nop.w
 8006950:	4607      	mov	r7, r0
 8006952:	1c78      	adds	r0, r7, #1
 8006954:	d1d6      	bne.n	8006904 <_vfiprintf_r+0x1bc>
 8006956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006958:	07d9      	lsls	r1, r3, #31
 800695a:	d405      	bmi.n	8006968 <_vfiprintf_r+0x220>
 800695c:	89ab      	ldrh	r3, [r5, #12]
 800695e:	059a      	lsls	r2, r3, #22
 8006960:	d402      	bmi.n	8006968 <_vfiprintf_r+0x220>
 8006962:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006964:	f000 fc45 	bl	80071f2 <__retarget_lock_release_recursive>
 8006968:	89ab      	ldrh	r3, [r5, #12]
 800696a:	065b      	lsls	r3, r3, #25
 800696c:	f53f af12 	bmi.w	8006794 <_vfiprintf_r+0x4c>
 8006970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006972:	e711      	b.n	8006798 <_vfiprintf_r+0x50>
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	462a      	mov	r2, r5
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <_vfiprintf_r+0x258>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	4630      	mov	r0, r6
 8006980:	f000 f880 	bl	8006a84 <_printf_i>
 8006984:	e7e4      	b.n	8006950 <_vfiprintf_r+0x208>
 8006986:	bf00      	nop
 8006988:	080077e0 	.word	0x080077e0
 800698c:	08007800 	.word	0x08007800
 8006990:	080077c0 	.word	0x080077c0
 8006994:	0800778d 	.word	0x0800778d
 8006998:	08007797 	.word	0x08007797
 800699c:	00000000 	.word	0x00000000
 80069a0:	08006723 	.word	0x08006723
 80069a4:	08007793 	.word	0x08007793

080069a8 <_printf_common>:
 80069a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	4616      	mov	r6, r2
 80069ae:	4699      	mov	r9, r3
 80069b0:	688a      	ldr	r2, [r1, #8]
 80069b2:	690b      	ldr	r3, [r1, #16]
 80069b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069b8:	4293      	cmp	r3, r2
 80069ba:	bfb8      	it	lt
 80069bc:	4613      	movlt	r3, r2
 80069be:	6033      	str	r3, [r6, #0]
 80069c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069c4:	4607      	mov	r7, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	b10a      	cbz	r2, 80069ce <_printf_common+0x26>
 80069ca:	3301      	adds	r3, #1
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	0699      	lsls	r1, r3, #26
 80069d2:	bf42      	ittt	mi
 80069d4:	6833      	ldrmi	r3, [r6, #0]
 80069d6:	3302      	addmi	r3, #2
 80069d8:	6033      	strmi	r3, [r6, #0]
 80069da:	6825      	ldr	r5, [r4, #0]
 80069dc:	f015 0506 	ands.w	r5, r5, #6
 80069e0:	d106      	bne.n	80069f0 <_printf_common+0x48>
 80069e2:	f104 0a19 	add.w	sl, r4, #25
 80069e6:	68e3      	ldr	r3, [r4, #12]
 80069e8:	6832      	ldr	r2, [r6, #0]
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	dc26      	bgt.n	8006a3e <_printf_common+0x96>
 80069f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069f4:	1e13      	subs	r3, r2, #0
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	bf18      	it	ne
 80069fa:	2301      	movne	r3, #1
 80069fc:	0692      	lsls	r2, r2, #26
 80069fe:	d42b      	bmi.n	8006a58 <_printf_common+0xb0>
 8006a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a04:	4649      	mov	r1, r9
 8006a06:	4638      	mov	r0, r7
 8006a08:	47c0      	blx	r8
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d01e      	beq.n	8006a4c <_printf_common+0xa4>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	68e5      	ldr	r5, [r4, #12]
 8006a12:	6832      	ldr	r2, [r6, #0]
 8006a14:	f003 0306 	and.w	r3, r3, #6
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	bf08      	it	eq
 8006a1c:	1aad      	subeq	r5, r5, r2
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	bf0c      	ite	eq
 8006a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a28:	2500      	movne	r5, #0
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bfc4      	itt	gt
 8006a2e:	1a9b      	subgt	r3, r3, r2
 8006a30:	18ed      	addgt	r5, r5, r3
 8006a32:	2600      	movs	r6, #0
 8006a34:	341a      	adds	r4, #26
 8006a36:	42b5      	cmp	r5, r6
 8006a38:	d11a      	bne.n	8006a70 <_printf_common+0xc8>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	e008      	b.n	8006a50 <_printf_common+0xa8>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4652      	mov	r2, sl
 8006a42:	4649      	mov	r1, r9
 8006a44:	4638      	mov	r0, r7
 8006a46:	47c0      	blx	r8
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d103      	bne.n	8006a54 <_printf_common+0xac>
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a54:	3501      	adds	r5, #1
 8006a56:	e7c6      	b.n	80069e6 <_printf_common+0x3e>
 8006a58:	18e1      	adds	r1, r4, r3
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	2030      	movs	r0, #48	; 0x30
 8006a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a62:	4422      	add	r2, r4
 8006a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	e7c7      	b.n	8006a00 <_printf_common+0x58>
 8006a70:	2301      	movs	r3, #1
 8006a72:	4622      	mov	r2, r4
 8006a74:	4649      	mov	r1, r9
 8006a76:	4638      	mov	r0, r7
 8006a78:	47c0      	blx	r8
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d0e6      	beq.n	8006a4c <_printf_common+0xa4>
 8006a7e:	3601      	adds	r6, #1
 8006a80:	e7d9      	b.n	8006a36 <_printf_common+0x8e>
	...

08006a84 <_printf_i>:
 8006a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	460c      	mov	r4, r1
 8006a8a:	4691      	mov	r9, r2
 8006a8c:	7e27      	ldrb	r7, [r4, #24]
 8006a8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a90:	2f78      	cmp	r7, #120	; 0x78
 8006a92:	4680      	mov	r8, r0
 8006a94:	469a      	mov	sl, r3
 8006a96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a9a:	d807      	bhi.n	8006aac <_printf_i+0x28>
 8006a9c:	2f62      	cmp	r7, #98	; 0x62
 8006a9e:	d80a      	bhi.n	8006ab6 <_printf_i+0x32>
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	f000 80d8 	beq.w	8006c56 <_printf_i+0x1d2>
 8006aa6:	2f58      	cmp	r7, #88	; 0x58
 8006aa8:	f000 80a3 	beq.w	8006bf2 <_printf_i+0x16e>
 8006aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ab4:	e03a      	b.n	8006b2c <_printf_i+0xa8>
 8006ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aba:	2b15      	cmp	r3, #21
 8006abc:	d8f6      	bhi.n	8006aac <_printf_i+0x28>
 8006abe:	a001      	add	r0, pc, #4	; (adr r0, 8006ac4 <_printf_i+0x40>)
 8006ac0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ac4:	08006b1d 	.word	0x08006b1d
 8006ac8:	08006b31 	.word	0x08006b31
 8006acc:	08006aad 	.word	0x08006aad
 8006ad0:	08006aad 	.word	0x08006aad
 8006ad4:	08006aad 	.word	0x08006aad
 8006ad8:	08006aad 	.word	0x08006aad
 8006adc:	08006b31 	.word	0x08006b31
 8006ae0:	08006aad 	.word	0x08006aad
 8006ae4:	08006aad 	.word	0x08006aad
 8006ae8:	08006aad 	.word	0x08006aad
 8006aec:	08006aad 	.word	0x08006aad
 8006af0:	08006c3d 	.word	0x08006c3d
 8006af4:	08006b61 	.word	0x08006b61
 8006af8:	08006c1f 	.word	0x08006c1f
 8006afc:	08006aad 	.word	0x08006aad
 8006b00:	08006aad 	.word	0x08006aad
 8006b04:	08006c5f 	.word	0x08006c5f
 8006b08:	08006aad 	.word	0x08006aad
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006aad 	.word	0x08006aad
 8006b14:	08006aad 	.word	0x08006aad
 8006b18:	08006c27 	.word	0x08006c27
 8006b1c:	680b      	ldr	r3, [r1, #0]
 8006b1e:	1d1a      	adds	r2, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	600a      	str	r2, [r1, #0]
 8006b24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0a3      	b.n	8006c78 <_printf_i+0x1f4>
 8006b30:	6825      	ldr	r5, [r4, #0]
 8006b32:	6808      	ldr	r0, [r1, #0]
 8006b34:	062e      	lsls	r6, r5, #24
 8006b36:	f100 0304 	add.w	r3, r0, #4
 8006b3a:	d50a      	bpl.n	8006b52 <_printf_i+0xce>
 8006b3c:	6805      	ldr	r5, [r0, #0]
 8006b3e:	600b      	str	r3, [r1, #0]
 8006b40:	2d00      	cmp	r5, #0
 8006b42:	da03      	bge.n	8006b4c <_printf_i+0xc8>
 8006b44:	232d      	movs	r3, #45	; 0x2d
 8006b46:	426d      	negs	r5, r5
 8006b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b4c:	485e      	ldr	r0, [pc, #376]	; (8006cc8 <_printf_i+0x244>)
 8006b4e:	230a      	movs	r3, #10
 8006b50:	e019      	b.n	8006b86 <_printf_i+0x102>
 8006b52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b56:	6805      	ldr	r5, [r0, #0]
 8006b58:	600b      	str	r3, [r1, #0]
 8006b5a:	bf18      	it	ne
 8006b5c:	b22d      	sxthne	r5, r5
 8006b5e:	e7ef      	b.n	8006b40 <_printf_i+0xbc>
 8006b60:	680b      	ldr	r3, [r1, #0]
 8006b62:	6825      	ldr	r5, [r4, #0]
 8006b64:	1d18      	adds	r0, r3, #4
 8006b66:	6008      	str	r0, [r1, #0]
 8006b68:	0628      	lsls	r0, r5, #24
 8006b6a:	d501      	bpl.n	8006b70 <_printf_i+0xec>
 8006b6c:	681d      	ldr	r5, [r3, #0]
 8006b6e:	e002      	b.n	8006b76 <_printf_i+0xf2>
 8006b70:	0669      	lsls	r1, r5, #25
 8006b72:	d5fb      	bpl.n	8006b6c <_printf_i+0xe8>
 8006b74:	881d      	ldrh	r5, [r3, #0]
 8006b76:	4854      	ldr	r0, [pc, #336]	; (8006cc8 <_printf_i+0x244>)
 8006b78:	2f6f      	cmp	r7, #111	; 0x6f
 8006b7a:	bf0c      	ite	eq
 8006b7c:	2308      	moveq	r3, #8
 8006b7e:	230a      	movne	r3, #10
 8006b80:	2100      	movs	r1, #0
 8006b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b86:	6866      	ldr	r6, [r4, #4]
 8006b88:	60a6      	str	r6, [r4, #8]
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	bfa2      	ittt	ge
 8006b8e:	6821      	ldrge	r1, [r4, #0]
 8006b90:	f021 0104 	bicge.w	r1, r1, #4
 8006b94:	6021      	strge	r1, [r4, #0]
 8006b96:	b90d      	cbnz	r5, 8006b9c <_printf_i+0x118>
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	d04d      	beq.n	8006c38 <_printf_i+0x1b4>
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ba6:	5dc7      	ldrb	r7, [r0, r7]
 8006ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bac:	462f      	mov	r7, r5
 8006bae:	42bb      	cmp	r3, r7
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	d9f4      	bls.n	8006b9e <_printf_i+0x11a>
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d10b      	bne.n	8006bd0 <_printf_i+0x14c>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	07df      	lsls	r7, r3, #31
 8006bbc:	d508      	bpl.n	8006bd0 <_printf_i+0x14c>
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	6861      	ldr	r1, [r4, #4]
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	bfde      	ittt	le
 8006bc6:	2330      	movle	r3, #48	; 0x30
 8006bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bcc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006bd0:	1b92      	subs	r2, r2, r6
 8006bd2:	6122      	str	r2, [r4, #16]
 8006bd4:	f8cd a000 	str.w	sl, [sp]
 8006bd8:	464b      	mov	r3, r9
 8006bda:	aa03      	add	r2, sp, #12
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4640      	mov	r0, r8
 8006be0:	f7ff fee2 	bl	80069a8 <_printf_common>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d14c      	bne.n	8006c82 <_printf_i+0x1fe>
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bec:	b004      	add	sp, #16
 8006bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf2:	4835      	ldr	r0, [pc, #212]	; (8006cc8 <_printf_i+0x244>)
 8006bf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	680e      	ldr	r6, [r1, #0]
 8006bfc:	061f      	lsls	r7, r3, #24
 8006bfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c02:	600e      	str	r6, [r1, #0]
 8006c04:	d514      	bpl.n	8006c30 <_printf_i+0x1ac>
 8006c06:	07d9      	lsls	r1, r3, #31
 8006c08:	bf44      	itt	mi
 8006c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c0e:	6023      	strmi	r3, [r4, #0]
 8006c10:	b91d      	cbnz	r5, 8006c1a <_printf_i+0x196>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	f023 0320 	bic.w	r3, r3, #32
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	e7b0      	b.n	8006b80 <_printf_i+0xfc>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f043 0320 	orr.w	r3, r3, #32
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	2378      	movs	r3, #120	; 0x78
 8006c28:	4828      	ldr	r0, [pc, #160]	; (8006ccc <_printf_i+0x248>)
 8006c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c2e:	e7e3      	b.n	8006bf8 <_printf_i+0x174>
 8006c30:	065e      	lsls	r6, r3, #25
 8006c32:	bf48      	it	mi
 8006c34:	b2ad      	uxthmi	r5, r5
 8006c36:	e7e6      	b.n	8006c06 <_printf_i+0x182>
 8006c38:	4616      	mov	r6, r2
 8006c3a:	e7bb      	b.n	8006bb4 <_printf_i+0x130>
 8006c3c:	680b      	ldr	r3, [r1, #0]
 8006c3e:	6826      	ldr	r6, [r4, #0]
 8006c40:	6960      	ldr	r0, [r4, #20]
 8006c42:	1d1d      	adds	r5, r3, #4
 8006c44:	600d      	str	r5, [r1, #0]
 8006c46:	0635      	lsls	r5, r6, #24
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	d501      	bpl.n	8006c50 <_printf_i+0x1cc>
 8006c4c:	6018      	str	r0, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <_printf_i+0x1d2>
 8006c50:	0671      	lsls	r1, r6, #25
 8006c52:	d5fb      	bpl.n	8006c4c <_printf_i+0x1c8>
 8006c54:	8018      	strh	r0, [r3, #0]
 8006c56:	2300      	movs	r3, #0
 8006c58:	6123      	str	r3, [r4, #16]
 8006c5a:	4616      	mov	r6, r2
 8006c5c:	e7ba      	b.n	8006bd4 <_printf_i+0x150>
 8006c5e:	680b      	ldr	r3, [r1, #0]
 8006c60:	1d1a      	adds	r2, r3, #4
 8006c62:	600a      	str	r2, [r1, #0]
 8006c64:	681e      	ldr	r6, [r3, #0]
 8006c66:	6862      	ldr	r2, [r4, #4]
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7f9 fab0 	bl	80001d0 <memchr>
 8006c70:	b108      	cbz	r0, 8006c76 <_printf_i+0x1f2>
 8006c72:	1b80      	subs	r0, r0, r6
 8006c74:	6060      	str	r0, [r4, #4]
 8006c76:	6863      	ldr	r3, [r4, #4]
 8006c78:	6123      	str	r3, [r4, #16]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c80:	e7a8      	b.n	8006bd4 <_printf_i+0x150>
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	4632      	mov	r2, r6
 8006c86:	4649      	mov	r1, r9
 8006c88:	4640      	mov	r0, r8
 8006c8a:	47d0      	blx	sl
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d0ab      	beq.n	8006be8 <_printf_i+0x164>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	079b      	lsls	r3, r3, #30
 8006c94:	d413      	bmi.n	8006cbe <_printf_i+0x23a>
 8006c96:	68e0      	ldr	r0, [r4, #12]
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	4298      	cmp	r0, r3
 8006c9c:	bfb8      	it	lt
 8006c9e:	4618      	movlt	r0, r3
 8006ca0:	e7a4      	b.n	8006bec <_printf_i+0x168>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	4640      	mov	r0, r8
 8006caa:	47d0      	blx	sl
 8006cac:	3001      	adds	r0, #1
 8006cae:	d09b      	beq.n	8006be8 <_printf_i+0x164>
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	68e3      	ldr	r3, [r4, #12]
 8006cb4:	9903      	ldr	r1, [sp, #12]
 8006cb6:	1a5b      	subs	r3, r3, r1
 8006cb8:	42ab      	cmp	r3, r5
 8006cba:	dcf2      	bgt.n	8006ca2 <_printf_i+0x21e>
 8006cbc:	e7eb      	b.n	8006c96 <_printf_i+0x212>
 8006cbe:	2500      	movs	r5, #0
 8006cc0:	f104 0619 	add.w	r6, r4, #25
 8006cc4:	e7f5      	b.n	8006cb2 <_printf_i+0x22e>
 8006cc6:	bf00      	nop
 8006cc8:	0800779e 	.word	0x0800779e
 8006ccc:	080077af 	.word	0x080077af

08006cd0 <_sbrk_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d06      	ldr	r5, [pc, #24]	; (8006cec <_sbrk_r+0x1c>)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	f7fa f9b0 	bl	8001040 <_sbrk>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_sbrk_r+0x1a>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_sbrk_r+0x1a>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200006a0 	.word	0x200006a0

08006cf0 <__swbuf_r>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	460e      	mov	r6, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	b118      	cbz	r0, 8006d02 <__swbuf_r+0x12>
 8006cfa:	6983      	ldr	r3, [r0, #24]
 8006cfc:	b90b      	cbnz	r3, 8006d02 <__swbuf_r+0x12>
 8006cfe:	f000 f9d9 	bl	80070b4 <__sinit>
 8006d02:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <__swbuf_r+0x98>)
 8006d04:	429c      	cmp	r4, r3
 8006d06:	d12b      	bne.n	8006d60 <__swbuf_r+0x70>
 8006d08:	686c      	ldr	r4, [r5, #4]
 8006d0a:	69a3      	ldr	r3, [r4, #24]
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	071a      	lsls	r2, r3, #28
 8006d12:	d52f      	bpl.n	8006d74 <__swbuf_r+0x84>
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	b36b      	cbz	r3, 8006d74 <__swbuf_r+0x84>
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	6820      	ldr	r0, [r4, #0]
 8006d1c:	1ac0      	subs	r0, r0, r3
 8006d1e:	6963      	ldr	r3, [r4, #20]
 8006d20:	b2f6      	uxtb	r6, r6
 8006d22:	4283      	cmp	r3, r0
 8006d24:	4637      	mov	r7, r6
 8006d26:	dc04      	bgt.n	8006d32 <__swbuf_r+0x42>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f000 f92e 	bl	8006f8c <_fflush_r>
 8006d30:	bb30      	cbnz	r0, 8006d80 <__swbuf_r+0x90>
 8006d32:	68a3      	ldr	r3, [r4, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	6022      	str	r2, [r4, #0]
 8006d3e:	701e      	strb	r6, [r3, #0]
 8006d40:	6963      	ldr	r3, [r4, #20]
 8006d42:	3001      	adds	r0, #1
 8006d44:	4283      	cmp	r3, r0
 8006d46:	d004      	beq.n	8006d52 <__swbuf_r+0x62>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d506      	bpl.n	8006d5c <__swbuf_r+0x6c>
 8006d4e:	2e0a      	cmp	r6, #10
 8006d50:	d104      	bne.n	8006d5c <__swbuf_r+0x6c>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 f919 	bl	8006f8c <_fflush_r>
 8006d5a:	b988      	cbnz	r0, 8006d80 <__swbuf_r+0x90>
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <__swbuf_r+0x9c>)
 8006d62:	429c      	cmp	r4, r3
 8006d64:	d101      	bne.n	8006d6a <__swbuf_r+0x7a>
 8006d66:	68ac      	ldr	r4, [r5, #8]
 8006d68:	e7cf      	b.n	8006d0a <__swbuf_r+0x1a>
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <__swbuf_r+0xa0>)
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	bf08      	it	eq
 8006d70:	68ec      	ldreq	r4, [r5, #12]
 8006d72:	e7ca      	b.n	8006d0a <__swbuf_r+0x1a>
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 f80c 	bl	8006d94 <__swsetup_r>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d0cb      	beq.n	8006d18 <__swbuf_r+0x28>
 8006d80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d84:	e7ea      	b.n	8006d5c <__swbuf_r+0x6c>
 8006d86:	bf00      	nop
 8006d88:	080077e0 	.word	0x080077e0
 8006d8c:	08007800 	.word	0x08007800
 8006d90:	080077c0 	.word	0x080077c0

08006d94 <__swsetup_r>:
 8006d94:	4b32      	ldr	r3, [pc, #200]	; (8006e60 <__swsetup_r+0xcc>)
 8006d96:	b570      	push	{r4, r5, r6, lr}
 8006d98:	681d      	ldr	r5, [r3, #0]
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	b125      	cbz	r5, 8006daa <__swsetup_r+0x16>
 8006da0:	69ab      	ldr	r3, [r5, #24]
 8006da2:	b913      	cbnz	r3, 8006daa <__swsetup_r+0x16>
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 f985 	bl	80070b4 <__sinit>
 8006daa:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <__swsetup_r+0xd0>)
 8006dac:	429c      	cmp	r4, r3
 8006dae:	d10f      	bne.n	8006dd0 <__swsetup_r+0x3c>
 8006db0:	686c      	ldr	r4, [r5, #4]
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006db8:	0719      	lsls	r1, r3, #28
 8006dba:	d42c      	bmi.n	8006e16 <__swsetup_r+0x82>
 8006dbc:	06dd      	lsls	r5, r3, #27
 8006dbe:	d411      	bmi.n	8006de4 <__swsetup_r+0x50>
 8006dc0:	2309      	movs	r3, #9
 8006dc2:	6033      	str	r3, [r6, #0]
 8006dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dce:	e03e      	b.n	8006e4e <__swsetup_r+0xba>
 8006dd0:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <__swsetup_r+0xd4>)
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	d101      	bne.n	8006dda <__swsetup_r+0x46>
 8006dd6:	68ac      	ldr	r4, [r5, #8]
 8006dd8:	e7eb      	b.n	8006db2 <__swsetup_r+0x1e>
 8006dda:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <__swsetup_r+0xd8>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	bf08      	it	eq
 8006de0:	68ec      	ldreq	r4, [r5, #12]
 8006de2:	e7e6      	b.n	8006db2 <__swsetup_r+0x1e>
 8006de4:	0758      	lsls	r0, r3, #29
 8006de6:	d512      	bpl.n	8006e0e <__swsetup_r+0x7a>
 8006de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dea:	b141      	cbz	r1, 8006dfe <__swsetup_r+0x6a>
 8006dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <__swsetup_r+0x66>
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff fa77 	bl	80062e8 <_free_r>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	2300      	movs	r3, #0
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f043 0308 	orr.w	r3, r3, #8
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	b94b      	cbnz	r3, 8006e2e <__swsetup_r+0x9a>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e24:	d003      	beq.n	8006e2e <__swsetup_r+0x9a>
 8006e26:	4621      	mov	r1, r4
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f000 fa07 	bl	800723c <__smakebuf_r>
 8006e2e:	89a0      	ldrh	r0, [r4, #12]
 8006e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e34:	f010 0301 	ands.w	r3, r0, #1
 8006e38:	d00a      	beq.n	8006e50 <__swsetup_r+0xbc>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60a3      	str	r3, [r4, #8]
 8006e3e:	6963      	ldr	r3, [r4, #20]
 8006e40:	425b      	negs	r3, r3
 8006e42:	61a3      	str	r3, [r4, #24]
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	b943      	cbnz	r3, 8006e5a <__swsetup_r+0xc6>
 8006e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e4c:	d1ba      	bne.n	8006dc4 <__swsetup_r+0x30>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	0781      	lsls	r1, r0, #30
 8006e52:	bf58      	it	pl
 8006e54:	6963      	ldrpl	r3, [r4, #20]
 8006e56:	60a3      	str	r3, [r4, #8]
 8006e58:	e7f4      	b.n	8006e44 <__swsetup_r+0xb0>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e7f7      	b.n	8006e4e <__swsetup_r+0xba>
 8006e5e:	bf00      	nop
 8006e60:	20000020 	.word	0x20000020
 8006e64:	080077e0 	.word	0x080077e0
 8006e68:	08007800 	.word	0x08007800
 8006e6c:	080077c0 	.word	0x080077c0

08006e70 <abort>:
 8006e70:	b508      	push	{r3, lr}
 8006e72:	2006      	movs	r0, #6
 8006e74:	f000 fa96 	bl	80073a4 <raise>
 8006e78:	2001      	movs	r0, #1
 8006e7a:	f7fa f869 	bl	8000f50 <_exit>
	...

08006e80 <__sflush_r>:
 8006e80:	898a      	ldrh	r2, [r1, #12]
 8006e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e86:	4605      	mov	r5, r0
 8006e88:	0710      	lsls	r0, r2, #28
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	d458      	bmi.n	8006f40 <__sflush_r+0xc0>
 8006e8e:	684b      	ldr	r3, [r1, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dc05      	bgt.n	8006ea0 <__sflush_r+0x20>
 8006e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	dc02      	bgt.n	8006ea0 <__sflush_r+0x20>
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ea2:	2e00      	cmp	r6, #0
 8006ea4:	d0f9      	beq.n	8006e9a <__sflush_r+0x1a>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006eac:	682f      	ldr	r7, [r5, #0]
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	d032      	beq.n	8006f18 <__sflush_r+0x98>
 8006eb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	075a      	lsls	r2, r3, #29
 8006eb8:	d505      	bpl.n	8006ec6 <__sflush_r+0x46>
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	1ac0      	subs	r0, r0, r3
 8006ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ec0:	b10b      	cbz	r3, 8006ec6 <__sflush_r+0x46>
 8006ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ec4:	1ac0      	subs	r0, r0, r3
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ecc:	6a21      	ldr	r1, [r4, #32]
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b0      	blx	r6
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	d106      	bne.n	8006ee6 <__sflush_r+0x66>
 8006ed8:	6829      	ldr	r1, [r5, #0]
 8006eda:	291d      	cmp	r1, #29
 8006edc:	d82c      	bhi.n	8006f38 <__sflush_r+0xb8>
 8006ede:	4a2a      	ldr	r2, [pc, #168]	; (8006f88 <__sflush_r+0x108>)
 8006ee0:	40ca      	lsrs	r2, r1
 8006ee2:	07d6      	lsls	r6, r2, #31
 8006ee4:	d528      	bpl.n	8006f38 <__sflush_r+0xb8>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	6062      	str	r2, [r4, #4]
 8006eea:	04d9      	lsls	r1, r3, #19
 8006eec:	6922      	ldr	r2, [r4, #16]
 8006eee:	6022      	str	r2, [r4, #0]
 8006ef0:	d504      	bpl.n	8006efc <__sflush_r+0x7c>
 8006ef2:	1c42      	adds	r2, r0, #1
 8006ef4:	d101      	bne.n	8006efa <__sflush_r+0x7a>
 8006ef6:	682b      	ldr	r3, [r5, #0]
 8006ef8:	b903      	cbnz	r3, 8006efc <__sflush_r+0x7c>
 8006efa:	6560      	str	r0, [r4, #84]	; 0x54
 8006efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006efe:	602f      	str	r7, [r5, #0]
 8006f00:	2900      	cmp	r1, #0
 8006f02:	d0ca      	beq.n	8006e9a <__sflush_r+0x1a>
 8006f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	d002      	beq.n	8006f12 <__sflush_r+0x92>
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f7ff f9eb 	bl	80062e8 <_free_r>
 8006f12:	2000      	movs	r0, #0
 8006f14:	6360      	str	r0, [r4, #52]	; 0x34
 8006f16:	e7c1      	b.n	8006e9c <__sflush_r+0x1c>
 8006f18:	6a21      	ldr	r1, [r4, #32]
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b0      	blx	r6
 8006f20:	1c41      	adds	r1, r0, #1
 8006f22:	d1c7      	bne.n	8006eb4 <__sflush_r+0x34>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0c4      	beq.n	8006eb4 <__sflush_r+0x34>
 8006f2a:	2b1d      	cmp	r3, #29
 8006f2c:	d001      	beq.n	8006f32 <__sflush_r+0xb2>
 8006f2e:	2b16      	cmp	r3, #22
 8006f30:	d101      	bne.n	8006f36 <__sflush_r+0xb6>
 8006f32:	602f      	str	r7, [r5, #0]
 8006f34:	e7b1      	b.n	8006e9a <__sflush_r+0x1a>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	e7ad      	b.n	8006e9c <__sflush_r+0x1c>
 8006f40:	690f      	ldr	r7, [r1, #16]
 8006f42:	2f00      	cmp	r7, #0
 8006f44:	d0a9      	beq.n	8006e9a <__sflush_r+0x1a>
 8006f46:	0793      	lsls	r3, r2, #30
 8006f48:	680e      	ldr	r6, [r1, #0]
 8006f4a:	bf08      	it	eq
 8006f4c:	694b      	ldreq	r3, [r1, #20]
 8006f4e:	600f      	str	r7, [r1, #0]
 8006f50:	bf18      	it	ne
 8006f52:	2300      	movne	r3, #0
 8006f54:	eba6 0807 	sub.w	r8, r6, r7
 8006f58:	608b      	str	r3, [r1, #8]
 8006f5a:	f1b8 0f00 	cmp.w	r8, #0
 8006f5e:	dd9c      	ble.n	8006e9a <__sflush_r+0x1a>
 8006f60:	6a21      	ldr	r1, [r4, #32]
 8006f62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f64:	4643      	mov	r3, r8
 8006f66:	463a      	mov	r2, r7
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b0      	blx	r6
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	dc06      	bgt.n	8006f7e <__sflush_r+0xfe>
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f7c:	e78e      	b.n	8006e9c <__sflush_r+0x1c>
 8006f7e:	4407      	add	r7, r0
 8006f80:	eba8 0800 	sub.w	r8, r8, r0
 8006f84:	e7e9      	b.n	8006f5a <__sflush_r+0xda>
 8006f86:	bf00      	nop
 8006f88:	20400001 	.word	0x20400001

08006f8c <_fflush_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	690b      	ldr	r3, [r1, #16]
 8006f90:	4605      	mov	r5, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	b913      	cbnz	r3, 8006f9c <_fflush_r+0x10>
 8006f96:	2500      	movs	r5, #0
 8006f98:	4628      	mov	r0, r5
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	b118      	cbz	r0, 8006fa6 <_fflush_r+0x1a>
 8006f9e:	6983      	ldr	r3, [r0, #24]
 8006fa0:	b90b      	cbnz	r3, 8006fa6 <_fflush_r+0x1a>
 8006fa2:	f000 f887 	bl	80070b4 <__sinit>
 8006fa6:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <_fflush_r+0x6c>)
 8006fa8:	429c      	cmp	r4, r3
 8006faa:	d11b      	bne.n	8006fe4 <_fflush_r+0x58>
 8006fac:	686c      	ldr	r4, [r5, #4]
 8006fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ef      	beq.n	8006f96 <_fflush_r+0xa>
 8006fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fb8:	07d0      	lsls	r0, r2, #31
 8006fba:	d404      	bmi.n	8006fc6 <_fflush_r+0x3a>
 8006fbc:	0599      	lsls	r1, r3, #22
 8006fbe:	d402      	bmi.n	8006fc6 <_fflush_r+0x3a>
 8006fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc2:	f000 f915 	bl	80071f0 <__retarget_lock_acquire_recursive>
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	4621      	mov	r1, r4
 8006fca:	f7ff ff59 	bl	8006e80 <__sflush_r>
 8006fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fd0:	07da      	lsls	r2, r3, #31
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	d4e0      	bmi.n	8006f98 <_fflush_r+0xc>
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	059b      	lsls	r3, r3, #22
 8006fda:	d4dd      	bmi.n	8006f98 <_fflush_r+0xc>
 8006fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fde:	f000 f908 	bl	80071f2 <__retarget_lock_release_recursive>
 8006fe2:	e7d9      	b.n	8006f98 <_fflush_r+0xc>
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <_fflush_r+0x70>)
 8006fe6:	429c      	cmp	r4, r3
 8006fe8:	d101      	bne.n	8006fee <_fflush_r+0x62>
 8006fea:	68ac      	ldr	r4, [r5, #8]
 8006fec:	e7df      	b.n	8006fae <_fflush_r+0x22>
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <_fflush_r+0x74>)
 8006ff0:	429c      	cmp	r4, r3
 8006ff2:	bf08      	it	eq
 8006ff4:	68ec      	ldreq	r4, [r5, #12]
 8006ff6:	e7da      	b.n	8006fae <_fflush_r+0x22>
 8006ff8:	080077e0 	.word	0x080077e0
 8006ffc:	08007800 	.word	0x08007800
 8007000:	080077c0 	.word	0x080077c0

08007004 <std>:
 8007004:	2300      	movs	r3, #0
 8007006:	b510      	push	{r4, lr}
 8007008:	4604      	mov	r4, r0
 800700a:	e9c0 3300 	strd	r3, r3, [r0]
 800700e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007012:	6083      	str	r3, [r0, #8]
 8007014:	8181      	strh	r1, [r0, #12]
 8007016:	6643      	str	r3, [r0, #100]	; 0x64
 8007018:	81c2      	strh	r2, [r0, #14]
 800701a:	6183      	str	r3, [r0, #24]
 800701c:	4619      	mov	r1, r3
 800701e:	2208      	movs	r2, #8
 8007020:	305c      	adds	r0, #92	; 0x5c
 8007022:	f7ff f817 	bl	8006054 <memset>
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <std+0x38>)
 8007028:	6263      	str	r3, [r4, #36]	; 0x24
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <std+0x3c>)
 800702c:	62a3      	str	r3, [r4, #40]	; 0x28
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <std+0x40>)
 8007030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <std+0x44>)
 8007034:	6224      	str	r4, [r4, #32]
 8007036:	6323      	str	r3, [r4, #48]	; 0x30
 8007038:	bd10      	pop	{r4, pc}
 800703a:	bf00      	nop
 800703c:	080073dd 	.word	0x080073dd
 8007040:	080073ff 	.word	0x080073ff
 8007044:	08007437 	.word	0x08007437
 8007048:	0800745b 	.word	0x0800745b

0800704c <_cleanup_r>:
 800704c:	4901      	ldr	r1, [pc, #4]	; (8007054 <_cleanup_r+0x8>)
 800704e:	f000 b8af 	b.w	80071b0 <_fwalk_reent>
 8007052:	bf00      	nop
 8007054:	08006f8d 	.word	0x08006f8d

08007058 <__sfmoreglue>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	1e4a      	subs	r2, r1, #1
 800705c:	2568      	movs	r5, #104	; 0x68
 800705e:	4355      	muls	r5, r2
 8007060:	460e      	mov	r6, r1
 8007062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007066:	f7ff f98f 	bl	8006388 <_malloc_r>
 800706a:	4604      	mov	r4, r0
 800706c:	b140      	cbz	r0, 8007080 <__sfmoreglue+0x28>
 800706e:	2100      	movs	r1, #0
 8007070:	e9c0 1600 	strd	r1, r6, [r0]
 8007074:	300c      	adds	r0, #12
 8007076:	60a0      	str	r0, [r4, #8]
 8007078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800707c:	f7fe ffea 	bl	8006054 <memset>
 8007080:	4620      	mov	r0, r4
 8007082:	bd70      	pop	{r4, r5, r6, pc}

08007084 <__sfp_lock_acquire>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__sfp_lock_acquire+0x8>)
 8007086:	f000 b8b3 	b.w	80071f0 <__retarget_lock_acquire_recursive>
 800708a:	bf00      	nop
 800708c:	2000069c 	.word	0x2000069c

08007090 <__sfp_lock_release>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__sfp_lock_release+0x8>)
 8007092:	f000 b8ae 	b.w	80071f2 <__retarget_lock_release_recursive>
 8007096:	bf00      	nop
 8007098:	2000069c 	.word	0x2000069c

0800709c <__sinit_lock_acquire>:
 800709c:	4801      	ldr	r0, [pc, #4]	; (80070a4 <__sinit_lock_acquire+0x8>)
 800709e:	f000 b8a7 	b.w	80071f0 <__retarget_lock_acquire_recursive>
 80070a2:	bf00      	nop
 80070a4:	20000697 	.word	0x20000697

080070a8 <__sinit_lock_release>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__sinit_lock_release+0x8>)
 80070aa:	f000 b8a2 	b.w	80071f2 <__retarget_lock_release_recursive>
 80070ae:	bf00      	nop
 80070b0:	20000697 	.word	0x20000697

080070b4 <__sinit>:
 80070b4:	b510      	push	{r4, lr}
 80070b6:	4604      	mov	r4, r0
 80070b8:	f7ff fff0 	bl	800709c <__sinit_lock_acquire>
 80070bc:	69a3      	ldr	r3, [r4, #24]
 80070be:	b11b      	cbz	r3, 80070c8 <__sinit+0x14>
 80070c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c4:	f7ff bff0 	b.w	80070a8 <__sinit_lock_release>
 80070c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070cc:	6523      	str	r3, [r4, #80]	; 0x50
 80070ce:	4b13      	ldr	r3, [pc, #76]	; (800711c <__sinit+0x68>)
 80070d0:	4a13      	ldr	r2, [pc, #76]	; (8007120 <__sinit+0x6c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	bf04      	itt	eq
 80070da:	2301      	moveq	r3, #1
 80070dc:	61a3      	streq	r3, [r4, #24]
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 f820 	bl	8007124 <__sfp>
 80070e4:	6060      	str	r0, [r4, #4]
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f81c 	bl	8007124 <__sfp>
 80070ec:	60a0      	str	r0, [r4, #8]
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 f818 	bl	8007124 <__sfp>
 80070f4:	2200      	movs	r2, #0
 80070f6:	60e0      	str	r0, [r4, #12]
 80070f8:	2104      	movs	r1, #4
 80070fa:	6860      	ldr	r0, [r4, #4]
 80070fc:	f7ff ff82 	bl	8007004 <std>
 8007100:	68a0      	ldr	r0, [r4, #8]
 8007102:	2201      	movs	r2, #1
 8007104:	2109      	movs	r1, #9
 8007106:	f7ff ff7d 	bl	8007004 <std>
 800710a:	68e0      	ldr	r0, [r4, #12]
 800710c:	2202      	movs	r2, #2
 800710e:	2112      	movs	r1, #18
 8007110:	f7ff ff78 	bl	8007004 <std>
 8007114:	2301      	movs	r3, #1
 8007116:	61a3      	str	r3, [r4, #24]
 8007118:	e7d2      	b.n	80070c0 <__sinit+0xc>
 800711a:	bf00      	nop
 800711c:	080075d4 	.word	0x080075d4
 8007120:	0800704d 	.word	0x0800704d

08007124 <__sfp>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	4607      	mov	r7, r0
 8007128:	f7ff ffac 	bl	8007084 <__sfp_lock_acquire>
 800712c:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <__sfp+0x84>)
 800712e:	681e      	ldr	r6, [r3, #0]
 8007130:	69b3      	ldr	r3, [r6, #24]
 8007132:	b913      	cbnz	r3, 800713a <__sfp+0x16>
 8007134:	4630      	mov	r0, r6
 8007136:	f7ff ffbd 	bl	80070b4 <__sinit>
 800713a:	3648      	adds	r6, #72	; 0x48
 800713c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007140:	3b01      	subs	r3, #1
 8007142:	d503      	bpl.n	800714c <__sfp+0x28>
 8007144:	6833      	ldr	r3, [r6, #0]
 8007146:	b30b      	cbz	r3, 800718c <__sfp+0x68>
 8007148:	6836      	ldr	r6, [r6, #0]
 800714a:	e7f7      	b.n	800713c <__sfp+0x18>
 800714c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007150:	b9d5      	cbnz	r5, 8007188 <__sfp+0x64>
 8007152:	4b16      	ldr	r3, [pc, #88]	; (80071ac <__sfp+0x88>)
 8007154:	60e3      	str	r3, [r4, #12]
 8007156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800715a:	6665      	str	r5, [r4, #100]	; 0x64
 800715c:	f000 f847 	bl	80071ee <__retarget_lock_init_recursive>
 8007160:	f7ff ff96 	bl	8007090 <__sfp_lock_release>
 8007164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800716c:	6025      	str	r5, [r4, #0]
 800716e:	61a5      	str	r5, [r4, #24]
 8007170:	2208      	movs	r2, #8
 8007172:	4629      	mov	r1, r5
 8007174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007178:	f7fe ff6c 	bl	8006054 <memset>
 800717c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007184:	4620      	mov	r0, r4
 8007186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007188:	3468      	adds	r4, #104	; 0x68
 800718a:	e7d9      	b.n	8007140 <__sfp+0x1c>
 800718c:	2104      	movs	r1, #4
 800718e:	4638      	mov	r0, r7
 8007190:	f7ff ff62 	bl	8007058 <__sfmoreglue>
 8007194:	4604      	mov	r4, r0
 8007196:	6030      	str	r0, [r6, #0]
 8007198:	2800      	cmp	r0, #0
 800719a:	d1d5      	bne.n	8007148 <__sfp+0x24>
 800719c:	f7ff ff78 	bl	8007090 <__sfp_lock_release>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	e7ee      	b.n	8007184 <__sfp+0x60>
 80071a6:	bf00      	nop
 80071a8:	080075d4 	.word	0x080075d4
 80071ac:	ffff0001 	.word	0xffff0001

080071b0 <_fwalk_reent>:
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b4:	4606      	mov	r6, r0
 80071b6:	4688      	mov	r8, r1
 80071b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071bc:	2700      	movs	r7, #0
 80071be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071c2:	f1b9 0901 	subs.w	r9, r9, #1
 80071c6:	d505      	bpl.n	80071d4 <_fwalk_reent+0x24>
 80071c8:	6824      	ldr	r4, [r4, #0]
 80071ca:	2c00      	cmp	r4, #0
 80071cc:	d1f7      	bne.n	80071be <_fwalk_reent+0xe>
 80071ce:	4638      	mov	r0, r7
 80071d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d4:	89ab      	ldrh	r3, [r5, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d907      	bls.n	80071ea <_fwalk_reent+0x3a>
 80071da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071de:	3301      	adds	r3, #1
 80071e0:	d003      	beq.n	80071ea <_fwalk_reent+0x3a>
 80071e2:	4629      	mov	r1, r5
 80071e4:	4630      	mov	r0, r6
 80071e6:	47c0      	blx	r8
 80071e8:	4307      	orrs	r7, r0
 80071ea:	3568      	adds	r5, #104	; 0x68
 80071ec:	e7e9      	b.n	80071c2 <_fwalk_reent+0x12>

080071ee <__retarget_lock_init_recursive>:
 80071ee:	4770      	bx	lr

080071f0 <__retarget_lock_acquire_recursive>:
 80071f0:	4770      	bx	lr

080071f2 <__retarget_lock_release_recursive>:
 80071f2:	4770      	bx	lr

080071f4 <__swhatbuf_r>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	460e      	mov	r6, r1
 80071f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fc:	2900      	cmp	r1, #0
 80071fe:	b096      	sub	sp, #88	; 0x58
 8007200:	4614      	mov	r4, r2
 8007202:	461d      	mov	r5, r3
 8007204:	da07      	bge.n	8007216 <__swhatbuf_r+0x22>
 8007206:	2300      	movs	r3, #0
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	89b3      	ldrh	r3, [r6, #12]
 800720c:	061a      	lsls	r2, r3, #24
 800720e:	d410      	bmi.n	8007232 <__swhatbuf_r+0x3e>
 8007210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007214:	e00e      	b.n	8007234 <__swhatbuf_r+0x40>
 8007216:	466a      	mov	r2, sp
 8007218:	f000 f946 	bl	80074a8 <_fstat_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	dbf2      	blt.n	8007206 <__swhatbuf_r+0x12>
 8007220:	9a01      	ldr	r2, [sp, #4]
 8007222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800722a:	425a      	negs	r2, r3
 800722c:	415a      	adcs	r2, r3
 800722e:	602a      	str	r2, [r5, #0]
 8007230:	e7ee      	b.n	8007210 <__swhatbuf_r+0x1c>
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	2000      	movs	r0, #0
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	b016      	add	sp, #88	; 0x58
 800723a:	bd70      	pop	{r4, r5, r6, pc}

0800723c <__smakebuf_r>:
 800723c:	898b      	ldrh	r3, [r1, #12]
 800723e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007240:	079d      	lsls	r5, r3, #30
 8007242:	4606      	mov	r6, r0
 8007244:	460c      	mov	r4, r1
 8007246:	d507      	bpl.n	8007258 <__smakebuf_r+0x1c>
 8007248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	2301      	movs	r3, #1
 8007252:	6163      	str	r3, [r4, #20]
 8007254:	b002      	add	sp, #8
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	ab01      	add	r3, sp, #4
 800725a:	466a      	mov	r2, sp
 800725c:	f7ff ffca 	bl	80071f4 <__swhatbuf_r>
 8007260:	9900      	ldr	r1, [sp, #0]
 8007262:	4605      	mov	r5, r0
 8007264:	4630      	mov	r0, r6
 8007266:	f7ff f88f 	bl	8006388 <_malloc_r>
 800726a:	b948      	cbnz	r0, 8007280 <__smakebuf_r+0x44>
 800726c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007270:	059a      	lsls	r2, r3, #22
 8007272:	d4ef      	bmi.n	8007254 <__smakebuf_r+0x18>
 8007274:	f023 0303 	bic.w	r3, r3, #3
 8007278:	f043 0302 	orr.w	r3, r3, #2
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	e7e3      	b.n	8007248 <__smakebuf_r+0xc>
 8007280:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <__smakebuf_r+0x7c>)
 8007282:	62b3      	str	r3, [r6, #40]	; 0x28
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	6020      	str	r0, [r4, #0]
 8007288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728c:	81a3      	strh	r3, [r4, #12]
 800728e:	9b00      	ldr	r3, [sp, #0]
 8007290:	6163      	str	r3, [r4, #20]
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	6120      	str	r0, [r4, #16]
 8007296:	b15b      	cbz	r3, 80072b0 <__smakebuf_r+0x74>
 8007298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800729c:	4630      	mov	r0, r6
 800729e:	f000 f915 	bl	80074cc <_isatty_r>
 80072a2:	b128      	cbz	r0, 80072b0 <__smakebuf_r+0x74>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	89a0      	ldrh	r0, [r4, #12]
 80072b2:	4305      	orrs	r5, r0
 80072b4:	81a5      	strh	r5, [r4, #12]
 80072b6:	e7cd      	b.n	8007254 <__smakebuf_r+0x18>
 80072b8:	0800704d 	.word	0x0800704d

080072bc <memmove>:
 80072bc:	4288      	cmp	r0, r1
 80072be:	b510      	push	{r4, lr}
 80072c0:	eb01 0402 	add.w	r4, r1, r2
 80072c4:	d902      	bls.n	80072cc <memmove+0x10>
 80072c6:	4284      	cmp	r4, r0
 80072c8:	4623      	mov	r3, r4
 80072ca:	d807      	bhi.n	80072dc <memmove+0x20>
 80072cc:	1e43      	subs	r3, r0, #1
 80072ce:	42a1      	cmp	r1, r4
 80072d0:	d008      	beq.n	80072e4 <memmove+0x28>
 80072d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072da:	e7f8      	b.n	80072ce <memmove+0x12>
 80072dc:	4402      	add	r2, r0
 80072de:	4601      	mov	r1, r0
 80072e0:	428a      	cmp	r2, r1
 80072e2:	d100      	bne.n	80072e6 <memmove+0x2a>
 80072e4:	bd10      	pop	{r4, pc}
 80072e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072ee:	e7f7      	b.n	80072e0 <memmove+0x24>

080072f0 <__malloc_lock>:
 80072f0:	4801      	ldr	r0, [pc, #4]	; (80072f8 <__malloc_lock+0x8>)
 80072f2:	f7ff bf7d 	b.w	80071f0 <__retarget_lock_acquire_recursive>
 80072f6:	bf00      	nop
 80072f8:	20000698 	.word	0x20000698

080072fc <__malloc_unlock>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__malloc_unlock+0x8>)
 80072fe:	f7ff bf78 	b.w	80071f2 <__retarget_lock_release_recursive>
 8007302:	bf00      	nop
 8007304:	20000698 	.word	0x20000698

08007308 <_realloc_r>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	4607      	mov	r7, r0
 800730c:	4614      	mov	r4, r2
 800730e:	460e      	mov	r6, r1
 8007310:	b921      	cbnz	r1, 800731c <_realloc_r+0x14>
 8007312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007316:	4611      	mov	r1, r2
 8007318:	f7ff b836 	b.w	8006388 <_malloc_r>
 800731c:	b922      	cbnz	r2, 8007328 <_realloc_r+0x20>
 800731e:	f7fe ffe3 	bl	80062e8 <_free_r>
 8007322:	4625      	mov	r5, r4
 8007324:	4628      	mov	r0, r5
 8007326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007328:	f000 f8f2 	bl	8007510 <_malloc_usable_size_r>
 800732c:	42a0      	cmp	r0, r4
 800732e:	d20f      	bcs.n	8007350 <_realloc_r+0x48>
 8007330:	4621      	mov	r1, r4
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff f828 	bl	8006388 <_malloc_r>
 8007338:	4605      	mov	r5, r0
 800733a:	2800      	cmp	r0, #0
 800733c:	d0f2      	beq.n	8007324 <_realloc_r+0x1c>
 800733e:	4631      	mov	r1, r6
 8007340:	4622      	mov	r2, r4
 8007342:	f7fe fe79 	bl	8006038 <memcpy>
 8007346:	4631      	mov	r1, r6
 8007348:	4638      	mov	r0, r7
 800734a:	f7fe ffcd 	bl	80062e8 <_free_r>
 800734e:	e7e9      	b.n	8007324 <_realloc_r+0x1c>
 8007350:	4635      	mov	r5, r6
 8007352:	e7e7      	b.n	8007324 <_realloc_r+0x1c>

08007354 <_raise_r>:
 8007354:	291f      	cmp	r1, #31
 8007356:	b538      	push	{r3, r4, r5, lr}
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	d904      	bls.n	8007368 <_raise_r+0x14>
 800735e:	2316      	movs	r3, #22
 8007360:	6003      	str	r3, [r0, #0]
 8007362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800736a:	b112      	cbz	r2, 8007372 <_raise_r+0x1e>
 800736c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007370:	b94b      	cbnz	r3, 8007386 <_raise_r+0x32>
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f830 	bl	80073d8 <_getpid_r>
 8007378:	462a      	mov	r2, r5
 800737a:	4601      	mov	r1, r0
 800737c:	4620      	mov	r0, r4
 800737e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007382:	f000 b817 	b.w	80073b4 <_kill_r>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d00a      	beq.n	80073a0 <_raise_r+0x4c>
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	d103      	bne.n	8007396 <_raise_r+0x42>
 800738e:	2316      	movs	r3, #22
 8007390:	6003      	str	r3, [r0, #0]
 8007392:	2001      	movs	r0, #1
 8007394:	e7e7      	b.n	8007366 <_raise_r+0x12>
 8007396:	2400      	movs	r4, #0
 8007398:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800739c:	4628      	mov	r0, r5
 800739e:	4798      	blx	r3
 80073a0:	2000      	movs	r0, #0
 80073a2:	e7e0      	b.n	8007366 <_raise_r+0x12>

080073a4 <raise>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <raise+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f7ff bfd3 	b.w	8007354 <_raise_r>
 80073ae:	bf00      	nop
 80073b0:	20000020 	.word	0x20000020

080073b4 <_kill_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d07      	ldr	r5, [pc, #28]	; (80073d4 <_kill_r+0x20>)
 80073b8:	2300      	movs	r3, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	f7f9 fdb5 	bl	8000f30 <_kill>
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d102      	bne.n	80073d0 <_kill_r+0x1c>
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	b103      	cbz	r3, 80073d0 <_kill_r+0x1c>
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	bd38      	pop	{r3, r4, r5, pc}
 80073d2:	bf00      	nop
 80073d4:	200006a0 	.word	0x200006a0

080073d8 <_getpid_r>:
 80073d8:	f7f9 bda2 	b.w	8000f20 <_getpid>

080073dc <__sread>:
 80073dc:	b510      	push	{r4, lr}
 80073de:	460c      	mov	r4, r1
 80073e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e4:	f000 f89c 	bl	8007520 <_read_r>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	bfab      	itete	ge
 80073ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ee:	89a3      	ldrhlt	r3, [r4, #12]
 80073f0:	181b      	addge	r3, r3, r0
 80073f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073f6:	bfac      	ite	ge
 80073f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073fa:	81a3      	strhlt	r3, [r4, #12]
 80073fc:	bd10      	pop	{r4, pc}

080073fe <__swrite>:
 80073fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007402:	461f      	mov	r7, r3
 8007404:	898b      	ldrh	r3, [r1, #12]
 8007406:	05db      	lsls	r3, r3, #23
 8007408:	4605      	mov	r5, r0
 800740a:	460c      	mov	r4, r1
 800740c:	4616      	mov	r6, r2
 800740e:	d505      	bpl.n	800741c <__swrite+0x1e>
 8007410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007414:	2302      	movs	r3, #2
 8007416:	2200      	movs	r2, #0
 8007418:	f000 f868 	bl	80074ec <_lseek_r>
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	4632      	mov	r2, r6
 800742a:	463b      	mov	r3, r7
 800742c:	4628      	mov	r0, r5
 800742e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007432:	f000 b817 	b.w	8007464 <_write_r>

08007436 <__sseek>:
 8007436:	b510      	push	{r4, lr}
 8007438:	460c      	mov	r4, r1
 800743a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743e:	f000 f855 	bl	80074ec <_lseek_r>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	bf15      	itete	ne
 8007448:	6560      	strne	r0, [r4, #84]	; 0x54
 800744a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800744e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007452:	81a3      	strheq	r3, [r4, #12]
 8007454:	bf18      	it	ne
 8007456:	81a3      	strhne	r3, [r4, #12]
 8007458:	bd10      	pop	{r4, pc}

0800745a <__sclose>:
 800745a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745e:	f000 b813 	b.w	8007488 <_close_r>
	...

08007464 <_write_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_write_r+0x20>)
 8007468:	4604      	mov	r4, r0
 800746a:	4608      	mov	r0, r1
 800746c:	4611      	mov	r1, r2
 800746e:	2200      	movs	r2, #0
 8007470:	602a      	str	r2, [r5, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f7f9 fd93 	bl	8000f9e <_write>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_write_r+0x1e>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_write_r+0x1e>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	200006a0 	.word	0x200006a0

08007488 <_close_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d06      	ldr	r5, [pc, #24]	; (80074a4 <_close_r+0x1c>)
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7f9 fd9f 	bl	8000fd6 <_close>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_close_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_close_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	200006a0 	.word	0x200006a0

080074a8 <_fstat_r>:
 80074a8:	b538      	push	{r3, r4, r5, lr}
 80074aa:	4d07      	ldr	r5, [pc, #28]	; (80074c8 <_fstat_r+0x20>)
 80074ac:	2300      	movs	r3, #0
 80074ae:	4604      	mov	r4, r0
 80074b0:	4608      	mov	r0, r1
 80074b2:	4611      	mov	r1, r2
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	f7f9 fd9a 	bl	8000fee <_fstat>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d102      	bne.n	80074c4 <_fstat_r+0x1c>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	b103      	cbz	r3, 80074c4 <_fstat_r+0x1c>
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	bd38      	pop	{r3, r4, r5, pc}
 80074c6:	bf00      	nop
 80074c8:	200006a0 	.word	0x200006a0

080074cc <_isatty_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d06      	ldr	r5, [pc, #24]	; (80074e8 <_isatty_r+0x1c>)
 80074d0:	2300      	movs	r3, #0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7f9 fd99 	bl	800100e <_isatty>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_isatty_r+0x1a>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_isatty_r+0x1a>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	200006a0 	.word	0x200006a0

080074ec <_lseek_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_lseek_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7f9 fd92 	bl	8001024 <_lseek>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_lseek_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_lseek_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	200006a0 	.word	0x200006a0

08007510 <_malloc_usable_size_r>:
 8007510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007514:	1f18      	subs	r0, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfbc      	itt	lt
 800751a:	580b      	ldrlt	r3, [r1, r0]
 800751c:	18c0      	addlt	r0, r0, r3
 800751e:	4770      	bx	lr

08007520 <_read_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4d07      	ldr	r5, [pc, #28]	; (8007540 <_read_r+0x20>)
 8007524:	4604      	mov	r4, r0
 8007526:	4608      	mov	r0, r1
 8007528:	4611      	mov	r1, r2
 800752a:	2200      	movs	r2, #0
 800752c:	602a      	str	r2, [r5, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	f7f9 fd18 	bl	8000f64 <_read>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d102      	bne.n	800753e <_read_r+0x1e>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	b103      	cbz	r3, 800753e <_read_r+0x1e>
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	200006a0 	.word	0x200006a0

08007544 <_init>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr

08007550 <_fini>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr
