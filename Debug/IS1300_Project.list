
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007274  08007274  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800727c  0800727c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000084  08007308  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  08007308  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234bd  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb8  00000000  00000000  00043571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00047530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00048e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005bc9  00000000  00000000  0004a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001defa  00000000  00000000  000501f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b87  00000000  00000000  0006e0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007588  00000000  00000000  00175cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fa4 	.word	0x08006fa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08006fa4 	.word	0x08006fa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a47      	ldr	r2, [pc, #284]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b45      	ldr	r3, [pc, #276]	; (80006a0 <MX_GPIO_Init+0x138>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <MX_GPIO_Init+0x138>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a41      	ldr	r2, [pc, #260]	; (80006a0 <MX_GPIO_Init+0x138>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b3f      	ldr	r3, [pc, #252]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b3c      	ldr	r3, [pc, #240]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a3b      	ldr	r2, [pc, #236]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a35      	ldr	r2, [pc, #212]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <MX_GPIO_Init+0x138>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f001 f9e9 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000608:	4826      	ldr	r0, [pc, #152]	; (80006a4 <MX_GPIO_Init+0x13c>)
 800060a:	f001 f9e3 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f001 f9dc 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	481c      	ldr	r0, [pc, #112]	; (80006a4 <MX_GPIO_Init+0x13c>)
 8000634:	f001 f824 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000638:	230c      	movs	r3, #12
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000648:	2307      	movs	r3, #7
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f001 f813 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800065a:	f248 0320 	movw	r3, #32800	; 0x8020
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 f803 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin;
 800067a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x13c>)
 8000694:	f000 fff4 	bl	8001680 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fe21 	bl	80012f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f839 	bl	8000728 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f7ff ff57 	bl	8000568 <MX_GPIO_Init>
  MX_UART5_Init();
 80006ba:	f000 fcf3 	bl	80010a4 <MX_UART5_Init>
  MX_SPI2_Init();
 80006be:	f000 f9af 	bl	8000a20 <MX_SPI2_Init>
  MX_RTC_Init();
 80006c2:	f000 f89d 	bl	8000800 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  display_init();
 80006c6:	f000 faf3 	bl	8000cb0 <display_init>

  uint8_t time[8] = "23:59:55";
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <main+0x78>)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	e883 0003 	stmia.w	r3, {r0, r1}
  rtc_set_time(time);
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f927 	bl	8000930 <rtc_set_time>
  HAL_Delay(2000);
 80006e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e6:	f000 fe45 	bl	8001374 <HAL_Delay>
  uint8_t buf[8];
  while (1) {
      rtc_get_time(buf);
 80006ea:	463b      	mov	r3, r7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f95d 	bl	80009ac <rtc_get_time>
      display_write_line(buf, 8, 1);
 80006f2:	463b      	mov	r3, r7
 80006f4:	2201      	movs	r2, #1
 80006f6:	2108      	movs	r1, #8
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fb2e 	bl	8000d5a <display_write_line>
      uart_transmit(buf, 8);
 80006fe:	463b      	mov	r3, r7
 8000700:	2108      	movs	r1, #8
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fd88 	bl	8001218 <uart_transmit>
      HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fe33 	bl	8001374 <HAL_Delay>
      uart_transmit((uint8_t*)"\r\n", 2);
 800070e:	2102      	movs	r1, #2
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <main+0x7c>)
 8000712:	f000 fd81 	bl	8001218 <uart_transmit>
      HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071a:	f000 fe2b 	bl	8001374 <HAL_Delay>
      rtc_get_time(buf);
 800071e:	e7e4      	b.n	80006ea <main+0x42>
 8000720:	08006fc0 	.word	0x08006fc0
 8000724:	08006fbc 	.word	0x08006fbc

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b096      	sub	sp, #88	; 0x58
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2244      	movs	r2, #68	; 0x44
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 f9bc 	bl	8005ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074e:	f001 f967 	bl	8001a20 <HAL_PWREx_ControlVoltageScaling>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000758:	f000 f84c 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800075c:	230a      	movs	r3, #10
 800075e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000764:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2310      	movs	r3, #16
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800077a:	230a      	movs	r3, #10
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800077e:	2307      	movs	r3, #7
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f99c 	bl	8001acc <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800079a:	f000 f82b 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2303      	movs	r3, #3
 80007a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	2104      	movs	r1, #4
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fd6e 	bl	8002298 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007c2:	f000 f817 	bl	80007f4 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3758      	adds	r7, #88	; 0x58
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e2:	f000 fda7 	bl	8001334 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40012c00 	.word	0x40012c00

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_RTC_Init+0xb0>)
 800081a:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <MX_RTC_Init+0xb4>)
 800081c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_RTC_Init+0xb0>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_RTC_Init+0xb0>)
 8000826:	227f      	movs	r2, #127	; 0x7f
 8000828:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_RTC_Init+0xb0>)
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_RTC_Init+0xb0>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_RTC_Init+0xb0>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_RTC_Init+0xb0>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_RTC_Init+0xb0>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000848:	4819      	ldr	r0, [pc, #100]	; (80008b0 <MX_RTC_Init+0xb0>)
 800084a:	f002 fc19 	bl	8003080 <HAL_RTC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000854:	f7ff ffce 	bl	80007f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000858:	2300      	movs	r3, #0
 800085a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800085c:	2300      	movs	r3, #0
 800085e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000860:	2300      	movs	r3, #0
 8000862:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	480f      	ldr	r0, [pc, #60]	; (80008b0 <MX_RTC_Init+0xb0>)
 8000874:	f002 fc7f 	bl	8003176 <HAL_RTC_SetTime>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800087e:	f7ff ffb9 	bl	80007f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000882:	2303      	movs	r3, #3
 8000884:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000886:	2312      	movs	r3, #18
 8000888:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 800088a:	2322      	movs	r3, #34	; 0x22
 800088c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 800088e:	2321      	movs	r3, #33	; 0x21
 8000890:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_RTC_Init+0xb0>)
 800089a:	f002 fd65 	bl	8003368 <HAL_RTC_SetDate>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80008a4:	f7ff ffa6 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000538 	.word	0x20000538
 80008b4:	40002800 	.word	0x40002800

080008b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0a4      	sub	sp, #144	; 0x90
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2288      	movs	r2, #136	; 0x88
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f005 f8f3 	bl	8005ab4 <memset>
  if(rtcHandle->Instance==RTC)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_RTC_MspInit+0x5c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d118      	bne.n	800090a <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 ff0c 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008f6:	f7ff ff7d 	bl	80007f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <HAL_RTC_MspInit+0x60>)
 80008fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000900:	4a05      	ldr	r2, [pc, #20]	; (8000918 <HAL_RTC_MspInit+0x60>)
 8000902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800090a:	bf00      	nop
 800090c:	3790      	adds	r7, #144	; 0x90
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40002800 	.word	0x40002800
 8000918:	40021000 	.word	0x40021000

0800091c <RTC_Error>:
}

/* USER CODE BEGIN 1 */


void RTC_Error() {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2120      	movs	r1, #32
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f001 f854 	bl	80019d4 <HAL_GPIO_WritePin>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <rtc_set_time>:

void rtc_set_time(uint8_t tstr[]) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <rtc_set_time+0x74>)
 800094a:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, ":");
 800094c:	4915      	ldr	r1, [pc, #84]	; (80009a4 <rtc_set_time+0x74>)
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f005 f8d8 	bl	8005b04 <strtok>
 8000954:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000956:	6a38      	ldr	r0, [r7, #32]
 8000958:	f005 f870 	bl	8005a3c <atoi>
 800095c:	4603      	mov	r3, r0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 8000962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000964:	2000      	movs	r0, #0
 8000966:	f005 f8cd 	bl	8005b04 <strtok>
 800096a:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 800096c:	6a38      	ldr	r0, [r7, #32]
 800096e:	f005 f865 	bl	8005a3c <atoi>
 8000972:	4603      	mov	r3, r0
 8000974:	b2db      	uxtb	r3, r3
 8000976:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800097a:	2000      	movs	r0, #0
 800097c:	f005 f8c2 	bl	8005b04 <strtok>
 8000980:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 8000982:	6a38      	ldr	r0, [r7, #32]
 8000984:	f005 f85a 	bl	8005a3c <atoi>
 8000988:	4603      	mov	r3, r0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	73bb      	strb	r3, [r7, #14]

    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2200      	movs	r2, #0
 8000994:	4619      	mov	r1, r3
 8000996:	4804      	ldr	r0, [pc, #16]	; (80009a8 <rtc_set_time+0x78>)
 8000998:	f002 fbed 	bl	8003176 <HAL_RTC_SetTime>
}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08006fc8 	.word	0x08006fc8
 80009a8:	20000538 	.word	0x20000538

080009ac <rtc_get_time>:

uint8_t *rtc_get_time(uint8_t buf[]) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <rtc_get_time+0x6c>)
 80009d2:	f002 fc6d 	bl	80032b0 <HAL_RTC_GetTime>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <rtc_get_time+0x34>
	RTC_Error();
 80009dc:	f7ff ff9e 	bl	800091c <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <rtc_get_time+0x6c>)
 80009ea:	f002 fd44 	bl	8003476 <HAL_RTC_GetDate>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <rtc_get_time+0x4c>
	RTC_Error();
 80009f4:	f7ff ff92 	bl	800091c <RTC_Error>
    }

    sprintf((char*)buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80009f8:	7b3b      	ldrb	r3, [r7, #12]
 80009fa:	461a      	mov	r2, r3
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	4619      	mov	r1, r3
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	460b      	mov	r3, r1
 8000a06:	4905      	ldr	r1, [pc, #20]	; (8000a1c <rtc_get_time+0x70>)
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f005 f85b 	bl	8005ac4 <siprintf>
    return buf;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000538 	.word	0x20000538
 8000a1c:	08006fcc 	.word	0x08006fcc

08000a20 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_SPI2_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a38:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a58:	2230      	movs	r2, #48	; 0x30
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_SPI2_Init+0x74>)
 8000a82:	f002 fe17 	bl	80036b4 <HAL_SPI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f7ff feb2 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000055c 	.word	0x2000055c
 8000a98:	40003800 	.word	0x40003800

08000a9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <HAL_SPI_MspInit+0xb4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d144      	bne.n	8000b48 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	4a24      	ldr	r2, [pc, #144]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_SPI_MspInit+0xb8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b06:	2308      	movs	r3, #8
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b16:	2305      	movs	r3, #5
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <HAL_SPI_MspInit+0xbc>)
 8000b22:	f000 fdad 	bl	8001680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <HAL_SPI_MspInit+0xc0>)
 8000b44:	f000 fd9c 	bl	8001680 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40003800 	.word	0x40003800
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	48000400 	.word	0x48000400

08000b60 <SPI_Error>:
    0x38, //0x1f0803	#functions set:	   8 bit data length (RE = 0, IS = 0)
    0x0C, //0x1f0E00	#display on:	   display on, cursor on, blink on
};


void SPI_Error() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2120      	movs	r1, #32
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f000 ff32 	bl	80019d4 <HAL_GPIO_WritePin>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <set_startbyte>:
  * @brief Set the R/W bit and RS bit in the start byte.
  * @param nibble: the sequence to set.
  * @note  0b1|R/W|RS|0
  * @retval None
  */
void set_startbyte(uint8_t nibble) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
    instr[0] = ((instr[0] & 0x0F) | (nibble << 4));
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <set_startbyte+0x34>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <set_startbyte+0x34>)
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000000 	.word	0x20000000

08000bac <set_byte>:
  * @brief Set the RS and R/W bit in the start byte.
  * @param nibble: the sequence to set.
  * @note  1|RS|R/W|0
  * @retval None
  */
void set_byte(uint8_t byte) {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
    instr[1] = (byte & 0x0F);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <set_byte+0x2c>)
 8000bc0:	705a      	strb	r2, [r3, #1]
    instr[2] = ((byte & 0xF0) >> 4);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	091b      	lsrs	r3, r3, #4
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <set_byte+0x2c>)
 8000bca:	709a      	strb	r2, [r3, #2]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	20000000 	.word	0x20000000

08000bdc <display_set_backlight>:


void display_set_backlight(uint8_t color) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
    switch(color) {
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d013      	beq.n	8000c14 <display_set_backlight+0x38>
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	dc18      	bgt.n	8000c22 <display_set_backlight+0x46>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <display_set_backlight+0x1e>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <display_set_backlight+0x2a>
	  break;
	case 2:
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
	  break;
    }
}
 8000bf8:	e013      	b.n	8000c22 <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Red_Backlight_GPIO_Port, Red_Backlight_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <display_set_backlight+0x50>)
 8000c00:	f000 fee8 	bl	80019d4 <HAL_GPIO_WritePin>
	  break;
 8000c04:	e00d      	b.n	8000c22 <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(White_Backlight_GPIO_Port, White_Backlight_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <display_set_backlight+0x50>)
 8000c0e:	f000 fee1 	bl	80019d4 <HAL_GPIO_WritePin>
	  break;
 8000c12:	e006      	b.n	8000c22 <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <display_set_backlight+0x50>)
 8000c1c:	f000 feda 	bl	80019d4 <HAL_GPIO_WritePin>
	  break;
 8000c20:	bf00      	nop
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	48000800 	.word	0x48000800

08000c30 <display_hw_reset>:


void display_hw_reset() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000c34:	2005      	movs	r0, #5
 8000c36:	f000 fb9d 	bl	8001374 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f000 fec6 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f000 fb93 	bl	8001374 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f000 febc 	bl	80019d4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f000 fb89 	bl	8001374 <HAL_Delay>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <send>:


void send() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
    if (HAL_SPI_Transmit(&hspi2, (uint8_t*)instr, 3, 50) != HAL_OK) {
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	2203      	movs	r2, #3
 8000c70:	4905      	ldr	r1, [pc, #20]	; (8000c88 <send+0x20>)
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <send+0x24>)
 8000c74:	f002 fdc1 	bl	80037fa <HAL_SPI_Transmit>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <send+0x1a>
	SPI_Error();
 8000c7e:	f7ff ff6f 	bl	8000b60 <SPI_Error>
    }
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	2000055c 	.word	0x2000055c

08000c90 <display_clear>:


void display_clear() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    set_startbyte(RS0_RW0);
 8000c94:	2301      	movs	r3, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff6c 	bl	8000b74 <set_startbyte>
    set_byte(CLEAR_DISPLAY);
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff83 	bl	8000bac <set_byte>
    send();
 8000ca6:	f7ff ffdf 	bl	8000c68 <send>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <display_init>:


void display_init() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0

    display_hw_reset();
 8000cb6:	f7ff ffbb 	bl	8000c30 <display_hw_reset>

    display_set_backlight(WHITE);
 8000cba:	2301      	movs	r3, #1
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff8d 	bl	8000bdc <display_set_backlight>

    set_startbyte(RS0_RW0);
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff55 	bl	8000b74 <set_startbyte>
    for (int i = 0; i < 11; i++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	e00e      	b.n	8000cee <display_init+0x3e>
	set_byte(init_seq[i]);
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <display_init+0x50>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff67 	bl	8000bac <set_byte>
	send();
 8000cde:	f7ff ffc3 	bl	8000c68 <send>
	HAL_Delay(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 fb46 	bl	8001374 <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3301      	adds	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0a      	cmp	r3, #10
 8000cf2:	dded      	ble.n	8000cd0 <display_init+0x20>
    }

    display_clear();
 8000cf4:	f7ff ffcc 	bl	8000c90 <display_clear>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000004 	.word	0x20000004

08000d04 <display_set_line>:

void display_set_line(uint8_t line) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS0_RW0);
 8000d0e:	2301      	movs	r3, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff2f 	bl	8000b74 <set_startbyte>
    set_byte(DDRAM_L[line - 1]);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <display_set_line+0x2c>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff44 	bl	8000bac <set_byte>
    send();
 8000d24:	f7ff ffa0 	bl	8000c68 <send>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08006fdc 	.word	0x08006fdc

08000d34 <display_write>:

void display_write(uint8_t c) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS1_RW0);
 8000d3e:	2305      	movs	r3, #5
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff17 	bl	8000b74 <set_startbyte>
    set_byte(c);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff2f 	bl	8000bac <set_byte>
    send();
 8000d4e:	f7ff ff8b 	bl	8000c68 <send>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <display_write_line>:

void display_write_line(uint8_t *buf, uint8_t len, uint8_t line) {
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	70fb      	strb	r3, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	70bb      	strb	r3, [r7, #2]
    display_set_line(line);
 8000d6a:	78bb      	ldrb	r3, [r7, #2]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ffc9 	bl	8000d04 <display_set_line>
    uint8_t i = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
    while (i < len) {
 8000d76:	e00c      	b.n	8000d92 <display_write_line+0x38>
	display_write(buf[i++]);
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	73fa      	strb	r2, [r7, #15]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ffd4 	bl	8000d34 <display_write>
	HAL_Delay(1);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f000 faf1 	bl	8001374 <HAL_Delay>
    while (i < len) {
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3ee      	bcc.n	8000d78 <display_write_line+0x1e>
    }
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6613      	str	r3, [r2, #96]	; 0x60
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	210f      	movs	r1, #15
 8000dde:	f06f 0001 	mvn.w	r0, #1
 8000de2:	f000 fba3 	bl	800152c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2019      	movs	r0, #25
 8000e0a:	f000 fb8f 	bl	800152c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e0e:	2019      	movs	r0, #25
 8000e10:	f000 fba8 	bl	8001564 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fbd4 	bl	80025e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e3c:	f001 fbbc 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8000e40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <HAL_InitTick+0xa0>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9b      	lsrs	r3, r3, #18
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e72:	f002 ff95 	bl	8003da0 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d104      	bne.n	8000e86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e7e:	f002 fff1 	bl	8003e64 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	431bde83 	.word	0x431bde83
 8000e98:	200005c0 	.word	0x200005c0
 8000e9c:	40012c00 	.word	0x40012c00

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ed2:	f003 f837 	bl	8003f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200005c0 	.word	0x200005c0

08000ee0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <UART5_IRQHandler+0x10>)
 8000ee6:	f003 fae9 	bl	80044bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000060c 	.word	0x2000060c

08000ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	return 1;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_kill>:

int _kill(int pid, int sig)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f0e:	f004 fd99 	bl	8005a44 <__errno>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2216      	movs	r2, #22
 8000f16:	601a      	str	r2, [r3, #0]
	return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_exit>:

void _exit (int status)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffe7 	bl	8000f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f36:	e7fe      	b.n	8000f36 <_exit+0x12>

08000f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e00a      	b.n	8000f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4a:	f3af 8000 	nop.w
 8000f4e:	4601      	mov	r1, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	b2ca      	uxtb	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbf0      	blt.n	8000f4a <_read+0x12>
	}

return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e009      	b.n	8000f98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	60ba      	str	r2, [r7, #8]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf1      	blt.n	8000f84 <_write+0x12>
	}
	return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_close>:

int _close(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_isatty>:

int _isatty(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f004 fcfe 	bl	8005a44 <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20018000 	.word	0x20018000
 8001074:	00000400 	.word	0x00000400
 8001078:	200000a0 	.word	0x200000a0
 800107c:	200006a8 	.word	0x200006a8

08001080 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_UART5_Init+0x58>)
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <MX_UART5_Init+0x5c>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_UART5_Init+0x58>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_UART5_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_UART5_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_UART5_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_UART5_Init+0x58>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_UART5_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_UART5_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_UART5_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_UART5_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_UART5_Init+0x58>)
 80010e8:	f003 f92c 	bl	8004344 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80010f2:	f7ff fb7f 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000060c 	.word	0x2000060c
 8001100:	40005000 	.word	0x40005000

08001104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b0ac      	sub	sp, #176	; 0xb0
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2288      	movs	r2, #136	; 0x88
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f004 fcc5 	bl	8005ab4 <memset>
  if(uartHandle->Instance==UART5)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a36      	ldr	r2, [pc, #216]	; (8001208 <HAL_UART_MspInit+0x104>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d164      	bne.n	80011fe <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001134:	2310      	movs	r3, #16
 8001136:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001138:	2300      	movs	r3, #0
 800113a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fae1 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800114c:	f7ff fb52 	bl	80007f4 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <HAL_UART_MspInit+0x108>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	4a2d      	ldr	r2, [pc, #180]	; (800120c <HAL_UART_MspInit+0x108>)
 8001156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800115a:	6593      	str	r3, [r2, #88]	; 0x58
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_UART_MspInit+0x108>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <HAL_UART_MspInit+0x108>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_UART_MspInit+0x108>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_UART_MspInit+0x108>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_UART_MspInit+0x108>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_UART_MspInit+0x108>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_UART_MspInit+0x108>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011b2:	2308      	movs	r3, #8
 80011b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011bc:	4619      	mov	r1, r3
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <HAL_UART_MspInit+0x10c>)
 80011c0:	f000 fa5e 	bl	8001680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c4:	2304      	movs	r3, #4
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011dc:	2308      	movs	r3, #8
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e6:	4619      	mov	r1, r3
 80011e8:	480a      	ldr	r0, [pc, #40]	; (8001214 <HAL_UART_MspInit+0x110>)
 80011ea:	f000 fa49 	bl	8001680 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2105      	movs	r1, #5
 80011f2:	2035      	movs	r0, #53	; 0x35
 80011f4:	f000 f99a 	bl	800152c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80011f8:	2035      	movs	r0, #53	; 0x35
 80011fa:	f000 f9b3 	bl	8001564 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	37b0      	adds	r7, #176	; 0xb0
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40005000 	.word	0x40005000
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800
 8001214:	48000c00 	.word	0x48000c00

08001218 <uart_transmit>:
  /* USER CODE END UART5_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
    if (UartDoneR == SET) {
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <uart_transmit+0x40>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d110      	bne.n	800124e <uart_transmit+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <uart_transmit+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <uart_transmit+0x44>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	461a      	mov	r2, r3
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <uart_transmit+0x48>)
 8001240:	f003 f8ce 	bl	80043e0 <HAL_UART_Transmit_IT>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <uart_transmit+0x36>
	    Error_Uart();
 800124a:	f000 f81f 	bl	800128c <Error_Uart>
	}
    }
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000015 	.word	0x20000015
 800125c:	20000014 	.word	0x20000014
 8001260:	2000060c 	.word	0x2000060c

08001264 <HAL_UART_TxCpltCallback>:
	    Error_Uart();
	}
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_UART_TxCpltCallback+0x20>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
    UartDoneR = SET;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_UART_TxCpltCallback+0x24>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	20000014 	.word	0x20000014
 8001288:	20000015 	.word	0x20000015

0800128c <Error_Uart>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
    UartDoneR = SET;
    UartDoneT = SET;
}

void Error_Uart(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    while (1) {
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2120      	movs	r1, #32
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f000 fb9c 	bl	80019d4 <HAL_GPIO_WritePin>
 800129c:	e7f8      	b.n	8001290 <Error_Uart+0x4>
	...

080012a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a4:	f7ff feec 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopForever+0x6>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopForever+0xe>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopForever+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ce:	f004 fbbf 	bl	8005a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d2:	f7ff f9e9 	bl	80006a8 <main>

080012d6 <LoopForever>:

LoopForever:
    b LoopForever
 80012d6:	e7fe      	b.n	80012d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80012e4:	08007284 	.word	0x08007284
  ldr r2, =_sbss
 80012e8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80012ec:	200006a4 	.word	0x200006a4

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_Init+0x3c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_Init+0x3c>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f903 	bl	8001516 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001310:	200f      	movs	r0, #15
 8001312:	f7ff fd6f 	bl	8000df4 <HAL_InitTick>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	e001      	b.n	8001326 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001322:	f7ff fd3f 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001326:	79fb      	ldrb	r3, [r7, #7]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000001c 	.word	0x2000001c
 8001358:	20000690 	.word	0x20000690

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000690 	.word	0x20000690

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000001c 	.word	0x2000001c

080013bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <__NVIC_SetPriorityGrouping+0x44>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <__NVIC_GetPriorityGrouping+0x18>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 0307 	and.w	r3, r3, #7
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db0b      	blt.n	800144a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	4907      	ldr	r1, [pc, #28]	; (8001458 <__NVIC_EnableIRQ+0x38>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	2001      	movs	r0, #1
 8001442:	fa00 f202 	lsl.w	r2, r0, r2
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff4c 	bl	80013bc <__NVIC_SetPriorityGrouping>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800153e:	f7ff ff61 	bl	8001404 <__NVIC_GetPriorityGrouping>
 8001542:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	6978      	ldr	r0, [r7, #20]
 800154a:	f7ff ffb1 	bl	80014b0 <NVIC_EncodePriority>
 800154e:	4602      	mov	r2, r0
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff80 	bl	800145c <__NVIC_SetPriority>
}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff54 	bl	8001420 <__NVIC_EnableIRQ>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d008      	beq.n	80015aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e022      	b.n	80015f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 020e 	bic.w	r2, r2, #14
 80015b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f003 021c 	and.w	r2, r3, #28
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f202 	lsl.w	r2, r1, r2
 80015dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d005      	beq.n	8001620 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2204      	movs	r2, #4
 8001618:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e029      	b.n	8001674 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020e 	bic.w	r2, r2, #14
 800162e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	f003 021c 	and.w	r2, r3, #28
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
    }
  }
  return status;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e17f      	b.n	8001990 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8171 	beq.w	800198a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d005      	beq.n	80016c0 <HAL_GPIO_Init+0x40>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d130      	bne.n	8001722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f6:	2201      	movs	r2, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 0201 	and.w	r2, r3, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b03      	cmp	r3, #3
 800172c:	d118      	bne.n	8001760 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001734:	2201      	movs	r2, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	f003 0201 	and.w	r2, r3, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b03      	cmp	r3, #3
 800176a:	d017      	beq.n	800179c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d123      	bne.n	80017f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	6939      	ldr	r1, [r7, #16]
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80ac 	beq.w	800198a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_GPIO_Init+0x330>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	4a5e      	ldr	r2, [pc, #376]	; (80019b0 <HAL_GPIO_Init+0x330>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6613      	str	r3, [r2, #96]	; 0x60
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_GPIO_Init+0x330>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800184a:	4a5a      	ldr	r2, [pc, #360]	; (80019b4 <HAL_GPIO_Init+0x334>)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x242>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <HAL_GPIO_Init+0x338>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x23e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4e      	ldr	r2, [pc, #312]	; (80019bc <HAL_GPIO_Init+0x33c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x23a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4d      	ldr	r2, [pc, #308]	; (80019c0 <HAL_GPIO_Init+0x340>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x236>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_GPIO_Init+0x344>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x232>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4b      	ldr	r2, [pc, #300]	; (80019c8 <HAL_GPIO_Init+0x348>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x22e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_GPIO_Init+0x34c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x22a>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e00c      	b.n	80018c4 <HAL_GPIO_Init+0x244>
 80018aa:	2307      	movs	r3, #7
 80018ac:	e00a      	b.n	80018c4 <HAL_GPIO_Init+0x244>
 80018ae:	2305      	movs	r3, #5
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x244>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x244>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x244>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x244>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x244>
 80018c2:	2300      	movs	r3, #0
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d4:	4937      	ldr	r1, [pc, #220]	; (80019b4 <HAL_GPIO_Init+0x334>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_GPIO_Init+0x350>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001906:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_GPIO_Init+0x350>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001930:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800195a:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_GPIO_Init+0x350>)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f ae78 	bne.w	8001690 <HAL_GPIO_Init+0x10>
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000
 80019b8:	48000400 	.word	0x48000400
 80019bc:	48000800 	.word	0x48000800
 80019c0:	48000c00 	.word	0x48000c00
 80019c4:	48001000 	.word	0x48001000
 80019c8:	48001400 	.word	0x48001400
 80019cc:	48001800 	.word	0x48001800
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40007000 	.word	0x40007000

08001a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2e:	d130      	bne.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a3c:	d038      	beq.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2232      	movs	r2, #50	; 0x32
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0c9b      	lsrs	r3, r3, #18
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a64:	e002      	b.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d102      	bne.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f2      	bne.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8c:	d110      	bne.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e00f      	b.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9e:	d007      	beq.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa8:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	20000010 	.word	0x20000010
 8001ac8:	431bde83 	.word	0x431bde83

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e3d4      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	4ba1      	ldr	r3, [pc, #644]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae8:	4b9e      	ldr	r3, [pc, #632]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80e4 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4a>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	f040 808b 	bne.w	8001c24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	f040 8087 	bne.w	8001c24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b16:	4b93      	ldr	r3, [pc, #588]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e3ac      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_RCC_OscConfig+0x7c>
 8001b3e:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b46:	e005      	b.n	8001b54 <HAL_RCC_OscConfig+0x88>
 8001b48:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d223      	bcs.n	8001ba0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fd73 	bl	8002648 <RCC_SetFlashLatencyFromMSIRange>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e38d      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6c:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7c      	ldr	r2, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b72:	f043 0308 	orr.w	r3, r3, #8
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4977      	ldr	r1, [pc, #476]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	4972      	ldr	r1, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
 8001b9e:	e025      	b.n	8001bec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba0:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6f      	ldr	r2, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	496a      	ldr	r1, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bbe:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	4965      	ldr	r1, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 fd33 	bl	8002648 <RCC_SetFlashLatencyFromMSIRange>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e34d      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bec:	f000 fc36 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	495a      	ldr	r1, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x29c>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_OscConfig+0x2a0>)
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c0c:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <HAL_RCC_OscConfig+0x2a4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f8ef 	bl	8000df4 <HAL_InitTick>
 8001c16:	4603      	mov	r3, r0
 8001c18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d052      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	e331      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d032      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb90 	bl	800135c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c40:	f7ff fb8c 	bl	800135c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e31a      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c52:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a40      	ldr	r2, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	493b      	ldr	r1, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	4936      	ldr	r1, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e01a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb5d 	bl	800135c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb59 	bl	800135c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e2e7      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x1da>
 8001cc4:	e000      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d074      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x21a>
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d10e      	bne.n	8001cfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d10b      	bne.n	8001cfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d064      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d160      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e2c4      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x24a>
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e01d      	b.n	8001d52 <HAL_RCC_OscConfig+0x286>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x26e>
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x286>
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d01c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7ff faff 	bl	800135c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d60:	e011      	b.n	8001d86 <HAL_RCC_OscConfig+0x2ba>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08006fe0 	.word	0x08006fe0
 8001d6c:	20000010 	.word	0x20000010
 8001d70:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff faf2 	bl	800135c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e280      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d86:	4baf      	ldr	r3, [pc, #700]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2a8>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fae2 	bl	800135c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fade 	bl	800135c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e26c      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dae:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x2d0>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d060      	beq.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x310>
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d119      	bne.n	8001e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d116      	bne.n	8001e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ddc:	4b99      	ldr	r3, [pc, #612]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_OscConfig+0x328>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e249      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b93      	ldr	r3, [pc, #588]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	4990      	ldr	r1, [pc, #576]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	e040      	b.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d023      	beq.n	8001e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e12:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a8b      	ldr	r2, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fa9d 	bl	800135c <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff fa99 	bl	800135c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e227      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e38:	4b82      	ldr	r3, [pc, #520]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	497c      	ldr	r1, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
 8001e58:	e018      	b.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff fa79 	bl	800135c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff fa75 	bl	800135c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e203      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e80:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	4a67      	ldr	r2, [pc, #412]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fa54 	bl	800135c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fa50 	bl	800135c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1de      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eca:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x3ec>
 8001ed8:	e01b      	b.n	8001f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eda:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7ff fa37 	bl	800135c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fa33 	bl	800135c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1c1      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f04:	4b4f      	ldr	r3, [pc, #316]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80a6 	beq.w	800206c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	4a43      	ldr	r2, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d118      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f64:	f7ff f9fa 	bl	800135c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7ff f9f6 	bl	800135c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e184      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4d8>
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa2:	e024      	b.n	8001fee <HAL_RCC_OscConfig+0x522>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d110      	bne.n	8001fce <HAL_RCC_OscConfig+0x502>
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fcc:	e00f      	b.n	8001fee <HAL_RCC_OscConfig+0x522>
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f9b1 	bl	800135c <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff f9ad 	bl	800135c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e139      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ed      	beq.n	8001ffe <HAL_RCC_OscConfig+0x532>
 8002022:	e01a      	b.n	800205a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f99a 	bl	800135c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7ff f996 	bl	800135c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d906      	bls.n	800204c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e122      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204c:	4b90      	ldr	r3, [pc, #576]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e8      	bne.n	800202c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205a:	7ffb      	ldrb	r3, [r7, #31]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4a8a      	ldr	r2, [pc, #552]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8108 	beq.w	8002286 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	2b02      	cmp	r3, #2
 800207c:	f040 80d0 	bne.w	8002220 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002080:	4b83      	ldr	r3, [pc, #524]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	429a      	cmp	r2, r3
 8002092:	d130      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	3b01      	subs	r3, #1
 80020a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d127      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11f      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c0:	2a07      	cmp	r2, #7
 80020c2:	bf14      	ite	ne
 80020c4:	2201      	movne	r2, #1
 80020c6:	2200      	moveq	r2, #0
 80020c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d113      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	3b01      	subs	r3, #1
 80020dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d06e      	beq.n	80021d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d069      	beq.n	80021d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0b7      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002118:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a5c      	ldr	r2, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800211e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002124:	f7ff f91a 	bl	800135c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff f916 	bl	800135c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0a4      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214a:	4b51      	ldr	r3, [pc, #324]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_OscConfig+0x7c8>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800215a:	3a01      	subs	r2, #1
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002164:	0212      	lsls	r2, r2, #8
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800216c:	0852      	lsrs	r2, r2, #1
 800216e:	3a01      	subs	r2, #1
 8002170:	0552      	lsls	r2, r2, #21
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002178:	0852      	lsrs	r2, r2, #1
 800217a:	3a01      	subs	r2, #1
 800217c:	0652      	lsls	r2, r2, #25
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002184:	0912      	lsrs	r2, r2, #4
 8002186:	0452      	lsls	r2, r2, #17
 8002188:	430a      	orrs	r2, r1
 800218a:	4941      	ldr	r1, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002190:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3e      	ldr	r2, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021a8:	f7ff f8d8 	bl	800135c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff f8d4 	bl	800135c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e062      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ce:	e05a      	b.n	8002286 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e059      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d152      	bne.n	8002286 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021f8:	f7ff f8b0 	bl	800135c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff f8ac 	bl	800135c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e03a      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x734>
 800221e:	e032      	b.n	8002286 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d02d      	beq.n	8002282 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002230:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a13      	ldr	r2, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002244:	f023 0303 	bic.w	r3, r3, #3
 8002248:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002250:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f87f 	bl	800135c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff f87b 	bl	800135c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e009      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x7c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x796>
 8002280:	e001      	b.n	8002286 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	f99d808c 	.word	0xf99d808c

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0c8      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4961      	ldr	r1, [pc, #388]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0b0      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d04c      	beq.n	8002382 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d121      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e09e      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d115      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e092      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002320:	4b4a      	ldr	r3, [pc, #296]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e086      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002330:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e07e      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 0203 	bic.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	493f      	ldr	r1, [pc, #252]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002352:	f7ff f803 	bl	800135c <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002358:	e00a      	b.n	8002370 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235a:	f7fe ffff 	bl	800135c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e066      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 020c 	and.w	r2, r3, #12
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	429a      	cmp	r2, r3
 8002380:	d1eb      	bne.n	800235a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238e:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	492c      	ldr	r1, [pc, #176]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d210      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0207 	bic.w	r2, r3, #7
 80023b6:	4924      	ldr	r1, [pc, #144]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1b0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e036      	b.n	800243e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4918      	ldr	r1, [pc, #96]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4910      	ldr	r1, [pc, #64]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800240e:	f000 f825 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002412:	4602      	mov	r2, r0
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_ClockConfig+0x1b4>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	490c      	ldr	r1, [pc, #48]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	5ccb      	ldrb	r3, [r1, r3]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fcde 	bl	8000df4 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	72fb      	strb	r3, [r7, #11]

  return status;
 800243c:	7afb      	ldrb	r3, [r7, #11]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000
 800244c:	40021000 	.word	0x40021000
 8002450:	08006fe0 	.word	0x08006fe0
 8002454:	20000010 	.word	0x20000010
 8002458:	20000018 	.word	0x20000018

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002474:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x34>
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d121      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d11e      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d102      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e004      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_RCC_GetSysClockFreq+0x114>)
 80024e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d134      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0xa6>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xac>
 8002500:	e005      	b.n	800250e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 8002504:	617b      	str	r3, [r7, #20]
      break;
 8002506:	e005      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_GetSysClockFreq+0x114>)
 800250a:	617b      	str	r3, [r7, #20]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	617b      	str	r3, [r7, #20]
      break;
 8002512:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	3301      	adds	r3, #1
 8002520:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	fb02 f203 	mul.w	r2, r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	0e5b      	lsrs	r3, r3, #25
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	3301      	adds	r3, #1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002554:	69bb      	ldr	r3, [r7, #24]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	; 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08006ff8 	.word	0x08006ff8
 800256c:	00f42400 	.word	0x00f42400
 8002570:	007a1200 	.word	0x007a1200

08002574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_RCC_GetHCLKFreq+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20000010 	.word	0x20000010

0800258c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002590:	f7ff fff0 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4904      	ldr	r1, [pc, #16]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08006ff0 	.word	0x08006ff0

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025bc:	f7ff ffda 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0adb      	lsrs	r3, r3, #11
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4904      	ldr	r1, [pc, #16]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08006ff0 	.word	0x08006ff0

080025e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	220f      	movs	r2, #15
 80025f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_RCC_GetClockConfig+0x60>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0207 	and.w	r2, r3, #7
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	601a      	str	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40022000 	.word	0x40022000

08002648 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002660:	f7ff f9d0 	bl	8001a04 <HAL_PWREx_GetVoltageRange>
 8002664:	6178      	str	r0, [r7, #20]
 8002666:	e014      	b.n	8002692 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	4a24      	ldr	r2, [pc, #144]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002672:	6593      	str	r3, [r2, #88]	; 0x58
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002680:	f7ff f9c0 	bl	8001a04 <HAL_PWREx_GetVoltageRange>
 8002684:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d10b      	bne.n	80026b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d919      	bls.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2ba0      	cmp	r3, #160	; 0xa0
 80026a4:	d902      	bls.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a6:	2302      	movs	r3, #2
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	e013      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ac:	2301      	movs	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	e010      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d902      	bls.n	80026be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026b8:	2303      	movs	r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	e00a      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b80      	cmp	r3, #128	; 0x80
 80026c2:	d102      	bne.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c4:	2302      	movs	r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	e004      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b70      	cmp	r3, #112	; 0x70
 80026ce:	d101      	bne.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 0207 	bic.w	r2, r3, #7
 80026dc:	4909      	ldr	r1, [pc, #36]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	40022000 	.word	0x40022000

08002708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002710:	2300      	movs	r3, #0
 8002712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002714:	2300      	movs	r3, #0
 8002716:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002720:	2b00      	cmp	r3, #0
 8002722:	d041      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002728:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800272c:	d02a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800272e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002732:	d824      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800273a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800273e:	d81e      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002748:	d010      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800274a:	e018      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800274c:	4b86      	ldr	r3, [pc, #536]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a85      	ldr	r2, [pc, #532]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002758:	e015      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fabb 	bl	8002cdc <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276a:	e00c      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3320      	adds	r3, #32
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fba6 	bl	8002ec4 <RCCEx_PLLSAI2_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	74fb      	strb	r3, [r7, #19]
      break;
 8002782:	e000      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800278c:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279a:	4973      	ldr	r1, [pc, #460]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027a2:	e001      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d041      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027bc:	d02a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027c2:	d824      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027c8:	d008      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ce:	d81e      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d010      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027da:	e018      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027dc:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a61      	ldr	r2, [pc, #388]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e8:	e015      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fa73 	bl	8002cdc <RCCEx_PLLSAI1_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027fa:	e00c      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3320      	adds	r3, #32
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fb5e 	bl	8002ec4 <RCCEx_PLLSAI2_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800280c:	e003      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	74fb      	strb	r3, [r7, #19]
      break;
 8002812:	e000      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002816:	7cfb      	ldrb	r3, [r7, #19]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800281c:	4b52      	ldr	r3, [pc, #328]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800282a:	494f      	ldr	r1, [pc, #316]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002832:	e001      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a0 	beq.w	8002986 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	4a40      	ldr	r2, [pc, #256]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	; 0x58
 800286c:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002878:	2301      	movs	r3, #1
 800287a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a3a      	ldr	r2, [pc, #232]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002888:	f7fe fd68 	bl	800135c <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800288e:	e009      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002890:	f7fe fd64 	bl	800135c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d902      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	74fb      	strb	r3, [r7, #19]
        break;
 80028a2:	e005      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ef      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d15c      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028b6:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01f      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d019      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fd23 	bl	800135c <HAL_GetTick>
 8002916:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002918:	e00b      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe fd1f 	bl	800135c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d902      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	74fb      	strb	r3, [r7, #19]
            break;
 8002930:	e006      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ec      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002956:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800295e:	e009      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
 8002964:	e006      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002974:	7c7b      	ldrb	r3, [r7, #17]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b9e      	ldr	r3, [pc, #632]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	4a9d      	ldr	r2, [pc, #628]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002992:	4b98      	ldr	r3, [pc, #608]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f023 0203 	bic.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	4994      	ldr	r1, [pc, #592]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b4:	4b8f      	ldr	r3, [pc, #572]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 020c 	bic.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	498c      	ldr	r1, [pc, #560]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029d6:	4b87      	ldr	r3, [pc, #540]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	4983      	ldr	r1, [pc, #524]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029f8:	4b7e      	ldr	r3, [pc, #504]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	497b      	ldr	r1, [pc, #492]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a1a:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	4972      	ldr	r1, [pc, #456]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a3c:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	496a      	ldr	r1, [pc, #424]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	4961      	ldr	r1, [pc, #388]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a80:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	4959      	ldr	r1, [pc, #356]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa2:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab0:	4950      	ldr	r1, [pc, #320]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac4:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	4948      	ldr	r1, [pc, #288]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	493f      	ldr	r1, [pc, #252]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d028      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b16:	4937      	ldr	r1, [pc, #220]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b26:	d106      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b28:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a31      	ldr	r2, [pc, #196]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b32:	60d3      	str	r3, [r2, #12]
 8002b34:	e011      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f8c8 	bl	8002cdc <RCCEx_PLLSAI1_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	491f      	ldr	r1, [pc, #124]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b84:	d106      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b86:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b90:	60d3      	str	r3, [r2, #12]
 8002b92:	e011      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f899 	bl	8002cdc <RCCEx_PLLSAI1_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a02      	ldr	r2, [pc, #8]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bee:	60d3      	str	r3, [r2, #12]
 8002bf0:	e014      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	2101      	movs	r1, #1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f867 	bl	8002cdc <RCCEx_PLLSAI1_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d02f      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c36:	4928      	ldr	r1, [pc, #160]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c46:	d10d      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f844 	bl	8002cdc <RCCEx_PLLSAI1_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d014      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	74bb      	strb	r3, [r7, #18]
 8002c62:	e011      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3320      	adds	r3, #32
 8002c72:	2102      	movs	r1, #2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f925 	bl	8002ec4 <RCCEx_PLLSAI2_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca2:	490d      	ldr	r1, [pc, #52]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc6:	4904      	ldr	r1, [pc, #16]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cce:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000

08002cdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cea:	4b75      	ldr	r3, [pc, #468]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d018      	beq.n	8002d28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cf6:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d10d      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
       ||
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d0e:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d047      	beq.n	8002db2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	e044      	b.n	8002db2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d018      	beq.n	8002d62 <RCCEx_PLLSAI1_Config+0x86>
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d825      	bhi.n	8002d80 <RCCEx_PLLSAI1_Config+0xa4>
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d002      	beq.n	8002d3e <RCCEx_PLLSAI1_Config+0x62>
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d009      	beq.n	8002d50 <RCCEx_PLLSAI1_Config+0x74>
 8002d3c:	e020      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d3e:	4b60      	ldr	r3, [pc, #384]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11d      	bne.n	8002d86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4e:	e01a      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d50:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d60:	e013      	b.n	8002d8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d62:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d6e:	4b54      	ldr	r3, [pc, #336]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d7e:	e006      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
      break;
 8002d84:	e004      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	430b      	orrs	r3, r1
 8002dac:	4944      	ldr	r1, [pc, #272]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d17d      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002db8:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc4:	f7fe faca 	bl	800135c <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dca:	e009      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dcc:	f7fe fac6 	bl	800135c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d902      	bls.n	8002de0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dde:	e005      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002de0:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ef      	bne.n	8002dcc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d160      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d111      	bne.n	8002e1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	0211      	lsls	r1, r2, #8
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	0912      	lsrs	r2, r2, #4
 8002e10:	0452      	lsls	r2, r2, #17
 8002e12:	430a      	orrs	r2, r1
 8002e14:	492a      	ldr	r1, [pc, #168]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	610b      	str	r3, [r1, #16]
 8002e1a:	e027      	b.n	8002e6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d112      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	0211      	lsls	r1, r2, #8
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6912      	ldr	r2, [r2, #16]
 8002e38:	0852      	lsrs	r2, r2, #1
 8002e3a:	3a01      	subs	r2, #1
 8002e3c:	0552      	lsls	r2, r2, #21
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	491f      	ldr	r1, [pc, #124]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	610b      	str	r3, [r1, #16]
 8002e46:	e011      	b.n	8002e6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	0211      	lsls	r1, r2, #8
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6952      	ldr	r2, [r2, #20]
 8002e5e:	0852      	lsrs	r2, r2, #1
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0652      	lsls	r2, r2, #25
 8002e64:	430a      	orrs	r2, r1
 8002e66:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fa70 	bl	800135c <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e7e:	e009      	b.n	8002e94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e80:	f7fe fa6c 	bl	800135c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	73fb      	strb	r3, [r7, #15]
          break;
 8002e92:	e005      	b.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	4904      	ldr	r1, [pc, #16]	; (8002ec0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d018      	beq.n	8002f10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ede:	4b67      	ldr	r3, [pc, #412]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0203 	and.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d10d      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ef6:	4b61      	ldr	r3, [pc, #388]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
       ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d047      	beq.n	8002f9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e044      	b.n	8002f9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d018      	beq.n	8002f4a <RCCEx_PLLSAI2_Config+0x86>
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d825      	bhi.n	8002f68 <RCCEx_PLLSAI2_Config+0xa4>
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d002      	beq.n	8002f26 <RCCEx_PLLSAI2_Config+0x62>
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d009      	beq.n	8002f38 <RCCEx_PLLSAI2_Config+0x74>
 8002f24:	e020      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f26:	4b55      	ldr	r3, [pc, #340]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d11d      	bne.n	8002f6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f36:	e01a      	b.n	8002f6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f38:	4b50      	ldr	r3, [pc, #320]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d116      	bne.n	8002f72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f48:	e013      	b.n	8002f72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f4a:	4b4c      	ldr	r3, [pc, #304]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f56:	4b49      	ldr	r3, [pc, #292]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f66:	e006      	b.n	8002f76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f6c:	e004      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e002      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10d      	bne.n	8002f9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6819      	ldr	r1, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	430b      	orrs	r3, r1
 8002f94:	4939      	ldr	r1, [pc, #228]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d167      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fa0:	4b36      	ldr	r3, [pc, #216]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a35      	ldr	r2, [pc, #212]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fac:	f7fe f9d6 	bl	800135c <HAL_GetTick>
 8002fb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb2:	e009      	b.n	8002fc8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fb4:	f7fe f9d2 	bl	800135c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d902      	bls.n	8002fc8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8002fc6:	e005      	b.n	8002fd4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ef      	bne.n	8002fb4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d14a      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d111      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6892      	ldr	r2, [r2, #8]
 8002ff0:	0211      	lsls	r1, r2, #8
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68d2      	ldr	r2, [r2, #12]
 8002ff6:	0912      	lsrs	r2, r2, #4
 8002ff8:	0452      	lsls	r2, r2, #17
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	491f      	ldr	r1, [pc, #124]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	614b      	str	r3, [r1, #20]
 8003002:	e011      	b.n	8003028 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800300c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6892      	ldr	r2, [r2, #8]
 8003014:	0211      	lsls	r1, r2, #8
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6912      	ldr	r2, [r2, #16]
 800301a:	0852      	lsrs	r2, r2, #1
 800301c:	3a01      	subs	r2, #1
 800301e:	0652      	lsls	r2, r2, #25
 8003020:	430a      	orrs	r2, r1
 8003022:	4916      	ldr	r1, [pc, #88]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a13      	ldr	r2, [pc, #76]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe f992 	bl	800135c <HAL_GetTick>
 8003038:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800303a:	e009      	b.n	8003050 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800303c:	f7fe f98e 	bl	800135c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	73fb      	strb	r3, [r7, #15]
          break;
 800304e:	e005      	b.n	800305c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4904      	ldr	r1, [pc, #16]	; (800307c <RCCEx_PLLSAI2_Config+0x1b8>)
 800306c:	4313      	orrs	r3, r2
 800306e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06c      	beq.n	800316c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fc06 	bl	80008b8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	22ca      	movs	r2, #202	; 0xca
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2253      	movs	r2, #83	; 0x53
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa49 	bl	800355c <RTC_EnterInitMode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d14b      	bne.n	800316c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6919      	ldr	r1, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	041a      	lsls	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fa4d 	bl	80035c4 <RTC_ExitInitMode>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11b      	bne.n	800316c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0203 	bic.w	r2, r2, #3
 8003142:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003176:	b590      	push	{r4, r7, lr}
 8003178:	b087      	sub	sp, #28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_RTC_SetTime+0x1a>
 800318c:	2302      	movs	r3, #2
 800318e:	e08b      	b.n	80032a8 <HAL_RTC_SetTime+0x132>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	22ca      	movs	r2, #202	; 0xca
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2253      	movs	r2, #83	; 0x53
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f9d3 	bl	800355c <RTC_EnterInitMode>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d163      	bne.n	8003288 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d126      	bne.n	8003214 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fa2e 	bl	8003640 <RTC_ByteToBcd2>
 80031e4:	4603      	mov	r3, r0
 80031e6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa27 	bl	8003640 <RTC_ByteToBcd2>
 80031f2:	4603      	mov	r3, r0
 80031f4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031f6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	789b      	ldrb	r3, [r3, #2]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fa1f 	bl	8003640 <RTC_ByteToBcd2>
 8003202:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003204:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e018      	b.n	8003246 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003234:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800323a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	78db      	ldrb	r3, [r3, #3]
 8003240:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003250:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003254:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003264:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f9a0 	bl	80035c4 <RTC_ExitInitMode>
 8003284:	4603      	mov	r3, r0
 8003286:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	22ff      	movs	r2, #255	; 0xff
 800328e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd90      	pop	{r4, r7, pc}

080032b0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	0d9b      	lsrs	r3, r3, #22
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d11a      	bne.n	800335e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f9a7 	bl	8003680 <RTC_Bcd2ToByte>
 8003332:	4603      	mov	r3, r0
 8003334:	461a      	mov	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f99e 	bl	8003680 <RTC_Bcd2ToByte>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	789b      	ldrb	r3, [r3, #2]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f995 	bl	8003680 <RTC_Bcd2ToByte>
 8003356:	4603      	mov	r3, r0
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_RTC_SetDate+0x1a>
 800337e:	2302      	movs	r3, #2
 8003380:	e075      	b.n	800346e <HAL_RTC_SetDate+0x106>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10e      	bne.n	80033b6 <HAL_RTC_SetDate+0x4e>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	f023 0310 	bic.w	r3, r3, #16
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	330a      	adds	r3, #10
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d11c      	bne.n	80033f6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	78db      	ldrb	r3, [r3, #3]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f93d 	bl	8003640 <RTC_ByteToBcd2>
 80033c6:	4603      	mov	r3, r0
 80033c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	785b      	ldrb	r3, [r3, #1]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f936 	bl	8003640 <RTC_ByteToBcd2>
 80033d4:	4603      	mov	r3, r0
 80033d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80033d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	789b      	ldrb	r3, [r3, #2]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f92e 	bl	8003640 <RTC_ByteToBcd2>
 80033e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80033e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00e      	b.n	8003414 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	78db      	ldrb	r3, [r3, #3]
 80033fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003402:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003408:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	22ca      	movs	r2, #202	; 0xca
 800341a:	625a      	str	r2, [r3, #36]	; 0x24
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2253      	movs	r2, #83	; 0x53
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f899 	bl	800355c <RTC_EnterInitMode>
 800342a:	4603      	mov	r3, r0
 800342c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10c      	bne.n	800344e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800343e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003442:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f8bd 	bl	80035c4 <RTC_ExitInitMode>
 800344a:	4603      	mov	r3, r0
 800344c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}

08003476 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800348c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003490:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	0b5b      	lsrs	r3, r3, #13
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11a      	bne.n	8003506 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	78db      	ldrb	r3, [r3, #3]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f8d3 	bl	8003680 <RTC_Bcd2ToByte>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f8ca 	bl	8003680 <RTC_Bcd2ToByte>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f8c1 	bl	8003680 <RTC_Bcd2ToByte>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003526:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003528:	f7fd ff18 	bl	800135c <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800352e:	e009      	b.n	8003544 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003530:	f7fd ff14 	bl	800135c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353e:	d901      	bls.n	8003544 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e007      	b.n	8003554 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d120      	bne.n	80035b8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800357e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003580:	f7fd feec 	bl	800135c <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003586:	e00d      	b.n	80035a4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003588:	f7fd fee8 	bl	800135c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003596:	d905      	bls.n	80035a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <RTC_EnterInitMode+0x5c>
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d1e7      	bne.n	8003588 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <RTC_ExitInitMode+0x78>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <RTC_ExitInitMode+0x78>)
 80035d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035da:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <RTC_ExitInitMode+0x78>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10c      	bne.n	8003602 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff91 	bl	8003510 <HAL_RTC_WaitForSynchro>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01e      	beq.n	8003632 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e017      	b.n	8003632 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <RTC_ExitInitMode+0x78>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4a0d      	ldr	r2, [pc, #52]	; (800363c <RTC_ExitInitMode+0x78>)
 8003608:	f023 0320 	bic.w	r3, r3, #32
 800360c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff7e 	bl	8003510 <HAL_RTC_WaitForSynchro>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <RTC_ExitInitMode+0x78>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <RTC_ExitInitMode+0x78>)
 800362c:	f043 0320 	orr.w	r3, r3, #32
 8003630:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40002800 	.word	0x40002800

08003640 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003652:	e005      	b.n	8003660 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	3b0a      	subs	r3, #10
 800365e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003660:	7afb      	ldrb	r3, [r7, #11]
 8003662:	2b09      	cmp	r3, #9
 8003664:	d8f6      	bhi.n	8003654 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	b2da      	uxtb	r2, r3
 800366e:	7afb      	ldrb	r3, [r7, #11]
 8003670:	4313      	orrs	r3, r2
 8003672:	b2db      	uxtb	r3, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	4413      	add	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	4413      	add	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e095      	b.n	80037f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d108      	bne.n	80036e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d6:	d009      	beq.n	80036ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]
 80036de:	e005      	b.n	80036ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd f9c8 	bl	8000a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003722:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800372c:	d902      	bls.n	8003734 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e002      	b.n	800373a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003738:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003742:	d007      	beq.n	8003754 <HAL_SPI_Init+0xa0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800374c:	d002      	beq.n	8003754 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	ea42 0103 	orr.w	r1, r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	f003 0204 	and.w	r2, r3, #4
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037d0:	ea42 0103 	orr.w	r1, r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b088      	sub	sp, #32
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_SPI_Transmit+0x22>
 8003818:	2302      	movs	r3, #2
 800381a:	e158      	b.n	8003ace <HAL_SPI_Transmit+0x2d4>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003824:	f7fd fd9a 	bl	800135c <HAL_GetTick>
 8003828:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d002      	beq.n	8003840 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800383e:	e13d      	b.n	8003abc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_SPI_Transmit+0x52>
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003850:	e134      	b.n	8003abc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2203      	movs	r2, #3
 8003856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	88fa      	ldrh	r2, [r7, #6]
 800386a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389c:	d10f      	bne.n	80038be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d007      	beq.n	80038dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038e4:	d94b      	bls.n	800397e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_SPI_Transmit+0xfa>
 80038ee:	8afb      	ldrh	r3, [r7, #22]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d13e      	bne.n	8003972 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003918:	e02b      	b.n	8003972 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d112      	bne.n	800394e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	881a      	ldrh	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	1c9a      	adds	r2, r3, #2
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800394c:	e011      	b.n	8003972 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800394e:	f7fd fd05 	bl	800135c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d803      	bhi.n	8003966 <HAL_SPI_Transmit+0x16c>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d102      	bne.n	800396c <HAL_SPI_Transmit+0x172>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003970:	e0a4      	b.n	8003abc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ce      	bne.n	800391a <HAL_SPI_Transmit+0x120>
 800397c:	e07c      	b.n	8003a78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_SPI_Transmit+0x192>
 8003986:	8afb      	ldrh	r3, [r7, #22]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d170      	bne.n	8003a6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d912      	bls.n	80039bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b02      	subs	r3, #2
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ba:	e058      	b.n	8003a6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039e2:	e044      	b.n	8003a6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d12b      	bne.n	8003a4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d912      	bls.n	8003a22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	881a      	ldrh	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	1c9a      	adds	r2, r3, #2
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b02      	subs	r3, #2
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a20:	e025      	b.n	8003a6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a48:	e011      	b.n	8003a6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a4a:	f7fd fc87 	bl	800135c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d803      	bhi.n	8003a62 <HAL_SPI_Transmit+0x268>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_Transmit+0x26e>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a6c:	e026      	b.n	8003abc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1b5      	bne.n	80039e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f949 	bl	8003d14 <SPI_EndRxTxTransaction>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e000      	b.n	8003abc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ae8:	f7fd fc38 	bl	800135c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003af8:	f7fd fc30 	bl	800135c <HAL_GetTick>
 8003afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003afe:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	015b      	lsls	r3, r3, #5
 8003b04:	0d1b      	lsrs	r3, r3, #20
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b0e:	e054      	b.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b16:	d050      	beq.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b18:	f7fd fc20 	bl	800135c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d902      	bls.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d13d      	bne.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b46:	d111      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b50:	d004      	beq.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d107      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d10f      	bne.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e017      	b.n	8003bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d19b      	bne.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000010 	.word	0x20000010

08003be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bfa:	f7fd fbaf 	bl	800135c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	4413      	add	r3, r2
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c0a:	f7fd fba7 	bl	800135c <HAL_GetTick>
 8003c0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c18:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00da      	lsls	r2, r3, #3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	0d1b      	lsrs	r3, r3, #20
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c30:	e060      	b.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c38:	d107      	bne.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c50:	d050      	beq.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c52:	f7fd fb83 	bl	800135c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d902      	bls.n	8003c68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13d      	bne.n	8003ce4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c80:	d111      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d004      	beq.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c94:	d107      	bne.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cae:	d10f      	bne.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e010      	b.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d196      	bne.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3728      	adds	r7, #40	; 0x28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000010 	.word	0x20000010

08003d14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff ff5b 	bl	8003be8 <SPI_WaitFifoStateUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3c:	f043 0220 	orr.w	r2, r3, #32
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e027      	b.n	8003d98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2180      	movs	r1, #128	; 0x80
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff fec0 	bl	8003ad8 <SPI_WaitFlagStateUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d62:	f043 0220 	orr.w	r2, r3, #32
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e014      	b.n	8003d98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff ff34 	bl	8003be8 <SPI_WaitFifoStateUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e000      	b.n	8003d98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e049      	b.n	8003e46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f841 	bl	8003e4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f000 f9f8 	bl	80041d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d001      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e04f      	b.n	8003f1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a23      	ldr	r2, [pc, #140]	; (8003f28 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0x76>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea6:	d018      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0x76>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_TIM_Base_Start_IT+0xc8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0x76>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0x76>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0x76>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0x76>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d115      	bne.n	8003f06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d015      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0xb4>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef2:	d011      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e008      	b.n	8003f18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e000      	b.n	8003f1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40013400 	.word	0x40013400
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	00010007 	.word	0x00010007

08003f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f905 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8f7 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f908 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0204 	mvn.w	r2, #4
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8db 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8cd 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8de 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8b1 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f8a3 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f8b4 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2208      	movs	r2, #8
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f887 	bl	8004196 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f879 	bl	8004182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f88a 	bl	80041aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0201 	mvn.w	r2, #1
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc fb84 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f914 	bl	800431c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	d10e      	bne.n	8004122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b80      	cmp	r3, #128	; 0x80
 8004110:	d107      	bne.n	8004122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f907 	bl	8004330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d10e      	bne.n	800414e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d107      	bne.n	800414e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f838 	bl	80041be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b20      	cmp	r3, #32
 800415a:	d10e      	bne.n	800417a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b20      	cmp	r3, #32
 8004168:	d107      	bne.n	800417a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f06f 0220 	mvn.w	r2, #32
 8004172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8c7 	bl	8004308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <TIM_Base_SetConfig+0x114>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f2:	d00f      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3d      	ldr	r2, [pc, #244]	; (80042ec <TIM_Base_SetConfig+0x118>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a3c      	ldr	r2, [pc, #240]	; (80042f0 <TIM_Base_SetConfig+0x11c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a3b      	ldr	r2, [pc, #236]	; (80042f4 <TIM_Base_SetConfig+0x120>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3a      	ldr	r2, [pc, #232]	; (80042f8 <TIM_Base_SetConfig+0x124>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <TIM_Base_SetConfig+0x114>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01f      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d01b      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2c      	ldr	r2, [pc, #176]	; (80042ec <TIM_Base_SetConfig+0x118>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d017      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2b      	ldr	r2, [pc, #172]	; (80042f0 <TIM_Base_SetConfig+0x11c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2a      	ldr	r2, [pc, #168]	; (80042f4 <TIM_Base_SetConfig+0x120>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <TIM_Base_SetConfig+0x124>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a28      	ldr	r2, [pc, #160]	; (80042fc <TIM_Base_SetConfig+0x128>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a27      	ldr	r2, [pc, #156]	; (8004300 <TIM_Base_SetConfig+0x12c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a26      	ldr	r2, [pc, #152]	; (8004304 <TIM_Base_SetConfig+0x130>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <TIM_Base_SetConfig+0x114>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00f      	beq.n	80042cc <TIM_Base_SetConfig+0xf8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <TIM_Base_SetConfig+0x124>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_Base_SetConfig+0xf8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a11      	ldr	r2, [pc, #68]	; (80042fc <TIM_Base_SetConfig+0x128>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_Base_SetConfig+0xf8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a10      	ldr	r2, [pc, #64]	; (8004300 <TIM_Base_SetConfig+0x12c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_Base_SetConfig+0xf8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <TIM_Base_SetConfig+0x130>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d103      	bne.n	80042d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	615a      	str	r2, [r3, #20]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800
 80042f4:	40000c00 	.word	0x40000c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40014000 	.word	0x40014000
 8004300:	40014400 	.word	0x40014400
 8004304:	40014800 	.word	0x40014800

08004308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e040      	b.n	80043d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc fecc 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	; 0x24
 8004370:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fb92 	bl	8004aac <UART_SetConfig>
 8004388:	4603      	mov	r3, r0
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e022      	b.n	80043d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fe10 	bl	8004fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fe97 	bl	8005104 <UART_CheckIdleState>
 80043d6:	4603      	mov	r3, r0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b08b      	sub	sp, #44	; 0x2c
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d156      	bne.n	80044a4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_UART_Transmit_IT+0x22>
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e04f      	b.n	80044a6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_UART_Transmit_IT+0x34>
 8004410:	2302      	movs	r3, #2
 8004412:	e048      	b.n	80044a6 <HAL_UART_Transmit_IT+0xc6>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	88fa      	ldrh	r2, [r7, #6]
 8004426:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2221      	movs	r2, #33	; 0x21
 8004444:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444e:	d107      	bne.n	8004460 <HAL_UART_Transmit_IT+0x80>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_UART_Transmit_IT+0xd4>)
 800445c:	669a      	str	r2, [r3, #104]	; 0x68
 800445e:	e002      	b.n	8004466 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a15      	ldr	r2, [pc, #84]	; (80044b8 <HAL_UART_Transmit_IT+0xd8>)
 8004464:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	613b      	str	r3, [r7, #16]
   return(result);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	69f9      	ldr	r1, [r7, #28]
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	61bb      	str	r3, [r7, #24]
   return(result);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e6      	bne.n	800446e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	372c      	adds	r7, #44	; 0x2c
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	080054c9 	.word	0x080054c9
 80044b8:	08005411 	.word	0x08005411

080044bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b0ba      	sub	sp, #232	; 0xe8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80044ea:	4013      	ands	r3, r2
 80044ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d115      	bne.n	8004524 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00f      	beq.n	8004524 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 82a6 	beq.w	8004a66 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
      }
      return;
 8004522:	e2a0      	b.n	8004a66 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8117 	beq.w	800475c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800452e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800453a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_UART_IRQHandler+0x298>)
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 810a 	beq.w	800475c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d011      	beq.n	8004578 <HAL_UART_IRQHandler+0xbc>
 8004554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2201      	movs	r2, #1
 8004566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d011      	beq.n	80045a8 <HAL_UART_IRQHandler+0xec>
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2202      	movs	r2, #2
 8004596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459e:	f043 0204 	orr.w	r2, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d011      	beq.n	80045d8 <HAL_UART_IRQHandler+0x11c>
 80045b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2204      	movs	r2, #4
 80045c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ce:	f043 0202 	orr.w	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d017      	beq.n	8004614 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2208      	movs	r2, #8
 8004602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460a:	f043 0208 	orr.w	r2, r3, #8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <HAL_UART_IRQHandler+0x18a>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463c:	f043 0220 	orr.w	r2, r3, #32
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 820c 	beq.w	8004a6a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800465e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800469a:	2b00      	cmp	r3, #0
 800469c:	d04f      	beq.n	800473e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fe3d 	bl	800531e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d141      	bne.n	8004736 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1d9      	bne.n	80046b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	2b00      	cmp	r3, #0
 8004704:	d013      	beq.n	800472e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a13      	ldr	r2, [pc, #76]	; (8004758 <HAL_UART_IRQHandler+0x29c>)
 800470c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc ff72 	bl	80015fc <HAL_DMA_Abort_IT>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00f      	b.n	800474e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9a6 	bl	8004a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e00b      	b.n	800474e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9a2 	bl	8004a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473c:	e007      	b.n	800474e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f99e 	bl	8004a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800474c:	e18d      	b.n	8004a6a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474e:	bf00      	nop
    return;
 8004750:	e18b      	b.n	8004a6a <HAL_UART_IRQHandler+0x5ae>
 8004752:	bf00      	nop
 8004754:	04000120 	.word	0x04000120
 8004758:	080053e5 	.word	0x080053e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 8146 	bne.w	80049f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 813f 	beq.w	80049f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8138 	beq.w	80049f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2210      	movs	r2, #16
 8004788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	f040 80b4 	bne.w	8004902 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 815f 	beq.w	8004a6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ba:	429a      	cmp	r2, r3
 80047bc:	f080 8157 	bcs.w	8004a6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8085 	bne.w	80048e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800480a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1da      	bne.n	80047dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800484a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800484e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800485c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e1      	bne.n	8004826 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800488c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e3      	bne.n	8004862 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b6:	f023 0310 	bic.w	r3, r3, #16
 80048ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e4      	bne.n	80048a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fc fe4d 	bl	8001580 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f8ca 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004900:	e0b5      	b.n	8004a6e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800490e:	b29b      	uxth	r3, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80a7 	beq.w	8004a72 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80a2 	beq.w	8004a72 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004950:	647b      	str	r3, [r7, #68]	; 0x44
 8004952:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e4      	bne.n	800492e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3308      	adds	r3, #8
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	623b      	str	r3, [r7, #32]
   return(result);
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004988:	633a      	str	r2, [r7, #48]	; 0x30
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800498e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e3      	bne.n	8004964 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0310 	bic.w	r3, r3, #16
 80049c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	617b      	str	r3, [r7, #20]
   return(result);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e4      	bne.n	80049ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f852 	bl	8004a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049f0:	e03f      	b.n	8004a72 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <HAL_UART_IRQHandler+0x560>
 80049fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fde1 	bl	80055dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a1a:	e02d      	b.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01c      	beq.n	8004a76 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	4798      	blx	r3
    }
    return;
 8004a44:	e017      	b.n	8004a76 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d012      	beq.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
 8004a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fd92 	bl	8005588 <UART_EndTransmit_IT>
    return;
 8004a64:	e008      	b.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a66:	bf00      	nop
 8004a68:	e006      	b.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a6a:	bf00      	nop
 8004a6c:	e004      	b.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a6e:	bf00      	nop
 8004a70:	e002      	b.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a76:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a78:	37e8      	adds	r7, #232	; 0xe8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop

08004a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4bad      	ldr	r3, [pc, #692]	; (8004d8c <UART_SetConfig+0x2e0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4aa2      	ldr	r2, [pc, #648]	; (8004d90 <UART_SetConfig+0x2e4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a99      	ldr	r2, [pc, #612]	; (8004d94 <UART_SetConfig+0x2e8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d121      	bne.n	8004b76 <UART_SetConfig+0xca>
 8004b32:	4b99      	ldr	r3, [pc, #612]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d817      	bhi.n	8004b70 <UART_SetConfig+0xc4>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x9c>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b5f 	.word	0x08004b5f
 8004b54:	08004b6b 	.word	0x08004b6b
 8004b58:	2301      	movs	r3, #1
 8004b5a:	76fb      	strb	r3, [r7, #27]
 8004b5c:	e0e7      	b.n	8004d2e <UART_SetConfig+0x282>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	76fb      	strb	r3, [r7, #27]
 8004b62:	e0e4      	b.n	8004d2e <UART_SetConfig+0x282>
 8004b64:	2304      	movs	r3, #4
 8004b66:	76fb      	strb	r3, [r7, #27]
 8004b68:	e0e1      	b.n	8004d2e <UART_SetConfig+0x282>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	76fb      	strb	r3, [r7, #27]
 8004b6e:	e0de      	b.n	8004d2e <UART_SetConfig+0x282>
 8004b70:	2310      	movs	r3, #16
 8004b72:	76fb      	strb	r3, [r7, #27]
 8004b74:	e0db      	b.n	8004d2e <UART_SetConfig+0x282>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a88      	ldr	r2, [pc, #544]	; (8004d9c <UART_SetConfig+0x2f0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d132      	bne.n	8004be6 <UART_SetConfig+0x13a>
 8004b80:	4b85      	ldr	r3, [pc, #532]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d828      	bhi.n	8004be0 <UART_SetConfig+0x134>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <UART_SetConfig+0xe8>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004be1 	.word	0x08004be1
 8004b9c:	08004be1 	.word	0x08004be1
 8004ba0:	08004be1 	.word	0x08004be1
 8004ba4:	08004bd5 	.word	0x08004bd5
 8004ba8:	08004be1 	.word	0x08004be1
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004be1 	.word	0x08004be1
 8004bb4:	08004bcf 	.word	0x08004bcf
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be1 	.word	0x08004be1
 8004bc4:	08004bdb 	.word	0x08004bdb
 8004bc8:	2300      	movs	r3, #0
 8004bca:	76fb      	strb	r3, [r7, #27]
 8004bcc:	e0af      	b.n	8004d2e <UART_SetConfig+0x282>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	76fb      	strb	r3, [r7, #27]
 8004bd2:	e0ac      	b.n	8004d2e <UART_SetConfig+0x282>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	76fb      	strb	r3, [r7, #27]
 8004bd8:	e0a9      	b.n	8004d2e <UART_SetConfig+0x282>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	76fb      	strb	r3, [r7, #27]
 8004bde:	e0a6      	b.n	8004d2e <UART_SetConfig+0x282>
 8004be0:	2310      	movs	r3, #16
 8004be2:	76fb      	strb	r3, [r7, #27]
 8004be4:	e0a3      	b.n	8004d2e <UART_SetConfig+0x282>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6d      	ldr	r2, [pc, #436]	; (8004da0 <UART_SetConfig+0x2f4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d120      	bne.n	8004c32 <UART_SetConfig+0x186>
 8004bf0:	4b69      	ldr	r3, [pc, #420]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bfa:	2b30      	cmp	r3, #48	; 0x30
 8004bfc:	d013      	beq.n	8004c26 <UART_SetConfig+0x17a>
 8004bfe:	2b30      	cmp	r3, #48	; 0x30
 8004c00:	d814      	bhi.n	8004c2c <UART_SetConfig+0x180>
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d009      	beq.n	8004c1a <UART_SetConfig+0x16e>
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d810      	bhi.n	8004c2c <UART_SetConfig+0x180>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <UART_SetConfig+0x168>
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d006      	beq.n	8004c20 <UART_SetConfig+0x174>
 8004c12:	e00b      	b.n	8004c2c <UART_SetConfig+0x180>
 8004c14:	2300      	movs	r3, #0
 8004c16:	76fb      	strb	r3, [r7, #27]
 8004c18:	e089      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	76fb      	strb	r3, [r7, #27]
 8004c1e:	e086      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c20:	2304      	movs	r3, #4
 8004c22:	76fb      	strb	r3, [r7, #27]
 8004c24:	e083      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c26:	2308      	movs	r3, #8
 8004c28:	76fb      	strb	r3, [r7, #27]
 8004c2a:	e080      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	76fb      	strb	r3, [r7, #27]
 8004c30:	e07d      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a5b      	ldr	r2, [pc, #364]	; (8004da4 <UART_SetConfig+0x2f8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d120      	bne.n	8004c7e <UART_SetConfig+0x1d2>
 8004c3c:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c46:	2bc0      	cmp	r3, #192	; 0xc0
 8004c48:	d013      	beq.n	8004c72 <UART_SetConfig+0x1c6>
 8004c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c4c:	d814      	bhi.n	8004c78 <UART_SetConfig+0x1cc>
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d009      	beq.n	8004c66 <UART_SetConfig+0x1ba>
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d810      	bhi.n	8004c78 <UART_SetConfig+0x1cc>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <UART_SetConfig+0x1b4>
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d006      	beq.n	8004c6c <UART_SetConfig+0x1c0>
 8004c5e:	e00b      	b.n	8004c78 <UART_SetConfig+0x1cc>
 8004c60:	2300      	movs	r3, #0
 8004c62:	76fb      	strb	r3, [r7, #27]
 8004c64:	e063      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c66:	2302      	movs	r3, #2
 8004c68:	76fb      	strb	r3, [r7, #27]
 8004c6a:	e060      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	76fb      	strb	r3, [r7, #27]
 8004c70:	e05d      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c72:	2308      	movs	r3, #8
 8004c74:	76fb      	strb	r3, [r7, #27]
 8004c76:	e05a      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	76fb      	strb	r3, [r7, #27]
 8004c7c:	e057      	b.n	8004d2e <UART_SetConfig+0x282>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a49      	ldr	r2, [pc, #292]	; (8004da8 <UART_SetConfig+0x2fc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d125      	bne.n	8004cd4 <UART_SetConfig+0x228>
 8004c88:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c96:	d017      	beq.n	8004cc8 <UART_SetConfig+0x21c>
 8004c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9c:	d817      	bhi.n	8004cce <UART_SetConfig+0x222>
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca2:	d00b      	beq.n	8004cbc <UART_SetConfig+0x210>
 8004ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca8:	d811      	bhi.n	8004cce <UART_SetConfig+0x222>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <UART_SetConfig+0x20a>
 8004cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb2:	d006      	beq.n	8004cc2 <UART_SetConfig+0x216>
 8004cb4:	e00b      	b.n	8004cce <UART_SetConfig+0x222>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	76fb      	strb	r3, [r7, #27]
 8004cba:	e038      	b.n	8004d2e <UART_SetConfig+0x282>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	76fb      	strb	r3, [r7, #27]
 8004cc0:	e035      	b.n	8004d2e <UART_SetConfig+0x282>
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	76fb      	strb	r3, [r7, #27]
 8004cc6:	e032      	b.n	8004d2e <UART_SetConfig+0x282>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	76fb      	strb	r3, [r7, #27]
 8004ccc:	e02f      	b.n	8004d2e <UART_SetConfig+0x282>
 8004cce:	2310      	movs	r3, #16
 8004cd0:	76fb      	strb	r3, [r7, #27]
 8004cd2:	e02c      	b.n	8004d2e <UART_SetConfig+0x282>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <UART_SetConfig+0x2e4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d125      	bne.n	8004d2a <UART_SetConfig+0x27e>
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <UART_SetConfig+0x2ec>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cec:	d017      	beq.n	8004d1e <UART_SetConfig+0x272>
 8004cee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cf2:	d817      	bhi.n	8004d24 <UART_SetConfig+0x278>
 8004cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf8:	d00b      	beq.n	8004d12 <UART_SetConfig+0x266>
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfe:	d811      	bhi.n	8004d24 <UART_SetConfig+0x278>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <UART_SetConfig+0x260>
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d08:	d006      	beq.n	8004d18 <UART_SetConfig+0x26c>
 8004d0a:	e00b      	b.n	8004d24 <UART_SetConfig+0x278>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	76fb      	strb	r3, [r7, #27]
 8004d10:	e00d      	b.n	8004d2e <UART_SetConfig+0x282>
 8004d12:	2302      	movs	r3, #2
 8004d14:	76fb      	strb	r3, [r7, #27]
 8004d16:	e00a      	b.n	8004d2e <UART_SetConfig+0x282>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	76fb      	strb	r3, [r7, #27]
 8004d1c:	e007      	b.n	8004d2e <UART_SetConfig+0x282>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	76fb      	strb	r3, [r7, #27]
 8004d22:	e004      	b.n	8004d2e <UART_SetConfig+0x282>
 8004d24:	2310      	movs	r3, #16
 8004d26:	76fb      	strb	r3, [r7, #27]
 8004d28:	e001      	b.n	8004d2e <UART_SetConfig+0x282>
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <UART_SetConfig+0x2e4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	f040 8087 	bne.w	8004e48 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d3a:	7efb      	ldrb	r3, [r7, #27]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d837      	bhi.n	8004db0 <UART_SetConfig+0x304>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x29c>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004db1 	.word	0x08004db1
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004db1 	.word	0x08004db1
 8004d58:	08004d7b 	.word	0x08004d7b
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004db1 	.word	0x08004db1
 8004d64:	08004db1 	.word	0x08004db1
 8004d68:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7fd fc0e 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8004d70:	6178      	str	r0, [r7, #20]
        break;
 8004d72:	e022      	b.n	8004dba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <UART_SetConfig+0x300>)
 8004d76:	617b      	str	r3, [r7, #20]
        break;
 8004d78:	e01f      	b.n	8004dba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fd fb6f 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8004d7e:	6178      	str	r0, [r7, #20]
        break;
 8004d80:	e01b      	b.n	8004dba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	617b      	str	r3, [r7, #20]
        break;
 8004d88:	e017      	b.n	8004dba <UART_SetConfig+0x30e>
 8004d8a:	bf00      	nop
 8004d8c:	efff69f3 	.word	0xefff69f3
 8004d90:	40008000 	.word	0x40008000
 8004d94:	40013800 	.word	0x40013800
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40004400 	.word	0x40004400
 8004da0:	40004800 	.word	0x40004800
 8004da4:	40004c00 	.word	0x40004c00
 8004da8:	40005000 	.word	0x40005000
 8004dac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	76bb      	strb	r3, [r7, #26]
        break;
 8004db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80f1 	beq.w	8004fa4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	4413      	add	r3, r2
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d305      	bcc.n	8004dde <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d902      	bls.n	8004de4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	76bb      	strb	r3, [r7, #26]
 8004de2:	e0df      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	020b      	lsls	r3, r1, #8
 8004df6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dfa:	0202      	lsls	r2, r0, #8
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	6849      	ldr	r1, [r1, #4]
 8004e00:	0849      	lsrs	r1, r1, #1
 8004e02:	4608      	mov	r0, r1
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	1814      	adds	r4, r2, r0
 8004e0a:	eb43 0501 	adc.w	r5, r3, r1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	f7fb fa28 	bl	8000270 <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4613      	mov	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2e:	d308      	bcc.n	8004e42 <UART_SetConfig+0x396>
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e36:	d204      	bcs.n	8004e42 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e0b0      	b.n	8004fa4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	76bb      	strb	r3, [r7, #26]
 8004e46:	e0ad      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e50:	d15b      	bne.n	8004f0a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004e52:	7efb      	ldrb	r3, [r7, #27]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d828      	bhi.n	8004eaa <UART_SetConfig+0x3fe>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x3b4>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004eab 	.word	0x08004eab
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004eab 	.word	0x08004eab
 8004e78:	08004eab 	.word	0x08004eab
 8004e7c:	08004eab 	.word	0x08004eab
 8004e80:	08004ea3 	.word	0x08004ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fd fb82 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8004e88:	6178      	str	r0, [r7, #20]
        break;
 8004e8a:	e013      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e8c:	f7fd fb94 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8004e90:	6178      	str	r0, [r7, #20]
        break;
 8004e92:	e00f      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e94:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <UART_SetConfig+0x510>)
 8004e96:	617b      	str	r3, [r7, #20]
        break;
 8004e98:	e00c      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9a:	f7fd fadf 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8004e9e:	6178      	str	r0, [r7, #20]
        break;
 8004ea0:	e008      	b.n	8004eb4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea6:	617b      	str	r3, [r7, #20]
        break;
 8004ea8:	e004      	b.n	8004eb4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	76bb      	strb	r3, [r7, #26]
        break;
 8004eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d074      	beq.n	8004fa4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	005a      	lsls	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	441a      	add	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b0f      	cmp	r3, #15
 8004ed4:	d916      	bls.n	8004f04 <UART_SetConfig+0x458>
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	d212      	bcs.n	8004f04 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f023 030f 	bic.w	r3, r3, #15
 8004ee6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	89fb      	ldrh	r3, [r7, #14]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	89fa      	ldrh	r2, [r7, #14]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e04f      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	76bb      	strb	r3, [r7, #26]
 8004f08:	e04c      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f0a:	7efb      	ldrb	r3, [r7, #27]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d828      	bhi.n	8004f62 <UART_SetConfig+0x4b6>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x46c>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f53 	.word	0x08004f53
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fd fb26 	bl	800258c <HAL_RCC_GetPCLK1Freq>
 8004f40:	6178      	str	r0, [r7, #20]
        break;
 8004f42:	e013      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7fd fb38 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8004f48:	6178      	str	r0, [r7, #20]
        break;
 8004f4a:	e00f      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <UART_SetConfig+0x510>)
 8004f4e:	617b      	str	r3, [r7, #20]
        break;
 8004f50:	e00c      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fd fa83 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8004f56:	6178      	str	r0, [r7, #20]
        break;
 8004f58:	e008      	b.n	8004f6c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5e:	617b      	str	r3, [r7, #20]
        break;
 8004f60:	e004      	b.n	8004f6c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	76bb      	strb	r3, [r7, #26]
        break;
 8004f6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d018      	beq.n	8004fa4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	085a      	lsrs	r2, r3, #1
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d909      	bls.n	8004fa0 <UART_SetConfig+0x4f4>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f92:	d205      	bcs.n	8004fa0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e001      	b.n	8004fa4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fb0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	00f42400 	.word	0x00f42400

08004fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050be:	d10a      	bne.n	80050d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005114:	f7fc f922 	bl	800135c <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d10e      	bne.n	8005146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f82d 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e023      	b.n	800518e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d10e      	bne.n	8005172 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f817 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e00d      	b.n	800518e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b09c      	sub	sp, #112	; 0x70
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a6:	e0a5      	b.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ae:	f000 80a1 	beq.w	80052f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b2:	f7fc f8d3 	bl	800135c <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051be:	429a      	cmp	r2, r3
 80051c0:	d302      	bcc.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d13e      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051dc:	667b      	str	r3, [r7, #100]	; 0x64
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e6      	bne.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	663b      	str	r3, [r7, #96]	; 0x60
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800521a:	64ba      	str	r2, [r7, #72]	; 0x48
 800521c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e067      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d04f      	beq.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005262:	d147      	bne.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	613b      	str	r3, [r7, #16]
   return(result);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052c0:	623a      	str	r2, [r7, #32]
 80052c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e010      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	429a      	cmp	r2, r3
 8005310:	f43f af4a 	beq.w	80051a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3770      	adds	r7, #112	; 0x70
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800531e:	b480      	push	{r7}
 8005320:	b095      	sub	sp, #84	; 0x54
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
 8005346:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800534a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e6      	bne.n	8005326 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	61fb      	str	r3, [r7, #28]
   return(result);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	2b01      	cmp	r3, #1
 8005392:	d118      	bne.n	80053c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	647b      	str	r3, [r7, #68]	; 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b2:	61bb      	str	r3, [r7, #24]
 80053b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6979      	ldr	r1, [r7, #20]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	613b      	str	r3, [r7, #16]
   return(result);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e6      	bne.n	8005394 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80053d8:	bf00      	nop
 80053da:	3754      	adds	r7, #84	; 0x54
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fb3c 	bl	8004a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b08f      	sub	sp, #60	; 0x3c
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541c:	2b21      	cmp	r3, #33	; 0x21
 800541e:	d14d      	bne.n	80054bc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d132      	bne.n	8005492 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	61fb      	str	r3, [r7, #28]
   return(result);
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e6      	bne.n	800542c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60bb      	str	r3, [r7, #8]
   return(result);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6979      	ldr	r1, [r7, #20]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	613b      	str	r3, [r7, #16]
   return(result);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005490:	e014      	b.n	80054bc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b292      	uxth	r2, r2
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80054bc:	bf00      	nop
 80054be:	373c      	adds	r7, #60	; 0x3c
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b091      	sub	sp, #68	; 0x44
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d4:	2b21      	cmp	r3, #33	; 0x21
 80054d6:	d151      	bne.n	800557c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d132      	bne.n	800554a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	623b      	str	r3, [r7, #32]
   return(result);
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
 8005504:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e6      	bne.n	80054e4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60fb      	str	r3, [r7, #12]
   return(result);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	617b      	str	r3, [r7, #20]
   return(result);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e6      	bne.n	8005516 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005548:	e018      	b.n	800557c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800555c:	b292      	uxth	r2, r2
 800555e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005564:	1c9a      	adds	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800557c:	bf00      	nop
 800557e:	3744      	adds	r7, #68	; 0x44
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	60bb      	str	r3, [r7, #8]
   return(result);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6979      	ldr	r1, [r7, #20]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	613b      	str	r3, [r7, #16]
   return(result);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e6      	bne.n	8005590 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fb fe48 	bl	8001264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d4:	bf00      	nop
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <SysTick_Handler+0x1c>)
 80055f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055f8:	f000 f990 	bl	800591c <xTaskGetSchedulerState>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d001      	beq.n	8005606 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005602:	f000 f9f9 	bl	80059f8 <xPortSysTickHandler>
  }
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	e000e010 	.word	0xe000e010

08005610 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	601a      	str	r2, [r3, #0]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6892      	ldr	r2, [r2, #8]
 800566e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6852      	ldr	r2, [r2, #4]
 8005678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d103      	bne.n	800568c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1e5a      	subs	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b6:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <xTaskIncrementTick+0x148>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 808f 	bne.w	80057de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c0:	4b4d      	ldr	r3, [pc, #308]	; (80057f8 <xTaskIncrementTick+0x14c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056c8:	4a4b      	ldr	r2, [pc, #300]	; (80057f8 <xTaskIncrementTick+0x14c>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d120      	bne.n	8005716 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056d4:	4b49      	ldr	r3, [pc, #292]	; (80057fc <xTaskIncrementTick+0x150>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <xTaskIncrementTick+0x46>
 80056f4:	4b41      	ldr	r3, [pc, #260]	; (80057fc <xTaskIncrementTick+0x150>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	4b41      	ldr	r3, [pc, #260]	; (8005800 <xTaskIncrementTick+0x154>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a3f      	ldr	r2, [pc, #252]	; (80057fc <xTaskIncrementTick+0x150>)
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4a3f      	ldr	r2, [pc, #252]	; (8005800 <xTaskIncrementTick+0x154>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <xTaskIncrementTick+0x158>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3301      	adds	r3, #1
 800570e:	4a3d      	ldr	r2, [pc, #244]	; (8005804 <xTaskIncrementTick+0x158>)
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	f000 f8e3 	bl	80058dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005716:	4b3c      	ldr	r3, [pc, #240]	; (8005808 <xTaskIncrementTick+0x15c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d349      	bcc.n	80057b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005720:	4b36      	ldr	r3, [pc, #216]	; (80057fc <xTaskIncrementTick+0x150>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d104      	bne.n	8005734 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800572a:	4b37      	ldr	r3, [pc, #220]	; (8005808 <xTaskIncrementTick+0x15c>)
 800572c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005730:	601a      	str	r2, [r3, #0]
					break;
 8005732:	e03f      	b.n	80057b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005734:	4b31      	ldr	r3, [pc, #196]	; (80057fc <xTaskIncrementTick+0x150>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d203      	bcs.n	8005754 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800574c:	4a2e      	ldr	r2, [pc, #184]	; (8005808 <xTaskIncrementTick+0x15c>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005752:	e02f      	b.n	80057b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	3304      	adds	r3, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff7d 	bl	8005658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3318      	adds	r3, #24
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff ff74 	bl	8005658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4b25      	ldr	r3, [pc, #148]	; (800580c <xTaskIncrementTick+0x160>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d903      	bls.n	8005784 <xTaskIncrementTick+0xd8>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	4a22      	ldr	r2, [pc, #136]	; (800580c <xTaskIncrementTick+0x160>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <xTaskIncrementTick+0x164>)
 8005792:	441a      	add	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7ff ff38 	bl	8005610 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <xTaskIncrementTick+0x168>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3b8      	bcc.n	8005720 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b2:	e7b5      	b.n	8005720 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <xTaskIncrementTick+0x168>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	4915      	ldr	r1, [pc, #84]	; (8005810 <xTaskIncrementTick+0x164>)
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d901      	bls.n	80057d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <xTaskIncrementTick+0x16c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e004      	b.n	80057e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <xTaskIncrementTick+0x170>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	4a0d      	ldr	r2, [pc, #52]	; (800581c <xTaskIncrementTick+0x170>)
 80057e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057e8:	697b      	ldr	r3, [r7, #20]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	2000052c 	.word	0x2000052c
 80057f8:	20000510 	.word	0x20000510
 80057fc:	20000508 	.word	0x20000508
 8005800:	2000050c 	.word	0x2000050c
 8005804:	20000524 	.word	0x20000524
 8005808:	20000528 	.word	0x20000528
 800580c:	20000514 	.word	0x20000514
 8005810:	200000a8 	.word	0x200000a8
 8005814:	200000a4 	.word	0x200000a4
 8005818:	20000520 	.word	0x20000520
 800581c:	2000051c 	.word	0x2000051c

08005820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005826:	4b28      	ldr	r3, [pc, #160]	; (80058c8 <vTaskSwitchContext+0xa8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800582e:	4b27      	ldr	r3, [pc, #156]	; (80058cc <vTaskSwitchContext+0xac>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005834:	e041      	b.n	80058ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005836:	4b25      	ldr	r3, [pc, #148]	; (80058cc <vTaskSwitchContext+0xac>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800583c:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <vTaskSwitchContext+0xb0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	e010      	b.n	8005866 <vTaskSwitchContext+0x46>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <vTaskSwitchContext+0x40>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	607b      	str	r3, [r7, #4]
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <vTaskSwitchContext+0x3e>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	491b      	ldr	r1, [pc, #108]	; (80058d4 <vTaskSwitchContext+0xb4>)
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0e4      	beq.n	8005844 <vTaskSwitchContext+0x24>
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <vTaskSwitchContext+0xb4>)
 8005886:	4413      	add	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	3308      	adds	r3, #8
 800589c:	429a      	cmp	r2, r3
 800589e:	d104      	bne.n	80058aa <vTaskSwitchContext+0x8a>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <vTaskSwitchContext+0xb8>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4a06      	ldr	r2, [pc, #24]	; (80058d0 <vTaskSwitchContext+0xb0>)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6013      	str	r3, [r2, #0]
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	2000052c 	.word	0x2000052c
 80058cc:	20000520 	.word	0x20000520
 80058d0:	20000514 	.word	0x20000514
 80058d4:	200000a8 	.word	0x200000a8
 80058d8:	200000a4 	.word	0x200000a4

080058dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058e2:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <prvResetNextTaskUnblockTime+0x38>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <prvResetNextTaskUnblockTime+0x3c>)
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058f4:	e008      	b.n	8005908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <prvResetNextTaskUnblockTime+0x38>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	4a04      	ldr	r2, [pc, #16]	; (8005918 <prvResetNextTaskUnblockTime+0x3c>)
 8005906:	6013      	str	r3, [r2, #0]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000508 	.word	0x20000508
 8005918:	20000528 	.word	0x20000528

0800591c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <xTaskGetSchedulerState+0x34>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800592a:	2301      	movs	r3, #1
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	e008      	b.n	8005942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <xTaskGetSchedulerState+0x38>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005938:	2302      	movs	r3, #2
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	e001      	b.n	8005942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800593e:	2300      	movs	r3, #0
 8005940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005942:	687b      	ldr	r3, [r7, #4]
	}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000518 	.word	0x20000518
 8005954:	2000052c 	.word	0x2000052c
	...

08005960 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <pxCurrentTCBConst2>)
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	6808      	ldr	r0, [r1, #0]
 8005966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596a:	f380 8809 	msr	PSP, r0
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8811 	msr	BASEPRI, r0
 800597a:	4770      	bx	lr
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst2>:
 8005980:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
	...

08005990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005990:	f3ef 8009 	mrs	r0, PSP
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <pxCurrentTCBConst>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f01e 0f10 	tst.w	lr, #16
 80059a0:	bf08      	it	eq
 80059a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059b4:	f380 8811 	msr	BASEPRI, r0
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f7ff ff2e 	bl	8005820 <vTaskSwitchContext>
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f380 8811 	msr	BASEPRI, r0
 80059cc:	bc09      	pop	{r0, r3}
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	6808      	ldr	r0, [r1, #0]
 80059d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f01e 0f10 	tst.w	lr, #16
 80059da:	bf08      	it	eq
 80059dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e0:	f380 8809 	msr	PSP, r0
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst>:
 80059f0:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
}
 8005a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a12:	f7ff fe4b 	bl	80056ac <xTaskIncrementTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <xPortSysTickHandler+0x40>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <atoi>:
 8005a3c:	220a      	movs	r2, #10
 8005a3e:	2100      	movs	r1, #0
 8005a40:	f000 b940 	b.w	8005cc4 <strtol>

08005a44 <__errno>:
 8005a44:	4b01      	ldr	r3, [pc, #4]	; (8005a4c <__errno+0x8>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000020 	.word	0x20000020

08005a50 <__libc_init_array>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4d0d      	ldr	r5, [pc, #52]	; (8005a88 <__libc_init_array+0x38>)
 8005a54:	4c0d      	ldr	r4, [pc, #52]	; (8005a8c <__libc_init_array+0x3c>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	42a6      	cmp	r6, r4
 8005a5e:	d109      	bne.n	8005a74 <__libc_init_array+0x24>
 8005a60:	4d0b      	ldr	r5, [pc, #44]	; (8005a90 <__libc_init_array+0x40>)
 8005a62:	4c0c      	ldr	r4, [pc, #48]	; (8005a94 <__libc_init_array+0x44>)
 8005a64:	f001 fa9e 	bl	8006fa4 <_init>
 8005a68:	1b64      	subs	r4, r4, r5
 8005a6a:	10a4      	asrs	r4, r4, #2
 8005a6c:	2600      	movs	r6, #0
 8005a6e:	42a6      	cmp	r6, r4
 8005a70:	d105      	bne.n	8005a7e <__libc_init_array+0x2e>
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a78:	4798      	blx	r3
 8005a7a:	3601      	adds	r6, #1
 8005a7c:	e7ee      	b.n	8005a5c <__libc_init_array+0xc>
 8005a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a82:	4798      	blx	r3
 8005a84:	3601      	adds	r6, #1
 8005a86:	e7f2      	b.n	8005a6e <__libc_init_array+0x1e>
 8005a88:	0800727c 	.word	0x0800727c
 8005a8c:	0800727c 	.word	0x0800727c
 8005a90:	0800727c 	.word	0x0800727c
 8005a94:	08007280 	.word	0x08007280

08005a98 <memcpy>:
 8005a98:	440a      	add	r2, r1
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005aa0:	d100      	bne.n	8005aa4 <memcpy+0xc>
 8005aa2:	4770      	bx	lr
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aae:	4291      	cmp	r1, r2
 8005ab0:	d1f9      	bne.n	8005aa6 <memcpy+0xe>
 8005ab2:	bd10      	pop	{r4, pc}

08005ab4 <memset>:
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d100      	bne.n	8005abe <memset+0xa>
 8005abc:	4770      	bx	lr
 8005abe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac2:	e7f9      	b.n	8005ab8 <memset+0x4>

08005ac4 <siprintf>:
 8005ac4:	b40e      	push	{r1, r2, r3}
 8005ac6:	b500      	push	{lr}
 8005ac8:	b09c      	sub	sp, #112	; 0x70
 8005aca:	ab1d      	add	r3, sp, #116	; 0x74
 8005acc:	9002      	str	r0, [sp, #8]
 8005ace:	9006      	str	r0, [sp, #24]
 8005ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ad4:	4809      	ldr	r0, [pc, #36]	; (8005afc <siprintf+0x38>)
 8005ad6:	9107      	str	r1, [sp, #28]
 8005ad8:	9104      	str	r1, [sp, #16]
 8005ada:	4909      	ldr	r1, [pc, #36]	; (8005b00 <siprintf+0x3c>)
 8005adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae0:	9105      	str	r1, [sp, #20]
 8005ae2:	6800      	ldr	r0, [r0, #0]
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	a902      	add	r1, sp, #8
 8005ae8:	f000 fa34 	bl	8005f54 <_svfiprintf_r>
 8005aec:	9b02      	ldr	r3, [sp, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	b01c      	add	sp, #112	; 0x70
 8005af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af8:	b003      	add	sp, #12
 8005afa:	4770      	bx	lr
 8005afc:	20000020 	.word	0x20000020
 8005b00:	ffff0208 	.word	0xffff0208

08005b04 <strtok>:
 8005b04:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <strtok+0x5c>)
 8005b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b08:	681e      	ldr	r6, [r3, #0]
 8005b0a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	b9fc      	cbnz	r4, 8005b50 <strtok+0x4c>
 8005b10:	2050      	movs	r0, #80	; 0x50
 8005b12:	9101      	str	r1, [sp, #4]
 8005b14:	f000 f910 	bl	8005d38 <malloc>
 8005b18:	9901      	ldr	r1, [sp, #4]
 8005b1a:	65b0      	str	r0, [r6, #88]	; 0x58
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	b920      	cbnz	r0, 8005b2a <strtok+0x26>
 8005b20:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <strtok+0x60>)
 8005b22:	4811      	ldr	r0, [pc, #68]	; (8005b68 <strtok+0x64>)
 8005b24:	2157      	movs	r1, #87	; 0x57
 8005b26:	f000 f8d7 	bl	8005cd8 <__assert_func>
 8005b2a:	e9c0 4400 	strd	r4, r4, [r0]
 8005b2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005b32:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005b36:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005b3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005b3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005b42:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005b46:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005b4a:	6184      	str	r4, [r0, #24]
 8005b4c:	7704      	strb	r4, [r0, #28]
 8005b4e:	6244      	str	r4, [r0, #36]	; 0x24
 8005b50:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005b52:	2301      	movs	r3, #1
 8005b54:	4628      	mov	r0, r5
 8005b56:	b002      	add	sp, #8
 8005b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b5c:	f000 b806 	b.w	8005b6c <__strtok_r>
 8005b60:	20000020 	.word	0x20000020
 8005b64:	0800702c 	.word	0x0800702c
 8005b68:	08007043 	.word	0x08007043

08005b6c <__strtok_r>:
 8005b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6e:	b908      	cbnz	r0, 8005b74 <__strtok_r+0x8>
 8005b70:	6810      	ldr	r0, [r2, #0]
 8005b72:	b188      	cbz	r0, 8005b98 <__strtok_r+0x2c>
 8005b74:	4604      	mov	r4, r0
 8005b76:	4620      	mov	r0, r4
 8005b78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005b7c:	460f      	mov	r7, r1
 8005b7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005b82:	b91e      	cbnz	r6, 8005b8c <__strtok_r+0x20>
 8005b84:	b965      	cbnz	r5, 8005ba0 <__strtok_r+0x34>
 8005b86:	6015      	str	r5, [r2, #0]
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e005      	b.n	8005b98 <__strtok_r+0x2c>
 8005b8c:	42b5      	cmp	r5, r6
 8005b8e:	d1f6      	bne.n	8005b7e <__strtok_r+0x12>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <__strtok_r+0xa>
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	7003      	strb	r3, [r0, #0]
 8005b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9a:	461c      	mov	r4, r3
 8005b9c:	e00c      	b.n	8005bb8 <__strtok_r+0x4c>
 8005b9e:	b915      	cbnz	r5, 8005ba6 <__strtok_r+0x3a>
 8005ba0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ba4:	460e      	mov	r6, r1
 8005ba6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005baa:	42ab      	cmp	r3, r5
 8005bac:	d1f7      	bne.n	8005b9e <__strtok_r+0x32>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f3      	beq.n	8005b9a <__strtok_r+0x2e>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	e7ed      	b.n	8005b98 <__strtok_r+0x2c>

08005bbc <_strtol_l.isra.0>:
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc2:	d001      	beq.n	8005bc8 <_strtol_l.isra.0+0xc>
 8005bc4:	2b24      	cmp	r3, #36	; 0x24
 8005bc6:	d906      	bls.n	8005bd6 <_strtol_l.isra.0+0x1a>
 8005bc8:	f7ff ff3c 	bl	8005a44 <__errno>
 8005bcc:	2316      	movs	r3, #22
 8005bce:	6003      	str	r3, [r0, #0]
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd6:	4f3a      	ldr	r7, [pc, #232]	; (8005cc0 <_strtol_l.isra.0+0x104>)
 8005bd8:	468e      	mov	lr, r1
 8005bda:	4676      	mov	r6, lr
 8005bdc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005be0:	5de5      	ldrb	r5, [r4, r7]
 8005be2:	f015 0508 	ands.w	r5, r5, #8
 8005be6:	d1f8      	bne.n	8005bda <_strtol_l.isra.0+0x1e>
 8005be8:	2c2d      	cmp	r4, #45	; 0x2d
 8005bea:	d134      	bne.n	8005c56 <_strtol_l.isra.0+0x9a>
 8005bec:	f89e 4000 	ldrb.w	r4, [lr]
 8005bf0:	f04f 0801 	mov.w	r8, #1
 8005bf4:	f106 0e02 	add.w	lr, r6, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05c      	beq.n	8005cb6 <_strtol_l.isra.0+0xfa>
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d10c      	bne.n	8005c1a <_strtol_l.isra.0+0x5e>
 8005c00:	2c30      	cmp	r4, #48	; 0x30
 8005c02:	d10a      	bne.n	8005c1a <_strtol_l.isra.0+0x5e>
 8005c04:	f89e 4000 	ldrb.w	r4, [lr]
 8005c08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c0c:	2c58      	cmp	r4, #88	; 0x58
 8005c0e:	d14d      	bne.n	8005cac <_strtol_l.isra.0+0xf0>
 8005c10:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005c14:	2310      	movs	r3, #16
 8005c16:	f10e 0e02 	add.w	lr, lr, #2
 8005c1a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005c1e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005c22:	2600      	movs	r6, #0
 8005c24:	fbbc f9f3 	udiv	r9, ip, r3
 8005c28:	4635      	mov	r5, r6
 8005c2a:	fb03 ca19 	mls	sl, r3, r9, ip
 8005c2e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005c32:	2f09      	cmp	r7, #9
 8005c34:	d818      	bhi.n	8005c68 <_strtol_l.isra.0+0xac>
 8005c36:	463c      	mov	r4, r7
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	dd24      	ble.n	8005c86 <_strtol_l.isra.0+0xca>
 8005c3c:	2e00      	cmp	r6, #0
 8005c3e:	db1f      	blt.n	8005c80 <_strtol_l.isra.0+0xc4>
 8005c40:	45a9      	cmp	r9, r5
 8005c42:	d31d      	bcc.n	8005c80 <_strtol_l.isra.0+0xc4>
 8005c44:	d101      	bne.n	8005c4a <_strtol_l.isra.0+0x8e>
 8005c46:	45a2      	cmp	sl, r4
 8005c48:	db1a      	blt.n	8005c80 <_strtol_l.isra.0+0xc4>
 8005c4a:	fb05 4503 	mla	r5, r5, r3, r4
 8005c4e:	2601      	movs	r6, #1
 8005c50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005c54:	e7eb      	b.n	8005c2e <_strtol_l.isra.0+0x72>
 8005c56:	2c2b      	cmp	r4, #43	; 0x2b
 8005c58:	bf08      	it	eq
 8005c5a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005c5e:	46a8      	mov	r8, r5
 8005c60:	bf08      	it	eq
 8005c62:	f106 0e02 	addeq.w	lr, r6, #2
 8005c66:	e7c7      	b.n	8005bf8 <_strtol_l.isra.0+0x3c>
 8005c68:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005c6c:	2f19      	cmp	r7, #25
 8005c6e:	d801      	bhi.n	8005c74 <_strtol_l.isra.0+0xb8>
 8005c70:	3c37      	subs	r4, #55	; 0x37
 8005c72:	e7e1      	b.n	8005c38 <_strtol_l.isra.0+0x7c>
 8005c74:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005c78:	2f19      	cmp	r7, #25
 8005c7a:	d804      	bhi.n	8005c86 <_strtol_l.isra.0+0xca>
 8005c7c:	3c57      	subs	r4, #87	; 0x57
 8005c7e:	e7db      	b.n	8005c38 <_strtol_l.isra.0+0x7c>
 8005c80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005c84:	e7e4      	b.n	8005c50 <_strtol_l.isra.0+0x94>
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	da05      	bge.n	8005c96 <_strtol_l.isra.0+0xda>
 8005c8a:	2322      	movs	r3, #34	; 0x22
 8005c8c:	6003      	str	r3, [r0, #0]
 8005c8e:	4665      	mov	r5, ip
 8005c90:	b942      	cbnz	r2, 8005ca4 <_strtol_l.isra.0+0xe8>
 8005c92:	4628      	mov	r0, r5
 8005c94:	e79d      	b.n	8005bd2 <_strtol_l.isra.0+0x16>
 8005c96:	f1b8 0f00 	cmp.w	r8, #0
 8005c9a:	d000      	beq.n	8005c9e <_strtol_l.isra.0+0xe2>
 8005c9c:	426d      	negs	r5, r5
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	d0f7      	beq.n	8005c92 <_strtol_l.isra.0+0xd6>
 8005ca2:	b10e      	cbz	r6, 8005ca8 <_strtol_l.isra.0+0xec>
 8005ca4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8005ca8:	6011      	str	r1, [r2, #0]
 8005caa:	e7f2      	b.n	8005c92 <_strtol_l.isra.0+0xd6>
 8005cac:	2430      	movs	r4, #48	; 0x30
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1b3      	bne.n	8005c1a <_strtol_l.isra.0+0x5e>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	e7b1      	b.n	8005c1a <_strtol_l.isra.0+0x5e>
 8005cb6:	2c30      	cmp	r4, #48	; 0x30
 8005cb8:	d0a4      	beq.n	8005c04 <_strtol_l.isra.0+0x48>
 8005cba:	230a      	movs	r3, #10
 8005cbc:	e7ad      	b.n	8005c1a <_strtol_l.isra.0+0x5e>
 8005cbe:	bf00      	nop
 8005cc0:	080070e1 	.word	0x080070e1

08005cc4 <strtol>:
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	4601      	mov	r1, r0
 8005cca:	4802      	ldr	r0, [pc, #8]	; (8005cd4 <strtol+0x10>)
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f7ff bf75 	b.w	8005bbc <_strtol_l.isra.0>
 8005cd2:	bf00      	nop
 8005cd4:	20000020 	.word	0x20000020

08005cd8 <__assert_func>:
 8005cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cda:	4614      	mov	r4, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <__assert_func+0x2c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	68d8      	ldr	r0, [r3, #12]
 8005ce6:	b14c      	cbz	r4, 8005cfc <__assert_func+0x24>
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <__assert_func+0x30>)
 8005cea:	9100      	str	r1, [sp, #0]
 8005cec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cf0:	4906      	ldr	r1, [pc, #24]	; (8005d0c <__assert_func+0x34>)
 8005cf2:	462b      	mov	r3, r5
 8005cf4:	f000 f80e 	bl	8005d14 <fiprintf>
 8005cf8:	f000 fdea 	bl	80068d0 <abort>
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <__assert_func+0x38>)
 8005cfe:	461c      	mov	r4, r3
 8005d00:	e7f3      	b.n	8005cea <__assert_func+0x12>
 8005d02:	bf00      	nop
 8005d04:	20000020 	.word	0x20000020
 8005d08:	080070a4 	.word	0x080070a4
 8005d0c:	080070b1 	.word	0x080070b1
 8005d10:	080070df 	.word	0x080070df

08005d14 <fiprintf>:
 8005d14:	b40e      	push	{r1, r2, r3}
 8005d16:	b503      	push	{r0, r1, lr}
 8005d18:	4601      	mov	r1, r0
 8005d1a:	ab03      	add	r3, sp, #12
 8005d1c:	4805      	ldr	r0, [pc, #20]	; (8005d34 <fiprintf+0x20>)
 8005d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d22:	6800      	ldr	r0, [r0, #0]
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	f000 fa3f 	bl	80061a8 <_vfiprintf_r>
 8005d2a:	b002      	add	sp, #8
 8005d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d30:	b003      	add	sp, #12
 8005d32:	4770      	bx	lr
 8005d34:	20000020 	.word	0x20000020

08005d38 <malloc>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <malloc+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f000 b853 	b.w	8005de8 <_malloc_r>
 8005d42:	bf00      	nop
 8005d44:	20000020 	.word	0x20000020

08005d48 <_free_r>:
 8005d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d048      	beq.n	8005de0 <_free_r+0x98>
 8005d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d52:	9001      	str	r0, [sp, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f1a1 0404 	sub.w	r4, r1, #4
 8005d5a:	bfb8      	it	lt
 8005d5c:	18e4      	addlt	r4, r4, r3
 8005d5e:	f000 fff7 	bl	8006d50 <__malloc_lock>
 8005d62:	4a20      	ldr	r2, [pc, #128]	; (8005de4 <_free_r+0x9c>)
 8005d64:	9801      	ldr	r0, [sp, #4]
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	4615      	mov	r5, r2
 8005d6a:	b933      	cbnz	r3, 8005d7a <_free_r+0x32>
 8005d6c:	6063      	str	r3, [r4, #4]
 8005d6e:	6014      	str	r4, [r2, #0]
 8005d70:	b003      	add	sp, #12
 8005d72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d76:	f000 bff1 	b.w	8006d5c <__malloc_unlock>
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	d90b      	bls.n	8005d96 <_free_r+0x4e>
 8005d7e:	6821      	ldr	r1, [r4, #0]
 8005d80:	1862      	adds	r2, r4, r1
 8005d82:	4293      	cmp	r3, r2
 8005d84:	bf04      	itt	eq
 8005d86:	681a      	ldreq	r2, [r3, #0]
 8005d88:	685b      	ldreq	r3, [r3, #4]
 8005d8a:	6063      	str	r3, [r4, #4]
 8005d8c:	bf04      	itt	eq
 8005d8e:	1852      	addeq	r2, r2, r1
 8005d90:	6022      	streq	r2, [r4, #0]
 8005d92:	602c      	str	r4, [r5, #0]
 8005d94:	e7ec      	b.n	8005d70 <_free_r+0x28>
 8005d96:	461a      	mov	r2, r3
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	b10b      	cbz	r3, 8005da0 <_free_r+0x58>
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	d9fa      	bls.n	8005d96 <_free_r+0x4e>
 8005da0:	6811      	ldr	r1, [r2, #0]
 8005da2:	1855      	adds	r5, r2, r1
 8005da4:	42a5      	cmp	r5, r4
 8005da6:	d10b      	bne.n	8005dc0 <_free_r+0x78>
 8005da8:	6824      	ldr	r4, [r4, #0]
 8005daa:	4421      	add	r1, r4
 8005dac:	1854      	adds	r4, r2, r1
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	6011      	str	r1, [r2, #0]
 8005db2:	d1dd      	bne.n	8005d70 <_free_r+0x28>
 8005db4:	681c      	ldr	r4, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	6053      	str	r3, [r2, #4]
 8005dba:	4421      	add	r1, r4
 8005dbc:	6011      	str	r1, [r2, #0]
 8005dbe:	e7d7      	b.n	8005d70 <_free_r+0x28>
 8005dc0:	d902      	bls.n	8005dc8 <_free_r+0x80>
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	6003      	str	r3, [r0, #0]
 8005dc6:	e7d3      	b.n	8005d70 <_free_r+0x28>
 8005dc8:	6825      	ldr	r5, [r4, #0]
 8005dca:	1961      	adds	r1, r4, r5
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	bf04      	itt	eq
 8005dd0:	6819      	ldreq	r1, [r3, #0]
 8005dd2:	685b      	ldreq	r3, [r3, #4]
 8005dd4:	6063      	str	r3, [r4, #4]
 8005dd6:	bf04      	itt	eq
 8005dd8:	1949      	addeq	r1, r1, r5
 8005dda:	6021      	streq	r1, [r4, #0]
 8005ddc:	6054      	str	r4, [r2, #4]
 8005dde:	e7c7      	b.n	8005d70 <_free_r+0x28>
 8005de0:	b003      	add	sp, #12
 8005de2:	bd30      	pop	{r4, r5, pc}
 8005de4:	20000530 	.word	0x20000530

08005de8 <_malloc_r>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	1ccd      	adds	r5, r1, #3
 8005dec:	f025 0503 	bic.w	r5, r5, #3
 8005df0:	3508      	adds	r5, #8
 8005df2:	2d0c      	cmp	r5, #12
 8005df4:	bf38      	it	cc
 8005df6:	250c      	movcc	r5, #12
 8005df8:	2d00      	cmp	r5, #0
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	db01      	blt.n	8005e02 <_malloc_r+0x1a>
 8005dfe:	42a9      	cmp	r1, r5
 8005e00:	d903      	bls.n	8005e0a <_malloc_r+0x22>
 8005e02:	230c      	movs	r3, #12
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	2000      	movs	r0, #0
 8005e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e0a:	f000 ffa1 	bl	8006d50 <__malloc_lock>
 8005e0e:	4921      	ldr	r1, [pc, #132]	; (8005e94 <_malloc_r+0xac>)
 8005e10:	680a      	ldr	r2, [r1, #0]
 8005e12:	4614      	mov	r4, r2
 8005e14:	b99c      	cbnz	r4, 8005e3e <_malloc_r+0x56>
 8005e16:	4f20      	ldr	r7, [pc, #128]	; (8005e98 <_malloc_r+0xb0>)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	b923      	cbnz	r3, 8005e26 <_malloc_r+0x3e>
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f000 fc86 	bl	8006730 <_sbrk_r>
 8005e24:	6038      	str	r0, [r7, #0]
 8005e26:	4629      	mov	r1, r5
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 fc81 	bl	8006730 <_sbrk_r>
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d123      	bne.n	8005e7a <_malloc_r+0x92>
 8005e32:	230c      	movs	r3, #12
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 ff90 	bl	8006d5c <__malloc_unlock>
 8005e3c:	e7e3      	b.n	8005e06 <_malloc_r+0x1e>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	1b5b      	subs	r3, r3, r5
 8005e42:	d417      	bmi.n	8005e74 <_malloc_r+0x8c>
 8005e44:	2b0b      	cmp	r3, #11
 8005e46:	d903      	bls.n	8005e50 <_malloc_r+0x68>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	441c      	add	r4, r3
 8005e4c:	6025      	str	r5, [r4, #0]
 8005e4e:	e004      	b.n	8005e5a <_malloc_r+0x72>
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	42a2      	cmp	r2, r4
 8005e54:	bf0c      	ite	eq
 8005e56:	600b      	streq	r3, [r1, #0]
 8005e58:	6053      	strne	r3, [r2, #4]
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f000 ff7e 	bl	8006d5c <__malloc_unlock>
 8005e60:	f104 000b 	add.w	r0, r4, #11
 8005e64:	1d23      	adds	r3, r4, #4
 8005e66:	f020 0007 	bic.w	r0, r0, #7
 8005e6a:	1ac2      	subs	r2, r0, r3
 8005e6c:	d0cc      	beq.n	8005e08 <_malloc_r+0x20>
 8005e6e:	1a1b      	subs	r3, r3, r0
 8005e70:	50a3      	str	r3, [r4, r2]
 8005e72:	e7c9      	b.n	8005e08 <_malloc_r+0x20>
 8005e74:	4622      	mov	r2, r4
 8005e76:	6864      	ldr	r4, [r4, #4]
 8005e78:	e7cc      	b.n	8005e14 <_malloc_r+0x2c>
 8005e7a:	1cc4      	adds	r4, r0, #3
 8005e7c:	f024 0403 	bic.w	r4, r4, #3
 8005e80:	42a0      	cmp	r0, r4
 8005e82:	d0e3      	beq.n	8005e4c <_malloc_r+0x64>
 8005e84:	1a21      	subs	r1, r4, r0
 8005e86:	4630      	mov	r0, r6
 8005e88:	f000 fc52 	bl	8006730 <_sbrk_r>
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d1dd      	bne.n	8005e4c <_malloc_r+0x64>
 8005e90:	e7cf      	b.n	8005e32 <_malloc_r+0x4a>
 8005e92:	bf00      	nop
 8005e94:	20000530 	.word	0x20000530
 8005e98:	20000534 	.word	0x20000534

08005e9c <__ssputs_r>:
 8005e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	688e      	ldr	r6, [r1, #8]
 8005ea2:	429e      	cmp	r6, r3
 8005ea4:	4682      	mov	sl, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	4690      	mov	r8, r2
 8005eaa:	461f      	mov	r7, r3
 8005eac:	d838      	bhi.n	8005f20 <__ssputs_r+0x84>
 8005eae:	898a      	ldrh	r2, [r1, #12]
 8005eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005eb4:	d032      	beq.n	8005f1c <__ssputs_r+0x80>
 8005eb6:	6825      	ldr	r5, [r4, #0]
 8005eb8:	6909      	ldr	r1, [r1, #16]
 8005eba:	eba5 0901 	sub.w	r9, r5, r1
 8005ebe:	6965      	ldr	r5, [r4, #20]
 8005ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ec8:	3301      	adds	r3, #1
 8005eca:	444b      	add	r3, r9
 8005ecc:	106d      	asrs	r5, r5, #1
 8005ece:	429d      	cmp	r5, r3
 8005ed0:	bf38      	it	cc
 8005ed2:	461d      	movcc	r5, r3
 8005ed4:	0553      	lsls	r3, r2, #21
 8005ed6:	d531      	bpl.n	8005f3c <__ssputs_r+0xa0>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	f7ff ff85 	bl	8005de8 <_malloc_r>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	b950      	cbnz	r0, 8005ef8 <__ssputs_r+0x5c>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	f8ca 3000 	str.w	r3, [sl]
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eee:	81a3      	strh	r3, [r4, #12]
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef8:	6921      	ldr	r1, [r4, #16]
 8005efa:	464a      	mov	r2, r9
 8005efc:	f7ff fdcc 	bl	8005a98 <memcpy>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	6126      	str	r6, [r4, #16]
 8005f0e:	6165      	str	r5, [r4, #20]
 8005f10:	444e      	add	r6, r9
 8005f12:	eba5 0509 	sub.w	r5, r5, r9
 8005f16:	6026      	str	r6, [r4, #0]
 8005f18:	60a5      	str	r5, [r4, #8]
 8005f1a:	463e      	mov	r6, r7
 8005f1c:	42be      	cmp	r6, r7
 8005f1e:	d900      	bls.n	8005f22 <__ssputs_r+0x86>
 8005f20:	463e      	mov	r6, r7
 8005f22:	4632      	mov	r2, r6
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	4641      	mov	r1, r8
 8005f28:	f000 fef8 	bl	8006d1c <memmove>
 8005f2c:	68a3      	ldr	r3, [r4, #8]
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	1b9b      	subs	r3, r3, r6
 8005f32:	4432      	add	r2, r6
 8005f34:	60a3      	str	r3, [r4, #8]
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	2000      	movs	r0, #0
 8005f3a:	e7db      	b.n	8005ef4 <__ssputs_r+0x58>
 8005f3c:	462a      	mov	r2, r5
 8005f3e:	f000 ff13 	bl	8006d68 <_realloc_r>
 8005f42:	4606      	mov	r6, r0
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d1e1      	bne.n	8005f0c <__ssputs_r+0x70>
 8005f48:	6921      	ldr	r1, [r4, #16]
 8005f4a:	4650      	mov	r0, sl
 8005f4c:	f7ff fefc 	bl	8005d48 <_free_r>
 8005f50:	e7c7      	b.n	8005ee2 <__ssputs_r+0x46>
	...

08005f54 <_svfiprintf_r>:
 8005f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f58:	4698      	mov	r8, r3
 8005f5a:	898b      	ldrh	r3, [r1, #12]
 8005f5c:	061b      	lsls	r3, r3, #24
 8005f5e:	b09d      	sub	sp, #116	; 0x74
 8005f60:	4607      	mov	r7, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	4614      	mov	r4, r2
 8005f66:	d50e      	bpl.n	8005f86 <_svfiprintf_r+0x32>
 8005f68:	690b      	ldr	r3, [r1, #16]
 8005f6a:	b963      	cbnz	r3, 8005f86 <_svfiprintf_r+0x32>
 8005f6c:	2140      	movs	r1, #64	; 0x40
 8005f6e:	f7ff ff3b 	bl	8005de8 <_malloc_r>
 8005f72:	6028      	str	r0, [r5, #0]
 8005f74:	6128      	str	r0, [r5, #16]
 8005f76:	b920      	cbnz	r0, 8005f82 <_svfiprintf_r+0x2e>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f80:	e0d1      	b.n	8006126 <_svfiprintf_r+0x1d2>
 8005f82:	2340      	movs	r3, #64	; 0x40
 8005f84:	616b      	str	r3, [r5, #20]
 8005f86:	2300      	movs	r3, #0
 8005f88:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8a:	2320      	movs	r3, #32
 8005f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f94:	2330      	movs	r3, #48	; 0x30
 8005f96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006140 <_svfiprintf_r+0x1ec>
 8005f9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f9e:	f04f 0901 	mov.w	r9, #1
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	469a      	mov	sl, r3
 8005fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005faa:	b10a      	cbz	r2, 8005fb0 <_svfiprintf_r+0x5c>
 8005fac:	2a25      	cmp	r2, #37	; 0x25
 8005fae:	d1f9      	bne.n	8005fa4 <_svfiprintf_r+0x50>
 8005fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fb4:	d00b      	beq.n	8005fce <_svfiprintf_r+0x7a>
 8005fb6:	465b      	mov	r3, fp
 8005fb8:	4622      	mov	r2, r4
 8005fba:	4629      	mov	r1, r5
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f7ff ff6d 	bl	8005e9c <__ssputs_r>
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f000 80aa 	beq.w	800611c <_svfiprintf_r+0x1c8>
 8005fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fca:	445a      	add	r2, fp
 8005fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fce:	f89a 3000 	ldrb.w	r3, [sl]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80a2 	beq.w	800611c <_svfiprintf_r+0x1c8>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fe2:	f10a 0a01 	add.w	sl, sl, #1
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	9307      	str	r3, [sp, #28]
 8005fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fee:	931a      	str	r3, [sp, #104]	; 0x68
 8005ff0:	4654      	mov	r4, sl
 8005ff2:	2205      	movs	r2, #5
 8005ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff8:	4851      	ldr	r0, [pc, #324]	; (8006140 <_svfiprintf_r+0x1ec>)
 8005ffa:	f7fa f8e9 	bl	80001d0 <memchr>
 8005ffe:	9a04      	ldr	r2, [sp, #16]
 8006000:	b9d8      	cbnz	r0, 800603a <_svfiprintf_r+0xe6>
 8006002:	06d0      	lsls	r0, r2, #27
 8006004:	bf44      	itt	mi
 8006006:	2320      	movmi	r3, #32
 8006008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800600c:	0711      	lsls	r1, r2, #28
 800600e:	bf44      	itt	mi
 8006010:	232b      	movmi	r3, #43	; 0x2b
 8006012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006016:	f89a 3000 	ldrb.w	r3, [sl]
 800601a:	2b2a      	cmp	r3, #42	; 0x2a
 800601c:	d015      	beq.n	800604a <_svfiprintf_r+0xf6>
 800601e:	9a07      	ldr	r2, [sp, #28]
 8006020:	4654      	mov	r4, sl
 8006022:	2000      	movs	r0, #0
 8006024:	f04f 0c0a 	mov.w	ip, #10
 8006028:	4621      	mov	r1, r4
 800602a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800602e:	3b30      	subs	r3, #48	; 0x30
 8006030:	2b09      	cmp	r3, #9
 8006032:	d94e      	bls.n	80060d2 <_svfiprintf_r+0x17e>
 8006034:	b1b0      	cbz	r0, 8006064 <_svfiprintf_r+0x110>
 8006036:	9207      	str	r2, [sp, #28]
 8006038:	e014      	b.n	8006064 <_svfiprintf_r+0x110>
 800603a:	eba0 0308 	sub.w	r3, r0, r8
 800603e:	fa09 f303 	lsl.w	r3, r9, r3
 8006042:	4313      	orrs	r3, r2
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	46a2      	mov	sl, r4
 8006048:	e7d2      	b.n	8005ff0 <_svfiprintf_r+0x9c>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	1d19      	adds	r1, r3, #4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	9103      	str	r1, [sp, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	bfbb      	ittet	lt
 8006056:	425b      	neglt	r3, r3
 8006058:	f042 0202 	orrlt.w	r2, r2, #2
 800605c:	9307      	strge	r3, [sp, #28]
 800605e:	9307      	strlt	r3, [sp, #28]
 8006060:	bfb8      	it	lt
 8006062:	9204      	strlt	r2, [sp, #16]
 8006064:	7823      	ldrb	r3, [r4, #0]
 8006066:	2b2e      	cmp	r3, #46	; 0x2e
 8006068:	d10c      	bne.n	8006084 <_svfiprintf_r+0x130>
 800606a:	7863      	ldrb	r3, [r4, #1]
 800606c:	2b2a      	cmp	r3, #42	; 0x2a
 800606e:	d135      	bne.n	80060dc <_svfiprintf_r+0x188>
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	1d1a      	adds	r2, r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	9203      	str	r2, [sp, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	bfb8      	it	lt
 800607c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006080:	3402      	adds	r4, #2
 8006082:	9305      	str	r3, [sp, #20]
 8006084:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006150 <_svfiprintf_r+0x1fc>
 8006088:	7821      	ldrb	r1, [r4, #0]
 800608a:	2203      	movs	r2, #3
 800608c:	4650      	mov	r0, sl
 800608e:	f7fa f89f 	bl	80001d0 <memchr>
 8006092:	b140      	cbz	r0, 80060a6 <_svfiprintf_r+0x152>
 8006094:	2340      	movs	r3, #64	; 0x40
 8006096:	eba0 000a 	sub.w	r0, r0, sl
 800609a:	fa03 f000 	lsl.w	r0, r3, r0
 800609e:	9b04      	ldr	r3, [sp, #16]
 80060a0:	4303      	orrs	r3, r0
 80060a2:	3401      	adds	r4, #1
 80060a4:	9304      	str	r3, [sp, #16]
 80060a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060aa:	4826      	ldr	r0, [pc, #152]	; (8006144 <_svfiprintf_r+0x1f0>)
 80060ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060b0:	2206      	movs	r2, #6
 80060b2:	f7fa f88d 	bl	80001d0 <memchr>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d038      	beq.n	800612c <_svfiprintf_r+0x1d8>
 80060ba:	4b23      	ldr	r3, [pc, #140]	; (8006148 <_svfiprintf_r+0x1f4>)
 80060bc:	bb1b      	cbnz	r3, 8006106 <_svfiprintf_r+0x1b2>
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	3307      	adds	r3, #7
 80060c2:	f023 0307 	bic.w	r3, r3, #7
 80060c6:	3308      	adds	r3, #8
 80060c8:	9303      	str	r3, [sp, #12]
 80060ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060cc:	4433      	add	r3, r6
 80060ce:	9309      	str	r3, [sp, #36]	; 0x24
 80060d0:	e767      	b.n	8005fa2 <_svfiprintf_r+0x4e>
 80060d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d6:	460c      	mov	r4, r1
 80060d8:	2001      	movs	r0, #1
 80060da:	e7a5      	b.n	8006028 <_svfiprintf_r+0xd4>
 80060dc:	2300      	movs	r3, #0
 80060de:	3401      	adds	r4, #1
 80060e0:	9305      	str	r3, [sp, #20]
 80060e2:	4619      	mov	r1, r3
 80060e4:	f04f 0c0a 	mov.w	ip, #10
 80060e8:	4620      	mov	r0, r4
 80060ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ee:	3a30      	subs	r2, #48	; 0x30
 80060f0:	2a09      	cmp	r2, #9
 80060f2:	d903      	bls.n	80060fc <_svfiprintf_r+0x1a8>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0c5      	beq.n	8006084 <_svfiprintf_r+0x130>
 80060f8:	9105      	str	r1, [sp, #20]
 80060fa:	e7c3      	b.n	8006084 <_svfiprintf_r+0x130>
 80060fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006100:	4604      	mov	r4, r0
 8006102:	2301      	movs	r3, #1
 8006104:	e7f0      	b.n	80060e8 <_svfiprintf_r+0x194>
 8006106:	ab03      	add	r3, sp, #12
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	462a      	mov	r2, r5
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <_svfiprintf_r+0x1f8>)
 800610e:	a904      	add	r1, sp, #16
 8006110:	4638      	mov	r0, r7
 8006112:	f3af 8000 	nop.w
 8006116:	1c42      	adds	r2, r0, #1
 8006118:	4606      	mov	r6, r0
 800611a:	d1d6      	bne.n	80060ca <_svfiprintf_r+0x176>
 800611c:	89ab      	ldrh	r3, [r5, #12]
 800611e:	065b      	lsls	r3, r3, #25
 8006120:	f53f af2c 	bmi.w	8005f7c <_svfiprintf_r+0x28>
 8006124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006126:	b01d      	add	sp, #116	; 0x74
 8006128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612c:	ab03      	add	r3, sp, #12
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	462a      	mov	r2, r5
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <_svfiprintf_r+0x1f8>)
 8006134:	a904      	add	r1, sp, #16
 8006136:	4638      	mov	r0, r7
 8006138:	f000 f9d4 	bl	80064e4 <_printf_i>
 800613c:	e7eb      	b.n	8006116 <_svfiprintf_r+0x1c2>
 800613e:	bf00      	nop
 8006140:	080071e1 	.word	0x080071e1
 8006144:	080071eb 	.word	0x080071eb
 8006148:	00000000 	.word	0x00000000
 800614c:	08005e9d 	.word	0x08005e9d
 8006150:	080071e7 	.word	0x080071e7

08006154 <__sfputc_r>:
 8006154:	6893      	ldr	r3, [r2, #8]
 8006156:	3b01      	subs	r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	b410      	push	{r4}
 800615c:	6093      	str	r3, [r2, #8]
 800615e:	da08      	bge.n	8006172 <__sfputc_r+0x1e>
 8006160:	6994      	ldr	r4, [r2, #24]
 8006162:	42a3      	cmp	r3, r4
 8006164:	db01      	blt.n	800616a <__sfputc_r+0x16>
 8006166:	290a      	cmp	r1, #10
 8006168:	d103      	bne.n	8006172 <__sfputc_r+0x1e>
 800616a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800616e:	f000 baef 	b.w	8006750 <__swbuf_r>
 8006172:	6813      	ldr	r3, [r2, #0]
 8006174:	1c58      	adds	r0, r3, #1
 8006176:	6010      	str	r0, [r2, #0]
 8006178:	7019      	strb	r1, [r3, #0]
 800617a:	4608      	mov	r0, r1
 800617c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006180:	4770      	bx	lr

08006182 <__sfputs_r>:
 8006182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006184:	4606      	mov	r6, r0
 8006186:	460f      	mov	r7, r1
 8006188:	4614      	mov	r4, r2
 800618a:	18d5      	adds	r5, r2, r3
 800618c:	42ac      	cmp	r4, r5
 800618e:	d101      	bne.n	8006194 <__sfputs_r+0x12>
 8006190:	2000      	movs	r0, #0
 8006192:	e007      	b.n	80061a4 <__sfputs_r+0x22>
 8006194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006198:	463a      	mov	r2, r7
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff ffda 	bl	8006154 <__sfputc_r>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d1f3      	bne.n	800618c <__sfputs_r+0xa>
 80061a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061a8 <_vfiprintf_r>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	460d      	mov	r5, r1
 80061ae:	b09d      	sub	sp, #116	; 0x74
 80061b0:	4614      	mov	r4, r2
 80061b2:	4698      	mov	r8, r3
 80061b4:	4606      	mov	r6, r0
 80061b6:	b118      	cbz	r0, 80061c0 <_vfiprintf_r+0x18>
 80061b8:	6983      	ldr	r3, [r0, #24]
 80061ba:	b90b      	cbnz	r3, 80061c0 <_vfiprintf_r+0x18>
 80061bc:	f000 fcaa 	bl	8006b14 <__sinit>
 80061c0:	4b89      	ldr	r3, [pc, #548]	; (80063e8 <_vfiprintf_r+0x240>)
 80061c2:	429d      	cmp	r5, r3
 80061c4:	d11b      	bne.n	80061fe <_vfiprintf_r+0x56>
 80061c6:	6875      	ldr	r5, [r6, #4]
 80061c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061ca:	07d9      	lsls	r1, r3, #31
 80061cc:	d405      	bmi.n	80061da <_vfiprintf_r+0x32>
 80061ce:	89ab      	ldrh	r3, [r5, #12]
 80061d0:	059a      	lsls	r2, r3, #22
 80061d2:	d402      	bmi.n	80061da <_vfiprintf_r+0x32>
 80061d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061d6:	f000 fd3b 	bl	8006c50 <__retarget_lock_acquire_recursive>
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	071b      	lsls	r3, r3, #28
 80061de:	d501      	bpl.n	80061e4 <_vfiprintf_r+0x3c>
 80061e0:	692b      	ldr	r3, [r5, #16]
 80061e2:	b9eb      	cbnz	r3, 8006220 <_vfiprintf_r+0x78>
 80061e4:	4629      	mov	r1, r5
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 fb04 	bl	80067f4 <__swsetup_r>
 80061ec:	b1c0      	cbz	r0, 8006220 <_vfiprintf_r+0x78>
 80061ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061f0:	07dc      	lsls	r4, r3, #31
 80061f2:	d50e      	bpl.n	8006212 <_vfiprintf_r+0x6a>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061f8:	b01d      	add	sp, #116	; 0x74
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <_vfiprintf_r+0x244>)
 8006200:	429d      	cmp	r5, r3
 8006202:	d101      	bne.n	8006208 <_vfiprintf_r+0x60>
 8006204:	68b5      	ldr	r5, [r6, #8]
 8006206:	e7df      	b.n	80061c8 <_vfiprintf_r+0x20>
 8006208:	4b79      	ldr	r3, [pc, #484]	; (80063f0 <_vfiprintf_r+0x248>)
 800620a:	429d      	cmp	r5, r3
 800620c:	bf08      	it	eq
 800620e:	68f5      	ldreq	r5, [r6, #12]
 8006210:	e7da      	b.n	80061c8 <_vfiprintf_r+0x20>
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	0598      	lsls	r0, r3, #22
 8006216:	d4ed      	bmi.n	80061f4 <_vfiprintf_r+0x4c>
 8006218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800621a:	f000 fd1a 	bl	8006c52 <__retarget_lock_release_recursive>
 800621e:	e7e9      	b.n	80061f4 <_vfiprintf_r+0x4c>
 8006220:	2300      	movs	r3, #0
 8006222:	9309      	str	r3, [sp, #36]	; 0x24
 8006224:	2320      	movs	r3, #32
 8006226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800622a:	f8cd 800c 	str.w	r8, [sp, #12]
 800622e:	2330      	movs	r3, #48	; 0x30
 8006230:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063f4 <_vfiprintf_r+0x24c>
 8006234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006238:	f04f 0901 	mov.w	r9, #1
 800623c:	4623      	mov	r3, r4
 800623e:	469a      	mov	sl, r3
 8006240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006244:	b10a      	cbz	r2, 800624a <_vfiprintf_r+0xa2>
 8006246:	2a25      	cmp	r2, #37	; 0x25
 8006248:	d1f9      	bne.n	800623e <_vfiprintf_r+0x96>
 800624a:	ebba 0b04 	subs.w	fp, sl, r4
 800624e:	d00b      	beq.n	8006268 <_vfiprintf_r+0xc0>
 8006250:	465b      	mov	r3, fp
 8006252:	4622      	mov	r2, r4
 8006254:	4629      	mov	r1, r5
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff ff93 	bl	8006182 <__sfputs_r>
 800625c:	3001      	adds	r0, #1
 800625e:	f000 80aa 	beq.w	80063b6 <_vfiprintf_r+0x20e>
 8006262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006264:	445a      	add	r2, fp
 8006266:	9209      	str	r2, [sp, #36]	; 0x24
 8006268:	f89a 3000 	ldrb.w	r3, [sl]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80a2 	beq.w	80063b6 <_vfiprintf_r+0x20e>
 8006272:	2300      	movs	r3, #0
 8006274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800627c:	f10a 0a01 	add.w	sl, sl, #1
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	9307      	str	r3, [sp, #28]
 8006284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006288:	931a      	str	r3, [sp, #104]	; 0x68
 800628a:	4654      	mov	r4, sl
 800628c:	2205      	movs	r2, #5
 800628e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006292:	4858      	ldr	r0, [pc, #352]	; (80063f4 <_vfiprintf_r+0x24c>)
 8006294:	f7f9 ff9c 	bl	80001d0 <memchr>
 8006298:	9a04      	ldr	r2, [sp, #16]
 800629a:	b9d8      	cbnz	r0, 80062d4 <_vfiprintf_r+0x12c>
 800629c:	06d1      	lsls	r1, r2, #27
 800629e:	bf44      	itt	mi
 80062a0:	2320      	movmi	r3, #32
 80062a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a6:	0713      	lsls	r3, r2, #28
 80062a8:	bf44      	itt	mi
 80062aa:	232b      	movmi	r3, #43	; 0x2b
 80062ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b0:	f89a 3000 	ldrb.w	r3, [sl]
 80062b4:	2b2a      	cmp	r3, #42	; 0x2a
 80062b6:	d015      	beq.n	80062e4 <_vfiprintf_r+0x13c>
 80062b8:	9a07      	ldr	r2, [sp, #28]
 80062ba:	4654      	mov	r4, sl
 80062bc:	2000      	movs	r0, #0
 80062be:	f04f 0c0a 	mov.w	ip, #10
 80062c2:	4621      	mov	r1, r4
 80062c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c8:	3b30      	subs	r3, #48	; 0x30
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d94e      	bls.n	800636c <_vfiprintf_r+0x1c4>
 80062ce:	b1b0      	cbz	r0, 80062fe <_vfiprintf_r+0x156>
 80062d0:	9207      	str	r2, [sp, #28]
 80062d2:	e014      	b.n	80062fe <_vfiprintf_r+0x156>
 80062d4:	eba0 0308 	sub.w	r3, r0, r8
 80062d8:	fa09 f303 	lsl.w	r3, r9, r3
 80062dc:	4313      	orrs	r3, r2
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	46a2      	mov	sl, r4
 80062e2:	e7d2      	b.n	800628a <_vfiprintf_r+0xe2>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	1d19      	adds	r1, r3, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	9103      	str	r1, [sp, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	bfbb      	ittet	lt
 80062f0:	425b      	neglt	r3, r3
 80062f2:	f042 0202 	orrlt.w	r2, r2, #2
 80062f6:	9307      	strge	r3, [sp, #28]
 80062f8:	9307      	strlt	r3, [sp, #28]
 80062fa:	bfb8      	it	lt
 80062fc:	9204      	strlt	r2, [sp, #16]
 80062fe:	7823      	ldrb	r3, [r4, #0]
 8006300:	2b2e      	cmp	r3, #46	; 0x2e
 8006302:	d10c      	bne.n	800631e <_vfiprintf_r+0x176>
 8006304:	7863      	ldrb	r3, [r4, #1]
 8006306:	2b2a      	cmp	r3, #42	; 0x2a
 8006308:	d135      	bne.n	8006376 <_vfiprintf_r+0x1ce>
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	1d1a      	adds	r2, r3, #4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	9203      	str	r2, [sp, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	bfb8      	it	lt
 8006316:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800631a:	3402      	adds	r4, #2
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006404 <_vfiprintf_r+0x25c>
 8006322:	7821      	ldrb	r1, [r4, #0]
 8006324:	2203      	movs	r2, #3
 8006326:	4650      	mov	r0, sl
 8006328:	f7f9 ff52 	bl	80001d0 <memchr>
 800632c:	b140      	cbz	r0, 8006340 <_vfiprintf_r+0x198>
 800632e:	2340      	movs	r3, #64	; 0x40
 8006330:	eba0 000a 	sub.w	r0, r0, sl
 8006334:	fa03 f000 	lsl.w	r0, r3, r0
 8006338:	9b04      	ldr	r3, [sp, #16]
 800633a:	4303      	orrs	r3, r0
 800633c:	3401      	adds	r4, #1
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006344:	482c      	ldr	r0, [pc, #176]	; (80063f8 <_vfiprintf_r+0x250>)
 8006346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800634a:	2206      	movs	r2, #6
 800634c:	f7f9 ff40 	bl	80001d0 <memchr>
 8006350:	2800      	cmp	r0, #0
 8006352:	d03f      	beq.n	80063d4 <_vfiprintf_r+0x22c>
 8006354:	4b29      	ldr	r3, [pc, #164]	; (80063fc <_vfiprintf_r+0x254>)
 8006356:	bb1b      	cbnz	r3, 80063a0 <_vfiprintf_r+0x1f8>
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	3307      	adds	r3, #7
 800635c:	f023 0307 	bic.w	r3, r3, #7
 8006360:	3308      	adds	r3, #8
 8006362:	9303      	str	r3, [sp, #12]
 8006364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006366:	443b      	add	r3, r7
 8006368:	9309      	str	r3, [sp, #36]	; 0x24
 800636a:	e767      	b.n	800623c <_vfiprintf_r+0x94>
 800636c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006370:	460c      	mov	r4, r1
 8006372:	2001      	movs	r0, #1
 8006374:	e7a5      	b.n	80062c2 <_vfiprintf_r+0x11a>
 8006376:	2300      	movs	r3, #0
 8006378:	3401      	adds	r4, #1
 800637a:	9305      	str	r3, [sp, #20]
 800637c:	4619      	mov	r1, r3
 800637e:	f04f 0c0a 	mov.w	ip, #10
 8006382:	4620      	mov	r0, r4
 8006384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006388:	3a30      	subs	r2, #48	; 0x30
 800638a:	2a09      	cmp	r2, #9
 800638c:	d903      	bls.n	8006396 <_vfiprintf_r+0x1ee>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0c5      	beq.n	800631e <_vfiprintf_r+0x176>
 8006392:	9105      	str	r1, [sp, #20]
 8006394:	e7c3      	b.n	800631e <_vfiprintf_r+0x176>
 8006396:	fb0c 2101 	mla	r1, ip, r1, r2
 800639a:	4604      	mov	r4, r0
 800639c:	2301      	movs	r3, #1
 800639e:	e7f0      	b.n	8006382 <_vfiprintf_r+0x1da>
 80063a0:	ab03      	add	r3, sp, #12
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	462a      	mov	r2, r5
 80063a6:	4b16      	ldr	r3, [pc, #88]	; (8006400 <_vfiprintf_r+0x258>)
 80063a8:	a904      	add	r1, sp, #16
 80063aa:	4630      	mov	r0, r6
 80063ac:	f3af 8000 	nop.w
 80063b0:	4607      	mov	r7, r0
 80063b2:	1c78      	adds	r0, r7, #1
 80063b4:	d1d6      	bne.n	8006364 <_vfiprintf_r+0x1bc>
 80063b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063b8:	07d9      	lsls	r1, r3, #31
 80063ba:	d405      	bmi.n	80063c8 <_vfiprintf_r+0x220>
 80063bc:	89ab      	ldrh	r3, [r5, #12]
 80063be:	059a      	lsls	r2, r3, #22
 80063c0:	d402      	bmi.n	80063c8 <_vfiprintf_r+0x220>
 80063c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063c4:	f000 fc45 	bl	8006c52 <__retarget_lock_release_recursive>
 80063c8:	89ab      	ldrh	r3, [r5, #12]
 80063ca:	065b      	lsls	r3, r3, #25
 80063cc:	f53f af12 	bmi.w	80061f4 <_vfiprintf_r+0x4c>
 80063d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063d2:	e711      	b.n	80061f8 <_vfiprintf_r+0x50>
 80063d4:	ab03      	add	r3, sp, #12
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	462a      	mov	r2, r5
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <_vfiprintf_r+0x258>)
 80063dc:	a904      	add	r1, sp, #16
 80063de:	4630      	mov	r0, r6
 80063e0:	f000 f880 	bl	80064e4 <_printf_i>
 80063e4:	e7e4      	b.n	80063b0 <_vfiprintf_r+0x208>
 80063e6:	bf00      	nop
 80063e8:	08007234 	.word	0x08007234
 80063ec:	08007254 	.word	0x08007254
 80063f0:	08007214 	.word	0x08007214
 80063f4:	080071e1 	.word	0x080071e1
 80063f8:	080071eb 	.word	0x080071eb
 80063fc:	00000000 	.word	0x00000000
 8006400:	08006183 	.word	0x08006183
 8006404:	080071e7 	.word	0x080071e7

08006408 <_printf_common>:
 8006408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800640c:	4616      	mov	r6, r2
 800640e:	4699      	mov	r9, r3
 8006410:	688a      	ldr	r2, [r1, #8]
 8006412:	690b      	ldr	r3, [r1, #16]
 8006414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006418:	4293      	cmp	r3, r2
 800641a:	bfb8      	it	lt
 800641c:	4613      	movlt	r3, r2
 800641e:	6033      	str	r3, [r6, #0]
 8006420:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006424:	4607      	mov	r7, r0
 8006426:	460c      	mov	r4, r1
 8006428:	b10a      	cbz	r2, 800642e <_printf_common+0x26>
 800642a:	3301      	adds	r3, #1
 800642c:	6033      	str	r3, [r6, #0]
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	0699      	lsls	r1, r3, #26
 8006432:	bf42      	ittt	mi
 8006434:	6833      	ldrmi	r3, [r6, #0]
 8006436:	3302      	addmi	r3, #2
 8006438:	6033      	strmi	r3, [r6, #0]
 800643a:	6825      	ldr	r5, [r4, #0]
 800643c:	f015 0506 	ands.w	r5, r5, #6
 8006440:	d106      	bne.n	8006450 <_printf_common+0x48>
 8006442:	f104 0a19 	add.w	sl, r4, #25
 8006446:	68e3      	ldr	r3, [r4, #12]
 8006448:	6832      	ldr	r2, [r6, #0]
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	42ab      	cmp	r3, r5
 800644e:	dc26      	bgt.n	800649e <_printf_common+0x96>
 8006450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006454:	1e13      	subs	r3, r2, #0
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	bf18      	it	ne
 800645a:	2301      	movne	r3, #1
 800645c:	0692      	lsls	r2, r2, #26
 800645e:	d42b      	bmi.n	80064b8 <_printf_common+0xb0>
 8006460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006464:	4649      	mov	r1, r9
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	3001      	adds	r0, #1
 800646c:	d01e      	beq.n	80064ac <_printf_common+0xa4>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	68e5      	ldr	r5, [r4, #12]
 8006472:	6832      	ldr	r2, [r6, #0]
 8006474:	f003 0306 	and.w	r3, r3, #6
 8006478:	2b04      	cmp	r3, #4
 800647a:	bf08      	it	eq
 800647c:	1aad      	subeq	r5, r5, r2
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	6922      	ldr	r2, [r4, #16]
 8006482:	bf0c      	ite	eq
 8006484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006488:	2500      	movne	r5, #0
 800648a:	4293      	cmp	r3, r2
 800648c:	bfc4      	itt	gt
 800648e:	1a9b      	subgt	r3, r3, r2
 8006490:	18ed      	addgt	r5, r5, r3
 8006492:	2600      	movs	r6, #0
 8006494:	341a      	adds	r4, #26
 8006496:	42b5      	cmp	r5, r6
 8006498:	d11a      	bne.n	80064d0 <_printf_common+0xc8>
 800649a:	2000      	movs	r0, #0
 800649c:	e008      	b.n	80064b0 <_printf_common+0xa8>
 800649e:	2301      	movs	r3, #1
 80064a0:	4652      	mov	r2, sl
 80064a2:	4649      	mov	r1, r9
 80064a4:	4638      	mov	r0, r7
 80064a6:	47c0      	blx	r8
 80064a8:	3001      	adds	r0, #1
 80064aa:	d103      	bne.n	80064b4 <_printf_common+0xac>
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b4:	3501      	adds	r5, #1
 80064b6:	e7c6      	b.n	8006446 <_printf_common+0x3e>
 80064b8:	18e1      	adds	r1, r4, r3
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	2030      	movs	r0, #48	; 0x30
 80064be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064c2:	4422      	add	r2, r4
 80064c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064cc:	3302      	adds	r3, #2
 80064ce:	e7c7      	b.n	8006460 <_printf_common+0x58>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4622      	mov	r2, r4
 80064d4:	4649      	mov	r1, r9
 80064d6:	4638      	mov	r0, r7
 80064d8:	47c0      	blx	r8
 80064da:	3001      	adds	r0, #1
 80064dc:	d0e6      	beq.n	80064ac <_printf_common+0xa4>
 80064de:	3601      	adds	r6, #1
 80064e0:	e7d9      	b.n	8006496 <_printf_common+0x8e>
	...

080064e4 <_printf_i>:
 80064e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e8:	460c      	mov	r4, r1
 80064ea:	4691      	mov	r9, r2
 80064ec:	7e27      	ldrb	r7, [r4, #24]
 80064ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064f0:	2f78      	cmp	r7, #120	; 0x78
 80064f2:	4680      	mov	r8, r0
 80064f4:	469a      	mov	sl, r3
 80064f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064fa:	d807      	bhi.n	800650c <_printf_i+0x28>
 80064fc:	2f62      	cmp	r7, #98	; 0x62
 80064fe:	d80a      	bhi.n	8006516 <_printf_i+0x32>
 8006500:	2f00      	cmp	r7, #0
 8006502:	f000 80d8 	beq.w	80066b6 <_printf_i+0x1d2>
 8006506:	2f58      	cmp	r7, #88	; 0x58
 8006508:	f000 80a3 	beq.w	8006652 <_printf_i+0x16e>
 800650c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006510:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006514:	e03a      	b.n	800658c <_printf_i+0xa8>
 8006516:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800651a:	2b15      	cmp	r3, #21
 800651c:	d8f6      	bhi.n	800650c <_printf_i+0x28>
 800651e:	a001      	add	r0, pc, #4	; (adr r0, 8006524 <_printf_i+0x40>)
 8006520:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006524:	0800657d 	.word	0x0800657d
 8006528:	08006591 	.word	0x08006591
 800652c:	0800650d 	.word	0x0800650d
 8006530:	0800650d 	.word	0x0800650d
 8006534:	0800650d 	.word	0x0800650d
 8006538:	0800650d 	.word	0x0800650d
 800653c:	08006591 	.word	0x08006591
 8006540:	0800650d 	.word	0x0800650d
 8006544:	0800650d 	.word	0x0800650d
 8006548:	0800650d 	.word	0x0800650d
 800654c:	0800650d 	.word	0x0800650d
 8006550:	0800669d 	.word	0x0800669d
 8006554:	080065c1 	.word	0x080065c1
 8006558:	0800667f 	.word	0x0800667f
 800655c:	0800650d 	.word	0x0800650d
 8006560:	0800650d 	.word	0x0800650d
 8006564:	080066bf 	.word	0x080066bf
 8006568:	0800650d 	.word	0x0800650d
 800656c:	080065c1 	.word	0x080065c1
 8006570:	0800650d 	.word	0x0800650d
 8006574:	0800650d 	.word	0x0800650d
 8006578:	08006687 	.word	0x08006687
 800657c:	680b      	ldr	r3, [r1, #0]
 800657e:	1d1a      	adds	r2, r3, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	600a      	str	r2, [r1, #0]
 8006584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006588:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800658c:	2301      	movs	r3, #1
 800658e:	e0a3      	b.n	80066d8 <_printf_i+0x1f4>
 8006590:	6825      	ldr	r5, [r4, #0]
 8006592:	6808      	ldr	r0, [r1, #0]
 8006594:	062e      	lsls	r6, r5, #24
 8006596:	f100 0304 	add.w	r3, r0, #4
 800659a:	d50a      	bpl.n	80065b2 <_printf_i+0xce>
 800659c:	6805      	ldr	r5, [r0, #0]
 800659e:	600b      	str	r3, [r1, #0]
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	da03      	bge.n	80065ac <_printf_i+0xc8>
 80065a4:	232d      	movs	r3, #45	; 0x2d
 80065a6:	426d      	negs	r5, r5
 80065a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ac:	485e      	ldr	r0, [pc, #376]	; (8006728 <_printf_i+0x244>)
 80065ae:	230a      	movs	r3, #10
 80065b0:	e019      	b.n	80065e6 <_printf_i+0x102>
 80065b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80065b6:	6805      	ldr	r5, [r0, #0]
 80065b8:	600b      	str	r3, [r1, #0]
 80065ba:	bf18      	it	ne
 80065bc:	b22d      	sxthne	r5, r5
 80065be:	e7ef      	b.n	80065a0 <_printf_i+0xbc>
 80065c0:	680b      	ldr	r3, [r1, #0]
 80065c2:	6825      	ldr	r5, [r4, #0]
 80065c4:	1d18      	adds	r0, r3, #4
 80065c6:	6008      	str	r0, [r1, #0]
 80065c8:	0628      	lsls	r0, r5, #24
 80065ca:	d501      	bpl.n	80065d0 <_printf_i+0xec>
 80065cc:	681d      	ldr	r5, [r3, #0]
 80065ce:	e002      	b.n	80065d6 <_printf_i+0xf2>
 80065d0:	0669      	lsls	r1, r5, #25
 80065d2:	d5fb      	bpl.n	80065cc <_printf_i+0xe8>
 80065d4:	881d      	ldrh	r5, [r3, #0]
 80065d6:	4854      	ldr	r0, [pc, #336]	; (8006728 <_printf_i+0x244>)
 80065d8:	2f6f      	cmp	r7, #111	; 0x6f
 80065da:	bf0c      	ite	eq
 80065dc:	2308      	moveq	r3, #8
 80065de:	230a      	movne	r3, #10
 80065e0:	2100      	movs	r1, #0
 80065e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065e6:	6866      	ldr	r6, [r4, #4]
 80065e8:	60a6      	str	r6, [r4, #8]
 80065ea:	2e00      	cmp	r6, #0
 80065ec:	bfa2      	ittt	ge
 80065ee:	6821      	ldrge	r1, [r4, #0]
 80065f0:	f021 0104 	bicge.w	r1, r1, #4
 80065f4:	6021      	strge	r1, [r4, #0]
 80065f6:	b90d      	cbnz	r5, 80065fc <_printf_i+0x118>
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	d04d      	beq.n	8006698 <_printf_i+0x1b4>
 80065fc:	4616      	mov	r6, r2
 80065fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006602:	fb03 5711 	mls	r7, r3, r1, r5
 8006606:	5dc7      	ldrb	r7, [r0, r7]
 8006608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800660c:	462f      	mov	r7, r5
 800660e:	42bb      	cmp	r3, r7
 8006610:	460d      	mov	r5, r1
 8006612:	d9f4      	bls.n	80065fe <_printf_i+0x11a>
 8006614:	2b08      	cmp	r3, #8
 8006616:	d10b      	bne.n	8006630 <_printf_i+0x14c>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	07df      	lsls	r7, r3, #31
 800661c:	d508      	bpl.n	8006630 <_printf_i+0x14c>
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	6861      	ldr	r1, [r4, #4]
 8006622:	4299      	cmp	r1, r3
 8006624:	bfde      	ittt	le
 8006626:	2330      	movle	r3, #48	; 0x30
 8006628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800662c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006630:	1b92      	subs	r2, r2, r6
 8006632:	6122      	str	r2, [r4, #16]
 8006634:	f8cd a000 	str.w	sl, [sp]
 8006638:	464b      	mov	r3, r9
 800663a:	aa03      	add	r2, sp, #12
 800663c:	4621      	mov	r1, r4
 800663e:	4640      	mov	r0, r8
 8006640:	f7ff fee2 	bl	8006408 <_printf_common>
 8006644:	3001      	adds	r0, #1
 8006646:	d14c      	bne.n	80066e2 <_printf_i+0x1fe>
 8006648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800664c:	b004      	add	sp, #16
 800664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006652:	4835      	ldr	r0, [pc, #212]	; (8006728 <_printf_i+0x244>)
 8006654:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	680e      	ldr	r6, [r1, #0]
 800665c:	061f      	lsls	r7, r3, #24
 800665e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006662:	600e      	str	r6, [r1, #0]
 8006664:	d514      	bpl.n	8006690 <_printf_i+0x1ac>
 8006666:	07d9      	lsls	r1, r3, #31
 8006668:	bf44      	itt	mi
 800666a:	f043 0320 	orrmi.w	r3, r3, #32
 800666e:	6023      	strmi	r3, [r4, #0]
 8006670:	b91d      	cbnz	r5, 800667a <_printf_i+0x196>
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	f023 0320 	bic.w	r3, r3, #32
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	2310      	movs	r3, #16
 800667c:	e7b0      	b.n	80065e0 <_printf_i+0xfc>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	f043 0320 	orr.w	r3, r3, #32
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	2378      	movs	r3, #120	; 0x78
 8006688:	4828      	ldr	r0, [pc, #160]	; (800672c <_printf_i+0x248>)
 800668a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800668e:	e7e3      	b.n	8006658 <_printf_i+0x174>
 8006690:	065e      	lsls	r6, r3, #25
 8006692:	bf48      	it	mi
 8006694:	b2ad      	uxthmi	r5, r5
 8006696:	e7e6      	b.n	8006666 <_printf_i+0x182>
 8006698:	4616      	mov	r6, r2
 800669a:	e7bb      	b.n	8006614 <_printf_i+0x130>
 800669c:	680b      	ldr	r3, [r1, #0]
 800669e:	6826      	ldr	r6, [r4, #0]
 80066a0:	6960      	ldr	r0, [r4, #20]
 80066a2:	1d1d      	adds	r5, r3, #4
 80066a4:	600d      	str	r5, [r1, #0]
 80066a6:	0635      	lsls	r5, r6, #24
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	d501      	bpl.n	80066b0 <_printf_i+0x1cc>
 80066ac:	6018      	str	r0, [r3, #0]
 80066ae:	e002      	b.n	80066b6 <_printf_i+0x1d2>
 80066b0:	0671      	lsls	r1, r6, #25
 80066b2:	d5fb      	bpl.n	80066ac <_printf_i+0x1c8>
 80066b4:	8018      	strh	r0, [r3, #0]
 80066b6:	2300      	movs	r3, #0
 80066b8:	6123      	str	r3, [r4, #16]
 80066ba:	4616      	mov	r6, r2
 80066bc:	e7ba      	b.n	8006634 <_printf_i+0x150>
 80066be:	680b      	ldr	r3, [r1, #0]
 80066c0:	1d1a      	adds	r2, r3, #4
 80066c2:	600a      	str	r2, [r1, #0]
 80066c4:	681e      	ldr	r6, [r3, #0]
 80066c6:	6862      	ldr	r2, [r4, #4]
 80066c8:	2100      	movs	r1, #0
 80066ca:	4630      	mov	r0, r6
 80066cc:	f7f9 fd80 	bl	80001d0 <memchr>
 80066d0:	b108      	cbz	r0, 80066d6 <_printf_i+0x1f2>
 80066d2:	1b80      	subs	r0, r0, r6
 80066d4:	6060      	str	r0, [r4, #4]
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	6123      	str	r3, [r4, #16]
 80066da:	2300      	movs	r3, #0
 80066dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e0:	e7a8      	b.n	8006634 <_printf_i+0x150>
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	4632      	mov	r2, r6
 80066e6:	4649      	mov	r1, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	47d0      	blx	sl
 80066ec:	3001      	adds	r0, #1
 80066ee:	d0ab      	beq.n	8006648 <_printf_i+0x164>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	079b      	lsls	r3, r3, #30
 80066f4:	d413      	bmi.n	800671e <_printf_i+0x23a>
 80066f6:	68e0      	ldr	r0, [r4, #12]
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	4298      	cmp	r0, r3
 80066fc:	bfb8      	it	lt
 80066fe:	4618      	movlt	r0, r3
 8006700:	e7a4      	b.n	800664c <_printf_i+0x168>
 8006702:	2301      	movs	r3, #1
 8006704:	4632      	mov	r2, r6
 8006706:	4649      	mov	r1, r9
 8006708:	4640      	mov	r0, r8
 800670a:	47d0      	blx	sl
 800670c:	3001      	adds	r0, #1
 800670e:	d09b      	beq.n	8006648 <_printf_i+0x164>
 8006710:	3501      	adds	r5, #1
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	9903      	ldr	r1, [sp, #12]
 8006716:	1a5b      	subs	r3, r3, r1
 8006718:	42ab      	cmp	r3, r5
 800671a:	dcf2      	bgt.n	8006702 <_printf_i+0x21e>
 800671c:	e7eb      	b.n	80066f6 <_printf_i+0x212>
 800671e:	2500      	movs	r5, #0
 8006720:	f104 0619 	add.w	r6, r4, #25
 8006724:	e7f5      	b.n	8006712 <_printf_i+0x22e>
 8006726:	bf00      	nop
 8006728:	080071f2 	.word	0x080071f2
 800672c:	08007203 	.word	0x08007203

08006730 <_sbrk_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	; (800674c <_sbrk_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fa fc6a 	bl	8001014 <_sbrk>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_sbrk_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_sbrk_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	200006a0 	.word	0x200006a0

08006750 <__swbuf_r>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	460e      	mov	r6, r1
 8006754:	4614      	mov	r4, r2
 8006756:	4605      	mov	r5, r0
 8006758:	b118      	cbz	r0, 8006762 <__swbuf_r+0x12>
 800675a:	6983      	ldr	r3, [r0, #24]
 800675c:	b90b      	cbnz	r3, 8006762 <__swbuf_r+0x12>
 800675e:	f000 f9d9 	bl	8006b14 <__sinit>
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <__swbuf_r+0x98>)
 8006764:	429c      	cmp	r4, r3
 8006766:	d12b      	bne.n	80067c0 <__swbuf_r+0x70>
 8006768:	686c      	ldr	r4, [r5, #4]
 800676a:	69a3      	ldr	r3, [r4, #24]
 800676c:	60a3      	str	r3, [r4, #8]
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	071a      	lsls	r2, r3, #28
 8006772:	d52f      	bpl.n	80067d4 <__swbuf_r+0x84>
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	b36b      	cbz	r3, 80067d4 <__swbuf_r+0x84>
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	6820      	ldr	r0, [r4, #0]
 800677c:	1ac0      	subs	r0, r0, r3
 800677e:	6963      	ldr	r3, [r4, #20]
 8006780:	b2f6      	uxtb	r6, r6
 8006782:	4283      	cmp	r3, r0
 8006784:	4637      	mov	r7, r6
 8006786:	dc04      	bgt.n	8006792 <__swbuf_r+0x42>
 8006788:	4621      	mov	r1, r4
 800678a:	4628      	mov	r0, r5
 800678c:	f000 f92e 	bl	80069ec <_fflush_r>
 8006790:	bb30      	cbnz	r0, 80067e0 <__swbuf_r+0x90>
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	3b01      	subs	r3, #1
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	6022      	str	r2, [r4, #0]
 800679e:	701e      	strb	r6, [r3, #0]
 80067a0:	6963      	ldr	r3, [r4, #20]
 80067a2:	3001      	adds	r0, #1
 80067a4:	4283      	cmp	r3, r0
 80067a6:	d004      	beq.n	80067b2 <__swbuf_r+0x62>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	07db      	lsls	r3, r3, #31
 80067ac:	d506      	bpl.n	80067bc <__swbuf_r+0x6c>
 80067ae:	2e0a      	cmp	r6, #10
 80067b0:	d104      	bne.n	80067bc <__swbuf_r+0x6c>
 80067b2:	4621      	mov	r1, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 f919 	bl	80069ec <_fflush_r>
 80067ba:	b988      	cbnz	r0, 80067e0 <__swbuf_r+0x90>
 80067bc:	4638      	mov	r0, r7
 80067be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <__swbuf_r+0x9c>)
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d101      	bne.n	80067ca <__swbuf_r+0x7a>
 80067c6:	68ac      	ldr	r4, [r5, #8]
 80067c8:	e7cf      	b.n	800676a <__swbuf_r+0x1a>
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <__swbuf_r+0xa0>)
 80067cc:	429c      	cmp	r4, r3
 80067ce:	bf08      	it	eq
 80067d0:	68ec      	ldreq	r4, [r5, #12]
 80067d2:	e7ca      	b.n	800676a <__swbuf_r+0x1a>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 f80c 	bl	80067f4 <__swsetup_r>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d0cb      	beq.n	8006778 <__swbuf_r+0x28>
 80067e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80067e4:	e7ea      	b.n	80067bc <__swbuf_r+0x6c>
 80067e6:	bf00      	nop
 80067e8:	08007234 	.word	0x08007234
 80067ec:	08007254 	.word	0x08007254
 80067f0:	08007214 	.word	0x08007214

080067f4 <__swsetup_r>:
 80067f4:	4b32      	ldr	r3, [pc, #200]	; (80068c0 <__swsetup_r+0xcc>)
 80067f6:	b570      	push	{r4, r5, r6, lr}
 80067f8:	681d      	ldr	r5, [r3, #0]
 80067fa:	4606      	mov	r6, r0
 80067fc:	460c      	mov	r4, r1
 80067fe:	b125      	cbz	r5, 800680a <__swsetup_r+0x16>
 8006800:	69ab      	ldr	r3, [r5, #24]
 8006802:	b913      	cbnz	r3, 800680a <__swsetup_r+0x16>
 8006804:	4628      	mov	r0, r5
 8006806:	f000 f985 	bl	8006b14 <__sinit>
 800680a:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <__swsetup_r+0xd0>)
 800680c:	429c      	cmp	r4, r3
 800680e:	d10f      	bne.n	8006830 <__swsetup_r+0x3c>
 8006810:	686c      	ldr	r4, [r5, #4]
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006818:	0719      	lsls	r1, r3, #28
 800681a:	d42c      	bmi.n	8006876 <__swsetup_r+0x82>
 800681c:	06dd      	lsls	r5, r3, #27
 800681e:	d411      	bmi.n	8006844 <__swsetup_r+0x50>
 8006820:	2309      	movs	r3, #9
 8006822:	6033      	str	r3, [r6, #0]
 8006824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800682e:	e03e      	b.n	80068ae <__swsetup_r+0xba>
 8006830:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <__swsetup_r+0xd4>)
 8006832:	429c      	cmp	r4, r3
 8006834:	d101      	bne.n	800683a <__swsetup_r+0x46>
 8006836:	68ac      	ldr	r4, [r5, #8]
 8006838:	e7eb      	b.n	8006812 <__swsetup_r+0x1e>
 800683a:	4b24      	ldr	r3, [pc, #144]	; (80068cc <__swsetup_r+0xd8>)
 800683c:	429c      	cmp	r4, r3
 800683e:	bf08      	it	eq
 8006840:	68ec      	ldreq	r4, [r5, #12]
 8006842:	e7e6      	b.n	8006812 <__swsetup_r+0x1e>
 8006844:	0758      	lsls	r0, r3, #29
 8006846:	d512      	bpl.n	800686e <__swsetup_r+0x7a>
 8006848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800684a:	b141      	cbz	r1, 800685e <__swsetup_r+0x6a>
 800684c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006850:	4299      	cmp	r1, r3
 8006852:	d002      	beq.n	800685a <__swsetup_r+0x66>
 8006854:	4630      	mov	r0, r6
 8006856:	f7ff fa77 	bl	8005d48 <_free_r>
 800685a:	2300      	movs	r3, #0
 800685c:	6363      	str	r3, [r4, #52]	; 0x34
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	2300      	movs	r3, #0
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	f043 0308 	orr.w	r3, r3, #8
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	b94b      	cbnz	r3, 800688e <__swsetup_r+0x9a>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006884:	d003      	beq.n	800688e <__swsetup_r+0x9a>
 8006886:	4621      	mov	r1, r4
 8006888:	4630      	mov	r0, r6
 800688a:	f000 fa07 	bl	8006c9c <__smakebuf_r>
 800688e:	89a0      	ldrh	r0, [r4, #12]
 8006890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006894:	f010 0301 	ands.w	r3, r0, #1
 8006898:	d00a      	beq.n	80068b0 <__swsetup_r+0xbc>
 800689a:	2300      	movs	r3, #0
 800689c:	60a3      	str	r3, [r4, #8]
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	425b      	negs	r3, r3
 80068a2:	61a3      	str	r3, [r4, #24]
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	b943      	cbnz	r3, 80068ba <__swsetup_r+0xc6>
 80068a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068ac:	d1ba      	bne.n	8006824 <__swsetup_r+0x30>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	0781      	lsls	r1, r0, #30
 80068b2:	bf58      	it	pl
 80068b4:	6963      	ldrpl	r3, [r4, #20]
 80068b6:	60a3      	str	r3, [r4, #8]
 80068b8:	e7f4      	b.n	80068a4 <__swsetup_r+0xb0>
 80068ba:	2000      	movs	r0, #0
 80068bc:	e7f7      	b.n	80068ae <__swsetup_r+0xba>
 80068be:	bf00      	nop
 80068c0:	20000020 	.word	0x20000020
 80068c4:	08007234 	.word	0x08007234
 80068c8:	08007254 	.word	0x08007254
 80068cc:	08007214 	.word	0x08007214

080068d0 <abort>:
 80068d0:	b508      	push	{r3, lr}
 80068d2:	2006      	movs	r0, #6
 80068d4:	f000 fa96 	bl	8006e04 <raise>
 80068d8:	2001      	movs	r0, #1
 80068da:	f7fa fb23 	bl	8000f24 <_exit>
	...

080068e0 <__sflush_r>:
 80068e0:	898a      	ldrh	r2, [r1, #12]
 80068e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e6:	4605      	mov	r5, r0
 80068e8:	0710      	lsls	r0, r2, #28
 80068ea:	460c      	mov	r4, r1
 80068ec:	d458      	bmi.n	80069a0 <__sflush_r+0xc0>
 80068ee:	684b      	ldr	r3, [r1, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dc05      	bgt.n	8006900 <__sflush_r+0x20>
 80068f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dc02      	bgt.n	8006900 <__sflush_r+0x20>
 80068fa:	2000      	movs	r0, #0
 80068fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006902:	2e00      	cmp	r6, #0
 8006904:	d0f9      	beq.n	80068fa <__sflush_r+0x1a>
 8006906:	2300      	movs	r3, #0
 8006908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800690c:	682f      	ldr	r7, [r5, #0]
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	d032      	beq.n	8006978 <__sflush_r+0x98>
 8006912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	075a      	lsls	r2, r3, #29
 8006918:	d505      	bpl.n	8006926 <__sflush_r+0x46>
 800691a:	6863      	ldr	r3, [r4, #4]
 800691c:	1ac0      	subs	r0, r0, r3
 800691e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006920:	b10b      	cbz	r3, 8006926 <__sflush_r+0x46>
 8006922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006924:	1ac0      	subs	r0, r0, r3
 8006926:	2300      	movs	r3, #0
 8006928:	4602      	mov	r2, r0
 800692a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800692c:	6a21      	ldr	r1, [r4, #32]
 800692e:	4628      	mov	r0, r5
 8006930:	47b0      	blx	r6
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	d106      	bne.n	8006946 <__sflush_r+0x66>
 8006938:	6829      	ldr	r1, [r5, #0]
 800693a:	291d      	cmp	r1, #29
 800693c:	d82c      	bhi.n	8006998 <__sflush_r+0xb8>
 800693e:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <__sflush_r+0x108>)
 8006940:	40ca      	lsrs	r2, r1
 8006942:	07d6      	lsls	r6, r2, #31
 8006944:	d528      	bpl.n	8006998 <__sflush_r+0xb8>
 8006946:	2200      	movs	r2, #0
 8006948:	6062      	str	r2, [r4, #4]
 800694a:	04d9      	lsls	r1, r3, #19
 800694c:	6922      	ldr	r2, [r4, #16]
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	d504      	bpl.n	800695c <__sflush_r+0x7c>
 8006952:	1c42      	adds	r2, r0, #1
 8006954:	d101      	bne.n	800695a <__sflush_r+0x7a>
 8006956:	682b      	ldr	r3, [r5, #0]
 8006958:	b903      	cbnz	r3, 800695c <__sflush_r+0x7c>
 800695a:	6560      	str	r0, [r4, #84]	; 0x54
 800695c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695e:	602f      	str	r7, [r5, #0]
 8006960:	2900      	cmp	r1, #0
 8006962:	d0ca      	beq.n	80068fa <__sflush_r+0x1a>
 8006964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006968:	4299      	cmp	r1, r3
 800696a:	d002      	beq.n	8006972 <__sflush_r+0x92>
 800696c:	4628      	mov	r0, r5
 800696e:	f7ff f9eb 	bl	8005d48 <_free_r>
 8006972:	2000      	movs	r0, #0
 8006974:	6360      	str	r0, [r4, #52]	; 0x34
 8006976:	e7c1      	b.n	80068fc <__sflush_r+0x1c>
 8006978:	6a21      	ldr	r1, [r4, #32]
 800697a:	2301      	movs	r3, #1
 800697c:	4628      	mov	r0, r5
 800697e:	47b0      	blx	r6
 8006980:	1c41      	adds	r1, r0, #1
 8006982:	d1c7      	bne.n	8006914 <__sflush_r+0x34>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0c4      	beq.n	8006914 <__sflush_r+0x34>
 800698a:	2b1d      	cmp	r3, #29
 800698c:	d001      	beq.n	8006992 <__sflush_r+0xb2>
 800698e:	2b16      	cmp	r3, #22
 8006990:	d101      	bne.n	8006996 <__sflush_r+0xb6>
 8006992:	602f      	str	r7, [r5, #0]
 8006994:	e7b1      	b.n	80068fa <__sflush_r+0x1a>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	e7ad      	b.n	80068fc <__sflush_r+0x1c>
 80069a0:	690f      	ldr	r7, [r1, #16]
 80069a2:	2f00      	cmp	r7, #0
 80069a4:	d0a9      	beq.n	80068fa <__sflush_r+0x1a>
 80069a6:	0793      	lsls	r3, r2, #30
 80069a8:	680e      	ldr	r6, [r1, #0]
 80069aa:	bf08      	it	eq
 80069ac:	694b      	ldreq	r3, [r1, #20]
 80069ae:	600f      	str	r7, [r1, #0]
 80069b0:	bf18      	it	ne
 80069b2:	2300      	movne	r3, #0
 80069b4:	eba6 0807 	sub.w	r8, r6, r7
 80069b8:	608b      	str	r3, [r1, #8]
 80069ba:	f1b8 0f00 	cmp.w	r8, #0
 80069be:	dd9c      	ble.n	80068fa <__sflush_r+0x1a>
 80069c0:	6a21      	ldr	r1, [r4, #32]
 80069c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069c4:	4643      	mov	r3, r8
 80069c6:	463a      	mov	r2, r7
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b0      	blx	r6
 80069cc:	2800      	cmp	r0, #0
 80069ce:	dc06      	bgt.n	80069de <__sflush_r+0xfe>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069dc:	e78e      	b.n	80068fc <__sflush_r+0x1c>
 80069de:	4407      	add	r7, r0
 80069e0:	eba8 0800 	sub.w	r8, r8, r0
 80069e4:	e7e9      	b.n	80069ba <__sflush_r+0xda>
 80069e6:	bf00      	nop
 80069e8:	20400001 	.word	0x20400001

080069ec <_fflush_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	690b      	ldr	r3, [r1, #16]
 80069f0:	4605      	mov	r5, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	b913      	cbnz	r3, 80069fc <_fflush_r+0x10>
 80069f6:	2500      	movs	r5, #0
 80069f8:	4628      	mov	r0, r5
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	b118      	cbz	r0, 8006a06 <_fflush_r+0x1a>
 80069fe:	6983      	ldr	r3, [r0, #24]
 8006a00:	b90b      	cbnz	r3, 8006a06 <_fflush_r+0x1a>
 8006a02:	f000 f887 	bl	8006b14 <__sinit>
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <_fflush_r+0x6c>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d11b      	bne.n	8006a44 <_fflush_r+0x58>
 8006a0c:	686c      	ldr	r4, [r5, #4]
 8006a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0ef      	beq.n	80069f6 <_fflush_r+0xa>
 8006a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a18:	07d0      	lsls	r0, r2, #31
 8006a1a:	d404      	bmi.n	8006a26 <_fflush_r+0x3a>
 8006a1c:	0599      	lsls	r1, r3, #22
 8006a1e:	d402      	bmi.n	8006a26 <_fflush_r+0x3a>
 8006a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a22:	f000 f915 	bl	8006c50 <__retarget_lock_acquire_recursive>
 8006a26:	4628      	mov	r0, r5
 8006a28:	4621      	mov	r1, r4
 8006a2a:	f7ff ff59 	bl	80068e0 <__sflush_r>
 8006a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a30:	07da      	lsls	r2, r3, #31
 8006a32:	4605      	mov	r5, r0
 8006a34:	d4e0      	bmi.n	80069f8 <_fflush_r+0xc>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	059b      	lsls	r3, r3, #22
 8006a3a:	d4dd      	bmi.n	80069f8 <_fflush_r+0xc>
 8006a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3e:	f000 f908 	bl	8006c52 <__retarget_lock_release_recursive>
 8006a42:	e7d9      	b.n	80069f8 <_fflush_r+0xc>
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <_fflush_r+0x70>)
 8006a46:	429c      	cmp	r4, r3
 8006a48:	d101      	bne.n	8006a4e <_fflush_r+0x62>
 8006a4a:	68ac      	ldr	r4, [r5, #8]
 8006a4c:	e7df      	b.n	8006a0e <_fflush_r+0x22>
 8006a4e:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <_fflush_r+0x74>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	bf08      	it	eq
 8006a54:	68ec      	ldreq	r4, [r5, #12]
 8006a56:	e7da      	b.n	8006a0e <_fflush_r+0x22>
 8006a58:	08007234 	.word	0x08007234
 8006a5c:	08007254 	.word	0x08007254
 8006a60:	08007214 	.word	0x08007214

08006a64 <std>:
 8006a64:	2300      	movs	r3, #0
 8006a66:	b510      	push	{r4, lr}
 8006a68:	4604      	mov	r4, r0
 8006a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a72:	6083      	str	r3, [r0, #8]
 8006a74:	8181      	strh	r1, [r0, #12]
 8006a76:	6643      	str	r3, [r0, #100]	; 0x64
 8006a78:	81c2      	strh	r2, [r0, #14]
 8006a7a:	6183      	str	r3, [r0, #24]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	2208      	movs	r2, #8
 8006a80:	305c      	adds	r0, #92	; 0x5c
 8006a82:	f7ff f817 	bl	8005ab4 <memset>
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <std+0x38>)
 8006a88:	6263      	str	r3, [r4, #36]	; 0x24
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <std+0x3c>)
 8006a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <std+0x40>)
 8006a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <std+0x44>)
 8006a94:	6224      	str	r4, [r4, #32]
 8006a96:	6323      	str	r3, [r4, #48]	; 0x30
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08006e3d 	.word	0x08006e3d
 8006aa0:	08006e5f 	.word	0x08006e5f
 8006aa4:	08006e97 	.word	0x08006e97
 8006aa8:	08006ebb 	.word	0x08006ebb

08006aac <_cleanup_r>:
 8006aac:	4901      	ldr	r1, [pc, #4]	; (8006ab4 <_cleanup_r+0x8>)
 8006aae:	f000 b8af 	b.w	8006c10 <_fwalk_reent>
 8006ab2:	bf00      	nop
 8006ab4:	080069ed 	.word	0x080069ed

08006ab8 <__sfmoreglue>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	1e4a      	subs	r2, r1, #1
 8006abc:	2568      	movs	r5, #104	; 0x68
 8006abe:	4355      	muls	r5, r2
 8006ac0:	460e      	mov	r6, r1
 8006ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ac6:	f7ff f98f 	bl	8005de8 <_malloc_r>
 8006aca:	4604      	mov	r4, r0
 8006acc:	b140      	cbz	r0, 8006ae0 <__sfmoreglue+0x28>
 8006ace:	2100      	movs	r1, #0
 8006ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ad4:	300c      	adds	r0, #12
 8006ad6:	60a0      	str	r0, [r4, #8]
 8006ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006adc:	f7fe ffea 	bl	8005ab4 <memset>
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}

08006ae4 <__sfp_lock_acquire>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	; (8006aec <__sfp_lock_acquire+0x8>)
 8006ae6:	f000 b8b3 	b.w	8006c50 <__retarget_lock_acquire_recursive>
 8006aea:	bf00      	nop
 8006aec:	2000069c 	.word	0x2000069c

08006af0 <__sfp_lock_release>:
 8006af0:	4801      	ldr	r0, [pc, #4]	; (8006af8 <__sfp_lock_release+0x8>)
 8006af2:	f000 b8ae 	b.w	8006c52 <__retarget_lock_release_recursive>
 8006af6:	bf00      	nop
 8006af8:	2000069c 	.word	0x2000069c

08006afc <__sinit_lock_acquire>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__sinit_lock_acquire+0x8>)
 8006afe:	f000 b8a7 	b.w	8006c50 <__retarget_lock_acquire_recursive>
 8006b02:	bf00      	nop
 8006b04:	20000697 	.word	0x20000697

08006b08 <__sinit_lock_release>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__sinit_lock_release+0x8>)
 8006b0a:	f000 b8a2 	b.w	8006c52 <__retarget_lock_release_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20000697 	.word	0x20000697

08006b14 <__sinit>:
 8006b14:	b510      	push	{r4, lr}
 8006b16:	4604      	mov	r4, r0
 8006b18:	f7ff fff0 	bl	8006afc <__sinit_lock_acquire>
 8006b1c:	69a3      	ldr	r3, [r4, #24]
 8006b1e:	b11b      	cbz	r3, 8006b28 <__sinit+0x14>
 8006b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b24:	f7ff bff0 	b.w	8006b08 <__sinit_lock_release>
 8006b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b2e:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <__sinit+0x68>)
 8006b30:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <__sinit+0x6c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b36:	42a3      	cmp	r3, r4
 8006b38:	bf04      	itt	eq
 8006b3a:	2301      	moveq	r3, #1
 8006b3c:	61a3      	streq	r3, [r4, #24]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f000 f820 	bl	8006b84 <__sfp>
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 f81c 	bl	8006b84 <__sfp>
 8006b4c:	60a0      	str	r0, [r4, #8]
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 f818 	bl	8006b84 <__sfp>
 8006b54:	2200      	movs	r2, #0
 8006b56:	60e0      	str	r0, [r4, #12]
 8006b58:	2104      	movs	r1, #4
 8006b5a:	6860      	ldr	r0, [r4, #4]
 8006b5c:	f7ff ff82 	bl	8006a64 <std>
 8006b60:	68a0      	ldr	r0, [r4, #8]
 8006b62:	2201      	movs	r2, #1
 8006b64:	2109      	movs	r1, #9
 8006b66:	f7ff ff7d 	bl	8006a64 <std>
 8006b6a:	68e0      	ldr	r0, [r4, #12]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	2112      	movs	r1, #18
 8006b70:	f7ff ff78 	bl	8006a64 <std>
 8006b74:	2301      	movs	r3, #1
 8006b76:	61a3      	str	r3, [r4, #24]
 8006b78:	e7d2      	b.n	8006b20 <__sinit+0xc>
 8006b7a:	bf00      	nop
 8006b7c:	08007028 	.word	0x08007028
 8006b80:	08006aad 	.word	0x08006aad

08006b84 <__sfp>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	4607      	mov	r7, r0
 8006b88:	f7ff ffac 	bl	8006ae4 <__sfp_lock_acquire>
 8006b8c:	4b1e      	ldr	r3, [pc, #120]	; (8006c08 <__sfp+0x84>)
 8006b8e:	681e      	ldr	r6, [r3, #0]
 8006b90:	69b3      	ldr	r3, [r6, #24]
 8006b92:	b913      	cbnz	r3, 8006b9a <__sfp+0x16>
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff ffbd 	bl	8006b14 <__sinit>
 8006b9a:	3648      	adds	r6, #72	; 0x48
 8006b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	d503      	bpl.n	8006bac <__sfp+0x28>
 8006ba4:	6833      	ldr	r3, [r6, #0]
 8006ba6:	b30b      	cbz	r3, 8006bec <__sfp+0x68>
 8006ba8:	6836      	ldr	r6, [r6, #0]
 8006baa:	e7f7      	b.n	8006b9c <__sfp+0x18>
 8006bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bb0:	b9d5      	cbnz	r5, 8006be8 <__sfp+0x64>
 8006bb2:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <__sfp+0x88>)
 8006bb4:	60e3      	str	r3, [r4, #12]
 8006bb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bba:	6665      	str	r5, [r4, #100]	; 0x64
 8006bbc:	f000 f847 	bl	8006c4e <__retarget_lock_init_recursive>
 8006bc0:	f7ff ff96 	bl	8006af0 <__sfp_lock_release>
 8006bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bcc:	6025      	str	r5, [r4, #0]
 8006bce:	61a5      	str	r5, [r4, #24]
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bd8:	f7fe ff6c 	bl	8005ab4 <memset>
 8006bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006be4:	4620      	mov	r0, r4
 8006be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be8:	3468      	adds	r4, #104	; 0x68
 8006bea:	e7d9      	b.n	8006ba0 <__sfp+0x1c>
 8006bec:	2104      	movs	r1, #4
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7ff ff62 	bl	8006ab8 <__sfmoreglue>
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	6030      	str	r0, [r6, #0]
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d1d5      	bne.n	8006ba8 <__sfp+0x24>
 8006bfc:	f7ff ff78 	bl	8006af0 <__sfp_lock_release>
 8006c00:	230c      	movs	r3, #12
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	e7ee      	b.n	8006be4 <__sfp+0x60>
 8006c06:	bf00      	nop
 8006c08:	08007028 	.word	0x08007028
 8006c0c:	ffff0001 	.word	0xffff0001

08006c10 <_fwalk_reent>:
 8006c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c14:	4606      	mov	r6, r0
 8006c16:	4688      	mov	r8, r1
 8006c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c1c:	2700      	movs	r7, #0
 8006c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c22:	f1b9 0901 	subs.w	r9, r9, #1
 8006c26:	d505      	bpl.n	8006c34 <_fwalk_reent+0x24>
 8006c28:	6824      	ldr	r4, [r4, #0]
 8006c2a:	2c00      	cmp	r4, #0
 8006c2c:	d1f7      	bne.n	8006c1e <_fwalk_reent+0xe>
 8006c2e:	4638      	mov	r0, r7
 8006c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c34:	89ab      	ldrh	r3, [r5, #12]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d907      	bls.n	8006c4a <_fwalk_reent+0x3a>
 8006c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	d003      	beq.n	8006c4a <_fwalk_reent+0x3a>
 8006c42:	4629      	mov	r1, r5
 8006c44:	4630      	mov	r0, r6
 8006c46:	47c0      	blx	r8
 8006c48:	4307      	orrs	r7, r0
 8006c4a:	3568      	adds	r5, #104	; 0x68
 8006c4c:	e7e9      	b.n	8006c22 <_fwalk_reent+0x12>

08006c4e <__retarget_lock_init_recursive>:
 8006c4e:	4770      	bx	lr

08006c50 <__retarget_lock_acquire_recursive>:
 8006c50:	4770      	bx	lr

08006c52 <__retarget_lock_release_recursive>:
 8006c52:	4770      	bx	lr

08006c54 <__swhatbuf_r>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	460e      	mov	r6, r1
 8006c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	b096      	sub	sp, #88	; 0x58
 8006c60:	4614      	mov	r4, r2
 8006c62:	461d      	mov	r5, r3
 8006c64:	da07      	bge.n	8006c76 <__swhatbuf_r+0x22>
 8006c66:	2300      	movs	r3, #0
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	89b3      	ldrh	r3, [r6, #12]
 8006c6c:	061a      	lsls	r2, r3, #24
 8006c6e:	d410      	bmi.n	8006c92 <__swhatbuf_r+0x3e>
 8006c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c74:	e00e      	b.n	8006c94 <__swhatbuf_r+0x40>
 8006c76:	466a      	mov	r2, sp
 8006c78:	f000 f946 	bl	8006f08 <_fstat_r>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	dbf2      	blt.n	8006c66 <__swhatbuf_r+0x12>
 8006c80:	9a01      	ldr	r2, [sp, #4]
 8006c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c8a:	425a      	negs	r2, r3
 8006c8c:	415a      	adcs	r2, r3
 8006c8e:	602a      	str	r2, [r5, #0]
 8006c90:	e7ee      	b.n	8006c70 <__swhatbuf_r+0x1c>
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	2000      	movs	r0, #0
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	b016      	add	sp, #88	; 0x58
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}

08006c9c <__smakebuf_r>:
 8006c9c:	898b      	ldrh	r3, [r1, #12]
 8006c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ca0:	079d      	lsls	r5, r3, #30
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	d507      	bpl.n	8006cb8 <__smakebuf_r+0x1c>
 8006ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6163      	str	r3, [r4, #20]
 8006cb4:	b002      	add	sp, #8
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	ab01      	add	r3, sp, #4
 8006cba:	466a      	mov	r2, sp
 8006cbc:	f7ff ffca 	bl	8006c54 <__swhatbuf_r>
 8006cc0:	9900      	ldr	r1, [sp, #0]
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f7ff f88f 	bl	8005de8 <_malloc_r>
 8006cca:	b948      	cbnz	r0, 8006ce0 <__smakebuf_r+0x44>
 8006ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd0:	059a      	lsls	r2, r3, #22
 8006cd2:	d4ef      	bmi.n	8006cb4 <__smakebuf_r+0x18>
 8006cd4:	f023 0303 	bic.w	r3, r3, #3
 8006cd8:	f043 0302 	orr.w	r3, r3, #2
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	e7e3      	b.n	8006ca8 <__smakebuf_r+0xc>
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <__smakebuf_r+0x7c>)
 8006ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	6020      	str	r0, [r4, #0]
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	6163      	str	r3, [r4, #20]
 8006cf2:	9b01      	ldr	r3, [sp, #4]
 8006cf4:	6120      	str	r0, [r4, #16]
 8006cf6:	b15b      	cbz	r3, 8006d10 <__smakebuf_r+0x74>
 8006cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 f915 	bl	8006f2c <_isatty_r>
 8006d02:	b128      	cbz	r0, 8006d10 <__smakebuf_r+0x74>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	89a0      	ldrh	r0, [r4, #12]
 8006d12:	4305      	orrs	r5, r0
 8006d14:	81a5      	strh	r5, [r4, #12]
 8006d16:	e7cd      	b.n	8006cb4 <__smakebuf_r+0x18>
 8006d18:	08006aad 	.word	0x08006aad

08006d1c <memmove>:
 8006d1c:	4288      	cmp	r0, r1
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	eb01 0402 	add.w	r4, r1, r2
 8006d24:	d902      	bls.n	8006d2c <memmove+0x10>
 8006d26:	4284      	cmp	r4, r0
 8006d28:	4623      	mov	r3, r4
 8006d2a:	d807      	bhi.n	8006d3c <memmove+0x20>
 8006d2c:	1e43      	subs	r3, r0, #1
 8006d2e:	42a1      	cmp	r1, r4
 8006d30:	d008      	beq.n	8006d44 <memmove+0x28>
 8006d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d3a:	e7f8      	b.n	8006d2e <memmove+0x12>
 8006d3c:	4402      	add	r2, r0
 8006d3e:	4601      	mov	r1, r0
 8006d40:	428a      	cmp	r2, r1
 8006d42:	d100      	bne.n	8006d46 <memmove+0x2a>
 8006d44:	bd10      	pop	{r4, pc}
 8006d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d4e:	e7f7      	b.n	8006d40 <memmove+0x24>

08006d50 <__malloc_lock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__malloc_lock+0x8>)
 8006d52:	f7ff bf7d 	b.w	8006c50 <__retarget_lock_acquire_recursive>
 8006d56:	bf00      	nop
 8006d58:	20000698 	.word	0x20000698

08006d5c <__malloc_unlock>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__malloc_unlock+0x8>)
 8006d5e:	f7ff bf78 	b.w	8006c52 <__retarget_lock_release_recursive>
 8006d62:	bf00      	nop
 8006d64:	20000698 	.word	0x20000698

08006d68 <_realloc_r>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	4607      	mov	r7, r0
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	460e      	mov	r6, r1
 8006d70:	b921      	cbnz	r1, 8006d7c <_realloc_r+0x14>
 8006d72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d76:	4611      	mov	r1, r2
 8006d78:	f7ff b836 	b.w	8005de8 <_malloc_r>
 8006d7c:	b922      	cbnz	r2, 8006d88 <_realloc_r+0x20>
 8006d7e:	f7fe ffe3 	bl	8005d48 <_free_r>
 8006d82:	4625      	mov	r5, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d88:	f000 f8f2 	bl	8006f70 <_malloc_usable_size_r>
 8006d8c:	42a0      	cmp	r0, r4
 8006d8e:	d20f      	bcs.n	8006db0 <_realloc_r+0x48>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7ff f828 	bl	8005de8 <_malloc_r>
 8006d98:	4605      	mov	r5, r0
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d0f2      	beq.n	8006d84 <_realloc_r+0x1c>
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4622      	mov	r2, r4
 8006da2:	f7fe fe79 	bl	8005a98 <memcpy>
 8006da6:	4631      	mov	r1, r6
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7fe ffcd 	bl	8005d48 <_free_r>
 8006dae:	e7e9      	b.n	8006d84 <_realloc_r+0x1c>
 8006db0:	4635      	mov	r5, r6
 8006db2:	e7e7      	b.n	8006d84 <_realloc_r+0x1c>

08006db4 <_raise_r>:
 8006db4:	291f      	cmp	r1, #31
 8006db6:	b538      	push	{r3, r4, r5, lr}
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	d904      	bls.n	8006dc8 <_raise_r+0x14>
 8006dbe:	2316      	movs	r3, #22
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006dca:	b112      	cbz	r2, 8006dd2 <_raise_r+0x1e>
 8006dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dd0:	b94b      	cbnz	r3, 8006de6 <_raise_r+0x32>
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f830 	bl	8006e38 <_getpid_r>
 8006dd8:	462a      	mov	r2, r5
 8006dda:	4601      	mov	r1, r0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006de2:	f000 b817 	b.w	8006e14 <_kill_r>
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d00a      	beq.n	8006e00 <_raise_r+0x4c>
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	d103      	bne.n	8006df6 <_raise_r+0x42>
 8006dee:	2316      	movs	r3, #22
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	2001      	movs	r0, #1
 8006df4:	e7e7      	b.n	8006dc6 <_raise_r+0x12>
 8006df6:	2400      	movs	r4, #0
 8006df8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	4798      	blx	r3
 8006e00:	2000      	movs	r0, #0
 8006e02:	e7e0      	b.n	8006dc6 <_raise_r+0x12>

08006e04 <raise>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <raise+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f7ff bfd3 	b.w	8006db4 <_raise_r>
 8006e0e:	bf00      	nop
 8006e10:	20000020 	.word	0x20000020

08006e14 <_kill_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4d07      	ldr	r5, [pc, #28]	; (8006e34 <_kill_r+0x20>)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	602b      	str	r3, [r5, #0]
 8006e22:	f7fa f86f 	bl	8000f04 <_kill>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d102      	bne.n	8006e30 <_kill_r+0x1c>
 8006e2a:	682b      	ldr	r3, [r5, #0]
 8006e2c:	b103      	cbz	r3, 8006e30 <_kill_r+0x1c>
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
 8006e32:	bf00      	nop
 8006e34:	200006a0 	.word	0x200006a0

08006e38 <_getpid_r>:
 8006e38:	f7fa b85c 	b.w	8000ef4 <_getpid>

08006e3c <__sread>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	460c      	mov	r4, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	f000 f89c 	bl	8006f80 <_read_r>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	bfab      	itete	ge
 8006e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e50:	181b      	addge	r3, r3, r0
 8006e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e56:	bfac      	ite	ge
 8006e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e5a:	81a3      	strhlt	r3, [r4, #12]
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <__swrite>:
 8006e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	461f      	mov	r7, r3
 8006e64:	898b      	ldrh	r3, [r1, #12]
 8006e66:	05db      	lsls	r3, r3, #23
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	d505      	bpl.n	8006e7c <__swrite+0x1e>
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	2302      	movs	r3, #2
 8006e76:	2200      	movs	r2, #0
 8006e78:	f000 f868 	bl	8006f4c <_lseek_r>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	f000 b817 	b.w	8006ec4 <_write_r>

08006e96 <__sseek>:
 8006e96:	b510      	push	{r4, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9e:	f000 f855 	bl	8006f4c <_lseek_r>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	bf15      	itete	ne
 8006ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006eb2:	81a3      	strheq	r3, [r4, #12]
 8006eb4:	bf18      	it	ne
 8006eb6:	81a3      	strhne	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__sclose>:
 8006eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebe:	f000 b813 	b.w	8006ee8 <_close_r>
	...

08006ec4 <_write_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	; (8006ee4 <_write_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fa f84d 	bl	8000f72 <_write>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_write_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_write_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	200006a0 	.word	0x200006a0

08006ee8 <_close_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d06      	ldr	r5, [pc, #24]	; (8006f04 <_close_r+0x1c>)
 8006eec:	2300      	movs	r3, #0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	f7fa f859 	bl	8000faa <_close>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_close_r+0x1a>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_close_r+0x1a>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	200006a0 	.word	0x200006a0

08006f08 <_fstat_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	; (8006f28 <_fstat_r+0x20>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	f7fa f854 	bl	8000fc2 <_fstat>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	d102      	bne.n	8006f24 <_fstat_r+0x1c>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	b103      	cbz	r3, 8006f24 <_fstat_r+0x1c>
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	bd38      	pop	{r3, r4, r5, pc}
 8006f26:	bf00      	nop
 8006f28:	200006a0 	.word	0x200006a0

08006f2c <_isatty_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d06      	ldr	r5, [pc, #24]	; (8006f48 <_isatty_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7fa f853 	bl	8000fe2 <_isatty>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_isatty_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_isatty_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	200006a0 	.word	0x200006a0

08006f4c <_lseek_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_lseek_r+0x20>)
 8006f50:	4604      	mov	r4, r0
 8006f52:	4608      	mov	r0, r1
 8006f54:	4611      	mov	r1, r2
 8006f56:	2200      	movs	r2, #0
 8006f58:	602a      	str	r2, [r5, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f7fa f84c 	bl	8000ff8 <_lseek>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_lseek_r+0x1e>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_lseek_r+0x1e>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	200006a0 	.word	0x200006a0

08006f70 <_malloc_usable_size_r>:
 8006f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f74:	1f18      	subs	r0, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbc      	itt	lt
 8006f7a:	580b      	ldrlt	r3, [r1, r0]
 8006f7c:	18c0      	addlt	r0, r0, r3
 8006f7e:	4770      	bx	lr

08006f80 <_read_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d07      	ldr	r5, [pc, #28]	; (8006fa0 <_read_r+0x20>)
 8006f84:	4604      	mov	r4, r0
 8006f86:	4608      	mov	r0, r1
 8006f88:	4611      	mov	r1, r2
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7f9 ffd2 	bl	8000f38 <_read>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_read_r+0x1e>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_read_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	200006a0 	.word	0x200006a0

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
