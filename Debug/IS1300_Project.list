
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009180  08009180  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009188  08009188  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000084  08009214  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08009214  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028efd  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000471a  00000000  00000000  00048fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  0004d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  0004f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d3a6  00000000  00000000  00050f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002282f  00000000  00000000  0007e33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011aece  00000000  00000000  000a0b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bba3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008854  00000000  00000000  001bba90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e7c 	.word	0x08008e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08008e7c 	.word	0x08008e7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe0>)
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_ADC1_Init+0xe4>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005fc:	f001 fa60 	bl	8001ac0 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000606:	f000 fa23 	bl	8000a50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000616:	f002 faad 	bl	8002b74 <HAL_ADCEx_MultiModeConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fa16 	bl	8000a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_ADC1_Init+0xe8>)
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2306      	movs	r3, #6
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000630:	237f      	movs	r3, #127	; 0x7f
 8000632:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000642:	f001 fd33 	bl	80020ac <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800064c:	f000 fa00 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000538 	.word	0x20000538
 800065c:	50040000 	.word	0x50040000
 8000660:	43210000 	.word	0x43210000

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f007 f93f 	bl	8007908 <memset>
  if(adcHandle->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_ADC_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d146      	bne.n	8000722 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800069a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fcab 	bl	8004020 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006d0:	f000 f9be 	bl	8000a50 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_ADC_MspInit+0xd0>)
 800071e:	f002 fc3b 	bl	8002f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000722:	bf00      	nop
 8000724:	37b0      	adds	r7, #176	; 0xb0
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	50040000 	.word	0x50040000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <adc_read_pot>:
/**
 * @brief Reads the analog voltage of the potentimeter located on the shield
 * and returns a digital conversion.
 * @param buffer: the location to store the value retrieved, 4 pieces.
 */
void adc_read_pot(uint8_t *buffer) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    uint16_t voltage_level;

    HAL_ADC_Start(&hadc1);
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <adc_read_pot+0x3c>)
 8000742:	f001 fb13 	bl	8001d6c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 2);
 8000746:	2102      	movs	r1, #2
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <adc_read_pot+0x3c>)
 800074a:	f001 fbc9 	bl	8001ee0 <HAL_ADC_PollForConversion>
    voltage_level = HAL_ADC_GetValue(&hadc1);
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <adc_read_pot+0x3c>)
 8000750:	f001 fc9e 	bl	8002090 <HAL_ADC_GetValue>
 8000754:	4603      	mov	r3, r0
 8000756:	81fb      	strh	r3, [r7, #14]
    char temp[4];
    itoa(voltage_level, temp, 10);
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	f107 0108 	add.w	r1, r7, #8
 800075e:	220a      	movs	r2, #10
 8000760:	4618      	mov	r0, r3
 8000762:	f007 f8c1 	bl	80078e8 <itoa>
 8000766:	68ba      	ldr	r2, [r7, #8]
    memcpy(buffer, (uint8_t*)temp, 4);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000538 	.word	0x20000538

08000778 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <MX_GPIO_Init+0x138>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a47      	ldr	r2, [pc, #284]	; (80008b0 <MX_GPIO_Init+0x138>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <MX_GPIO_Init+0x138>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a41      	ldr	r2, [pc, #260]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a35      	ldr	r2, [pc, #212]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_GPIO_Init+0x138>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f002 fd6d 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <MX_GPIO_Init+0x13c>)
 800081a:	f002 fd67 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f002 fd60 	bl	80032ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <MX_GPIO_Init+0x13c>)
 8000844:	f002 fba8 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000848:	230c      	movs	r3, #12
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000858:	2307      	movs	r3, #7
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f002 fb97 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800086a:	f248 0320 	movw	r3, #32800	; 0x8020
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f002 fb87 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Red_Backlight_Pin|Green_Backlight_Pin|White_Backlight_Pin;
 800088a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_GPIO_Init+0x13c>)
 80008a4:	f002 fb78 	bl	8002f98 <HAL_GPIO_Init>

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000800 	.word	0x48000800

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fe91 	bl	80015e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f85f 	bl	8000984 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f7ff ff57 	bl	8000778 <MX_GPIO_Init>
  MX_UART5_Init();
 80008ca:	f000 fd29 	bl	8001320 <MX_UART5_Init>
  MX_SPI2_Init();
 80008ce:	f000 f9db 	bl	8000c88 <MX_SPI2_Init>
  MX_RTC_Init();
 80008d2:	f000 f8c3 	bl	8000a5c <MX_RTC_Init>
  MX_ADC1_Init();
 80008d6:	f7ff fe4f 	bl	8000578 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    display_init();
 80008da:	f000 fb1d 	bl	8000f18 <display_init>
    uint8_t time[8];
    uart_transmit((uint8_t*)"set time HH:MM:SS\r\n", 19);
 80008de:	2113      	movs	r1, #19
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <main+0xc0>)
 80008e2:	f000 fde1 	bl	80014a8 <uart_transmit>
    HAL_Delay(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 febc 	bl	8001664 <HAL_Delay>
    uart_receive(time, 8);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2108      	movs	r1, #8
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fdfe 	bl	80014f4 <uart_receive>
    HAL_Delay(2000);
 80008f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008fc:	f000 feb2 	bl	8001664 <HAL_Delay>
    rtc_set_time(time);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f941 	bl	8000b8c <rtc_set_time>

    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800090a:	217f      	movs	r1, #127	; 0x7f
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <main+0xc4>)
 800090e:	f002 f8d1 	bl	8002ab4 <HAL_ADCEx_Calibration_Start>

    uint8_t current_time[8];
    uint8_t voltage[4];
    while (1) {
	adc_read_pot(voltage);
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff0f 	bl	8000738 <adc_read_pot>
	rtc_get_time(current_time);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f978 	bl	8000c14 <rtc_get_time>
	display_write_line(current_time, 8, 1);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	2201      	movs	r2, #1
 800092a:	2108      	movs	r1, #8
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fb48 	bl	8000fc2 <display_write_line>
	HAL_Delay(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f000 fe96 	bl	8001664 <HAL_Delay>
	display_write_line(voltage, strlen((char*)voltage), 2);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc48 	bl	80001d0 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b2d9      	uxtb	r1, r3
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2202      	movs	r2, #2
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fb3a 	bl	8000fc2 <display_write_line>
//	uart_transmit(current_time, 8);
	HAL_Delay(1);
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fe88 	bl	8001664 <HAL_Delay>
//	uart_transmit((uint8_t*)"\r\n", 2);
	uart_transmit(voltage, 4);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2104      	movs	r1, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fda5 	bl	80014a8 <uart_transmit>
	HAL_Delay(1);
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fe80 	bl	8001664 <HAL_Delay>
	uart_transmit((uint8_t*)"\r\n", 2);
 8000964:	2102      	movs	r1, #2
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <main+0xc8>)
 8000968:	f000 fd9e 	bl	80014a8 <uart_transmit>
	HAL_Delay(998);
 800096c:	f240 30e6 	movw	r0, #998	; 0x3e6
 8000970:	f000 fe78 	bl	8001664 <HAL_Delay>
	adc_read_pot(voltage);
 8000974:	e7cd      	b.n	8000912 <main+0x5a>
 8000976:	bf00      	nop
 8000978:	08008e94 	.word	0x08008e94
 800097c:	20000538 	.word	0x20000538
 8000980:	08008ea8 	.word	0x08008ea8

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b096      	sub	sp, #88	; 0x58
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2244      	movs	r2, #68	; 0x44
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f006 ffb8 	bl	8007908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009aa:	f002 fcc5 	bl	8003338 <HAL_PWREx_ControlVoltageScaling>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009b4:	f000 f84c 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009b8:	230a      	movs	r3, #10
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c2:	2310      	movs	r3, #16
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ce:	2302      	movs	r3, #2
 80009d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009d6:	230a      	movs	r3, #10
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009da:	2307      	movs	r3, #7
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fcfa 	bl	80033e4 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x76>
  {
    Error_Handler();
 80009f6:	f000 f82b 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2303      	movs	r3, #3
 8000a00:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2104      	movs	r1, #4
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 f8cc 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a1e:	f000 f817 	bl	8000a50 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3758      	adds	r7, #88	; 0x58
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3e:	f000 fdf1 	bl	8001624 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40012c00 	.word	0x40012c00

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a70:	2300      	movs	r3, #0
 8000a72:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a76:	4a26      	ldr	r2, [pc, #152]	; (8000b10 <MX_RTC_Init+0xb4>)
 8000a78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a82:	227f      	movs	r2, #127	; 0x7f
 8000a84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a88:	22ff      	movs	r2, #255	; 0xff
 8000a8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa4:	4819      	ldr	r0, [pc, #100]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000aa6:	f003 ff77 	bl	8004998 <HAL_RTC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f7ff ffce 	bl	8000a50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2201      	movs	r2, #1
 8000acc:	4619      	mov	r1, r3
 8000ace:	480f      	ldr	r0, [pc, #60]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000ad0:	f003 ffdd 	bl	8004a8e <HAL_RTC_SetTime>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ada:	f7ff ffb9 	bl	8000a50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8000ae2:	2312      	movs	r3, #18
 8000ae4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8000ae6:	2322      	movs	r3, #34	; 0x22
 8000ae8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8000aea:	2321      	movs	r3, #33	; 0x21
 8000aec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000af6:	f004 f8c3 	bl	8004c80 <HAL_RTC_SetDate>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b00:	f7ff ffa6 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000059c 	.word	0x2000059c
 8000b10:	40002800 	.word	0x40002800

08000b14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0a4      	sub	sp, #144	; 0x90
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2288      	movs	r2, #136	; 0x88
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f006 feef 	bl	8007908 <memset>
  if(rtcHandle->Instance==RTC)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_RTC_MspInit+0x5c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d118      	bne.n	8000b66 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b38:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fa6a 	bl	8004020 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b52:	f7ff ff7d 	bl	8000a50 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <HAL_RTC_MspInit+0x60>)
 8000b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b5c:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <HAL_RTC_MspInit+0x60>)
 8000b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b66:	bf00      	nop
 8000b68:	3790      	adds	r7, #144	; 0x90
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40002800 	.word	0x40002800
 8000b74:	40021000 	.word	0x40021000

08000b78 <RTC_Error>:
/**
 * @brief Error function called upon error generated
 * during exeuction of RTC functions.
 * @note Activates the LD2 led on the Nucleo board and loops infinitely.
 */
void RTC_Error() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2120      	movs	r1, #32
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f002 fbb2 	bl	80032ec <HAL_GPIO_WritePin>
    while (1) {}
 8000b88:	e7fe      	b.n	8000b88 <RTC_Error+0x10>
	...

08000b8c <rtc_set_time>:
/**
 * @brief Real Time Clock (RTC) function to set the RTC time.
 * @param tstr: time string of format "hh:mm:ss".
 * @retval None.
 */
void rtc_set_time(uint8_t tstr[]) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <rtc_set_time+0x80>)
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, del); //tokenize tstr on given delimiter
 8000ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f006 fed4 	bl	8007958 <strtok>
 8000bb0:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000bb2:	6a38      	ldr	r0, [r7, #32]
 8000bb4:	f006 fe52 	bl	800785c <atoi>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 8000bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f006 fec9 	bl	8007958 <strtok>
 8000bc6:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 8000bc8:	6a38      	ldr	r0, [r7, #32]
 8000bca:	f006 fe47 	bl	800785c <atoi>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f006 febe 	bl	8007958 <strtok>
 8000bdc:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 8000bde:	6a38      	ldr	r0, [r7, #32]
 8000be0:	f006 fe3c 	bl	800785c <atoi>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	73bb      	strb	r3, [r7, #14]

    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4807      	ldr	r0, [pc, #28]	; (8000c10 <rtc_set_time+0x84>)
 8000bf4:	f003 ff4b 	bl	8004a8e <HAL_RTC_SetTime>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <rtc_set_time+0x76>
	RTC_Error();
 8000bfe:	f7ff ffbb 	bl	8000b78 <RTC_Error>
    }
}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	08008eac 	.word	0x08008eac
 8000c10:	2000059c 	.word	0x2000059c

08000c14 <rtc_get_time>:
  * @brief Real Time Clock (RTC) function to get the current time.
  * @param buffer: buffer to store the current time.
  * @note GetDate() is called to properly retreive the time.
  * @retval None.
  */
void rtc_get_time(uint8_t buffer[]) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <rtc_get_time+0x6c>)
 8000c3a:	f003 ffc5 	bl	8004bc8 <HAL_RTC_GetTime>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <rtc_get_time+0x34>
	RTC_Error();
 8000c44:	f7ff ff98 	bl	8000b78 <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <rtc_get_time+0x6c>)
 8000c52:	f004 f89c 	bl	8004d8e <HAL_RTC_GetDate>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <rtc_get_time+0x4c>
	RTC_Error();
 8000c5c:	f7ff ff8c 	bl	8000b78 <RTC_Error>
    }

    sprintf((char*)buffer, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000c60:	7b3b      	ldrb	r3, [r7, #12]
 8000c62:	461a      	mov	r2, r3
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
 8000c66:	4619      	mov	r1, r3
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	4905      	ldr	r1, [pc, #20]	; (8000c84 <rtc_get_time+0x70>)
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f006 fe51 	bl	8007918 <siprintf>
}
 8000c76:	bf00      	nop
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000059c 	.word	0x2000059c
 8000c84:	08008eb0 	.word	0x08008eb0

08000c88 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 0 */
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <MX_SPI2_Init+0x78>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000c9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000ca4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ca8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cac:	2202      	movs	r2, #2
 8000cae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cc0:	2230      	movs	r2, #48	; 0x30
 8000cc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SPI2_Init+0x74>)
 8000cea:	f004 f96f 	bl	8004fcc <HAL_SPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000cf4:	f7ff feac 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200005c0 	.word	0x200005c0
 8000d00:	40003800 	.word	0x40003800

08000d04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <HAL_SPI_MspInit+0xb4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d144      	bne.n	8000db0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */
  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_SPI_MspInit+0xb8>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <HAL_SPI_MspInit+0xbc>)
 8000d8a:	f002 f905 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da0:	2305      	movs	r3, #5
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_SPI_MspInit+0xc0>)
 8000dac:	f002 f8f4 	bl	8002f98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */
  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40003800 	.word	0x40003800
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <SPI_Error>:
/**
 * @brief Error function that handles any error produced while
 * using SPI communication.
 * @note Enables LD2 LED on the Nucleo board and loops infinitely.
 */
void SPI_Error() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2120      	movs	r1, #32
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f002 fa8a 	bl	80032ec <HAL_GPIO_WritePin>
    while(1) {}
 8000dd8:	e7fe      	b.n	8000dd8 <SPI_Error+0x10>
	...

08000ddc <set_startbyte>:
  * @param nibble: the sequence to set.
  * @note  nibble in format of "0|RS|R/W|1" (MSB first representation).
  * Placed at bits 4-7 in the startbyte.
  * @retval None
  */
void set_startbyte(uint8_t nibble) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
    instr[0] = ((instr[0] & 0x0F) | (nibble << 4));
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <set_startbyte+0x34>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <set_startbyte+0x34>)
 8000e00:	701a      	strb	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000

08000e14 <set_byte>:
  * to follow convention.
  * @param byte: the byte to set up transmission for
  * @note LSB first ordering in the instruction array instr[].
  * @retval None
  */
void set_byte(uint8_t byte) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
    instr[1] = (byte & 0x0F);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <set_byte+0x2c>)
 8000e28:	705a      	strb	r2, [r3, #1]
    instr[2] = ((byte & 0xF0) >> 4);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <set_byte+0x2c>)
 8000e32:	709a      	strb	r2, [r3, #2]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20000000 	.word	0x20000000

08000e44 <display_set_backlight>:

/**
 * @brief This functions sets the backlight color of the display.
 * @param color: color mapped to an integer used in the switch statement below.
 */
void display_set_backlight(uint8_t color) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
    switch(color) {
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d013      	beq.n	8000e7c <display_set_backlight+0x38>
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	dc18      	bgt.n	8000e8a <display_set_backlight+0x46>
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <display_set_backlight+0x1e>
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d006      	beq.n	8000e6e <display_set_backlight+0x2a>
	  break;
	case 2:
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
	  break;
    }
}
 8000e60:	e013      	b.n	8000e8a <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Red_Backlight_GPIO_Port, Red_Backlight_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	480b      	ldr	r0, [pc, #44]	; (8000e94 <display_set_backlight+0x50>)
 8000e68:	f002 fa40 	bl	80032ec <HAL_GPIO_WritePin>
	  break;
 8000e6c:	e00d      	b.n	8000e8a <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(White_Backlight_GPIO_Port, White_Backlight_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <display_set_backlight+0x50>)
 8000e76:	f002 fa39 	bl	80032ec <HAL_GPIO_WritePin>
	  break;
 8000e7a:	e006      	b.n	8000e8a <display_set_backlight+0x46>
	  HAL_GPIO_WritePin(Green_Backlight_GPIO_Port, Green_Backlight_Pin, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <display_set_backlight+0x50>)
 8000e84:	f002 fa32 	bl	80032ec <HAL_GPIO_WritePin>
	  break;
 8000e88:	bf00      	nop
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	48000800 	.word	0x48000800

08000e98 <display_hw_reset>:

/**
 * @brief Before using the display it should be reset by toggling the
 * Disp_Reset pin: high->low->high with sufficient delays in between.
 */
void display_hw_reset() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000e9c:	2005      	movs	r0, #5
 8000e9e:	f000 fbe1 	bl	8001664 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f002 fa1e 	bl	80032ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f000 fbd7 	bl	8001664 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f002 fa14 	bl	80032ec <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 fbcd 	bl	8001664 <HAL_Delay>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <send>:

/**
 * @brief sends the current data in the instructions array instr[] over SPI.
 */
void send() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    if (HAL_SPI_Transmit(&hspi2, (uint8_t*)instr, 3, 50) != HAL_OK) {
 8000ed4:	2332      	movs	r3, #50	; 0x32
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	4905      	ldr	r1, [pc, #20]	; (8000ef0 <send+0x20>)
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <send+0x24>)
 8000edc:	f004 f919 	bl	8005112 <HAL_SPI_Transmit>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <send+0x1a>
	SPI_Error();
 8000ee6:	f7ff ff6f 	bl	8000dc8 <SPI_Error>
    }
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	200005c0 	.word	0x200005c0

08000ef8 <display_clear>:

/**
 * @brief Sets all segments of the display to 20H, i.e. invisible character.
 */
void display_clear() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    set_startbyte(RS0_RW0);
 8000efc:	2301      	movs	r3, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff6c 	bl	8000ddc <set_startbyte>
    set_byte(CLEAR_DISPLAY);
 8000f04:	2301      	movs	r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff83 	bl	8000e14 <set_byte>
    send();
 8000f0e:	f7ff ffdf 	bl	8000ed0 <send>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <display_init>:

/**
 * @brief Initialization routine to set up the running conditions for the display.
 * @note Sequence needed is predefined. Hardware reset required beforehand.
 */
void display_init() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

    display_hw_reset();
 8000f1e:	f7ff ffbb 	bl	8000e98 <display_hw_reset>

    display_set_backlight(WHITE);
 8000f22:	2301      	movs	r3, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff8d 	bl	8000e44 <display_set_backlight>

    set_startbyte(RS0_RW0);
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff55 	bl	8000ddc <set_startbyte>
    for (int i = 0; i < 11; i++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	e00e      	b.n	8000f56 <display_init+0x3e>
	set_byte(init_seq[i]);
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <display_init+0x50>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff67 	bl	8000e14 <set_byte>
	send();
 8000f46:	f7ff ffc3 	bl	8000ed0 <send>
	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fb8a 	bl	8001664 <HAL_Delay>
    for (int i = 0; i < 11; i++) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0a      	cmp	r3, #10
 8000f5a:	dded      	ble.n	8000f38 <display_init+0x20>
    }

    display_clear();
 8000f5c:	f7ff ffcc 	bl	8000ef8 <display_clear>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000004 	.word	0x20000004

08000f6c <display_set_line>:

/**
 * @brief Instructs the display to target the line specified.
 * @param line: the line to target, 1, 2, 3 or 4.
 */
void display_set_line(uint8_t line) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
//    set_startbyte(RS0_RW0);
    set_byte(DDRAM_L[line - 1]);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <display_set_line+0x24>)
 8000f7c:	5cd3      	ldrb	r3, [r2, r3]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff48 	bl	8000e14 <set_byte>
    send();
 8000f84:	f7ff ffa4 	bl	8000ed0 <send>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	08008ec0 	.word	0x08008ec0

08000f94 <display_write>:

/**
 * @brief writes the current instruction loaded to the display.
 * @param the data to send.
 */
void display_write(uint8_t data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    set_startbyte(RS1_RW0);
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff1b 	bl	8000ddc <set_startbyte>
    set_byte(data);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff33 	bl	8000e14 <set_byte>
    send();
 8000fae:	f7ff ff8f 	bl	8000ed0 <send>
    set_startbyte(RS0_RW0);
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff11 	bl	8000ddc <set_startbyte>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <display_write_line>:
 * @brief Receives a buffer to write to the display.
 * @param buf: the buffer of data to send.
 * @param len: length of the buffer.
 * @param line: the line of the display to target.
 */
void display_write_line(uint8_t *buf, uint8_t len, uint8_t line) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	70fb      	strb	r3, [r7, #3]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	70bb      	strb	r3, [r7, #2]
    display_set_line(line);
 8000fd2:	78bb      	ldrb	r3, [r7, #2]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffc9 	bl	8000f6c <display_set_line>

    uint8_t i = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
    while (i < len) {
 8000fde:	e00c      	b.n	8000ffa <display_write_line+0x38>
	display_write(buf[i++]);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	73fa      	strb	r2, [r7, #15]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffd0 	bl	8000f94 <display_write>
	HAL_Delay(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 fb35 	bl	8001664 <HAL_Delay>
    while (i < len) {
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3ee      	bcc.n	8000fe0 <display_write_line+0x1e>
    }

    while (i < 10) { //set remaining segments to blank
 8001002:	e005      	b.n	8001010 <display_write_line+0x4e>
	display_write((uint8_t) 0x20);
 8001004:	2020      	movs	r0, #32
 8001006:	f7ff ffc5 	bl	8000f94 <display_write>
	i++;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3301      	adds	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
    while (i < 10) { //set remaining segments to blank
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b09      	cmp	r3, #9
 8001014:	d9f6      	bls.n	8001004 <display_write_line+0x42>
    }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_MspInit+0x4c>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_MspInit+0x4c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	; 0x60
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_MspInit+0x4c>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_MspInit+0x4c>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_MspInit+0x4c>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	210f      	movs	r1, #15
 800105a:	f06f 0001 	mvn.w	r0, #1
 800105e:	f001 fef1 	bl	8002e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	2019      	movs	r0, #25
 8001086:	f001 fedd 	bl	8002e44 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800108a:	2019      	movs	r0, #25
 800108c:	f001 fef6 	bl	8002e7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_InitTick+0x9c>)
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <HAL_InitTick+0x9c>)
 8001096:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800109a:	6613      	str	r3, [r2, #96]	; 0x60
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_InitTick+0x9c>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ff22 	bl	8003efc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010b8:	f002 ff0a 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 80010bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <HAL_InitTick+0xa0>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	3b01      	subs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_InitTick+0xa4>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <HAL_InitTick+0xa8>)
 80010d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_InitTick+0xa4>)
 80010d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_InitTick+0xa4>)
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_InitTick+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_InitTick+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <HAL_InitTick+0xa4>)
 80010ee:	f004 fae3 	bl	80056b8 <HAL_TIM_Base_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <HAL_InitTick+0xa4>)
 80010fa:	f004 fb3f 	bl	800577c <HAL_TIM_Base_Start_IT>
 80010fe:	4603      	mov	r3, r0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	431bde83 	.word	0x431bde83
 8001114:	20000624 	.word	0x20000624
 8001118:	40012c00 	.word	0x40012c00

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800114e:	f004 fb85 	bl	800585c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000624 	.word	0x20000624

0800115c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <UART5_IRQHandler+0x10>)
 8001162:	f004 fe8d 	bl	8005e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000670 	.word	0x20000670

08001170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_kill>:

int _kill(int pid, int sig)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800118a:	f006 fb6b 	bl	8007864 <__errno>
 800118e:	4603      	mov	r3, r0
 8001190:	2216      	movs	r2, #22
 8001192:	601a      	str	r2, [r3, #0]
	return -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_exit>:

void _exit (int status)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffe7 	bl	8001180 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011b2:	e7fe      	b.n	80011b2 <_exit+0x12>

080011b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e00a      	b.n	80011dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011c6:	f3af 8000 	nop.w
 80011ca:	4601      	mov	r1, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60ba      	str	r2, [r7, #8]
 80011d2:	b2ca      	uxtb	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbf0      	blt.n	80011c6 <_read+0x12>
	}

return len;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e009      	b.n	8001214 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf1      	blt.n	8001200 <_write+0x12>
	}
	return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_close>:

int _close(int file)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	return -1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124e:	605a      	str	r2, [r3, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_isatty>:

int _isatty(int file)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	return 1;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f006 fad0 	bl	8007864 <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20018000 	.word	0x20018000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	200000a0 	.word	0x200000a0
 80012f8:	20000708 	.word	0x20000708

080012fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <SystemInit+0x20>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <SystemInit+0x20>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_UART5_Init+0x58>)
 8001326:	4a15      	ldr	r2, [pc, #84]	; (800137c <MX_UART5_Init+0x5c>)
 8001328:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_UART5_Init+0x58>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_UART5_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_UART5_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_UART5_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_UART5_Init+0x58>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_UART5_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_UART5_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_UART5_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_UART5_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_UART5_Init+0x58>)
 8001364:	f004 fc7a 	bl	8005c5c <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800136e:	f7ff fb6f 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000670 	.word	0x20000670
 800137c:	40005000 	.word	0x40005000

08001380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ac      	sub	sp, #176	; 0xb0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2288      	movs	r2, #136	; 0x88
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f006 fab1 	bl	8007908 <memset>
  if(uartHandle->Instance==UART5)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a36      	ldr	r2, [pc, #216]	; (8001484 <HAL_UART_MspInit+0x104>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d164      	bne.n	800147a <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80013b0:	2310      	movs	r3, #16
 80013b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fe2f 	bl	8004020 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013c8:	f7ff fb42 	bl	8000a50 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <HAL_UART_MspInit+0x108>)
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <HAL_UART_MspInit+0x108>)
 80013d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013d6:	6593      	str	r3, [r2, #88]	; 0x58
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_UART_MspInit+0x108>)
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <HAL_UART_MspInit+0x108>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <HAL_UART_MspInit+0x108>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_UART_MspInit+0x108>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_UART_MspInit+0x108>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_UART_MspInit+0x108>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_UART_MspInit+0x108>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800142e:	2308      	movs	r3, #8
 8001430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001438:	4619      	mov	r1, r3
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <HAL_UART_MspInit+0x10c>)
 800143c:	f001 fdac 	bl	8002f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001440:	2304      	movs	r3, #4
 8001442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001458:	2308      	movs	r3, #8
 800145a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001462:	4619      	mov	r1, r3
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <HAL_UART_MspInit+0x110>)
 8001466:	f001 fd97 	bl	8002f98 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2105      	movs	r1, #5
 800146e:	2035      	movs	r0, #53	; 0x35
 8001470:	f001 fce8 	bl	8002e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001474:	2035      	movs	r0, #53	; 0x35
 8001476:	f001 fd01 	bl	8002e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800147a:	bf00      	nop
 800147c:	37b0      	adds	r7, #176	; 0xb0
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40005000 	.word	0x40005000
 8001488:	40021000 	.word	0x40021000
 800148c:	48000800 	.word	0x48000800
 8001490:	48000c00 	.word	0x48000c00

08001494 <UART_Error>:
/**
 * @brief Error function called upon error generated
 * during UART communication.
 * @note Enables the LD2 LED on the Nucleo board and loops infinitely.
 */
void UART_Error(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2120      	movs	r1, #32
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 ff24 	bl	80032ec <HAL_GPIO_WritePin>
    while (1) {}
 80014a4:	e7fe      	b.n	80014a4 <UART_Error+0x10>
	...

080014a8 <uart_transmit>:
  * @param size: amount of bytes to transmit.
  * @note Starting the interrupt handler for transmitting.
  * Not allowed to receive if transmission not finished.
  * @retval None
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
    if (UartDoneR == SET) {
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <uart_transmit+0x40>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d110      	bne.n	80014de <uart_transmit+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <uart_transmit+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <uart_transmit+0x44>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	461a      	mov	r2, r3
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4808      	ldr	r0, [pc, #32]	; (80014f0 <uart_transmit+0x48>)
 80014d0:	f004 fc12 	bl	8005cf8 <HAL_UART_Transmit_IT>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <uart_transmit+0x36>
	    UART_Error();
 80014da:	f7ff ffdb 	bl	8001494 <UART_Error>
	}
    }
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000015 	.word	0x20000015
 80014ec:	20000014 	.word	0x20000014
 80014f0:	20000670 	.word	0x20000670

080014f4 <uart_receive>:
  * @param size: amount of bytes to receive.
  * @note Starting the interrupt handler for receiving.
  * Not allowed to transmit if reception not finished.
  * @retval None.
  */
void uart_receive(uint8_t buffer[], uint16_t size) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
    if (UartDoneT == SET) {
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <uart_receive+0x40>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d110      	bne.n	800152a <uart_receive+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <uart_receive+0x44>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <uart_receive+0x40>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	461a      	mov	r2, r3
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4808      	ldr	r0, [pc, #32]	; (800153c <uart_receive+0x48>)
 800151c:	f004 fc5a 	bl	8005dd4 <HAL_UART_Receive_IT>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <uart_receive+0x36>
	    UART_Error();
 8001526:	f7ff ffb5 	bl	8001494 <UART_Error>
	}
    }
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000014 	.word	0x20000014
 8001538:	20000015 	.word	0x20000015
 800153c:	20000670 	.word	0x20000670

08001540 <HAL_UART_TxCpltCallback>:
  * @brief UART transfer completion callback.
  * @param UartHandle: UART handle to use.
  * @note Reporting that the tranmission over UART is complete.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_UART_TxCpltCallback+0x20>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
    UartDoneR = SET;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_UART_TxCpltCallback+0x24>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	20000014 	.word	0x20000014
 8001564:	20000015 	.word	0x20000015

08001568 <HAL_UART_RxCpltCallback>:
* @brief UART reception completion callback.
* @param UartHandle: UART handle to use.
* @note Reporting that the reception over UART is complete.
* @retval None.
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    UartDoneR = SET;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_UART_RxCpltCallback+0x20>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
    UartDoneT = SET;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_UART_RxCpltCallback+0x24>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	20000015 	.word	0x20000015
 800158c:	20000014 	.word	0x20000014

08001590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001594:	f7ff feb2 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f006 f957 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c2:	f7ff f979 	bl	80008b8 <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80015d4:	08009190 	.word	0x08009190
  ldr r2, =_sbss
 80015d8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80015dc:	20000708 	.word	0x20000708

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_Init+0x3c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_Init+0x3c>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f001 fc17 	bl	8002e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001600:	200f      	movs	r0, #15
 8001602:	f7ff fd35 	bl	8001070 <HAL_InitTick>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	e001      	b.n	8001616 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001612:	f7ff fd05 	bl	8001020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001616:	79fb      	ldrb	r3, [r7, #7]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000001c 	.word	0x2000001c
 8001648:	200006f4 	.word	0x200006f4

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200006f4 	.word	0x200006f4

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000001c 	.word	0x2000001c

080016ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	609a      	str	r2, [r3, #8]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3360      	adds	r3, #96	; 0x60
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <LL_ADC_SetOffset+0x44>)
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	4313      	orrs	r3, r2
 8001744:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	03fff000 	.word	0x03fff000

0800175c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3360      	adds	r3, #96	; 0x60
 800176a:	461a      	mov	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3360      	adds	r3, #96	; 0x60
 8001798:	461a      	mov	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3330      	adds	r3, #48	; 0x30
 80017f4:	461a      	mov	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	4413      	add	r3, r2
 8001802:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	211f      	movs	r1, #31
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	0e9b      	lsrs	r3, r3, #26
 800181c:	f003 011f 	and.w	r1, r3, #31
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	431a      	orrs	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001830:	bf00      	nop
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3314      	adds	r3, #20
 800184c:	461a      	mov	r2, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	0e5b      	lsrs	r3, r3, #25
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	0d1b      	lsrs	r3, r3, #20
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	2107      	movs	r1, #7
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	0d1b      	lsrs	r3, r3, #20
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	431a      	orrs	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ac:	43db      	mvns	r3, r3
 80018ae:	401a      	ands	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0318 	and.w	r3, r3, #24
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018b8:	40d9      	lsrs	r1, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	400b      	ands	r3, r1
 80018be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c2:	431a      	orrs	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	0007ffff 	.word	0x0007ffff

080018dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 031f 	and.w	r3, r3, #31
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6093      	str	r3, [r2, #8]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800194c:	d101      	bne.n	8001952 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001974:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800199c:	d101      	bne.n	80019a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ec:	f043 0202 	orr.w	r2, r3, #2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <LL_ADC_IsEnabled+0x18>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <LL_ADC_IsEnabled+0x1a>
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d101      	bne.n	8001a3e <LL_ADC_IsDisableOngoing+0x18>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <LL_ADC_IsDisableOngoing+0x1a>
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d101      	bne.n	8001a8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d101      	bne.n	8001ab2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e136      	b.n	8001d48 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7fe fdbb 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff19 	bl	8001938 <LL_ADC_IsDeepPowerDownEnabled>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff feff 	bl	8001914 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff34 	bl	8001988 <LL_ADC_IsInternalRegulatorEnabled>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d115      	bne.n	8001b52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff18 	bl	8001960 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b30:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <HAL_ADC_Init+0x290>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	4a87      	ldr	r2, [pc, #540]	; (8001d54 <HAL_ADC_Init+0x294>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	3301      	adds	r3, #1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f9      	bne.n	8001b46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff16 	bl	8001988 <LL_ADC_IsInternalRegulatorEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10d      	bne.n	8001b7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff76 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8001b88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80cf 	bne.w	8001d36 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 80cb 	bne.w	8001d36 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ba8:	f043 0202 	orr.w	r2, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff23 	bl	8001a00 <LL_ADC_IsEnabled>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d115      	bne.n	8001bec <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bc0:	4865      	ldr	r0, [pc, #404]	; (8001d58 <HAL_ADC_Init+0x298>)
 8001bc2:	f7ff ff1d 	bl	8001a00 <LL_ADC_IsEnabled>
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4864      	ldr	r0, [pc, #400]	; (8001d5c <HAL_ADC_Init+0x29c>)
 8001bca:	f7ff ff19 	bl	8001a00 <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	431c      	orrs	r4, r3
 8001bd2:	4863      	ldr	r0, [pc, #396]	; (8001d60 <HAL_ADC_Init+0x2a0>)
 8001bd4:	f7ff ff14 	bl	8001a00 <LL_ADC_IsEnabled>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4619      	mov	r1, r3
 8001be6:	485f      	ldr	r0, [pc, #380]	; (8001d64 <HAL_ADC_Init+0x2a4>)
 8001be8:	f7ff fd60 	bl	80016ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e5b      	ldrb	r3, [r3, #25]
 8001bf0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	045b      	lsls	r3, r3, #17
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_ADC_Init+0x2a8>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff09 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8001c62:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff16 	bl	8001a9a <LL_ADC_INJ_IsConversionOngoing>
 8001c6e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d13d      	bne.n	8001cf2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d13a      	bne.n	8001cf2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c80:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c88:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c98:	f023 0302 	bic.w	r3, r3, #2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	69b9      	ldr	r1, [r7, #24]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d118      	bne.n	8001ce2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cba:	f023 0304 	bic.w	r3, r3, #4
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	611a      	str	r2, [r3, #16]
 8001ce0:	e007      	b.n	8001cf2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10c      	bne.n	8001d14 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f023 010f 	bic.w	r1, r3, #15
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
 8001d12:	e007      	b.n	8001d24 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020f 	bic.w	r2, r2, #15
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	f023 0303 	bic.w	r3, r3, #3
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
 8001d34:	e007      	b.n	8001d46 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f043 0210 	orr.w	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3724      	adds	r7, #36	; 0x24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	20000010 	.word	0x20000010
 8001d54:	053e2d63 	.word	0x053e2d63
 8001d58:	50040000 	.word	0x50040000
 8001d5c:	50040100 	.word	0x50040100
 8001d60:	50040200 	.word	0x50040200
 8001d64:	50040300 	.word	0x50040300
 8001d68:	fff0c007 	.word	0xfff0c007

08001d6c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d74:	4857      	ldr	r0, [pc, #348]	; (8001ed4 <HAL_ADC_Start+0x168>)
 8001d76:	f7ff fdb1 	bl	80018dc <LL_ADC_GetMultimode>
 8001d7a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fe77 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 809c 	bne.w	8001ec6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_Start+0x30>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e097      	b.n	8001ecc <HAL_ADC_Start+0x160>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fd71 	bl	800288c <ADC_Enable>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 8083 	bne.w	8001ebc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a42      	ldr	r2, [pc, #264]	; (8001ed8 <HAL_ADC_Start+0x16c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d002      	beq.n	8001dda <HAL_ADC_Start+0x6e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	e000      	b.n	8001ddc <HAL_ADC_Start+0x70>
 8001dda:	4b40      	ldr	r3, [pc, #256]	; (8001edc <HAL_ADC_Start+0x170>)
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d002      	beq.n	8001dea <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f023 0206 	bic.w	r2, r3, #6
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	221c      	movs	r2, #28
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_ADC_Start+0x16c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d002      	beq.n	8001e38 <HAL_ADC_Start+0xcc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e000      	b.n	8001e3a <HAL_ADC_Start+0xce>
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_ADC_Start+0x170>)
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d008      	beq.n	8001e54 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d002      	beq.n	8001e54 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b09      	cmp	r3, #9
 8001e52:	d114      	bne.n	8001e7e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fde8 	bl	8001a4c <LL_ADC_REG_StartConversion>
 8001e7c:	e025      	b.n	8001eca <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <HAL_ADC_Start+0x16c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_Start+0x12e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e000      	b.n	8001e9c <HAL_ADC_Start+0x130>
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_ADC_Start+0x170>)
 8001e9c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00f      	beq.n	8001eca <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
 8001eba:	e006      	b.n	8001eca <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ec4:	e001      	b.n	8001eca <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	50040300 	.word	0x50040300
 8001ed8:	50040100 	.word	0x50040100
 8001edc:	50040000 	.word	0x50040000

08001ee0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eea:	4866      	ldr	r0, [pc, #408]	; (8002084 <HAL_ADC_PollForConversion+0x1a4>)
 8001eec:	f7ff fcf6 	bl	80018dc <LL_ADC_GetMultimode>
 8001ef0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d102      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001efa:	2308      	movs	r3, #8
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e02a      	b.n	8001f56 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d002      	beq.n	8001f12 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d111      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0a4      	b.n	800207a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f30:	2304      	movs	r3, #4
 8001f32:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f34:	e00f      	b.n	8001f56 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f36:	4853      	ldr	r0, [pc, #332]	; (8002084 <HAL_ADC_PollForConversion+0x1a4>)
 8001f38:	f7ff fcde 	bl	80018f8 <LL_ADC_GetMultiDMATransfer>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f043 0220 	orr.w	r2, r3, #32
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e093      	b.n	800207a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f52:	2304      	movs	r3, #4
 8001f54:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f56:	f7ff fb79 	bl	800164c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f5c:	e021      	b.n	8001fa2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f64:	d01d      	beq.n	8001fa2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f66:	f7ff fb71 	bl	800164c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <HAL_ADC_PollForConversion+0x9c>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d112      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10b      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0204 	orr.w	r2, r3, #4
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e06b      	b.n	800207a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0d6      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fbfc 	bl	80017be <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01c      	beq.n	8002006 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e5b      	ldrb	r3, [r3, #25]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d118      	bne.n	8002006 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d111      	bne.n	8002006 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <HAL_ADC_PollForConversion+0x1a8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d002      	beq.n	8002016 <HAL_ADC_PollForConversion+0x136>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	e000      	b.n	8002018 <HAL_ADC_PollForConversion+0x138>
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_ADC_PollForConversion+0x1ac>)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	4293      	cmp	r3, r2
 800201e:	d008      	beq.n	8002032 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b05      	cmp	r3, #5
 800202a:	d002      	beq.n	8002032 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b09      	cmp	r3, #9
 8002030:	d104      	bne.n	800203c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	e00c      	b.n	8002056 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_ADC_PollForConversion+0x1a8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d002      	beq.n	800204c <HAL_ADC_PollForConversion+0x16c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e000      	b.n	800204e <HAL_ADC_PollForConversion+0x16e>
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_ADC_PollForConversion+0x1ac>)
 800204e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d104      	bne.n	8002066 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e008      	b.n	8002078 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	220c      	movs	r2, #12
 8002076:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	50040300 	.word	0x50040300
 8002088:	50040100 	.word	0x50040100
 800208c:	50040000 	.word	0x50040000

08002090 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0b6      	sub	sp, #216	; 0xd8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x22>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e3c7      	b.n	800285e <HAL_ADC_ConfigChannel+0x7b2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fcca 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 83a8 	bne.w	8002838 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d824      	bhi.n	800213a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	3b02      	subs	r3, #2
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d81b      	bhi.n	8002132 <HAL_ADC_ConfigChannel+0x86>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <HAL_ADC_ConfigChannel+0x54>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002111 	.word	0x08002111
 8002104:	08002119 	.word	0x08002119
 8002108:	08002121 	.word	0x08002121
 800210c:	08002129 	.word	0x08002129
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	220c      	movs	r2, #12
 8002114:	605a      	str	r2, [r3, #4]
          break;
 8002116:	e011      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2212      	movs	r2, #18
 800211c:	605a      	str	r2, [r3, #4]
          break;
 800211e:	e00d      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2218      	movs	r2, #24
 8002124:	605a      	str	r2, [r3, #4]
          break;
 8002126:	e009      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212e:	605a      	str	r2, [r3, #4]
          break;
 8002130:	e004      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2206      	movs	r2, #6
 8002136:	605a      	str	r2, [r3, #4]
          break;
 8002138:	e000      	b.n	800213c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800213a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	f7ff fb4b 	bl	80017e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fc8e 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8002158:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fc9a 	bl	8001a9a <LL_ADC_INJ_IsConversionOngoing>
 8002166:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800216a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 81a6 	bne.w	80024c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 81a1 	bne.w	80024c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fb56 	bl	800183c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d00a      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6919      	ldr	r1, [r3, #16]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021c2:	f7ff faa7 	bl	8001714 <LL_ADC_SetOffset>
 80021c6:	e17b      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fac4 	bl	800175c <LL_ADC_GetOffsetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x148>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fab9 	bl	800175c <LL_ADC_GetOffsetChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	f003 021f 	and.w	r2, r3, #31
 80021f2:	e01e      	b.n	8002232 <HAL_ADC_ConfigChannel+0x186>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff faae 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002200:	4603      	mov	r3, r0
 8002202:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800221a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e004      	b.n	8002230 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_ADC_ConfigChannel+0x19e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	e018      	b.n	800227c <HAL_ADC_ConfigChannel+0x1d0>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800225e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e004      	b.n	800227c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800227c:	429a      	cmp	r2, r3
 800227e:	d106      	bne.n	800228e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fa7d 	bl	8001788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fa61 	bl	800175c <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x20e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fa56 	bl	800175c <LL_ADC_GetOffsetChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	0e9b      	lsrs	r3, r3, #26
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	e01e      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x24c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fa4b 	bl	800175c <LL_ADC_GetOffsetChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e004      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80022ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d105      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x264>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	e018      	b.n	8002342 <HAL_ADC_ConfigChannel+0x296>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800232c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e004      	b.n	8002342 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002342:	429a      	cmp	r2, r3
 8002344:	d106      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	2101      	movs	r1, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fa1a 	bl	8001788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f9fe 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x2d4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2102      	movs	r1, #2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f9f3 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	f003 021f 	and.w	r2, r3, #31
 800237e:	e01e      	b.n	80023be <HAL_ADC_ConfigChannel+0x312>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f9e8 	bl	800175c <LL_ADC_GetOffsetChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800239e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e004      	b.n	80023bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x32a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	e016      	b.n	8002404 <HAL_ADC_ConfigChannel+0x358>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80023f6:	2320      	movs	r3, #32
 80023f8:	e004      	b.n	8002404 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80023fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002404:	429a      	cmp	r2, r3
 8002406:	d106      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	2102      	movs	r1, #2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f9b9 	bl	8001788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2103      	movs	r1, #3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f99d 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x396>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2103      	movs	r1, #3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f992 	bl	800175c <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	0e9b      	lsrs	r3, r3, #26
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	e017      	b.n	8002472 <HAL_ADC_ConfigChannel+0x3c6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2103      	movs	r1, #3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f987 	bl	800175c <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800245a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800245c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800245e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002464:	2320      	movs	r3, #32
 8002466:	e003      	b.n	8002470 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_ADC_ConfigChannel+0x3de>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	e011      	b.n	80024ae <HAL_ADC_ConfigChannel+0x402>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80024a2:	2320      	movs	r3, #32
 80024a4:	e003      	b.n	80024ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80024a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2103      	movs	r1, #3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f964 	bl	8001788 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fa9b 	bl	8001a00 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 813f 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	461a      	mov	r2, r3
 80024e0:	f7ff f9d8 	bl	8001894 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a8e      	ldr	r2, [pc, #568]	; (8002724 <HAL_ADC_ConfigChannel+0x678>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f040 8130 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x46c>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b09      	cmp	r3, #9
 800250e:	bf94      	ite	ls
 8002510:	2301      	movls	r3, #1
 8002512:	2300      	movhi	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e019      	b.n	800254c <HAL_ADC_ConfigChannel+0x4a0>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002528:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800252a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2b09      	cmp	r3, #9
 8002544:	bf94      	ite	ls
 8002546:	2301      	movls	r3, #1
 8002548:	2300      	movhi	r3, #0
 800254a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254c:	2b00      	cmp	r3, #0
 800254e:	d079      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <HAL_ADC_ConfigChannel+0x4c0>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	3301      	adds	r3, #1
 8002564:	069b      	lsls	r3, r3, #26
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256a:	e015      	b.n	8002598 <HAL_ADC_ConfigChannel+0x4ec>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800257a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x50c>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	e017      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x53c>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80025d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x562>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	051b      	lsls	r3, r3, #20
 800260c:	e018      	b.n	8002640 <HAL_ADC_ConfigChannel+0x594>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e003      	b.n	8002632 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800262a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002640:	430b      	orrs	r3, r1
 8002642:	e080      	b.n	8002746 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x5b4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	069b      	lsls	r3, r3, #26
 800265a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800265e:	e015      	b.n	800268c <HAL_ADC_ConfigChannel+0x5e0>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e003      	b.n	8002684 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3301      	adds	r3, #1
 8002686:	069b      	lsls	r3, r3, #26
 8002688:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x600>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	e017      	b.n	80026dc <HAL_ADC_ConfigChannel+0x630>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	61fb      	str	r3, [r7, #28]
  return result;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80026c4:	2320      	movs	r3, #32
 80026c6:	e003      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	ea42 0103 	orr.w	r1, r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10d      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x65c>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	3b1e      	subs	r3, #30
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002706:	e01d      	b.n	8002744 <HAL_ADC_ConfigChannel+0x698>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	613b      	str	r3, [r7, #16]
  return result;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d103      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e005      	b.n	8002730 <HAL_ADC_ConfigChannel+0x684>
 8002724:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	3b1e      	subs	r3, #30
 800273e:	051b      	lsls	r3, r3, #20
 8002740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002744:	430b      	orrs	r3, r1
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	6892      	ldr	r2, [r2, #8]
 800274a:	4619      	mov	r1, r3
 800274c:	f7ff f876 	bl	800183c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b44      	ldr	r3, [pc, #272]	; (8002868 <HAL_ADC_ConfigChannel+0x7bc>)
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d07a      	beq.n	8002852 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800275c:	4843      	ldr	r0, [pc, #268]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 800275e:	f7fe ffcb 	bl	80016f8 <LL_ADC_GetCommonPathInternalCh>
 8002762:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a41      	ldr	r2, [pc, #260]	; (8002870 <HAL_ADC_ConfigChannel+0x7c4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d12c      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d126      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <HAL_ADC_ConfigChannel+0x7c8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x6e4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a3b      	ldr	r2, [pc, #236]	; (8002878 <HAL_ADC_ConfigChannel+0x7cc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d15d      	bne.n	800284c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002798:	4619      	mov	r1, r3
 800279a:	4834      	ldr	r0, [pc, #208]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 800279c:	f7fe ff99 	bl	80016d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <HAL_ADC_ConfigChannel+0x7d0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_ADC_ConfigChannel+0x7d4>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ba:	e002      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3b01      	subs	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c8:	e040      	b.n	800284c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_ADC_ConfigChannel+0x7d8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d118      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x75a>
 80027d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d112      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a23      	ldr	r2, [pc, #140]	; (8002874 <HAL_ADC_ConfigChannel+0x7c8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0x748>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a22      	ldr	r2, [pc, #136]	; (8002878 <HAL_ADC_ConfigChannel+0x7cc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d12d      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fc:	4619      	mov	r1, r3
 80027fe:	481b      	ldr	r0, [pc, #108]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 8002800:	f7fe ff67 	bl	80016d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002804:	e024      	b.n	8002850 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_ADC_ConfigChannel+0x7dc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d120      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d11a      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <HAL_ADC_ConfigChannel+0x7c8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d115      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800282e:	4619      	mov	r1, r3
 8002830:	480e      	ldr	r0, [pc, #56]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 8002832:	f7fe ff4e 	bl	80016d2 <LL_ADC_SetCommonPathInternalCh>
 8002836:	e00c      	b.n	8002852 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800284a:	e002      	b.n	8002852 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002850:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800285a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800285e:	4618      	mov	r0, r3
 8002860:	37d8      	adds	r7, #216	; 0xd8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	80080000 	.word	0x80080000
 800286c:	50040300 	.word	0x50040300
 8002870:	c7520000 	.word	0xc7520000
 8002874:	50040000 	.word	0x50040000
 8002878:	50040200 	.word	0x50040200
 800287c:	20000010 	.word	0x20000010
 8002880:	053e2d63 	.word	0x053e2d63
 8002884:	cb840000 	.word	0xcb840000
 8002888:	80000001 	.word	0x80000001

0800288c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f8b1 	bl	8001a00 <LL_ADC_IsEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d14d      	bne.n	8002940 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <ADC_Enable+0xc0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e039      	b.n	8002942 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f86c 	bl	80019b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028d8:	f7fe feb8 	bl	800164c <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028de:	e028      	b.n	8002932 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f88b 	bl	8001a00 <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d104      	bne.n	80028fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff f85b 	bl	80019b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028fa:	f7fe fea7 	bl	800164c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d914      	bls.n	8002932 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d00d      	beq.n	8002932 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f043 0210 	orr.w	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e007      	b.n	8002942 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d1cf      	bne.n	80028e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	8000003f 	.word	0x8000003f

08002950 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f862 	bl	8001a26 <LL_ADC_IsDisableOngoing>
 8002962:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f849 	bl	8001a00 <LL_ADC_IsEnabled>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d047      	beq.n	8002a04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d144      	bne.n	8002a04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030d 	and.w	r3, r3, #13
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10c      	bne.n	80029a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f823 	bl	80019d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2203      	movs	r2, #3
 8002998:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800299a:	f7fe fe57 	bl	800164c <HAL_GetTick>
 800299e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029a0:	e029      	b.n	80029f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e023      	b.n	8002a06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029be:	f7fe fe45 	bl	800164c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d914      	bls.n	80029f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f043 0210 	orr.w	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e007      	b.n	8002a06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1dc      	bne.n	80029be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <LL_ADC_IsEnabled>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <LL_ADC_IsEnabled+0x18>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <LL_ADC_IsEnabled+0x1a>
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_StartCalibration>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002a46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	609a      	str	r2, [r3, #8]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a7a:	d101      	bne.n	8002a80 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_REG_IsConversionOngoing>:
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e04d      	b.n	8002b6c <HAL_ADCEx_Calibration_Start+0xb8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff39 	bl	8002950 <ADC_Disable>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d136      	bne.n	8002b56 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff96 	bl	8002a34 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b08:	e014      	b.n	8002b34 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002b16:	d30d      	bcc.n	8002b34 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f023 0312 	bic.w	r3, r3, #18
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e01b      	b.n	8002b6c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff94 	bl	8002a66 <LL_ADC_IsCalibrationOnGoing>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e2      	bne.n	8002b0a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f023 0303 	bic.w	r3, r3, #3
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
 8002b54:	e005      	b.n	8002b62 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b09f      	sub	sp, #124	; 0x7c
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e093      	b.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d102      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	e001      	b.n	8002bb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e072      	b.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff59 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002bdc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff53 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d154      	bne.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d151      	bne.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bf4:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002bf6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02c      	beq.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c12:	035b      	lsls	r3, r3, #13
 8002c14:	430b      	orrs	r3, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c1c:	4829      	ldr	r0, [pc, #164]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c1e:	f7ff fef6 	bl	8002a0e <LL_ADC_IsEnabled>
 8002c22:	4604      	mov	r4, r0
 8002c24:	4828      	ldr	r0, [pc, #160]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c26:	f7ff fef2 	bl	8002a0e <LL_ADC_IsEnabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	431c      	orrs	r4, r3
 8002c2e:	4828      	ldr	r0, [pc, #160]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c30:	f7ff feed 	bl	8002a0e <LL_ADC_IsEnabled>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4323      	orrs	r3, r4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d137      	bne.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c44:	f023 030f 	bic.w	r3, r3, #15
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	6811      	ldr	r1, [r2, #0]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c56:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c58:	e028      	b.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c66:	4817      	ldr	r0, [pc, #92]	; (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c68:	f7ff fed1 	bl	8002a0e <LL_ADC_IsEnabled>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	4816      	ldr	r0, [pc, #88]	; (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c70:	f7ff fecd 	bl	8002a0e <LL_ADC_IsEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	431c      	orrs	r4, r3
 8002c78:	4815      	ldr	r0, [pc, #84]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c7a:	f7ff fec8 	bl	8002a0e <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4323      	orrs	r3, r4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d112      	bne.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c8e:	f023 030f 	bic.w	r3, r3, #15
 8002c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c94:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c96:	e009      	b.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002caa:	e000      	b.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	377c      	adds	r7, #124	; 0x7c
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	50040000 	.word	0x50040000
 8002cc8:	50040100 	.word	0x50040100
 8002ccc:	50040300 	.word	0x50040300
 8002cd0:	50040200 	.word	0x50040200

08002cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d06:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	60d3      	str	r3, [r2, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <__NVIC_GetPriorityGrouping+0x18>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 0307 	and.w	r3, r3, #7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	; (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db0a      	blt.n	8002d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	490c      	ldr	r1, [pc, #48]	; (8002dc0 <__NVIC_SetPriority+0x4c>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	440b      	add	r3, r1
 8002d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d9c:	e00a      	b.n	8002db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4908      	ldr	r1, [pc, #32]	; (8002dc4 <__NVIC_SetPriority+0x50>)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	3b04      	subs	r3, #4
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	440b      	add	r3, r1
 8002db2:	761a      	strb	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	bf28      	it	cs
 8002de6:	2304      	movcs	r3, #4
 8002de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d902      	bls.n	8002df8 <NVIC_EncodePriority+0x30>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b03      	subs	r3, #3
 8002df6:	e000      	b.n	8002dfa <NVIC_EncodePriority+0x32>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	4313      	orrs	r3, r2
         );
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ff4c 	bl	8002cd4 <__NVIC_SetPriorityGrouping>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e56:	f7ff ff61 	bl	8002d1c <__NVIC_GetPriorityGrouping>
 8002e5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	6978      	ldr	r0, [r7, #20]
 8002e62:	f7ff ffb1 	bl	8002dc8 <NVIC_EncodePriority>
 8002e66:	4602      	mov	r2, r0
 8002e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff80 	bl	8002d74 <__NVIC_SetPriority>
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff54 	bl	8002d38 <__NVIC_EnableIRQ>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d008      	beq.n	8002ec2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 020e 	bic.w	r2, r2, #14
 8002ed0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 021c 	and.w	r2, r3, #28
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d005      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	e029      	b.n	8002f8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 020e 	bic.w	r2, r2, #14
 8002f46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f003 021c 	and.w	r2, r3, #28
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
    }
  }
  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa6:	e17f      	b.n	80032a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2101      	movs	r1, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8171 	beq.w	80032a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d005      	beq.n	8002fd8 <HAL_GPIO_Init+0x40>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d130      	bne.n	800303a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800300e:	2201      	movs	r2, #1
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f003 0201 	and.w	r2, r3, #1
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b03      	cmp	r3, #3
 8003044:	d118      	bne.n	8003078 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800304c:	2201      	movs	r2, #1
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f003 0201 	and.w	r2, r3, #1
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d123      	bne.n	8003108 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	6939      	ldr	r1, [r7, #16]
 8003104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80ac 	beq.w	80032a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	4b5f      	ldr	r3, [pc, #380]	; (80032c8 <HAL_GPIO_Init+0x330>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314e:	4a5e      	ldr	r2, [pc, #376]	; (80032c8 <HAL_GPIO_Init+0x330>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6613      	str	r3, [r2, #96]	; 0x60
 8003156:	4b5c      	ldr	r3, [pc, #368]	; (80032c8 <HAL_GPIO_Init+0x330>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003162:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <HAL_GPIO_Init+0x334>)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	3302      	adds	r3, #2
 800316a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	220f      	movs	r2, #15
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800318c:	d025      	beq.n	80031da <HAL_GPIO_Init+0x242>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4f      	ldr	r2, [pc, #316]	; (80032d0 <HAL_GPIO_Init+0x338>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <HAL_GPIO_Init+0x23e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4e      	ldr	r2, [pc, #312]	; (80032d4 <HAL_GPIO_Init+0x33c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0x23a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4d      	ldr	r2, [pc, #308]	; (80032d8 <HAL_GPIO_Init+0x340>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0x236>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4c      	ldr	r2, [pc, #304]	; (80032dc <HAL_GPIO_Init+0x344>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_GPIO_Init+0x232>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4b      	ldr	r2, [pc, #300]	; (80032e0 <HAL_GPIO_Init+0x348>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <HAL_GPIO_Init+0x22e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_GPIO_Init+0x34c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_GPIO_Init+0x22a>
 80031be:	2306      	movs	r3, #6
 80031c0:	e00c      	b.n	80031dc <HAL_GPIO_Init+0x244>
 80031c2:	2307      	movs	r3, #7
 80031c4:	e00a      	b.n	80031dc <HAL_GPIO_Init+0x244>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e008      	b.n	80031dc <HAL_GPIO_Init+0x244>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x244>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x244>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x244>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x244>
 80031da:	2300      	movs	r3, #0
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031ec:	4937      	ldr	r1, [pc, #220]	; (80032cc <HAL_GPIO_Init+0x334>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_GPIO_Init+0x350>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800321e:	4a32      	ldr	r2, [pc, #200]	; (80032e8 <HAL_GPIO_Init+0x350>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003224:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_GPIO_Init+0x350>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003248:	4a27      	ldr	r2, [pc, #156]	; (80032e8 <HAL_GPIO_Init+0x350>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <HAL_GPIO_Init+0x350>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003272:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <HAL_GPIO_Init+0x350>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_GPIO_Init+0x350>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800329c:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <HAL_GPIO_Init+0x350>)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f47f ae78 	bne.w	8002fa8 <HAL_GPIO_Init+0x10>
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40010000 	.word	0x40010000
 80032d0:	48000400 	.word	0x48000400
 80032d4:	48000800 	.word	0x48000800
 80032d8:	48000c00 	.word	0x48000c00
 80032dc:	48001000 	.word	0x48001000
 80032e0:	48001400 	.word	0x48001400
 80032e4:	48001800 	.word	0x48001800
 80032e8:	40010400 	.word	0x40010400

080032ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
 80032f8:	4613      	mov	r3, r2
 80032fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032fc:	787b      	ldrb	r3, [r7, #1]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003308:	e002      	b.n	8003310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_PWREx_GetVoltageRange+0x18>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40007000 	.word	0x40007000

08003338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003346:	d130      	bne.n	80033aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d038      	beq.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800335e:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2232      	movs	r2, #50	; 0x32
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0c9b      	lsrs	r3, r3, #18
 8003378:	3301      	adds	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337c:	e002      	b.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3b01      	subs	r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d102      	bne.n	8003398 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f2      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d110      	bne.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e00f      	b.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d007      	beq.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c0:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40007000 	.word	0x40007000
 80033dc:	20000010 	.word	0x20000010
 80033e0:	431bde83 	.word	0x431bde83

080033e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e3d4      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f6:	4ba1      	ldr	r3, [pc, #644]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003400:	4b9e      	ldr	r3, [pc, #632]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80e4 	beq.w	80035e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_RCC_OscConfig+0x4a>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	f040 808b 	bne.w	800353c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b01      	cmp	r3, #1
 800342a:	f040 8087 	bne.w	800353c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342e:	4b93      	ldr	r3, [pc, #588]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x62>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e3ac      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1a      	ldr	r2, [r3, #32]
 800344a:	4b8c      	ldr	r3, [pc, #560]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_RCC_OscConfig+0x7c>
 8003456:	4b89      	ldr	r3, [pc, #548]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345e:	e005      	b.n	800346c <HAL_RCC_OscConfig+0x88>
 8003460:	4b86      	ldr	r3, [pc, #536]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346c:	4293      	cmp	r3, r2
 800346e:	d223      	bcs.n	80034b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fd73 	bl	8003f60 <RCC_SetFlashLatencyFromMSIRange>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e38d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003484:	4b7d      	ldr	r3, [pc, #500]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a7c      	ldr	r2, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800348a:	f043 0308 	orr.w	r3, r3, #8
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b7a      	ldr	r3, [pc, #488]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4977      	ldr	r1, [pc, #476]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a2:	4b76      	ldr	r3, [pc, #472]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	4972      	ldr	r1, [pc, #456]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
 80034b6:	e025      	b.n	8003504 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034b8:	4b70      	ldr	r3, [pc, #448]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6f      	ldr	r2, [pc, #444]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034be:	f043 0308 	orr.w	r3, r3, #8
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b6d      	ldr	r3, [pc, #436]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	496a      	ldr	r1, [pc, #424]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d6:	4b69      	ldr	r3, [pc, #420]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	4965      	ldr	r1, [pc, #404]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fd33 	bl	8003f60 <RCC_SetFlashLatencyFromMSIRange>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e34d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003504:	f000 fc36 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b5c      	ldr	r3, [pc, #368]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	495a      	ldr	r1, [pc, #360]	; (8003680 <HAL_RCC_OscConfig+0x29c>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x2a0>)
 8003522:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003524:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCC_OscConfig+0x2a4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fda1 	bl	8001070 <HAL_InitTick>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d052      	beq.n	80035de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	e331      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d032      	beq.n	80035aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003544:	4b4d      	ldr	r3, [pc, #308]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a4c      	ldr	r2, [pc, #304]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003550:	f7fe f87c 	bl	800164c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003558:	f7fe f878 	bl	800164c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e31a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356a:	4b44      	ldr	r3, [pc, #272]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003576:	4b41      	ldr	r3, [pc, #260]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a40      	ldr	r2, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b3e      	ldr	r3, [pc, #248]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	493b      	ldr	r1, [pc, #236]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	4936      	ldr	r1, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
 80035a8:	e01a      	b.n	80035e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035aa:	4b34      	ldr	r3, [pc, #208]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a33      	ldr	r2, [pc, #204]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035b6:	f7fe f849 	bl	800164c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035be:	f7fe f845 	bl	800164c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e2e7      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_RCC_OscConfig+0x298>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x1da>
 80035dc:	e000      	b.n	80035e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d074      	beq.n	80036d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d005      	beq.n	80035fe <HAL_RCC_OscConfig+0x21a>
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d10e      	bne.n	8003616 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d10b      	bne.n	8003616 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fe:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d064      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2f0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d160      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e2c4      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x24a>
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a15      	ldr	r2, [pc, #84]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	e01d      	b.n	800366a <HAL_RCC_OscConfig+0x286>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x26e>
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0f      	ldr	r2, [pc, #60]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800363e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x298>)
 800364a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x286>
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x298>)
 8003664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01c      	beq.n	80036ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd ffeb 	bl	800164c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003678:	e011      	b.n	800369e <HAL_RCC_OscConfig+0x2ba>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	08008ec4 	.word	0x08008ec4
 8003684:	20000010 	.word	0x20000010
 8003688:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fd ffde 	bl	800164c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e280      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369e:	4baf      	ldr	r3, [pc, #700]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x2a8>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd ffce 	bl	800164c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fd ffca 	bl	800164c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e26c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c6:	4ba5      	ldr	r3, [pc, #660]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2d0>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d060      	beq.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_OscConfig+0x310>
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d119      	bne.n	8003722 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d116      	bne.n	8003722 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f4:	4b99      	ldr	r3, [pc, #612]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_OscConfig+0x328>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e249      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b93      	ldr	r3, [pc, #588]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	4990      	ldr	r1, [pc, #576]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003720:	e040      	b.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d023      	beq.n	8003772 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372a:	4b8c      	ldr	r3, [pc, #560]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a8b      	ldr	r2, [pc, #556]	; (800395c <HAL_RCC_OscConfig+0x578>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fd ff89 	bl	800164c <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373e:	f7fd ff85 	bl	800164c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e227      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003750:	4b82      	ldr	r3, [pc, #520]	; (800395c <HAL_RCC_OscConfig+0x578>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b7f      	ldr	r3, [pc, #508]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	497c      	ldr	r1, [pc, #496]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
 8003770:	e018      	b.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003772:	4b7a      	ldr	r3, [pc, #488]	; (800395c <HAL_RCC_OscConfig+0x578>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a79      	ldr	r2, [pc, #484]	; (800395c <HAL_RCC_OscConfig+0x578>)
 8003778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fd ff65 	bl	800164c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003786:	f7fd ff61 	bl	800164c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e203      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003798:	4b70      	ldr	r3, [pc, #448]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03c      	beq.n	800382a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b8:	4b68      	ldr	r3, [pc, #416]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	4a67      	ldr	r2, [pc, #412]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fd ff40 	bl	800164c <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fd ff3c 	bl	800164c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1de      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037e2:	4b5e      	ldr	r3, [pc, #376]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0ef      	beq.n	80037d0 <HAL_RCC_OscConfig+0x3ec>
 80037f0:	e01b      	b.n	800382a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f2:	4b5a      	ldr	r3, [pc, #360]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80037f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f8:	4a58      	ldr	r2, [pc, #352]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fd ff23 	bl	800164c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	f7fd ff1f 	bl	800164c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1c1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800381c:	4b4f      	ldr	r3, [pc, #316]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ef      	bne.n	800380a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80a6 	beq.w	8003984 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800383c:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003848:	4b44      	ldr	r3, [pc, #272]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	4a43      	ldr	r2, [pc, #268]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	6593      	str	r3, [r2, #88]	; 0x58
 8003854:	4b41      	ldr	r3, [pc, #260]	; (800395c <HAL_RCC_OscConfig+0x578>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003860:	2301      	movs	r3, #1
 8003862:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003864:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCC_OscConfig+0x57c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d118      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003870:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_RCC_OscConfig+0x57c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3a      	ldr	r2, [pc, #232]	; (8003960 <HAL_RCC_OscConfig+0x57c>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387c:	f7fd fee6 	bl	800164c <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003884:	f7fd fee2 	bl	800164c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e184      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003896:	4b32      	ldr	r3, [pc, #200]	; (8003960 <HAL_RCC_OscConfig+0x57c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d108      	bne.n	80038bc <HAL_RCC_OscConfig+0x4d8>
 80038aa:	4b2c      	ldr	r3, [pc, #176]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	4a2a      	ldr	r2, [pc, #168]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ba:	e024      	b.n	8003906 <HAL_RCC_OscConfig+0x522>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d110      	bne.n	80038e6 <HAL_RCC_OscConfig+0x502>
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	4a24      	ldr	r2, [pc, #144]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d4:	4b21      	ldr	r3, [pc, #132]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	4a20      	ldr	r2, [pc, #128]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e4:	e00f      	b.n	8003906 <HAL_RCC_OscConfig+0x522>
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f6:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	4a17      	ldr	r2, [pc, #92]	; (800395c <HAL_RCC_OscConfig+0x578>)
 80038fe:	f023 0304 	bic.w	r3, r3, #4
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fd fe9d 	bl	800164c <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003914:	e00a      	b.n	800392c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fd fe99 	bl	800164c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f241 3288 	movw	r2, #5000	; 0x1388
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e139      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_OscConfig+0x578>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ed      	beq.n	8003916 <HAL_RCC_OscConfig+0x532>
 800393a:	e01a      	b.n	8003972 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fd fe86 	bl	800164c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003942:	e00f      	b.n	8003964 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fd fe82 	bl	800164c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d906      	bls.n	8003964 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e122      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003964:	4b90      	ldr	r3, [pc, #576]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e8      	bne.n	8003944 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003972:	7ffb      	ldrb	r3, [r7, #31]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b8b      	ldr	r3, [pc, #556]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	4a8a      	ldr	r2, [pc, #552]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003982:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8108 	beq.w	8003b9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b02      	cmp	r3, #2
 8003994:	f040 80d0 	bne.w	8003b38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003998:	4b83      	ldr	r3, [pc, #524]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d130      	bne.n	8003a0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	3b01      	subs	r3, #1
 80039b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d127      	bne.n	8003a0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d11f      	bne.n	8003a0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039d8:	2a07      	cmp	r2, #7
 80039da:	bf14      	ite	ne
 80039dc:	2201      	movne	r2, #1
 80039de:	2200      	moveq	r2, #0
 80039e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d113      	bne.n	8003a0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	3b01      	subs	r3, #1
 80039f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d109      	bne.n	8003a0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	3b01      	subs	r3, #1
 8003a08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d06e      	beq.n	8003aec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	d069      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a14:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0b7      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a30:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5c      	ldr	r2, [pc, #368]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a3c:	f7fd fe06 	bl	800164c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fd fe02 	bl	800164c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0a4      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a56:	4b54      	ldr	r3, [pc, #336]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	4b51      	ldr	r3, [pc, #324]	; (8003bac <HAL_RCC_OscConfig+0x7c8>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a72:	3a01      	subs	r2, #1
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7c:	0212      	lsls	r2, r2, #8
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a84:	0852      	lsrs	r2, r2, #1
 8003a86:	3a01      	subs	r2, #1
 8003a88:	0552      	lsls	r2, r2, #21
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a90:	0852      	lsrs	r2, r2, #1
 8003a92:	3a01      	subs	r2, #1
 8003a94:	0652      	lsls	r2, r2, #25
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a9c:	0912      	lsrs	r2, r2, #4
 8003a9e:	0452      	lsls	r2, r2, #17
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	4941      	ldr	r1, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a3e      	ldr	r2, [pc, #248]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac0:	f7fd fdc4 	bl	800164c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd fdc0 	bl	800164c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e062      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ae6:	e05a      	b.n	8003b9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e059      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aec:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d152      	bne.n	8003b9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003af8:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b10:	f7fd fd9c 	bl	800164c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd fd98 	bl	800164c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e03a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x734>
 8003b36:	e032      	b.n	8003b9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d02d      	beq.n	8003b9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d105      	bne.n	8003b62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b5c:	f023 0303 	bic.w	r3, r3, #3
 8003b60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fd fd6b 	bl	800164c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fd fd67 	bl	800164c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e009      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_OscConfig+0x7c4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x796>
 8003b98:	e001      	b.n	8003b9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	f99d808c 	.word	0xf99d808c

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0c8      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d910      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 0207 	bic.w	r2, r3, #7
 8003bda:	4961      	ldr	r1, [pc, #388]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b5f      	ldr	r3, [pc, #380]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0b0      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d04c      	beq.n	8003c9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c08:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d121      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e09e      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d107      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c20:	4b50      	ldr	r3, [pc, #320]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e092      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c38:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e086      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c48:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e07e      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c58:	4b42      	ldr	r3, [pc, #264]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 0203 	bic.w	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	493f      	ldr	r1, [pc, #252]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6a:	f7fd fcef 	bl	800164c <HAL_GetTick>
 8003c6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c72:	f7fd fceb 	bl	800164c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e066      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 020c 	and.w	r2, r3, #12
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d1eb      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca6:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	492c      	ldr	r1, [pc, #176]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d210      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4924      	ldr	r1, [pc, #144]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_RCC_ClockConfig+0x1b0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e036      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4918      	ldr	r1, [pc, #96]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4910      	ldr	r1, [pc, #64]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d26:	f000 f825 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <HAL_RCC_ClockConfig+0x1b4>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490c      	ldr	r1, [pc, #48]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd f990 	bl	8001070 <HAL_InitTick>
 8003d50:	4603      	mov	r3, r0
 8003d52:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d54:	7afb      	ldrb	r3, [r7, #11]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40022000 	.word	0x40022000
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08008ec4 	.word	0x08008ec4
 8003d6c:	20000010 	.word	0x20000010
 8003d70:	20000018 	.word	0x20000018

08003d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b089      	sub	sp, #36	; 0x24
 8003d78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d82:	4b3e      	ldr	r3, [pc, #248]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x34>
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d121      	bne.n	8003de6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d11e      	bne.n	8003de6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003da8:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003db4:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10d      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d102      	bne.n	8003df2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dec:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	e004      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d134      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d003      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d003      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0xac>
 8003e18:	e005      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e1c:	617b      	str	r3, [r7, #20]
      break;
 8003e1e:	e005      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e22:	617b      	str	r3, [r7, #20]
      break;
 8003e24:	e002      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	617b      	str	r3, [r7, #20]
      break;
 8003e2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	3301      	adds	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	fb02 f203 	mul.w	r2, r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	0e5b      	lsrs	r3, r3, #25
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	08008edc 	.word	0x08008edc
 8003e84:	00f42400 	.word	0x00f42400
 8003e88:	007a1200 	.word	0x007a1200

08003e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000010 	.word	0x20000010

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ea8:	f7ff fff0 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4904      	ldr	r1, [pc, #16]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08008ed4 	.word	0x08008ed4

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ed4:	f7ff ffda 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0adb      	lsrs	r3, r3, #11
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08008ed4 	.word	0x08008ed4

08003efc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	220f      	movs	r2, #15
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f0c:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_GetClockConfig+0x5c>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0203 	and.w	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCC_GetClockConfig+0x5c>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_RCC_GetClockConfig+0x5c>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	08db      	lsrs	r3, r3, #3
 8003f36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <HAL_RCC_GetClockConfig+0x60>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0207 	and.w	r2, r3, #7
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	601a      	str	r2, [r3, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40022000 	.word	0x40022000

08003f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f6c:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f78:	f7ff f9d0 	bl	800331c <HAL_PWREx_GetVoltageRange>
 8003f7c:	6178      	str	r0, [r7, #20]
 8003f7e:	e014      	b.n	8003faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4b25      	ldr	r3, [pc, #148]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f98:	f7ff f9c0 	bl	800331c <HAL_PWREx_GetVoltageRange>
 8003f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d10b      	bne.n	8003fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b80      	cmp	r3, #128	; 0x80
 8003fb6:	d919      	bls.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2ba0      	cmp	r3, #160	; 0xa0
 8003fbc:	d902      	bls.n	8003fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	e013      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	e010      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d902      	bls.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e00a      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d102      	bne.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fdc:	2302      	movs	r3, #2
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e004      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b70      	cmp	r3, #112	; 0x70
 8003fe6:	d101      	bne.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe8:	2301      	movs	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	4909      	ldr	r1, [pc, #36]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ffc:	4b07      	ldr	r3, [pc, #28]	; (800401c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	40022000 	.word	0x40022000

08004020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004028:	2300      	movs	r3, #0
 800402a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800402c:	2300      	movs	r3, #0
 800402e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004038:	2b00      	cmp	r3, #0
 800403a:	d041      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004040:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004044:	d02a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004046:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800404a:	d824      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800404c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004050:	d008      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004056:	d81e      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800405c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004060:	d010      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004062:	e018      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004064:	4b86      	ldr	r3, [pc, #536]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a85      	ldr	r2, [pc, #532]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004070:	e015      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fabb 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004082:	e00c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3320      	adds	r3, #32
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fba6 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004094:	e003      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	74fb      	strb	r3, [r7, #19]
      break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800409c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10b      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040a4:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b2:	4973      	ldr	r1, [pc, #460]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d041      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040d4:	d02a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040da:	d824      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e0:	d008      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e6:	d81e      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f0:	d010      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040f2:	e018      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040f4:	4b62      	ldr	r3, [pc, #392]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a61      	ldr	r2, [pc, #388]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004100:	e015      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 fa73 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004112:	e00c      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3320      	adds	r3, #32
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fb5e 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004124:	e003      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	74fb      	strb	r3, [r7, #19]
      break;
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800412c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004134:	4b52      	ldr	r3, [pc, #328]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004142:	494f      	ldr	r1, [pc, #316]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a0 	beq.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415e:	2300      	movs	r3, #0
 8004160:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	4b41      	ldr	r3, [pc, #260]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	4a40      	ldr	r2, [pc, #256]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	6593      	str	r3, [r2, #88]	; 0x58
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004190:	2301      	movs	r3, #1
 8004192:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004194:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3a      	ldr	r2, [pc, #232]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a0:	f7fd fa54 	bl	800164c <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041a6:	e009      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7fd fa50 	bl	800164c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	74fb      	strb	r3, [r7, #19]
        break;
 80041ba:	e005      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ef      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d15c      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d019      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f8:	4b21      	ldr	r3, [pc, #132]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	4a20      	ldr	r2, [pc, #128]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004218:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fd fa0f 	bl	800164c <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004230:	e00b      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004232:	f7fd fa0b 	bl	800164c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d902      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	74fb      	strb	r3, [r7, #19]
            break;
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ec      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426e:	4904      	ldr	r1, [pc, #16]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004276:	e009      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	74bb      	strb	r3, [r7, #18]
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428c:	7c7b      	ldrb	r3, [r7, #17]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d105      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004292:	4b9e      	ldr	r3, [pc, #632]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4a9d      	ldr	r2, [pc, #628]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042aa:	4b98      	ldr	r3, [pc, #608]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f023 0203 	bic.w	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	4994      	ldr	r1, [pc, #592]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042cc:	4b8f      	ldr	r3, [pc, #572]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 020c 	bic.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	498c      	ldr	r1, [pc, #560]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ee:	4b87      	ldr	r3, [pc, #540]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	4983      	ldr	r1, [pc, #524]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004310:	4b7e      	ldr	r3, [pc, #504]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	497b      	ldr	r1, [pc, #492]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004332:	4b76      	ldr	r3, [pc, #472]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004340:	4972      	ldr	r1, [pc, #456]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004354:	4b6d      	ldr	r3, [pc, #436]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	496a      	ldr	r1, [pc, #424]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	4961      	ldr	r1, [pc, #388]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004398:	4b5c      	ldr	r3, [pc, #368]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	4959      	ldr	r1, [pc, #356]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ba:	4b54      	ldr	r3, [pc, #336]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	4950      	ldr	r1, [pc, #320]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043dc:	4b4b      	ldr	r3, [pc, #300]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	4948      	ldr	r1, [pc, #288]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	493f      	ldr	r1, [pc, #252]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d028      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004420:	4b3a      	ldr	r3, [pc, #232]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442e:	4937      	ldr	r1, [pc, #220]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443e:	d106      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a31      	ldr	r2, [pc, #196]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444a:	60d3      	str	r3, [r2, #12]
 800444c:	e011      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004456:	d10c      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	2101      	movs	r1, #1
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f8c8 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d028      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800447e:	4b23      	ldr	r3, [pc, #140]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	491f      	ldr	r1, [pc, #124]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800449c:	d106      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449e:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4a1a      	ldr	r2, [pc, #104]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a8:	60d3      	str	r3, [r2, #12]
 80044aa:	e011      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f899 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02b      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fa:	d109      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a02      	ldr	r2, [pc, #8]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004506:	60d3      	str	r3, [r2, #12]
 8004508:	e014      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004518:	d10c      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f867 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02f      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454e:	4928      	ldr	r1, [pc, #160]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800455e:	d10d      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f844 	bl	80045f4 <RCCEx_PLLSAI1_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
 800457a:	e011      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3320      	adds	r3, #32
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f925 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ba:	490d      	ldr	r1, [pc, #52]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000

080045f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004602:	4b75      	ldr	r3, [pc, #468]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d018      	beq.n	8004640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800460e:	4b72      	ldr	r3, [pc, #456]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0203 	and.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d10d      	bne.n	800463a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
       ||
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004626:	4b6c      	ldr	r3, [pc, #432]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
       ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d047      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e044      	b.n	80046ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d018      	beq.n	800467a <RCCEx_PLLSAI1_Config+0x86>
 8004648:	2b03      	cmp	r3, #3
 800464a:	d825      	bhi.n	8004698 <RCCEx_PLLSAI1_Config+0xa4>
 800464c:	2b01      	cmp	r3, #1
 800464e:	d002      	beq.n	8004656 <RCCEx_PLLSAI1_Config+0x62>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d009      	beq.n	8004668 <RCCEx_PLLSAI1_Config+0x74>
 8004654:	e020      	b.n	8004698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004656:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11d      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004666:	e01a      	b.n	800469e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004668:	4b5b      	ldr	r3, [pc, #364]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004678:	e013      	b.n	80046a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467a:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004686:	4b54      	ldr	r3, [pc, #336]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004696:	e006      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e004      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ae:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	430b      	orrs	r3, r1
 80046c4:	4944      	ldr	r1, [pc, #272]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d17d      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046d0:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a40      	ldr	r2, [pc, #256]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046dc:	f7fc ffb6 	bl	800164c <HAL_GetTick>
 80046e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e2:	e009      	b.n	80046f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046e4:	f7fc ffb2 	bl	800164c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d902      	bls.n	80046f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	73fb      	strb	r3, [r7, #15]
        break;
 80046f6:	e005      	b.n	8004704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046f8:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ef      	bne.n	80046e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d160      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d111      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	0211      	lsls	r1, r2, #8
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	0912      	lsrs	r2, r2, #4
 8004728:	0452      	lsls	r2, r2, #17
 800472a:	430a      	orrs	r2, r1
 800472c:	492a      	ldr	r1, [pc, #168]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
 8004732:	e027      	b.n	8004784 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d112      	bne.n	8004760 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6892      	ldr	r2, [r2, #8]
 800474a:	0211      	lsls	r1, r2, #8
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6912      	ldr	r2, [r2, #16]
 8004750:	0852      	lsrs	r2, r2, #1
 8004752:	3a01      	subs	r2, #1
 8004754:	0552      	lsls	r2, r2, #21
 8004756:	430a      	orrs	r2, r1
 8004758:	491f      	ldr	r1, [pc, #124]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	610b      	str	r3, [r1, #16]
 800475e:	e011      	b.n	8004784 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004760:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6952      	ldr	r2, [r2, #20]
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0652      	lsls	r2, r2, #25
 800477c:	430a      	orrs	r2, r1
 800477e:	4916      	ldr	r1, [pc, #88]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004784:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800478e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fc ff5c 	bl	800164c <HAL_GetTick>
 8004794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004796:	e009      	b.n	80047ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004798:	f7fc ff58 	bl	800164c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	73fb      	strb	r3, [r7, #15]
          break;
 80047aa:	e005      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	4904      	ldr	r1, [pc, #16]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000

080047dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ea:	4b6a      	ldr	r3, [pc, #424]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047f6:	4b67      	ldr	r3, [pc, #412]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d10d      	bne.n	8004822 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
       ||
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800480e:	4b61      	ldr	r3, [pc, #388]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
       ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d047      	beq.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
 8004826:	e044      	b.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d018      	beq.n	8004862 <RCCEx_PLLSAI2_Config+0x86>
 8004830:	2b03      	cmp	r3, #3
 8004832:	d825      	bhi.n	8004880 <RCCEx_PLLSAI2_Config+0xa4>
 8004834:	2b01      	cmp	r3, #1
 8004836:	d002      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x62>
 8004838:	2b02      	cmp	r3, #2
 800483a:	d009      	beq.n	8004850 <RCCEx_PLLSAI2_Config+0x74>
 800483c:	e020      	b.n	8004880 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800483e:	4b55      	ldr	r3, [pc, #340]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11d      	bne.n	8004886 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484e:	e01a      	b.n	8004886 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004850:	4b50      	ldr	r3, [pc, #320]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004860:	e013      	b.n	800488a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004862:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800486e:	4b49      	ldr	r3, [pc, #292]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800487e:	e006      	b.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e004      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800488e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004896:	4b3f      	ldr	r3, [pc, #252]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	430b      	orrs	r3, r1
 80048ac:	4939      	ldr	r1, [pc, #228]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d167      	bne.n	8004988 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a35      	ldr	r2, [pc, #212]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c4:	f7fc fec2 	bl	800164c <HAL_GetTick>
 80048c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ca:	e009      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048cc:	f7fc febe 	bl	800164c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	73fb      	strb	r3, [r7, #15]
        break;
 80048de:	e005      	b.n	80048ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ef      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d14a      	bne.n	8004988 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d111      	bne.n	800491c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6892      	ldr	r2, [r2, #8]
 8004908:	0211      	lsls	r1, r2, #8
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	0912      	lsrs	r2, r2, #4
 8004910:	0452      	lsls	r2, r2, #17
 8004912:	430a      	orrs	r2, r1
 8004914:	491f      	ldr	r1, [pc, #124]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	614b      	str	r3, [r1, #20]
 800491a:	e011      	b.n	8004940 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6892      	ldr	r2, [r2, #8]
 800492c:	0211      	lsls	r1, r2, #8
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6912      	ldr	r2, [r2, #16]
 8004932:	0852      	lsrs	r2, r2, #1
 8004934:	3a01      	subs	r2, #1
 8004936:	0652      	lsls	r2, r2, #25
 8004938:	430a      	orrs	r2, r1
 800493a:	4916      	ldr	r1, [pc, #88]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004940:	4b14      	ldr	r3, [pc, #80]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a13      	ldr	r2, [pc, #76]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fc fe7e 	bl	800164c <HAL_GetTick>
 8004950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004952:	e009      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004954:	f7fc fe7a 	bl	800164c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d902      	bls.n	8004968 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	73fb      	strb	r3, [r7, #15]
          break;
 8004966:	e005      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ef      	beq.n	8004954 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4904      	ldr	r1, [pc, #16]	; (8004994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004984:	4313      	orrs	r3, r2
 8004986:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000

08004998 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06c      	beq.n	8004a84 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc f8a8 	bl	8000b14 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	22ca      	movs	r2, #202	; 0xca
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2253      	movs	r2, #83	; 0x53
 80049da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa49 	bl	8004e74 <RTC_EnterInitMode>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d14b      	bne.n	8004a84 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6899      	ldr	r1, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68d2      	ldr	r2, [r2, #12]
 8004a26:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6919      	ldr	r1, [r3, #16]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	041a      	lsls	r2, r3, #16
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fa4d 	bl	8004edc <RTC_ExitInitMode>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11b      	bne.n	8004a84 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0203 	bic.w	r2, r2, #3
 8004a5a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	22ff      	movs	r2, #255	; 0xff
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a8e:	b590      	push	{r4, r7, lr}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RTC_SetTime+0x1a>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e08b      	b.n	8004bc0 <HAL_RTC_SetTime+0x132>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	22ca      	movs	r2, #202	; 0xca
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2253      	movs	r2, #83	; 0x53
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f9d3 	bl	8004e74 <RTC_EnterInitMode>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d163      	bne.n	8004ba0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d126      	bne.n	8004b2c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fa2e 	bl	8004f58 <RTC_ByteToBcd2>
 8004afc:	4603      	mov	r3, r0
 8004afe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fa27 	bl	8004f58 <RTC_ByteToBcd2>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b0e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa1f 	bl	8004f58 <RTC_ByteToBcd2>
 8004b1a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b1c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e018      	b.n	8004b5e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b4c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b52:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	78db      	ldrb	r3, [r3, #3]
 8004b58:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f9a0 	bl	8004edc <RTC_ExitInitMode>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	22ff      	movs	r2, #255	; 0xff
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}

08004bc8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004bf6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	0d9b      	lsrs	r3, r3, #22
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11a      	bne.n	8004c76 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f9a7 	bl	8004f98 <RTC_Bcd2ToByte>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f99e 	bl	8004f98 <RTC_Bcd2ToByte>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	789b      	ldrb	r3, [r3, #2]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f995 	bl	8004f98 <RTC_Bcd2ToByte>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c80:	b590      	push	{r4, r7, lr}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_RTC_SetDate+0x1a>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e075      	b.n	8004d86 <HAL_RTC_SetDate+0x106>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10e      	bne.n	8004cce <HAL_RTC_SetDate+0x4e>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	f023 0310 	bic.w	r3, r3, #16
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	330a      	adds	r3, #10
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11c      	bne.n	8004d0e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	78db      	ldrb	r3, [r3, #3]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f93d 	bl	8004f58 <RTC_ByteToBcd2>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f936 	bl	8004f58 <RTC_ByteToBcd2>
 8004cec:	4603      	mov	r3, r0
 8004cee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004cf0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	789b      	ldrb	r3, [r3, #2]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f92e 	bl	8004f58 <RTC_ByteToBcd2>
 8004cfc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cfe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e00e      	b.n	8004d2c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	78db      	ldrb	r3, [r3, #3]
 8004d12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004d1a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004d20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	22ca      	movs	r2, #202	; 0xca
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2253      	movs	r2, #83	; 0x53
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f899 	bl	8004e74 <RTC_EnterInitMode>
 8004d42:	4603      	mov	r3, r0
 8004d44:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d5a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f8bd 	bl	8004edc <RTC_ExitInitMode>
 8004d62:	4603      	mov	r3, r0
 8004d64:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd90      	pop	{r4, r7, pc}

08004d8e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004da8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	0b5b      	lsrs	r3, r3, #13
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11a      	bne.n	8004e1e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	78db      	ldrb	r3, [r3, #3]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f8d3 	bl	8004f98 <RTC_Bcd2ToByte>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f8ca 	bl	8004f98 <RTC_Bcd2ToByte>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	789b      	ldrb	r3, [r3, #2]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f8c1 	bl	8004f98 <RTC_Bcd2ToByte>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e3e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004e40:	f7fc fc04 	bl	800164c <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e46:	e009      	b.n	8004e5c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e48:	f7fc fc00 	bl	800164c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e56:	d901      	bls.n	8004e5c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e007      	b.n	8004e6c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0ee      	beq.n	8004e48 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d120      	bne.n	8004ed0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e98:	f7fc fbd8 	bl	800164c <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e9e:	e00d      	b.n	8004ebc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ea0:	f7fc fbd4 	bl	800164c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eae:	d905      	bls.n	8004ebc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <RTC_EnterInitMode+0x5c>
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d1e7      	bne.n	8004ea0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004ee8:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004ef4:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10c      	bne.n	8004f1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff91 	bl	8004e28 <HAL_RTC_WaitForSynchro>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01e      	beq.n	8004f4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2203      	movs	r2, #3
 8004f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e017      	b.n	8004f4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4a0d      	ldr	r2, [pc, #52]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f20:	f023 0320 	bic.w	r3, r3, #32
 8004f24:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ff7e 	bl	8004e28 <HAL_RTC_WaitForSynchro>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2203      	movs	r2, #3
 8004f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a04      	ldr	r2, [pc, #16]	; (8004f54 <RTC_ExitInitMode+0x78>)
 8004f44:	f043 0320 	orr.w	r3, r3, #32
 8004f48:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40002800 	.word	0x40002800

08004f58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004f6a:	e005      	b.n	8004f78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004f72:	7afb      	ldrb	r3, [r7, #11]
 8004f74:	3b0a      	subs	r3, #10
 8004f76:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004f78:	7afb      	ldrb	r3, [r7, #11]
 8004f7a:	2b09      	cmp	r3, #9
 8004f7c:	d8f6      	bhi.n	8004f6c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	7afb      	ldrb	r3, [r7, #11]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b2db      	uxtb	r3, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	0092      	lsls	r2, r2, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	b2db      	uxtb	r3, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e095      	b.n	800510a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d009      	beq.n	8005004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	61da      	str	r2, [r3, #28]
 8004ff6:	e005      	b.n	8005004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fb fe70 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005044:	d902      	bls.n	800504c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e002      	b.n	8005052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800504c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800505a:	d007      	beq.n	800506c <HAL_SPI_Init+0xa0>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005064:	d002      	beq.n	800506c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	ea42 0103 	orr.w	r1, r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 0204 	and.w	r2, r3, #4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050e8:	ea42 0103 	orr.w	r1, r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b088      	sub	sp, #32
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_SPI_Transmit+0x22>
 8005130:	2302      	movs	r3, #2
 8005132:	e158      	b.n	80053e6 <HAL_SPI_Transmit+0x2d4>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800513c:	f7fc fa86 	bl	800164c <HAL_GetTick>
 8005140:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d002      	beq.n	8005158 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005152:	2302      	movs	r3, #2
 8005154:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005156:	e13d      	b.n	80053d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_SPI_Transmit+0x52>
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005168:	e134      	b.n	80053d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2203      	movs	r2, #3
 800516e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b4:	d10f      	bne.n	80051d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d007      	beq.n	80051f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051fc:	d94b      	bls.n	8005296 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_SPI_Transmit+0xfa>
 8005206:	8afb      	ldrh	r3, [r7, #22]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d13e      	bne.n	800528a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005230:	e02b      	b.n	800528a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d112      	bne.n	8005266 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	881a      	ldrh	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005264:	e011      	b.n	800528a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005266:	f7fc f9f1 	bl	800164c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d803      	bhi.n	800527e <HAL_SPI_Transmit+0x16c>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527c:	d102      	bne.n	8005284 <HAL_SPI_Transmit+0x172>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005288:	e0a4      	b.n	80053d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ce      	bne.n	8005232 <HAL_SPI_Transmit+0x120>
 8005294:	e07c      	b.n	8005390 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x192>
 800529e:	8afb      	ldrh	r3, [r7, #22]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d170      	bne.n	8005386 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d912      	bls.n	80052d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	881a      	ldrh	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b02      	subs	r3, #2
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052d2:	e058      	b.n	8005386 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	7812      	ldrb	r2, [r2, #0]
 80052e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80052fa:	e044      	b.n	8005386 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d12b      	bne.n	8005362 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	d912      	bls.n	800533a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	881a      	ldrh	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	1c9a      	adds	r2, r3, #2
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b02      	subs	r3, #2
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005338:	e025      	b.n	8005386 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	330c      	adds	r3, #12
 8005344:	7812      	ldrb	r2, [r2, #0]
 8005346:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005360:	e011      	b.n	8005386 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005362:	f7fc f973 	bl	800164c <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d803      	bhi.n	800537a <HAL_SPI_Transmit+0x268>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005378:	d102      	bne.n	8005380 <HAL_SPI_Transmit+0x26e>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005384:	e026      	b.n	80053d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1b5      	bne.n	80052fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f949 	bl	800562c <SPI_EndRxTxTransaction>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e000      	b.n	80053d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80053d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005400:	f7fc f924 	bl	800164c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	4413      	add	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005410:	f7fc f91c 	bl	800164c <HAL_GetTick>
 8005414:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005416:	4b39      	ldr	r3, [pc, #228]	; (80054fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	015b      	lsls	r3, r3, #5
 800541c:	0d1b      	lsrs	r3, r3, #20
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005426:	e054      	b.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800542e:	d050      	beq.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005430:	f7fc f90c 	bl	800164c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	429a      	cmp	r2, r3
 800543e:	d902      	bls.n	8005446 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d13d      	bne.n	80054c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545e:	d111      	bne.n	8005484 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005468:	d004      	beq.n	8005474 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005472:	d107      	bne.n	8005484 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548c:	d10f      	bne.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e017      	b.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d19b      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000010 	.word	0x20000010

08005500 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005512:	f7fc f89b 	bl	800164c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	4413      	add	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005522:	f7fc f893 	bl	800164c <HAL_GetTick>
 8005526:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005530:	4b3d      	ldr	r3, [pc, #244]	; (8005628 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	00da      	lsls	r2, r3, #3
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	0d1b      	lsrs	r3, r3, #20
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005548:	e060      	b.n	800560c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005550:	d107      	bne.n	8005562 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005560:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005568:	d050      	beq.n	800560c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800556a:	f7fc f86f 	bl	800164c <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	429a      	cmp	r2, r3
 8005578:	d902      	bls.n	8005580 <SPI_WaitFifoStateUntilTimeout+0x80>
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d13d      	bne.n	80055fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800558e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005598:	d111      	bne.n	80055be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a2:	d004      	beq.n	80055ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ac:	d107      	bne.n	80055be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c6:	d10f      	bne.n	80055e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e010      	b.n	800561e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3b01      	subs	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d196      	bne.n	800554a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000010 	.word	0x20000010

0800562c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff5b 	bl	8005500 <SPI_WaitFifoStateUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	f043 0220 	orr.w	r2, r3, #32
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e027      	b.n	80056b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	2180      	movs	r1, #128	; 0x80
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7ff fec0 	bl	80053f0 <SPI_WaitFlagStateUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	f043 0220 	orr.w	r2, r3, #32
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e014      	b.n	80056b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff ff34 	bl	8005500 <SPI_WaitFifoStateUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e000      	b.n	80056b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e049      	b.n	800575e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f841 	bl	8005766 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f000 f9f8 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e04f      	b.n	8005834 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a23      	ldr	r2, [pc, #140]	; (8005840 <HAL_TIM_Base_Start_IT+0xc4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01d      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057be:	d018      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <HAL_TIM_Base_Start_IT+0xc8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <HAL_TIM_Base_Start_IT+0xcc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	; (800584c <HAL_TIM_Base_Start_IT+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_TIM_Base_Start_IT+0xd4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x76>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a19      	ldr	r2, [pc, #100]	; (8005854 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d115      	bne.n	800581e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_TIM_Base_Start_IT+0xdc>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b06      	cmp	r3, #6
 8005802:	d015      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580a:	d011      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581c:	e008      	b.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	e000      	b.n	8005832 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005830:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	00010007 	.word	0x00010007

0800585c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0202 	mvn.w	r2, #2
 8005888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f905 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8f7 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f908 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0204 	mvn.w	r2, #4
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8db 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8cd 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8de 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b08      	cmp	r3, #8
 8005918:	d122      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d11b      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0208 	mvn.w	r2, #8
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8b1 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8a3 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8b4 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b10      	cmp	r3, #16
 800596c:	d122      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b10      	cmp	r3, #16
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0210 	mvn.w	r2, #16
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2208      	movs	r2, #8
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f887 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f879 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f88a 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0201 	mvn.w	r2, #1
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb f826 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f8:	2b80      	cmp	r3, #128	; 0x80
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f914 	bl	8005c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1a:	d10e      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d107      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f907 	bl	8005c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d10e      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f838 	bl	8005ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d10e      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f06f 0220 	mvn.w	r2, #32
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8c7 	bl	8005c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a40      	ldr	r2, [pc, #256]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d00f      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3d      	ldr	r2, [pc, #244]	; (8005c04 <TIM_Base_SetConfig+0x118>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3c      	ldr	r2, [pc, #240]	; (8005c08 <TIM_Base_SetConfig+0x11c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3b      	ldr	r2, [pc, #236]	; (8005c0c <TIM_Base_SetConfig+0x120>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3a      	ldr	r2, [pc, #232]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2f      	ldr	r2, [pc, #188]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01f      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d01b      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	; (8005c04 <TIM_Base_SetConfig+0x118>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d017      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2b      	ldr	r2, [pc, #172]	; (8005c08 <TIM_Base_SetConfig+0x11c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2a      	ldr	r2, [pc, #168]	; (8005c0c <TIM_Base_SetConfig+0x120>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00f      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00b      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_Base_SetConfig+0x128>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d007      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a27      	ldr	r2, [pc, #156]	; (8005c18 <TIM_Base_SetConfig+0x12c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_Base_SetConfig+0x9a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <TIM_Base_SetConfig+0x130>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d108      	bne.n	8005b98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <TIM_Base_SetConfig+0x114>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00f      	beq.n	8005be4 <TIM_Base_SetConfig+0xf8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a12      	ldr	r2, [pc, #72]	; (8005c10 <TIM_Base_SetConfig+0x124>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00b      	beq.n	8005be4 <TIM_Base_SetConfig+0xf8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <TIM_Base_SetConfig+0x128>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d007      	beq.n	8005be4 <TIM_Base_SetConfig+0xf8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <TIM_Base_SetConfig+0x12c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_Base_SetConfig+0xf8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a0f      	ldr	r2, [pc, #60]	; (8005c1c <TIM_Base_SetConfig+0x130>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d103      	bne.n	8005bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	615a      	str	r2, [r3, #20]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	40000c00 	.word	0x40000c00
 8005c10:	40013400 	.word	0x40013400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800

08005c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e040      	b.n	8005cf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fb fb7e 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	; 0x24
 8005c88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fbe8 	bl	8006470 <UART_SetConfig>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e022      	b.n	8005cf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fe66 	bl	8006984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 feed 	bl	8006ac8 <UART_CheckIdleState>
 8005cee:	4603      	mov	r3, r0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b08b      	sub	sp, #44	; 0x2c
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d156      	bne.n	8005dbc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_UART_Transmit_IT+0x22>
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e04f      	b.n	8005dbe <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Transmit_IT+0x34>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e048      	b.n	8005dbe <HAL_UART_Transmit_IT+0xc6>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2221      	movs	r2, #33	; 0x21
 8005d5c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d66:	d107      	bne.n	8005d78 <HAL_UART_Transmit_IT+0x80>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <HAL_UART_Transmit_IT+0xd4>)
 8005d74:	669a      	str	r2, [r3, #104]	; 0x68
 8005d76:	e002      	b.n	8005d7e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <HAL_UART_Transmit_IT+0xd8>)
 8005d7c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	613b      	str	r3, [r7, #16]
   return(result);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e6      	bne.n	8005d86 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e000      	b.n	8005dbe <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	372c      	adds	r7, #44	; 0x2c
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	08007023 	.word	0x08007023
 8005dd0:	08006f6b 	.word	0x08006f6b

08005dd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d142      	bne.n	8005e70 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_UART_Receive_IT+0x22>
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e03b      	b.n	8005e72 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Receive_IT+0x34>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e034      	b.n	8005e72 <HAL_UART_Receive_IT+0x9e>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <HAL_UART_Receive_IT+0xa8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d01f      	beq.n	8005e60 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	623b      	str	r3, [r7, #32]
 8005e4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	69f9      	ldr	r1, [r7, #28]
 8005e52:	6a3a      	ldr	r2, [r7, #32]
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e60:	88fb      	ldrh	r3, [r7, #6]
 8005e62:	461a      	mov	r2, r3
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 ff3c 	bl	8006ce4 <UART_Start_Receive_IT>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	e000      	b.n	8005e72 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005e70:	2302      	movs	r3, #2
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3728      	adds	r7, #40	; 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40008000 	.word	0x40008000

08005e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b0ba      	sub	sp, #232	; 0xe8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eae:	4013      	ands	r3, r2
 8005eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d115      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00f      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 82a6 	beq.w	800642a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
      }
      return;
 8005ee6:	e2a0      	b.n	800642a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8117 	beq.w	8006120 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f02:	4b85      	ldr	r3, [pc, #532]	; (8006118 <HAL_UART_IRQHandler+0x298>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 810a 	beq.w	8006120 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d011      	beq.n	8005f3c <HAL_UART_IRQHandler+0xbc>
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f32:	f043 0201 	orr.w	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d011      	beq.n	8005f6c <HAL_UART_IRQHandler+0xec>
 8005f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f62:	f043 0204 	orr.w	r2, r3, #4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d011      	beq.n	8005f9c <HAL_UART_IRQHandler+0x11c>
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f92:	f043 0202 	orr.w	r2, r3, #2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d017      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fce:	f043 0208 	orr.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <HAL_UART_IRQHandler+0x18a>
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00c      	beq.n	800600a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 820c 	beq.w	800642e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d005      	beq.n	8006062 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04f      	beq.n	8006102 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 ff08 	bl	8006e78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d141      	bne.n	80060fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3308      	adds	r3, #8
 800607c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800608c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1d9      	bne.n	8006076 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d013      	beq.n	80060f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <HAL_UART_IRQHandler+0x29c>)
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fc ff1c 	bl	8002f14 <HAL_DMA_Abort_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d017      	beq.n	8006112 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	e00f      	b.n	8006112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9a6 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	e00b      	b.n	8006112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f9a2 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006100:	e007      	b.n	8006112 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f99e 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006110:	e18d      	b.n	800642e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006112:	bf00      	nop
    return;
 8006114:	e18b      	b.n	800642e <HAL_UART_IRQHandler+0x5ae>
 8006116:	bf00      	nop
 8006118:	04000120 	.word	0x04000120
 800611c:	08006f3f 	.word	0x08006f3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006124:	2b01      	cmp	r3, #1
 8006126:	f040 8146 	bne.w	80063b6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 813f 	beq.w	80063b6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8138 	beq.w	80063b6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2210      	movs	r2, #16
 800614c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	f040 80b4 	bne.w	80062c6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800616a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 815f 	beq.w	8006432 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800617a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800617e:	429a      	cmp	r2, r3
 8006180:	f080 8157 	bcs.w	8006432 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800618a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 8085 	bne.w	80062aa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1da      	bne.n	80061a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800620e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006212:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e1      	bne.n	80061ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3308      	adds	r3, #8
 800622c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3308      	adds	r3, #8
 8006246:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800624a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800624c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006250:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e3      	bne.n	8006226 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627a:	f023 0310 	bic.w	r3, r3, #16
 800627e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800628c:	65bb      	str	r3, [r7, #88]	; 0x58
 800628e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800629a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e4      	bne.n	800626a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fc fdf7 	bl	8002e98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8ca 	bl	8006458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062c4:	e0b5      	b.n	8006432 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 80a7 	beq.w	8006436 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80062e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80a2 	beq.w	8006436 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006314:	647b      	str	r3, [r7, #68]	; 0x44
 8006316:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800631a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e4      	bne.n	80062f2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3308      	adds	r3, #8
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	623b      	str	r3, [r7, #32]
   return(result);
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800634c:	633a      	str	r2, [r7, #48]	; 0x30
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e3      	bne.n	8006328 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0310 	bic.w	r3, r3, #16
 8006386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	617b      	str	r3, [r7, #20]
   return(result);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e4      	bne.n	8006372 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f852 	bl	8006458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063b4:	e03f      	b.n	8006436 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_UART_IRQHandler+0x560>
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 f80c 	bl	80073f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063de:	e02d      	b.n	800643c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01c      	beq.n	800643a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
    }
    return;
 8006408:	e017      	b.n	800643a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d012      	beq.n	800643c <HAL_UART_IRQHandler+0x5bc>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fe5d 	bl	80070e2 <UART_EndTransmit_IT>
    return;
 8006428:	e008      	b.n	800643c <HAL_UART_IRQHandler+0x5bc>
      return;
 800642a:	bf00      	nop
 800642c:	e006      	b.n	800643c <HAL_UART_IRQHandler+0x5bc>
    return;
 800642e:	bf00      	nop
 8006430:	e004      	b.n	800643c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HAL_UART_IRQHandler+0x5bc>
    return;
 800643a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800643c:	37e8      	adds	r7, #232	; 0xe8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop

08006444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006470:	b5b0      	push	{r4, r5, r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	4313      	orrs	r3, r2
 8006492:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4bad      	ldr	r3, [pc, #692]	; (8006750 <UART_SetConfig+0x2e0>)
 800649c:	4013      	ands	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	69f9      	ldr	r1, [r7, #28]
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4aa2      	ldr	r2, [pc, #648]	; (8006754 <UART_SetConfig+0x2e4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a99      	ldr	r2, [pc, #612]	; (8006758 <UART_SetConfig+0x2e8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d121      	bne.n	800653a <UART_SetConfig+0xca>
 80064f6:	4b99      	ldr	r3, [pc, #612]	; (800675c <UART_SetConfig+0x2ec>)
 80064f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	2b03      	cmp	r3, #3
 8006502:	d817      	bhi.n	8006534 <UART_SetConfig+0xc4>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <UART_SetConfig+0x9c>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006529 	.word	0x08006529
 8006514:	08006523 	.word	0x08006523
 8006518:	0800652f 	.word	0x0800652f
 800651c:	2301      	movs	r3, #1
 800651e:	76fb      	strb	r3, [r7, #27]
 8006520:	e0e7      	b.n	80066f2 <UART_SetConfig+0x282>
 8006522:	2302      	movs	r3, #2
 8006524:	76fb      	strb	r3, [r7, #27]
 8006526:	e0e4      	b.n	80066f2 <UART_SetConfig+0x282>
 8006528:	2304      	movs	r3, #4
 800652a:	76fb      	strb	r3, [r7, #27]
 800652c:	e0e1      	b.n	80066f2 <UART_SetConfig+0x282>
 800652e:	2308      	movs	r3, #8
 8006530:	76fb      	strb	r3, [r7, #27]
 8006532:	e0de      	b.n	80066f2 <UART_SetConfig+0x282>
 8006534:	2310      	movs	r3, #16
 8006536:	76fb      	strb	r3, [r7, #27]
 8006538:	e0db      	b.n	80066f2 <UART_SetConfig+0x282>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a88      	ldr	r2, [pc, #544]	; (8006760 <UART_SetConfig+0x2f0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d132      	bne.n	80065aa <UART_SetConfig+0x13a>
 8006544:	4b85      	ldr	r3, [pc, #532]	; (800675c <UART_SetConfig+0x2ec>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b0c      	cmp	r3, #12
 8006550:	d828      	bhi.n	80065a4 <UART_SetConfig+0x134>
 8006552:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0xe8>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	0800658d 	.word	0x0800658d
 800655c:	080065a5 	.word	0x080065a5
 8006560:	080065a5 	.word	0x080065a5
 8006564:	080065a5 	.word	0x080065a5
 8006568:	08006599 	.word	0x08006599
 800656c:	080065a5 	.word	0x080065a5
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065a5 	.word	0x080065a5
 8006578:	08006593 	.word	0x08006593
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065a5 	.word	0x080065a5
 8006588:	0800659f 	.word	0x0800659f
 800658c:	2300      	movs	r3, #0
 800658e:	76fb      	strb	r3, [r7, #27]
 8006590:	e0af      	b.n	80066f2 <UART_SetConfig+0x282>
 8006592:	2302      	movs	r3, #2
 8006594:	76fb      	strb	r3, [r7, #27]
 8006596:	e0ac      	b.n	80066f2 <UART_SetConfig+0x282>
 8006598:	2304      	movs	r3, #4
 800659a:	76fb      	strb	r3, [r7, #27]
 800659c:	e0a9      	b.n	80066f2 <UART_SetConfig+0x282>
 800659e:	2308      	movs	r3, #8
 80065a0:	76fb      	strb	r3, [r7, #27]
 80065a2:	e0a6      	b.n	80066f2 <UART_SetConfig+0x282>
 80065a4:	2310      	movs	r3, #16
 80065a6:	76fb      	strb	r3, [r7, #27]
 80065a8:	e0a3      	b.n	80066f2 <UART_SetConfig+0x282>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a6d      	ldr	r2, [pc, #436]	; (8006764 <UART_SetConfig+0x2f4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d120      	bne.n	80065f6 <UART_SetConfig+0x186>
 80065b4:	4b69      	ldr	r3, [pc, #420]	; (800675c <UART_SetConfig+0x2ec>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065be:	2b30      	cmp	r3, #48	; 0x30
 80065c0:	d013      	beq.n	80065ea <UART_SetConfig+0x17a>
 80065c2:	2b30      	cmp	r3, #48	; 0x30
 80065c4:	d814      	bhi.n	80065f0 <UART_SetConfig+0x180>
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d009      	beq.n	80065de <UART_SetConfig+0x16e>
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d810      	bhi.n	80065f0 <UART_SetConfig+0x180>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <UART_SetConfig+0x168>
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d006      	beq.n	80065e4 <UART_SetConfig+0x174>
 80065d6:	e00b      	b.n	80065f0 <UART_SetConfig+0x180>
 80065d8:	2300      	movs	r3, #0
 80065da:	76fb      	strb	r3, [r7, #27]
 80065dc:	e089      	b.n	80066f2 <UART_SetConfig+0x282>
 80065de:	2302      	movs	r3, #2
 80065e0:	76fb      	strb	r3, [r7, #27]
 80065e2:	e086      	b.n	80066f2 <UART_SetConfig+0x282>
 80065e4:	2304      	movs	r3, #4
 80065e6:	76fb      	strb	r3, [r7, #27]
 80065e8:	e083      	b.n	80066f2 <UART_SetConfig+0x282>
 80065ea:	2308      	movs	r3, #8
 80065ec:	76fb      	strb	r3, [r7, #27]
 80065ee:	e080      	b.n	80066f2 <UART_SetConfig+0x282>
 80065f0:	2310      	movs	r3, #16
 80065f2:	76fb      	strb	r3, [r7, #27]
 80065f4:	e07d      	b.n	80066f2 <UART_SetConfig+0x282>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a5b      	ldr	r2, [pc, #364]	; (8006768 <UART_SetConfig+0x2f8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d120      	bne.n	8006642 <UART_SetConfig+0x1d2>
 8006600:	4b56      	ldr	r3, [pc, #344]	; (800675c <UART_SetConfig+0x2ec>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800660a:	2bc0      	cmp	r3, #192	; 0xc0
 800660c:	d013      	beq.n	8006636 <UART_SetConfig+0x1c6>
 800660e:	2bc0      	cmp	r3, #192	; 0xc0
 8006610:	d814      	bhi.n	800663c <UART_SetConfig+0x1cc>
 8006612:	2b80      	cmp	r3, #128	; 0x80
 8006614:	d009      	beq.n	800662a <UART_SetConfig+0x1ba>
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d810      	bhi.n	800663c <UART_SetConfig+0x1cc>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <UART_SetConfig+0x1b4>
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d006      	beq.n	8006630 <UART_SetConfig+0x1c0>
 8006622:	e00b      	b.n	800663c <UART_SetConfig+0x1cc>
 8006624:	2300      	movs	r3, #0
 8006626:	76fb      	strb	r3, [r7, #27]
 8006628:	e063      	b.n	80066f2 <UART_SetConfig+0x282>
 800662a:	2302      	movs	r3, #2
 800662c:	76fb      	strb	r3, [r7, #27]
 800662e:	e060      	b.n	80066f2 <UART_SetConfig+0x282>
 8006630:	2304      	movs	r3, #4
 8006632:	76fb      	strb	r3, [r7, #27]
 8006634:	e05d      	b.n	80066f2 <UART_SetConfig+0x282>
 8006636:	2308      	movs	r3, #8
 8006638:	76fb      	strb	r3, [r7, #27]
 800663a:	e05a      	b.n	80066f2 <UART_SetConfig+0x282>
 800663c:	2310      	movs	r3, #16
 800663e:	76fb      	strb	r3, [r7, #27]
 8006640:	e057      	b.n	80066f2 <UART_SetConfig+0x282>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a49      	ldr	r2, [pc, #292]	; (800676c <UART_SetConfig+0x2fc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d125      	bne.n	8006698 <UART_SetConfig+0x228>
 800664c:	4b43      	ldr	r3, [pc, #268]	; (800675c <UART_SetConfig+0x2ec>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800665a:	d017      	beq.n	800668c <UART_SetConfig+0x21c>
 800665c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006660:	d817      	bhi.n	8006692 <UART_SetConfig+0x222>
 8006662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006666:	d00b      	beq.n	8006680 <UART_SetConfig+0x210>
 8006668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666c:	d811      	bhi.n	8006692 <UART_SetConfig+0x222>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <UART_SetConfig+0x20a>
 8006672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006676:	d006      	beq.n	8006686 <UART_SetConfig+0x216>
 8006678:	e00b      	b.n	8006692 <UART_SetConfig+0x222>
 800667a:	2300      	movs	r3, #0
 800667c:	76fb      	strb	r3, [r7, #27]
 800667e:	e038      	b.n	80066f2 <UART_SetConfig+0x282>
 8006680:	2302      	movs	r3, #2
 8006682:	76fb      	strb	r3, [r7, #27]
 8006684:	e035      	b.n	80066f2 <UART_SetConfig+0x282>
 8006686:	2304      	movs	r3, #4
 8006688:	76fb      	strb	r3, [r7, #27]
 800668a:	e032      	b.n	80066f2 <UART_SetConfig+0x282>
 800668c:	2308      	movs	r3, #8
 800668e:	76fb      	strb	r3, [r7, #27]
 8006690:	e02f      	b.n	80066f2 <UART_SetConfig+0x282>
 8006692:	2310      	movs	r3, #16
 8006694:	76fb      	strb	r3, [r7, #27]
 8006696:	e02c      	b.n	80066f2 <UART_SetConfig+0x282>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a2d      	ldr	r2, [pc, #180]	; (8006754 <UART_SetConfig+0x2e4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d125      	bne.n	80066ee <UART_SetConfig+0x27e>
 80066a2:	4b2e      	ldr	r3, [pc, #184]	; (800675c <UART_SetConfig+0x2ec>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066b0:	d017      	beq.n	80066e2 <UART_SetConfig+0x272>
 80066b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066b6:	d817      	bhi.n	80066e8 <UART_SetConfig+0x278>
 80066b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066bc:	d00b      	beq.n	80066d6 <UART_SetConfig+0x266>
 80066be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c2:	d811      	bhi.n	80066e8 <UART_SetConfig+0x278>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <UART_SetConfig+0x260>
 80066c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066cc:	d006      	beq.n	80066dc <UART_SetConfig+0x26c>
 80066ce:	e00b      	b.n	80066e8 <UART_SetConfig+0x278>
 80066d0:	2300      	movs	r3, #0
 80066d2:	76fb      	strb	r3, [r7, #27]
 80066d4:	e00d      	b.n	80066f2 <UART_SetConfig+0x282>
 80066d6:	2302      	movs	r3, #2
 80066d8:	76fb      	strb	r3, [r7, #27]
 80066da:	e00a      	b.n	80066f2 <UART_SetConfig+0x282>
 80066dc:	2304      	movs	r3, #4
 80066de:	76fb      	strb	r3, [r7, #27]
 80066e0:	e007      	b.n	80066f2 <UART_SetConfig+0x282>
 80066e2:	2308      	movs	r3, #8
 80066e4:	76fb      	strb	r3, [r7, #27]
 80066e6:	e004      	b.n	80066f2 <UART_SetConfig+0x282>
 80066e8:	2310      	movs	r3, #16
 80066ea:	76fb      	strb	r3, [r7, #27]
 80066ec:	e001      	b.n	80066f2 <UART_SetConfig+0x282>
 80066ee:	2310      	movs	r3, #16
 80066f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a17      	ldr	r2, [pc, #92]	; (8006754 <UART_SetConfig+0x2e4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	f040 8087 	bne.w	800680c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066fe:	7efb      	ldrb	r3, [r7, #27]
 8006700:	2b08      	cmp	r3, #8
 8006702:	d837      	bhi.n	8006774 <UART_SetConfig+0x304>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <UART_SetConfig+0x29c>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006731 	.word	0x08006731
 8006710:	08006775 	.word	0x08006775
 8006714:	08006739 	.word	0x08006739
 8006718:	08006775 	.word	0x08006775
 800671c:	0800673f 	.word	0x0800673f
 8006720:	08006775 	.word	0x08006775
 8006724:	08006775 	.word	0x08006775
 8006728:	08006775 	.word	0x08006775
 800672c:	08006747 	.word	0x08006747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006730:	f7fd fbb8 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8006734:	6178      	str	r0, [r7, #20]
        break;
 8006736:	e022      	b.n	800677e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006738:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <UART_SetConfig+0x300>)
 800673a:	617b      	str	r3, [r7, #20]
        break;
 800673c:	e01f      	b.n	800677e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673e:	f7fd fb19 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8006742:	6178      	str	r0, [r7, #20]
        break;
 8006744:	e01b      	b.n	800677e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800674a:	617b      	str	r3, [r7, #20]
        break;
 800674c:	e017      	b.n	800677e <UART_SetConfig+0x30e>
 800674e:	bf00      	nop
 8006750:	efff69f3 	.word	0xefff69f3
 8006754:	40008000 	.word	0x40008000
 8006758:	40013800 	.word	0x40013800
 800675c:	40021000 	.word	0x40021000
 8006760:	40004400 	.word	0x40004400
 8006764:	40004800 	.word	0x40004800
 8006768:	40004c00 	.word	0x40004c00
 800676c:	40005000 	.word	0x40005000
 8006770:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	76bb      	strb	r3, [r7, #26]
        break;
 800677c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80f1 	beq.w	8006968 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	4413      	add	r3, r2
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	429a      	cmp	r2, r3
 8006794:	d305      	bcc.n	80067a2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d902      	bls.n	80067a8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	76bb      	strb	r3, [r7, #26]
 80067a6:	e0df      	b.n	8006968 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f04f 0100 	mov.w	r1, #0
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	020b      	lsls	r3, r1, #8
 80067ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067be:	0202      	lsls	r2, r0, #8
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	6849      	ldr	r1, [r1, #4]
 80067c4:	0849      	lsrs	r1, r1, #1
 80067c6:	4608      	mov	r0, r1
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	1814      	adds	r4, r2, r0
 80067ce:	eb43 0501 	adc.w	r5, r3, r1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	461a      	mov	r2, r3
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	4620      	mov	r0, r4
 80067de:	4629      	mov	r1, r5
 80067e0:	f7f9 fd4e 	bl	8000280 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f2:	d308      	bcc.n	8006806 <UART_SetConfig+0x396>
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fa:	d204      	bcs.n	8006806 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e0b0      	b.n	8006968 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	76bb      	strb	r3, [r7, #26]
 800680a:	e0ad      	b.n	8006968 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006814:	d15b      	bne.n	80068ce <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006816:	7efb      	ldrb	r3, [r7, #27]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d828      	bhi.n	800686e <UART_SetConfig+0x3fe>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0x3b4>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fd fb2c 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 800684c:	6178      	str	r0, [r7, #20]
        break;
 800684e:	e013      	b.n	8006878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fd fb3e 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8006854:	6178      	str	r0, [r7, #20]
        break;
 8006856:	e00f      	b.n	8006878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b49      	ldr	r3, [pc, #292]	; (8006980 <UART_SetConfig+0x510>)
 800685a:	617b      	str	r3, [r7, #20]
        break;
 800685c:	e00c      	b.n	8006878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fd fa89 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8006862:	6178      	str	r0, [r7, #20]
        break;
 8006864:	e008      	b.n	8006878 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686a:	617b      	str	r3, [r7, #20]
        break;
 800686c:	e004      	b.n	8006878 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	76bb      	strb	r3, [r7, #26]
        break;
 8006876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d074      	beq.n	8006968 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	005a      	lsls	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	441a      	add	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006892:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d916      	bls.n	80068c8 <UART_SetConfig+0x458>
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a0:	d212      	bcs.n	80068c8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f023 030f 	bic.w	r3, r3, #15
 80068aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	89fb      	ldrh	r3, [r7, #14]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	89fa      	ldrh	r2, [r7, #14]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	e04f      	b.n	8006968 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	76bb      	strb	r3, [r7, #26]
 80068cc:	e04c      	b.n	8006968 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068ce:	7efb      	ldrb	r3, [r7, #27]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d828      	bhi.n	8006926 <UART_SetConfig+0x4b6>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <UART_SetConfig+0x46c>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006911 	.word	0x08006911
 80068e8:	08006927 	.word	0x08006927
 80068ec:	08006917 	.word	0x08006917
 80068f0:	08006927 	.word	0x08006927
 80068f4:	08006927 	.word	0x08006927
 80068f8:	08006927 	.word	0x08006927
 80068fc:	0800691f 	.word	0x0800691f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006900:	f7fd fad0 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8006904:	6178      	str	r0, [r7, #20]
        break;
 8006906:	e013      	b.n	8006930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006908:	f7fd fae2 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 800690c:	6178      	str	r0, [r7, #20]
        break;
 800690e:	e00f      	b.n	8006930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006910:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <UART_SetConfig+0x510>)
 8006912:	617b      	str	r3, [r7, #20]
        break;
 8006914:	e00c      	b.n	8006930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006916:	f7fd fa2d 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 800691a:	6178      	str	r0, [r7, #20]
        break;
 800691c:	e008      	b.n	8006930 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006922:	617b      	str	r3, [r7, #20]
        break;
 8006924:	e004      	b.n	8006930 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	76bb      	strb	r3, [r7, #26]
        break;
 800692e:	bf00      	nop
    }

    if (pclk != 0U)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d018      	beq.n	8006968 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	085a      	lsrs	r2, r3, #1
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	441a      	add	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	fbb2 f3f3 	udiv	r3, r2, r3
 8006948:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b0f      	cmp	r3, #15
 800694e:	d909      	bls.n	8006964 <UART_SetConfig+0x4f4>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006956:	d205      	bcs.n	8006964 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	e001      	b.n	8006968 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006974:	7ebb      	ldrb	r3, [r7, #26]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bdb0      	pop	{r4, r5, r7, pc}
 800697e:	bf00      	nop
 8006980:	00f42400 	.word	0x00f42400

08006984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	f003 0310 	and.w	r3, r3, #16
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01a      	beq.n	8006a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a82:	d10a      	bne.n	8006a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	605a      	str	r2, [r3, #4]
  }
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ad8:	f7fa fdb8 	bl	800164c <HAL_GetTick>
 8006adc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d10e      	bne.n	8006b0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f82d 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e023      	b.n	8006b52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d10e      	bne.n	8006b36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f817 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e00d      	b.n	8006b52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b09c      	sub	sp, #112	; 0x70
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6a:	e0a5      	b.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b72:	f000 80a1 	beq.w	8006cb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fa fd69 	bl	800164c <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d13e      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e6      	bne.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bde:	64ba      	str	r2, [r7, #72]	; 0x48
 8006be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e5      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e067      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d04f      	beq.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c26:	d147      	bne.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c30:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
 8006c52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	613b      	str	r3, [r7, #16]
   return(result);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c84:	623a      	str	r2, [r7, #32]
 8006c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	69f9      	ldr	r1, [r7, #28]
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e5      	bne.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e010      	b.n	8006cda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2301      	moveq	r3, #1
 8006cca:	2300      	movne	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	f43f af4a 	beq.w	8006b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3770      	adds	r7, #112	; 0x70
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b097      	sub	sp, #92	; 0x5c
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	d10e      	bne.n	8006d36 <UART_Start_Receive_IT+0x52>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <UART_Start_Receive_IT+0x48>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d2a:	e02d      	b.n	8006d88 <UART_Start_Receive_IT+0xa4>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	22ff      	movs	r2, #255	; 0xff
 8006d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d34:	e028      	b.n	8006d88 <UART_Start_Receive_IT+0xa4>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <UART_Start_Receive_IT+0x76>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <UART_Start_Receive_IT+0x6c>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d4e:	e01b      	b.n	8006d88 <UART_Start_Receive_IT+0xa4>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	227f      	movs	r2, #127	; 0x7f
 8006d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d58:	e016      	b.n	8006d88 <UART_Start_Receive_IT+0xa4>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d62:	d10d      	bne.n	8006d80 <UART_Start_Receive_IT+0x9c>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <UART_Start_Receive_IT+0x92>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	227f      	movs	r2, #127	; 0x7f
 8006d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d74:	e008      	b.n	8006d88 <UART_Start_Receive_IT+0xa4>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	223f      	movs	r2, #63	; 0x3f
 8006d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d7e:	e003      	b.n	8006d88 <UART_Start_Receive_IT+0xa4>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2222      	movs	r2, #34	; 0x22
 8006d94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	657b      	str	r3, [r7, #84]	; 0x54
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e5      	bne.n	8006d96 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd2:	d107      	bne.n	8006de4 <UART_Start_Receive_IT+0x100>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <UART_Start_Receive_IT+0x18c>)
 8006de0:	665a      	str	r2, [r3, #100]	; 0x64
 8006de2:	e002      	b.n	8006dea <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <UART_Start_Receive_IT+0x190>)
 8006de8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d019      	beq.n	8006e2e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e6      	bne.n	8006dfa <UART_Start_Receive_IT+0x116>
 8006e2c:	e018      	b.n	8006e60 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f043 0320 	orr.w	r3, r3, #32
 8006e42:	653b      	str	r3, [r7, #80]	; 0x50
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	69f9      	ldr	r1, [r7, #28]
 8006e52:	6a3a      	ldr	r2, [r7, #32]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	375c      	adds	r7, #92	; 0x5c
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	08007297 	.word	0x08007297
 8006e74:	08007137 	.word	0x08007137

08006e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b095      	sub	sp, #84	; 0x54
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e6      	bne.n	8006e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d118      	bne.n	8006f20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f023 0310 	bic.w	r3, r3, #16
 8006f02:	647b      	str	r3, [r7, #68]	; 0x44
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6979      	ldr	r1, [r7, #20]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006f32:	bf00      	nop
 8006f34:	3754      	adds	r7, #84	; 0x54
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff fa71 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f62:	bf00      	nop
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b08f      	sub	sp, #60	; 0x3c
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f76:	2b21      	cmp	r3, #33	; 0x21
 8006f78:	d14d      	bne.n	8007016 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d132      	bne.n	8006fec <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e6      	bne.n	8006f86 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e6      	bne.n	8006fb8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006fea:	e014      	b.n	8007016 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	b292      	uxth	r2, r2
 8006ff8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007016:	bf00      	nop
 8007018:	373c      	adds	r7, #60	; 0x3c
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007022:	b480      	push	{r7}
 8007024:	b091      	sub	sp, #68	; 0x44
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800702e:	2b21      	cmp	r3, #33	; 0x21
 8007030:	d151      	bne.n	80070d6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d132      	bne.n	80070a4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	623b      	str	r3, [r7, #32]
   return(result);
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007052:	63bb      	str	r3, [r7, #56]	; 0x38
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	633b      	str	r3, [r7, #48]	; 0x30
 800705e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e6      	bne.n	800703e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60fb      	str	r3, [r7, #12]
   return(result);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007084:	637b      	str	r3, [r7, #52]	; 0x34
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	69b9      	ldr	r1, [r7, #24]
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	617b      	str	r3, [r7, #20]
   return(result);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e6      	bne.n	8007070 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80070a2:	e018      	b.n	80070d6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	881a      	ldrh	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070b6:	b292      	uxth	r2, r2
 80070b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070be:	1c9a      	adds	r2, r3, #2
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80070d6:	bf00      	nop
 80070d8:	3744      	adds	r7, #68	; 0x44
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b088      	sub	sp, #32
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6979      	ldr	r1, [r7, #20]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	613b      	str	r3, [r7, #16]
   return(result);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e6      	bne.n	80070ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7fa fa09 	bl	8001540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712e:	bf00      	nop
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b096      	sub	sp, #88	; 0x58
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007144:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800714c:	2b22      	cmp	r3, #34	; 0x22
 800714e:	f040 8094 	bne.w	800727a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007158:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800715c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007160:	b2d9      	uxtb	r1, r3
 8007162:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007166:	b2da      	uxtb	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716c:	400a      	ands	r2, r1
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d179      	bne.n	800728e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ae:	653b      	str	r3, [r7, #80]	; 0x50
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b8:	647b      	str	r3, [r7, #68]	; 0x44
 80071ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e6      	bne.n	800719a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3308      	adds	r3, #8
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	623b      	str	r3, [r7, #32]
   return(result);
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	f023 0301 	bic.w	r3, r3, #1
 80071e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3308      	adds	r3, #8
 80071ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071ec:	633a      	str	r2, [r7, #48]	; 0x30
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e5      	bne.n	80071cc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007210:	2b01      	cmp	r3, #1
 8007212:	d12e      	bne.n	8007272 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	60fb      	str	r3, [r7, #12]
   return(result);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0310 	bic.w	r3, r3, #16
 800722e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007238:	61fb      	str	r3, [r7, #28]
 800723a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	69b9      	ldr	r1, [r7, #24]
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	617b      	str	r3, [r7, #20]
   return(result);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e6      	bne.n	800721a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	f003 0310 	and.w	r3, r3, #16
 8007256:	2b10      	cmp	r3, #16
 8007258:	d103      	bne.n	8007262 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2210      	movs	r2, #16
 8007260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff f8f4 	bl	8006458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007270:	e00d      	b.n	800728e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fa f978 	bl	8001568 <HAL_UART_RxCpltCallback>
}
 8007278:	e009      	b.n	800728e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	8b1b      	ldrh	r3, [r3, #24]
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0208 	orr.w	r2, r2, #8
 800728a:	b292      	uxth	r2, r2
 800728c:	831a      	strh	r2, [r3, #24]
}
 800728e:	bf00      	nop
 8007290:	3758      	adds	r7, #88	; 0x58
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b096      	sub	sp, #88	; 0x58
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ac:	2b22      	cmp	r3, #34	; 0x22
 80072ae:	f040 8094 	bne.w	80073da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80072c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80072c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072ca:	4013      	ands	r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d6:	1c9a      	adds	r2, r3, #2
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d179      	bne.n	80073ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	643b      	str	r3, [r7, #64]	; 0x40
 800731a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800731e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e6      	bne.n	80072fa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	61fb      	str	r3, [r7, #28]
   return(result);
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f023 0301 	bic.w	r3, r3, #1
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800734c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e5      	bne.n	800732c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2220      	movs	r2, #32
 8007364:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007370:	2b01      	cmp	r3, #1
 8007372:	d12e      	bne.n	80073d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	60bb      	str	r3, [r7, #8]
   return(result);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f023 0310 	bic.w	r3, r3, #16
 800738e:	647b      	str	r3, [r7, #68]	; 0x44
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	613b      	str	r3, [r7, #16]
   return(result);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d103      	bne.n	80073c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2210      	movs	r2, #16
 80073c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff f844 	bl	8006458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073d0:	e00d      	b.n	80073ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fa f8c8 	bl	8001568 <HAL_UART_RxCpltCallback>
}
 80073d8:	e009      	b.n	80073ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	8b1b      	ldrh	r3, [r3, #24]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0208 	orr.w	r2, r2, #8
 80073ea:	b292      	uxth	r2, r2
 80073ec:	831a      	strh	r2, [r3, #24]
}
 80073ee:	bf00      	nop
 80073f0:	3758      	adds	r7, #88	; 0x58
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <SysTick_Handler+0x1c>)
 8007412:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007414:	f000 f990 	bl	8007738 <xTaskGetSchedulerState>
 8007418:	4603      	mov	r3, r0
 800741a:	2b01      	cmp	r3, #1
 800741c:	d001      	beq.n	8007422 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800741e:	f000 f9fb 	bl	8007818 <xPortSysTickHandler>
  }
}
 8007422:	bf00      	nop
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	e000e010 	.word	0xe000e010

0800742c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
}
 8007468:	bf00      	nop
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6892      	ldr	r2, [r2, #8]
 800748a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6852      	ldr	r2, [r2, #4]
 8007494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	d103      	bne.n	80074a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1e5a      	subs	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074ce:	2300      	movs	r3, #0
 80074d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d2:	4b4f      	ldr	r3, [pc, #316]	; (8007610 <xTaskIncrementTick+0x148>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 808f 	bne.w	80075fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074dc:	4b4d      	ldr	r3, [pc, #308]	; (8007614 <xTaskIncrementTick+0x14c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074e4:	4a4b      	ldr	r2, [pc, #300]	; (8007614 <xTaskIncrementTick+0x14c>)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d120      	bne.n	8007532 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80074f0:	4b49      	ldr	r3, [pc, #292]	; (8007618 <xTaskIncrementTick+0x150>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <xTaskIncrementTick+0x46>
 8007510:	4b41      	ldr	r3, [pc, #260]	; (8007618 <xTaskIncrementTick+0x150>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	4b41      	ldr	r3, [pc, #260]	; (800761c <xTaskIncrementTick+0x154>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <xTaskIncrementTick+0x150>)
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	4a3f      	ldr	r2, [pc, #252]	; (800761c <xTaskIncrementTick+0x154>)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <xTaskIncrementTick+0x158>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3301      	adds	r3, #1
 800752a:	4a3d      	ldr	r2, [pc, #244]	; (8007620 <xTaskIncrementTick+0x158>)
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	f000 f8e3 	bl	80076f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007532:	4b3c      	ldr	r3, [pc, #240]	; (8007624 <xTaskIncrementTick+0x15c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	429a      	cmp	r2, r3
 800753a:	d349      	bcc.n	80075d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800753c:	4b36      	ldr	r3, [pc, #216]	; (8007618 <xTaskIncrementTick+0x150>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007546:	4b37      	ldr	r3, [pc, #220]	; (8007624 <xTaskIncrementTick+0x15c>)
 8007548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800754c:	601a      	str	r2, [r3, #0]
					break;
 800754e:	e03f      	b.n	80075d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007550:	4b31      	ldr	r3, [pc, #196]	; (8007618 <xTaskIncrementTick+0x150>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	d203      	bcs.n	8007570 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007568:	4a2e      	ldr	r2, [pc, #184]	; (8007624 <xTaskIncrementTick+0x15c>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800756e:	e02f      	b.n	80075d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	3304      	adds	r3, #4
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff ff7d 	bl	8007474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	3318      	adds	r3, #24
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff ff74 	bl	8007474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <xTaskIncrementTick+0x160>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d903      	bls.n	80075a0 <xTaskIncrementTick+0xd8>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	4a22      	ldr	r2, [pc, #136]	; (8007628 <xTaskIncrementTick+0x160>)
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4a1f      	ldr	r2, [pc, #124]	; (800762c <xTaskIncrementTick+0x164>)
 80075ae:	441a      	add	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7ff ff38 	bl	800742c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <xTaskIncrementTick+0x168>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d3b8      	bcc.n	800753c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ce:	e7b5      	b.n	800753c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075d0:	4b17      	ldr	r3, [pc, #92]	; (8007630 <xTaskIncrementTick+0x168>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d6:	4915      	ldr	r1, [pc, #84]	; (800762c <xTaskIncrementTick+0x164>)
 80075d8:	4613      	mov	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	440b      	add	r3, r1
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d901      	bls.n	80075ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075ec:	4b11      	ldr	r3, [pc, #68]	; (8007634 <xTaskIncrementTick+0x16c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80075f4:	2301      	movs	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	e004      	b.n	8007604 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075fa:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <xTaskIncrementTick+0x170>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3301      	adds	r3, #1
 8007600:	4a0d      	ldr	r2, [pc, #52]	; (8007638 <xTaskIncrementTick+0x170>)
 8007602:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007604:	697b      	ldr	r3, [r7, #20]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	2000052c 	.word	0x2000052c
 8007614:	20000510 	.word	0x20000510
 8007618:	20000508 	.word	0x20000508
 800761c:	2000050c 	.word	0x2000050c
 8007620:	20000524 	.word	0x20000524
 8007624:	20000528 	.word	0x20000528
 8007628:	20000514 	.word	0x20000514
 800762c:	200000a8 	.word	0x200000a8
 8007630:	200000a4 	.word	0x200000a4
 8007634:	20000520 	.word	0x20000520
 8007638:	2000051c 	.word	0x2000051c

0800763c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007642:	4b28      	ldr	r3, [pc, #160]	; (80076e4 <vTaskSwitchContext+0xa8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800764a:	4b27      	ldr	r3, [pc, #156]	; (80076e8 <vTaskSwitchContext+0xac>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007650:	e041      	b.n	80076d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007652:	4b25      	ldr	r3, [pc, #148]	; (80076e8 <vTaskSwitchContext+0xac>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007658:	4b24      	ldr	r3, [pc, #144]	; (80076ec <vTaskSwitchContext+0xb0>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e010      	b.n	8007682 <vTaskSwitchContext+0x46>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <vTaskSwitchContext+0x40>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	607b      	str	r3, [r7, #4]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <vTaskSwitchContext+0x3e>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3b01      	subs	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	491b      	ldr	r1, [pc, #108]	; (80076f0 <vTaskSwitchContext+0xb4>)
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0e4      	beq.n	8007660 <vTaskSwitchContext+0x24>
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <vTaskSwitchContext+0xb4>)
 80076a2:	4413      	add	r3, r2
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	605a      	str	r2, [r3, #4]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	3308      	adds	r3, #8
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d104      	bne.n	80076c6 <vTaskSwitchContext+0x8a>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	605a      	str	r2, [r3, #4]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <vTaskSwitchContext+0xb8>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	4a06      	ldr	r2, [pc, #24]	; (80076ec <vTaskSwitchContext+0xb0>)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6013      	str	r3, [r2, #0]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	2000052c 	.word	0x2000052c
 80076e8:	20000520 	.word	0x20000520
 80076ec:	20000514 	.word	0x20000514
 80076f0:	200000a8 	.word	0x200000a8
 80076f4:	200000a4 	.word	0x200000a4

080076f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076fe:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <prvResetNextTaskUnblockTime+0x38>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <prvResetNextTaskUnblockTime+0x3c>)
 800770a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800770e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007710:	e008      	b.n	8007724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007712:	4b07      	ldr	r3, [pc, #28]	; (8007730 <prvResetNextTaskUnblockTime+0x38>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4a04      	ldr	r2, [pc, #16]	; (8007734 <prvResetNextTaskUnblockTime+0x3c>)
 8007722:	6013      	str	r3, [r2, #0]
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	20000508 	.word	0x20000508
 8007734:	20000528 	.word	0x20000528

08007738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <xTaskGetSchedulerState+0x34>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007746:	2301      	movs	r3, #1
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	e008      	b.n	800775e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800774c:	4b08      	ldr	r3, [pc, #32]	; (8007770 <xTaskGetSchedulerState+0x38>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007754:	2302      	movs	r3, #2
 8007756:	607b      	str	r3, [r7, #4]
 8007758:	e001      	b.n	800775e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800775a:	2300      	movs	r3, #0
 800775c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800775e:	687b      	ldr	r3, [r7, #4]
	}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	20000518 	.word	0x20000518
 8007770:	2000052c 	.word	0x2000052c
	...

08007780 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <pxCurrentTCBConst2>)
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	6808      	ldr	r0, [r1, #0]
 8007786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778a:	f380 8809 	msr	PSP, r0
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8811 	msr	BASEPRI, r0
 800779a:	4770      	bx	lr
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst2>:
 80077a0:	200000a4 	.word	0x200000a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
	...

080077b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077b0:	f3ef 8009 	mrs	r0, PSP
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4b15      	ldr	r3, [pc, #84]	; (8007810 <pxCurrentTCBConst>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	f01e 0f10 	tst.w	lr, #16
 80077c0:	bf08      	it	eq
 80077c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077d4:	f380 8811 	msr	BASEPRI, r0
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f7ff ff2c 	bl	800763c <vTaskSwitchContext>
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f380 8811 	msr	BASEPRI, r0
 80077ec:	bc09      	pop	{r0, r3}
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	f01e 0f10 	tst.w	lr, #16
 80077fa:	bf08      	it	eq
 80077fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007800:	f380 8809 	msr	PSP, r0
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst>:
 8007810:	200000a4 	.word	0x200000a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007832:	f7ff fe49 	bl	80074c8 <xTaskIncrementTick>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <xPortSysTickHandler+0x40>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800784e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <atoi>:
 800785c:	220a      	movs	r2, #10
 800785e:	2100      	movs	r1, #0
 8007860:	f000 b95a 	b.w	8007b18 <strtol>

08007864 <__errno>:
 8007864:	4b01      	ldr	r3, [pc, #4]	; (800786c <__errno+0x8>)
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	20000020 	.word	0x20000020

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4d0d      	ldr	r5, [pc, #52]	; (80078a8 <__libc_init_array+0x38>)
 8007874:	4c0d      	ldr	r4, [pc, #52]	; (80078ac <__libc_init_array+0x3c>)
 8007876:	1b64      	subs	r4, r4, r5
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	2600      	movs	r6, #0
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	4d0b      	ldr	r5, [pc, #44]	; (80078b0 <__libc_init_array+0x40>)
 8007882:	4c0c      	ldr	r4, [pc, #48]	; (80078b4 <__libc_init_array+0x44>)
 8007884:	f001 fafa 	bl	8008e7c <_init>
 8007888:	1b64      	subs	r4, r4, r5
 800788a:	10a4      	asrs	r4, r4, #2
 800788c:	2600      	movs	r6, #0
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	08009188 	.word	0x08009188
 80078ac:	08009188 	.word	0x08009188
 80078b0:	08009188 	.word	0x08009188
 80078b4:	0800918c 	.word	0x0800918c

080078b8 <__itoa>:
 80078b8:	1e93      	subs	r3, r2, #2
 80078ba:	2b22      	cmp	r3, #34	; 0x22
 80078bc:	b510      	push	{r4, lr}
 80078be:	460c      	mov	r4, r1
 80078c0:	d904      	bls.n	80078cc <__itoa+0x14>
 80078c2:	2300      	movs	r3, #0
 80078c4:	700b      	strb	r3, [r1, #0]
 80078c6:	461c      	mov	r4, r3
 80078c8:	4620      	mov	r0, r4
 80078ca:	bd10      	pop	{r4, pc}
 80078cc:	2a0a      	cmp	r2, #10
 80078ce:	d109      	bne.n	80078e4 <__itoa+0x2c>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	da07      	bge.n	80078e4 <__itoa+0x2c>
 80078d4:	232d      	movs	r3, #45	; 0x2d
 80078d6:	700b      	strb	r3, [r1, #0]
 80078d8:	4240      	negs	r0, r0
 80078da:	2101      	movs	r1, #1
 80078dc:	4421      	add	r1, r4
 80078de:	f000 f925 	bl	8007b2c <__utoa>
 80078e2:	e7f1      	b.n	80078c8 <__itoa+0x10>
 80078e4:	2100      	movs	r1, #0
 80078e6:	e7f9      	b.n	80078dc <__itoa+0x24>

080078e8 <itoa>:
 80078e8:	f7ff bfe6 	b.w	80078b8 <__itoa>

080078ec <memcpy>:
 80078ec:	440a      	add	r2, r1
 80078ee:	4291      	cmp	r1, r2
 80078f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078f4:	d100      	bne.n	80078f8 <memcpy+0xc>
 80078f6:	4770      	bx	lr
 80078f8:	b510      	push	{r4, lr}
 80078fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007902:	4291      	cmp	r1, r2
 8007904:	d1f9      	bne.n	80078fa <memcpy+0xe>
 8007906:	bd10      	pop	{r4, pc}

08007908 <memset>:
 8007908:	4402      	add	r2, r0
 800790a:	4603      	mov	r3, r0
 800790c:	4293      	cmp	r3, r2
 800790e:	d100      	bne.n	8007912 <memset+0xa>
 8007910:	4770      	bx	lr
 8007912:	f803 1b01 	strb.w	r1, [r3], #1
 8007916:	e7f9      	b.n	800790c <memset+0x4>

08007918 <siprintf>:
 8007918:	b40e      	push	{r1, r2, r3}
 800791a:	b500      	push	{lr}
 800791c:	b09c      	sub	sp, #112	; 0x70
 800791e:	ab1d      	add	r3, sp, #116	; 0x74
 8007920:	9002      	str	r0, [sp, #8]
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007928:	4809      	ldr	r0, [pc, #36]	; (8007950 <siprintf+0x38>)
 800792a:	9107      	str	r1, [sp, #28]
 800792c:	9104      	str	r1, [sp, #16]
 800792e:	4909      	ldr	r1, [pc, #36]	; (8007954 <siprintf+0x3c>)
 8007930:	f853 2b04 	ldr.w	r2, [r3], #4
 8007934:	9105      	str	r1, [sp, #20]
 8007936:	6800      	ldr	r0, [r0, #0]
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	a902      	add	r1, sp, #8
 800793c:	f000 fa76 	bl	8007e2c <_svfiprintf_r>
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	b01c      	add	sp, #112	; 0x70
 8007948:	f85d eb04 	ldr.w	lr, [sp], #4
 800794c:	b003      	add	sp, #12
 800794e:	4770      	bx	lr
 8007950:	20000020 	.word	0x20000020
 8007954:	ffff0208 	.word	0xffff0208

08007958 <strtok>:
 8007958:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <strtok+0x5c>)
 800795a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800795c:	681e      	ldr	r6, [r3, #0]
 800795e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007960:	4605      	mov	r5, r0
 8007962:	b9fc      	cbnz	r4, 80079a4 <strtok+0x4c>
 8007964:	2050      	movs	r0, #80	; 0x50
 8007966:	9101      	str	r1, [sp, #4]
 8007968:	f000 f952 	bl	8007c10 <malloc>
 800796c:	9901      	ldr	r1, [sp, #4]
 800796e:	65b0      	str	r0, [r6, #88]	; 0x58
 8007970:	4602      	mov	r2, r0
 8007972:	b920      	cbnz	r0, 800797e <strtok+0x26>
 8007974:	4b10      	ldr	r3, [pc, #64]	; (80079b8 <strtok+0x60>)
 8007976:	4811      	ldr	r0, [pc, #68]	; (80079bc <strtok+0x64>)
 8007978:	2157      	movs	r1, #87	; 0x57
 800797a:	f000 f919 	bl	8007bb0 <__assert_func>
 800797e:	e9c0 4400 	strd	r4, r4, [r0]
 8007982:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007986:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800798a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800798e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007992:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007996:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800799a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800799e:	6184      	str	r4, [r0, #24]
 80079a0:	7704      	strb	r4, [r0, #28]
 80079a2:	6244      	str	r4, [r0, #36]	; 0x24
 80079a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80079a6:	2301      	movs	r3, #1
 80079a8:	4628      	mov	r0, r5
 80079aa:	b002      	add	sp, #8
 80079ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079b0:	f000 b806 	b.w	80079c0 <__strtok_r>
 80079b4:	20000020 	.word	0x20000020
 80079b8:	08008f10 	.word	0x08008f10
 80079bc:	08008f27 	.word	0x08008f27

080079c0 <__strtok_r>:
 80079c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c2:	b908      	cbnz	r0, 80079c8 <__strtok_r+0x8>
 80079c4:	6810      	ldr	r0, [r2, #0]
 80079c6:	b188      	cbz	r0, 80079ec <__strtok_r+0x2c>
 80079c8:	4604      	mov	r4, r0
 80079ca:	4620      	mov	r0, r4
 80079cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079d0:	460f      	mov	r7, r1
 80079d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079d6:	b91e      	cbnz	r6, 80079e0 <__strtok_r+0x20>
 80079d8:	b965      	cbnz	r5, 80079f4 <__strtok_r+0x34>
 80079da:	6015      	str	r5, [r2, #0]
 80079dc:	4628      	mov	r0, r5
 80079de:	e005      	b.n	80079ec <__strtok_r+0x2c>
 80079e0:	42b5      	cmp	r5, r6
 80079e2:	d1f6      	bne.n	80079d2 <__strtok_r+0x12>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f0      	bne.n	80079ca <__strtok_r+0xa>
 80079e8:	6014      	str	r4, [r2, #0]
 80079ea:	7003      	strb	r3, [r0, #0]
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ee:	461c      	mov	r4, r3
 80079f0:	e00c      	b.n	8007a0c <__strtok_r+0x4c>
 80079f2:	b915      	cbnz	r5, 80079fa <__strtok_r+0x3a>
 80079f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079f8:	460e      	mov	r6, r1
 80079fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079fe:	42ab      	cmp	r3, r5
 8007a00:	d1f7      	bne.n	80079f2 <__strtok_r+0x32>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f3      	beq.n	80079ee <__strtok_r+0x2e>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007a0c:	6014      	str	r4, [r2, #0]
 8007a0e:	e7ed      	b.n	80079ec <__strtok_r+0x2c>

08007a10 <_strtol_l.isra.0>:
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a16:	d001      	beq.n	8007a1c <_strtol_l.isra.0+0xc>
 8007a18:	2b24      	cmp	r3, #36	; 0x24
 8007a1a:	d906      	bls.n	8007a2a <_strtol_l.isra.0+0x1a>
 8007a1c:	f7ff ff22 	bl	8007864 <__errno>
 8007a20:	2316      	movs	r3, #22
 8007a22:	6003      	str	r3, [r0, #0]
 8007a24:	2000      	movs	r0, #0
 8007a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2a:	4f3a      	ldr	r7, [pc, #232]	; (8007b14 <_strtol_l.isra.0+0x104>)
 8007a2c:	468e      	mov	lr, r1
 8007a2e:	4676      	mov	r6, lr
 8007a30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007a34:	5de5      	ldrb	r5, [r4, r7]
 8007a36:	f015 0508 	ands.w	r5, r5, #8
 8007a3a:	d1f8      	bne.n	8007a2e <_strtol_l.isra.0+0x1e>
 8007a3c:	2c2d      	cmp	r4, #45	; 0x2d
 8007a3e:	d134      	bne.n	8007aaa <_strtol_l.isra.0+0x9a>
 8007a40:	f89e 4000 	ldrb.w	r4, [lr]
 8007a44:	f04f 0801 	mov.w	r8, #1
 8007a48:	f106 0e02 	add.w	lr, r6, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d05c      	beq.n	8007b0a <_strtol_l.isra.0+0xfa>
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d10c      	bne.n	8007a6e <_strtol_l.isra.0+0x5e>
 8007a54:	2c30      	cmp	r4, #48	; 0x30
 8007a56:	d10a      	bne.n	8007a6e <_strtol_l.isra.0+0x5e>
 8007a58:	f89e 4000 	ldrb.w	r4, [lr]
 8007a5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a60:	2c58      	cmp	r4, #88	; 0x58
 8007a62:	d14d      	bne.n	8007b00 <_strtol_l.isra.0+0xf0>
 8007a64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007a68:	2310      	movs	r3, #16
 8007a6a:	f10e 0e02 	add.w	lr, lr, #2
 8007a6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007a72:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007a76:	2600      	movs	r6, #0
 8007a78:	fbbc f9f3 	udiv	r9, ip, r3
 8007a7c:	4635      	mov	r5, r6
 8007a7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007a86:	2f09      	cmp	r7, #9
 8007a88:	d818      	bhi.n	8007abc <_strtol_l.isra.0+0xac>
 8007a8a:	463c      	mov	r4, r7
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	dd24      	ble.n	8007ada <_strtol_l.isra.0+0xca>
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	db1f      	blt.n	8007ad4 <_strtol_l.isra.0+0xc4>
 8007a94:	45a9      	cmp	r9, r5
 8007a96:	d31d      	bcc.n	8007ad4 <_strtol_l.isra.0+0xc4>
 8007a98:	d101      	bne.n	8007a9e <_strtol_l.isra.0+0x8e>
 8007a9a:	45a2      	cmp	sl, r4
 8007a9c:	db1a      	blt.n	8007ad4 <_strtol_l.isra.0+0xc4>
 8007a9e:	fb05 4503 	mla	r5, r5, r3, r4
 8007aa2:	2601      	movs	r6, #1
 8007aa4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007aa8:	e7eb      	b.n	8007a82 <_strtol_l.isra.0+0x72>
 8007aaa:	2c2b      	cmp	r4, #43	; 0x2b
 8007aac:	bf08      	it	eq
 8007aae:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007ab2:	46a8      	mov	r8, r5
 8007ab4:	bf08      	it	eq
 8007ab6:	f106 0e02 	addeq.w	lr, r6, #2
 8007aba:	e7c7      	b.n	8007a4c <_strtol_l.isra.0+0x3c>
 8007abc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007ac0:	2f19      	cmp	r7, #25
 8007ac2:	d801      	bhi.n	8007ac8 <_strtol_l.isra.0+0xb8>
 8007ac4:	3c37      	subs	r4, #55	; 0x37
 8007ac6:	e7e1      	b.n	8007a8c <_strtol_l.isra.0+0x7c>
 8007ac8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007acc:	2f19      	cmp	r7, #25
 8007ace:	d804      	bhi.n	8007ada <_strtol_l.isra.0+0xca>
 8007ad0:	3c57      	subs	r4, #87	; 0x57
 8007ad2:	e7db      	b.n	8007a8c <_strtol_l.isra.0+0x7c>
 8007ad4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007ad8:	e7e4      	b.n	8007aa4 <_strtol_l.isra.0+0x94>
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	da05      	bge.n	8007aea <_strtol_l.isra.0+0xda>
 8007ade:	2322      	movs	r3, #34	; 0x22
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	4665      	mov	r5, ip
 8007ae4:	b942      	cbnz	r2, 8007af8 <_strtol_l.isra.0+0xe8>
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	e79d      	b.n	8007a26 <_strtol_l.isra.0+0x16>
 8007aea:	f1b8 0f00 	cmp.w	r8, #0
 8007aee:	d000      	beq.n	8007af2 <_strtol_l.isra.0+0xe2>
 8007af0:	426d      	negs	r5, r5
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d0f7      	beq.n	8007ae6 <_strtol_l.isra.0+0xd6>
 8007af6:	b10e      	cbz	r6, 8007afc <_strtol_l.isra.0+0xec>
 8007af8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8007afc:	6011      	str	r1, [r2, #0]
 8007afe:	e7f2      	b.n	8007ae6 <_strtol_l.isra.0+0xd6>
 8007b00:	2430      	movs	r4, #48	; 0x30
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1b3      	bne.n	8007a6e <_strtol_l.isra.0+0x5e>
 8007b06:	2308      	movs	r3, #8
 8007b08:	e7b1      	b.n	8007a6e <_strtol_l.isra.0+0x5e>
 8007b0a:	2c30      	cmp	r4, #48	; 0x30
 8007b0c:	d0a4      	beq.n	8007a58 <_strtol_l.isra.0+0x48>
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e7ad      	b.n	8007a6e <_strtol_l.isra.0+0x5e>
 8007b12:	bf00      	nop
 8007b14:	08008fea 	.word	0x08008fea

08007b18 <strtol>:
 8007b18:	4613      	mov	r3, r2
 8007b1a:	460a      	mov	r2, r1
 8007b1c:	4601      	mov	r1, r0
 8007b1e:	4802      	ldr	r0, [pc, #8]	; (8007b28 <strtol+0x10>)
 8007b20:	6800      	ldr	r0, [r0, #0]
 8007b22:	f7ff bf75 	b.w	8007a10 <_strtol_l.isra.0>
 8007b26:	bf00      	nop
 8007b28:	20000020 	.word	0x20000020

08007b2c <__utoa>:
 8007b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b2e:	4c1f      	ldr	r4, [pc, #124]	; (8007bac <__utoa+0x80>)
 8007b30:	b08b      	sub	sp, #44	; 0x2c
 8007b32:	4605      	mov	r5, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	466e      	mov	r6, sp
 8007b38:	f104 0c20 	add.w	ip, r4, #32
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	6861      	ldr	r1, [r4, #4]
 8007b40:	4637      	mov	r7, r6
 8007b42:	c703      	stmia	r7!, {r0, r1}
 8007b44:	3408      	adds	r4, #8
 8007b46:	4564      	cmp	r4, ip
 8007b48:	463e      	mov	r6, r7
 8007b4a:	d1f7      	bne.n	8007b3c <__utoa+0x10>
 8007b4c:	7921      	ldrb	r1, [r4, #4]
 8007b4e:	7139      	strb	r1, [r7, #4]
 8007b50:	1e91      	subs	r1, r2, #2
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	6038      	str	r0, [r7, #0]
 8007b56:	2922      	cmp	r1, #34	; 0x22
 8007b58:	f04f 0100 	mov.w	r1, #0
 8007b5c:	d904      	bls.n	8007b68 <__utoa+0x3c>
 8007b5e:	7019      	strb	r1, [r3, #0]
 8007b60:	460b      	mov	r3, r1
 8007b62:	4618      	mov	r0, r3
 8007b64:	b00b      	add	sp, #44	; 0x2c
 8007b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b68:	1e58      	subs	r0, r3, #1
 8007b6a:	4684      	mov	ip, r0
 8007b6c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007b70:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007b74:	fb02 5617 	mls	r6, r2, r7, r5
 8007b78:	4476      	add	r6, lr
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007b80:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007b84:	462e      	mov	r6, r5
 8007b86:	42b2      	cmp	r2, r6
 8007b88:	f101 0101 	add.w	r1, r1, #1
 8007b8c:	463d      	mov	r5, r7
 8007b8e:	d9ed      	bls.n	8007b6c <__utoa+0x40>
 8007b90:	2200      	movs	r2, #0
 8007b92:	545a      	strb	r2, [r3, r1]
 8007b94:	1919      	adds	r1, r3, r4
 8007b96:	1aa5      	subs	r5, r4, r2
 8007b98:	42aa      	cmp	r2, r5
 8007b9a:	dae2      	bge.n	8007b62 <__utoa+0x36>
 8007b9c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007ba0:	780e      	ldrb	r6, [r1, #0]
 8007ba2:	7006      	strb	r6, [r0, #0]
 8007ba4:	3201      	adds	r2, #1
 8007ba6:	f801 5901 	strb.w	r5, [r1], #-1
 8007baa:	e7f4      	b.n	8007b96 <__utoa+0x6a>
 8007bac:	08008f88 	.word	0x08008f88

08007bb0 <__assert_func>:
 8007bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bb2:	4614      	mov	r4, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <__assert_func+0x2c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4605      	mov	r5, r0
 8007bbc:	68d8      	ldr	r0, [r3, #12]
 8007bbe:	b14c      	cbz	r4, 8007bd4 <__assert_func+0x24>
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <__assert_func+0x30>)
 8007bc2:	9100      	str	r1, [sp, #0]
 8007bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bc8:	4906      	ldr	r1, [pc, #24]	; (8007be4 <__assert_func+0x34>)
 8007bca:	462b      	mov	r3, r5
 8007bcc:	f000 f80e 	bl	8007bec <fiprintf>
 8007bd0:	f000 fdea 	bl	80087a8 <abort>
 8007bd4:	4b04      	ldr	r3, [pc, #16]	; (8007be8 <__assert_func+0x38>)
 8007bd6:	461c      	mov	r4, r3
 8007bd8:	e7f3      	b.n	8007bc2 <__assert_func+0x12>
 8007bda:	bf00      	nop
 8007bdc:	20000020 	.word	0x20000020
 8007be0:	08008fad 	.word	0x08008fad
 8007be4:	08008fba 	.word	0x08008fba
 8007be8:	08008fe8 	.word	0x08008fe8

08007bec <fiprintf>:
 8007bec:	b40e      	push	{r1, r2, r3}
 8007bee:	b503      	push	{r0, r1, lr}
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	ab03      	add	r3, sp, #12
 8007bf4:	4805      	ldr	r0, [pc, #20]	; (8007c0c <fiprintf+0x20>)
 8007bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	f000 fa3f 	bl	8008080 <_vfiprintf_r>
 8007c02:	b002      	add	sp, #8
 8007c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c08:	b003      	add	sp, #12
 8007c0a:	4770      	bx	lr
 8007c0c:	20000020 	.word	0x20000020

08007c10 <malloc>:
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <malloc+0xc>)
 8007c12:	4601      	mov	r1, r0
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f000 b853 	b.w	8007cc0 <_malloc_r>
 8007c1a:	bf00      	nop
 8007c1c:	20000020 	.word	0x20000020

08007c20 <_free_r>:
 8007c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c22:	2900      	cmp	r1, #0
 8007c24:	d048      	beq.n	8007cb8 <_free_r+0x98>
 8007c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c2a:	9001      	str	r0, [sp, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c32:	bfb8      	it	lt
 8007c34:	18e4      	addlt	r4, r4, r3
 8007c36:	f000 fff7 	bl	8008c28 <__malloc_lock>
 8007c3a:	4a20      	ldr	r2, [pc, #128]	; (8007cbc <_free_r+0x9c>)
 8007c3c:	9801      	ldr	r0, [sp, #4]
 8007c3e:	6813      	ldr	r3, [r2, #0]
 8007c40:	4615      	mov	r5, r2
 8007c42:	b933      	cbnz	r3, 8007c52 <_free_r+0x32>
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	6014      	str	r4, [r2, #0]
 8007c48:	b003      	add	sp, #12
 8007c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c4e:	f000 bff1 	b.w	8008c34 <__malloc_unlock>
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	d90b      	bls.n	8007c6e <_free_r+0x4e>
 8007c56:	6821      	ldr	r1, [r4, #0]
 8007c58:	1862      	adds	r2, r4, r1
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	bf04      	itt	eq
 8007c5e:	681a      	ldreq	r2, [r3, #0]
 8007c60:	685b      	ldreq	r3, [r3, #4]
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	bf04      	itt	eq
 8007c66:	1852      	addeq	r2, r2, r1
 8007c68:	6022      	streq	r2, [r4, #0]
 8007c6a:	602c      	str	r4, [r5, #0]
 8007c6c:	e7ec      	b.n	8007c48 <_free_r+0x28>
 8007c6e:	461a      	mov	r2, r3
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	b10b      	cbz	r3, 8007c78 <_free_r+0x58>
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	d9fa      	bls.n	8007c6e <_free_r+0x4e>
 8007c78:	6811      	ldr	r1, [r2, #0]
 8007c7a:	1855      	adds	r5, r2, r1
 8007c7c:	42a5      	cmp	r5, r4
 8007c7e:	d10b      	bne.n	8007c98 <_free_r+0x78>
 8007c80:	6824      	ldr	r4, [r4, #0]
 8007c82:	4421      	add	r1, r4
 8007c84:	1854      	adds	r4, r2, r1
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	d1dd      	bne.n	8007c48 <_free_r+0x28>
 8007c8c:	681c      	ldr	r4, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	6053      	str	r3, [r2, #4]
 8007c92:	4421      	add	r1, r4
 8007c94:	6011      	str	r1, [r2, #0]
 8007c96:	e7d7      	b.n	8007c48 <_free_r+0x28>
 8007c98:	d902      	bls.n	8007ca0 <_free_r+0x80>
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	6003      	str	r3, [r0, #0]
 8007c9e:	e7d3      	b.n	8007c48 <_free_r+0x28>
 8007ca0:	6825      	ldr	r5, [r4, #0]
 8007ca2:	1961      	adds	r1, r4, r5
 8007ca4:	428b      	cmp	r3, r1
 8007ca6:	bf04      	itt	eq
 8007ca8:	6819      	ldreq	r1, [r3, #0]
 8007caa:	685b      	ldreq	r3, [r3, #4]
 8007cac:	6063      	str	r3, [r4, #4]
 8007cae:	bf04      	itt	eq
 8007cb0:	1949      	addeq	r1, r1, r5
 8007cb2:	6021      	streq	r1, [r4, #0]
 8007cb4:	6054      	str	r4, [r2, #4]
 8007cb6:	e7c7      	b.n	8007c48 <_free_r+0x28>
 8007cb8:	b003      	add	sp, #12
 8007cba:	bd30      	pop	{r4, r5, pc}
 8007cbc:	20000530 	.word	0x20000530

08007cc0 <_malloc_r>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	1ccd      	adds	r5, r1, #3
 8007cc4:	f025 0503 	bic.w	r5, r5, #3
 8007cc8:	3508      	adds	r5, #8
 8007cca:	2d0c      	cmp	r5, #12
 8007ccc:	bf38      	it	cc
 8007cce:	250c      	movcc	r5, #12
 8007cd0:	2d00      	cmp	r5, #0
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	db01      	blt.n	8007cda <_malloc_r+0x1a>
 8007cd6:	42a9      	cmp	r1, r5
 8007cd8:	d903      	bls.n	8007ce2 <_malloc_r+0x22>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	6033      	str	r3, [r6, #0]
 8007cde:	2000      	movs	r0, #0
 8007ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce2:	f000 ffa1 	bl	8008c28 <__malloc_lock>
 8007ce6:	4921      	ldr	r1, [pc, #132]	; (8007d6c <_malloc_r+0xac>)
 8007ce8:	680a      	ldr	r2, [r1, #0]
 8007cea:	4614      	mov	r4, r2
 8007cec:	b99c      	cbnz	r4, 8007d16 <_malloc_r+0x56>
 8007cee:	4f20      	ldr	r7, [pc, #128]	; (8007d70 <_malloc_r+0xb0>)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	b923      	cbnz	r3, 8007cfe <_malloc_r+0x3e>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 fc86 	bl	8008608 <_sbrk_r>
 8007cfc:	6038      	str	r0, [r7, #0]
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4630      	mov	r0, r6
 8007d02:	f000 fc81 	bl	8008608 <_sbrk_r>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d123      	bne.n	8007d52 <_malloc_r+0x92>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 ff90 	bl	8008c34 <__malloc_unlock>
 8007d14:	e7e3      	b.n	8007cde <_malloc_r+0x1e>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	1b5b      	subs	r3, r3, r5
 8007d1a:	d417      	bmi.n	8007d4c <_malloc_r+0x8c>
 8007d1c:	2b0b      	cmp	r3, #11
 8007d1e:	d903      	bls.n	8007d28 <_malloc_r+0x68>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	441c      	add	r4, r3
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	e004      	b.n	8007d32 <_malloc_r+0x72>
 8007d28:	6863      	ldr	r3, [r4, #4]
 8007d2a:	42a2      	cmp	r2, r4
 8007d2c:	bf0c      	ite	eq
 8007d2e:	600b      	streq	r3, [r1, #0]
 8007d30:	6053      	strne	r3, [r2, #4]
 8007d32:	4630      	mov	r0, r6
 8007d34:	f000 ff7e 	bl	8008c34 <__malloc_unlock>
 8007d38:	f104 000b 	add.w	r0, r4, #11
 8007d3c:	1d23      	adds	r3, r4, #4
 8007d3e:	f020 0007 	bic.w	r0, r0, #7
 8007d42:	1ac2      	subs	r2, r0, r3
 8007d44:	d0cc      	beq.n	8007ce0 <_malloc_r+0x20>
 8007d46:	1a1b      	subs	r3, r3, r0
 8007d48:	50a3      	str	r3, [r4, r2]
 8007d4a:	e7c9      	b.n	8007ce0 <_malloc_r+0x20>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	6864      	ldr	r4, [r4, #4]
 8007d50:	e7cc      	b.n	8007cec <_malloc_r+0x2c>
 8007d52:	1cc4      	adds	r4, r0, #3
 8007d54:	f024 0403 	bic.w	r4, r4, #3
 8007d58:	42a0      	cmp	r0, r4
 8007d5a:	d0e3      	beq.n	8007d24 <_malloc_r+0x64>
 8007d5c:	1a21      	subs	r1, r4, r0
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 fc52 	bl	8008608 <_sbrk_r>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d1dd      	bne.n	8007d24 <_malloc_r+0x64>
 8007d68:	e7cf      	b.n	8007d0a <_malloc_r+0x4a>
 8007d6a:	bf00      	nop
 8007d6c:	20000530 	.word	0x20000530
 8007d70:	20000534 	.word	0x20000534

08007d74 <__ssputs_r>:
 8007d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	688e      	ldr	r6, [r1, #8]
 8007d7a:	429e      	cmp	r6, r3
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	4690      	mov	r8, r2
 8007d82:	461f      	mov	r7, r3
 8007d84:	d838      	bhi.n	8007df8 <__ssputs_r+0x84>
 8007d86:	898a      	ldrh	r2, [r1, #12]
 8007d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d8c:	d032      	beq.n	8007df4 <__ssputs_r+0x80>
 8007d8e:	6825      	ldr	r5, [r4, #0]
 8007d90:	6909      	ldr	r1, [r1, #16]
 8007d92:	eba5 0901 	sub.w	r9, r5, r1
 8007d96:	6965      	ldr	r5, [r4, #20]
 8007d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007da0:	3301      	adds	r3, #1
 8007da2:	444b      	add	r3, r9
 8007da4:	106d      	asrs	r5, r5, #1
 8007da6:	429d      	cmp	r5, r3
 8007da8:	bf38      	it	cc
 8007daa:	461d      	movcc	r5, r3
 8007dac:	0553      	lsls	r3, r2, #21
 8007dae:	d531      	bpl.n	8007e14 <__ssputs_r+0xa0>
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7ff ff85 	bl	8007cc0 <_malloc_r>
 8007db6:	4606      	mov	r6, r0
 8007db8:	b950      	cbnz	r0, 8007dd0 <__ssputs_r+0x5c>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	f8ca 3000 	str.w	r3, [sl]
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd0:	6921      	ldr	r1, [r4, #16]
 8007dd2:	464a      	mov	r2, r9
 8007dd4:	f7ff fd8a 	bl	80078ec <memcpy>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	6126      	str	r6, [r4, #16]
 8007de6:	6165      	str	r5, [r4, #20]
 8007de8:	444e      	add	r6, r9
 8007dea:	eba5 0509 	sub.w	r5, r5, r9
 8007dee:	6026      	str	r6, [r4, #0]
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	463e      	mov	r6, r7
 8007df4:	42be      	cmp	r6, r7
 8007df6:	d900      	bls.n	8007dfa <__ssputs_r+0x86>
 8007df8:	463e      	mov	r6, r7
 8007dfa:	4632      	mov	r2, r6
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	4641      	mov	r1, r8
 8007e00:	f000 fef8 	bl	8008bf4 <memmove>
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	6822      	ldr	r2, [r4, #0]
 8007e08:	1b9b      	subs	r3, r3, r6
 8007e0a:	4432      	add	r2, r6
 8007e0c:	60a3      	str	r3, [r4, #8]
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	2000      	movs	r0, #0
 8007e12:	e7db      	b.n	8007dcc <__ssputs_r+0x58>
 8007e14:	462a      	mov	r2, r5
 8007e16:	f000 ff13 	bl	8008c40 <_realloc_r>
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1e1      	bne.n	8007de4 <__ssputs_r+0x70>
 8007e20:	6921      	ldr	r1, [r4, #16]
 8007e22:	4650      	mov	r0, sl
 8007e24:	f7ff fefc 	bl	8007c20 <_free_r>
 8007e28:	e7c7      	b.n	8007dba <__ssputs_r+0x46>
	...

08007e2c <_svfiprintf_r>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	4698      	mov	r8, r3
 8007e32:	898b      	ldrh	r3, [r1, #12]
 8007e34:	061b      	lsls	r3, r3, #24
 8007e36:	b09d      	sub	sp, #116	; 0x74
 8007e38:	4607      	mov	r7, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	d50e      	bpl.n	8007e5e <_svfiprintf_r+0x32>
 8007e40:	690b      	ldr	r3, [r1, #16]
 8007e42:	b963      	cbnz	r3, 8007e5e <_svfiprintf_r+0x32>
 8007e44:	2140      	movs	r1, #64	; 0x40
 8007e46:	f7ff ff3b 	bl	8007cc0 <_malloc_r>
 8007e4a:	6028      	str	r0, [r5, #0]
 8007e4c:	6128      	str	r0, [r5, #16]
 8007e4e:	b920      	cbnz	r0, 8007e5a <_svfiprintf_r+0x2e>
 8007e50:	230c      	movs	r3, #12
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e58:	e0d1      	b.n	8007ffe <_svfiprintf_r+0x1d2>
 8007e5a:	2340      	movs	r3, #64	; 0x40
 8007e5c:	616b      	str	r3, [r5, #20]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	9309      	str	r3, [sp, #36]	; 0x24
 8007e62:	2320      	movs	r3, #32
 8007e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e6c:	2330      	movs	r3, #48	; 0x30
 8007e6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008018 <_svfiprintf_r+0x1ec>
 8007e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e76:	f04f 0901 	mov.w	r9, #1
 8007e7a:	4623      	mov	r3, r4
 8007e7c:	469a      	mov	sl, r3
 8007e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e82:	b10a      	cbz	r2, 8007e88 <_svfiprintf_r+0x5c>
 8007e84:	2a25      	cmp	r2, #37	; 0x25
 8007e86:	d1f9      	bne.n	8007e7c <_svfiprintf_r+0x50>
 8007e88:	ebba 0b04 	subs.w	fp, sl, r4
 8007e8c:	d00b      	beq.n	8007ea6 <_svfiprintf_r+0x7a>
 8007e8e:	465b      	mov	r3, fp
 8007e90:	4622      	mov	r2, r4
 8007e92:	4629      	mov	r1, r5
 8007e94:	4638      	mov	r0, r7
 8007e96:	f7ff ff6d 	bl	8007d74 <__ssputs_r>
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f000 80aa 	beq.w	8007ff4 <_svfiprintf_r+0x1c8>
 8007ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea2:	445a      	add	r2, fp
 8007ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 80a2 	beq.w	8007ff4 <_svfiprintf_r+0x1c8>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eba:	f10a 0a01 	add.w	sl, sl, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	9307      	str	r3, [sp, #28]
 8007ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ec8:	4654      	mov	r4, sl
 8007eca:	2205      	movs	r2, #5
 8007ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed0:	4851      	ldr	r0, [pc, #324]	; (8008018 <_svfiprintf_r+0x1ec>)
 8007ed2:	f7f8 f985 	bl	80001e0 <memchr>
 8007ed6:	9a04      	ldr	r2, [sp, #16]
 8007ed8:	b9d8      	cbnz	r0, 8007f12 <_svfiprintf_r+0xe6>
 8007eda:	06d0      	lsls	r0, r2, #27
 8007edc:	bf44      	itt	mi
 8007ede:	2320      	movmi	r3, #32
 8007ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee4:	0711      	lsls	r1, r2, #28
 8007ee6:	bf44      	itt	mi
 8007ee8:	232b      	movmi	r3, #43	; 0x2b
 8007eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef4:	d015      	beq.n	8007f22 <_svfiprintf_r+0xf6>
 8007ef6:	9a07      	ldr	r2, [sp, #28]
 8007ef8:	4654      	mov	r4, sl
 8007efa:	2000      	movs	r0, #0
 8007efc:	f04f 0c0a 	mov.w	ip, #10
 8007f00:	4621      	mov	r1, r4
 8007f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f06:	3b30      	subs	r3, #48	; 0x30
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	d94e      	bls.n	8007faa <_svfiprintf_r+0x17e>
 8007f0c:	b1b0      	cbz	r0, 8007f3c <_svfiprintf_r+0x110>
 8007f0e:	9207      	str	r2, [sp, #28]
 8007f10:	e014      	b.n	8007f3c <_svfiprintf_r+0x110>
 8007f12:	eba0 0308 	sub.w	r3, r0, r8
 8007f16:	fa09 f303 	lsl.w	r3, r9, r3
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	46a2      	mov	sl, r4
 8007f20:	e7d2      	b.n	8007ec8 <_svfiprintf_r+0x9c>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	1d19      	adds	r1, r3, #4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	9103      	str	r1, [sp, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bfbb      	ittet	lt
 8007f2e:	425b      	neglt	r3, r3
 8007f30:	f042 0202 	orrlt.w	r2, r2, #2
 8007f34:	9307      	strge	r3, [sp, #28]
 8007f36:	9307      	strlt	r3, [sp, #28]
 8007f38:	bfb8      	it	lt
 8007f3a:	9204      	strlt	r2, [sp, #16]
 8007f3c:	7823      	ldrb	r3, [r4, #0]
 8007f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f40:	d10c      	bne.n	8007f5c <_svfiprintf_r+0x130>
 8007f42:	7863      	ldrb	r3, [r4, #1]
 8007f44:	2b2a      	cmp	r3, #42	; 0x2a
 8007f46:	d135      	bne.n	8007fb4 <_svfiprintf_r+0x188>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	1d1a      	adds	r2, r3, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	9203      	str	r2, [sp, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfb8      	it	lt
 8007f54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f58:	3402      	adds	r4, #2
 8007f5a:	9305      	str	r3, [sp, #20]
 8007f5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008028 <_svfiprintf_r+0x1fc>
 8007f60:	7821      	ldrb	r1, [r4, #0]
 8007f62:	2203      	movs	r2, #3
 8007f64:	4650      	mov	r0, sl
 8007f66:	f7f8 f93b 	bl	80001e0 <memchr>
 8007f6a:	b140      	cbz	r0, 8007f7e <_svfiprintf_r+0x152>
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	eba0 000a 	sub.w	r0, r0, sl
 8007f72:	fa03 f000 	lsl.w	r0, r3, r0
 8007f76:	9b04      	ldr	r3, [sp, #16]
 8007f78:	4303      	orrs	r3, r0
 8007f7a:	3401      	adds	r4, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f82:	4826      	ldr	r0, [pc, #152]	; (800801c <_svfiprintf_r+0x1f0>)
 8007f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f88:	2206      	movs	r2, #6
 8007f8a:	f7f8 f929 	bl	80001e0 <memchr>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d038      	beq.n	8008004 <_svfiprintf_r+0x1d8>
 8007f92:	4b23      	ldr	r3, [pc, #140]	; (8008020 <_svfiprintf_r+0x1f4>)
 8007f94:	bb1b      	cbnz	r3, 8007fde <_svfiprintf_r+0x1b2>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	3307      	adds	r3, #7
 8007f9a:	f023 0307 	bic.w	r3, r3, #7
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa4:	4433      	add	r3, r6
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	e767      	b.n	8007e7a <_svfiprintf_r+0x4e>
 8007faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fae:	460c      	mov	r4, r1
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	e7a5      	b.n	8007f00 <_svfiprintf_r+0xd4>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	3401      	adds	r4, #1
 8007fb8:	9305      	str	r3, [sp, #20]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f04f 0c0a 	mov.w	ip, #10
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc6:	3a30      	subs	r2, #48	; 0x30
 8007fc8:	2a09      	cmp	r2, #9
 8007fca:	d903      	bls.n	8007fd4 <_svfiprintf_r+0x1a8>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0c5      	beq.n	8007f5c <_svfiprintf_r+0x130>
 8007fd0:	9105      	str	r1, [sp, #20]
 8007fd2:	e7c3      	b.n	8007f5c <_svfiprintf_r+0x130>
 8007fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd8:	4604      	mov	r4, r0
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e7f0      	b.n	8007fc0 <_svfiprintf_r+0x194>
 8007fde:	ab03      	add	r3, sp, #12
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <_svfiprintf_r+0x1f8>)
 8007fe6:	a904      	add	r1, sp, #16
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f3af 8000 	nop.w
 8007fee:	1c42      	adds	r2, r0, #1
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	d1d6      	bne.n	8007fa2 <_svfiprintf_r+0x176>
 8007ff4:	89ab      	ldrh	r3, [r5, #12]
 8007ff6:	065b      	lsls	r3, r3, #25
 8007ff8:	f53f af2c 	bmi.w	8007e54 <_svfiprintf_r+0x28>
 8007ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ffe:	b01d      	add	sp, #116	; 0x74
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	ab03      	add	r3, sp, #12
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	462a      	mov	r2, r5
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <_svfiprintf_r+0x1f8>)
 800800c:	a904      	add	r1, sp, #16
 800800e:	4638      	mov	r0, r7
 8008010:	f000 f9d4 	bl	80083bc <_printf_i>
 8008014:	e7eb      	b.n	8007fee <_svfiprintf_r+0x1c2>
 8008016:	bf00      	nop
 8008018:	080090ea 	.word	0x080090ea
 800801c:	080090f4 	.word	0x080090f4
 8008020:	00000000 	.word	0x00000000
 8008024:	08007d75 	.word	0x08007d75
 8008028:	080090f0 	.word	0x080090f0

0800802c <__sfputc_r>:
 800802c:	6893      	ldr	r3, [r2, #8]
 800802e:	3b01      	subs	r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	b410      	push	{r4}
 8008034:	6093      	str	r3, [r2, #8]
 8008036:	da08      	bge.n	800804a <__sfputc_r+0x1e>
 8008038:	6994      	ldr	r4, [r2, #24]
 800803a:	42a3      	cmp	r3, r4
 800803c:	db01      	blt.n	8008042 <__sfputc_r+0x16>
 800803e:	290a      	cmp	r1, #10
 8008040:	d103      	bne.n	800804a <__sfputc_r+0x1e>
 8008042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008046:	f000 baef 	b.w	8008628 <__swbuf_r>
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	1c58      	adds	r0, r3, #1
 800804e:	6010      	str	r0, [r2, #0]
 8008050:	7019      	strb	r1, [r3, #0]
 8008052:	4608      	mov	r0, r1
 8008054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008058:	4770      	bx	lr

0800805a <__sfputs_r>:
 800805a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805c:	4606      	mov	r6, r0
 800805e:	460f      	mov	r7, r1
 8008060:	4614      	mov	r4, r2
 8008062:	18d5      	adds	r5, r2, r3
 8008064:	42ac      	cmp	r4, r5
 8008066:	d101      	bne.n	800806c <__sfputs_r+0x12>
 8008068:	2000      	movs	r0, #0
 800806a:	e007      	b.n	800807c <__sfputs_r+0x22>
 800806c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008070:	463a      	mov	r2, r7
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ffda 	bl	800802c <__sfputc_r>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d1f3      	bne.n	8008064 <__sfputs_r+0xa>
 800807c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008080 <_vfiprintf_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	460d      	mov	r5, r1
 8008086:	b09d      	sub	sp, #116	; 0x74
 8008088:	4614      	mov	r4, r2
 800808a:	4698      	mov	r8, r3
 800808c:	4606      	mov	r6, r0
 800808e:	b118      	cbz	r0, 8008098 <_vfiprintf_r+0x18>
 8008090:	6983      	ldr	r3, [r0, #24]
 8008092:	b90b      	cbnz	r3, 8008098 <_vfiprintf_r+0x18>
 8008094:	f000 fcaa 	bl	80089ec <__sinit>
 8008098:	4b89      	ldr	r3, [pc, #548]	; (80082c0 <_vfiprintf_r+0x240>)
 800809a:	429d      	cmp	r5, r3
 800809c:	d11b      	bne.n	80080d6 <_vfiprintf_r+0x56>
 800809e:	6875      	ldr	r5, [r6, #4]
 80080a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080a2:	07d9      	lsls	r1, r3, #31
 80080a4:	d405      	bmi.n	80080b2 <_vfiprintf_r+0x32>
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	059a      	lsls	r2, r3, #22
 80080aa:	d402      	bmi.n	80080b2 <_vfiprintf_r+0x32>
 80080ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ae:	f000 fd3b 	bl	8008b28 <__retarget_lock_acquire_recursive>
 80080b2:	89ab      	ldrh	r3, [r5, #12]
 80080b4:	071b      	lsls	r3, r3, #28
 80080b6:	d501      	bpl.n	80080bc <_vfiprintf_r+0x3c>
 80080b8:	692b      	ldr	r3, [r5, #16]
 80080ba:	b9eb      	cbnz	r3, 80080f8 <_vfiprintf_r+0x78>
 80080bc:	4629      	mov	r1, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	f000 fb04 	bl	80086cc <__swsetup_r>
 80080c4:	b1c0      	cbz	r0, 80080f8 <_vfiprintf_r+0x78>
 80080c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080c8:	07dc      	lsls	r4, r3, #31
 80080ca:	d50e      	bpl.n	80080ea <_vfiprintf_r+0x6a>
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080d0:	b01d      	add	sp, #116	; 0x74
 80080d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	4b7b      	ldr	r3, [pc, #492]	; (80082c4 <_vfiprintf_r+0x244>)
 80080d8:	429d      	cmp	r5, r3
 80080da:	d101      	bne.n	80080e0 <_vfiprintf_r+0x60>
 80080dc:	68b5      	ldr	r5, [r6, #8]
 80080de:	e7df      	b.n	80080a0 <_vfiprintf_r+0x20>
 80080e0:	4b79      	ldr	r3, [pc, #484]	; (80082c8 <_vfiprintf_r+0x248>)
 80080e2:	429d      	cmp	r5, r3
 80080e4:	bf08      	it	eq
 80080e6:	68f5      	ldreq	r5, [r6, #12]
 80080e8:	e7da      	b.n	80080a0 <_vfiprintf_r+0x20>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	0598      	lsls	r0, r3, #22
 80080ee:	d4ed      	bmi.n	80080cc <_vfiprintf_r+0x4c>
 80080f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f2:	f000 fd1a 	bl	8008b2a <__retarget_lock_release_recursive>
 80080f6:	e7e9      	b.n	80080cc <_vfiprintf_r+0x4c>
 80080f8:	2300      	movs	r3, #0
 80080fa:	9309      	str	r3, [sp, #36]	; 0x24
 80080fc:	2320      	movs	r3, #32
 80080fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008102:	f8cd 800c 	str.w	r8, [sp, #12]
 8008106:	2330      	movs	r3, #48	; 0x30
 8008108:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082cc <_vfiprintf_r+0x24c>
 800810c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008110:	f04f 0901 	mov.w	r9, #1
 8008114:	4623      	mov	r3, r4
 8008116:	469a      	mov	sl, r3
 8008118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800811c:	b10a      	cbz	r2, 8008122 <_vfiprintf_r+0xa2>
 800811e:	2a25      	cmp	r2, #37	; 0x25
 8008120:	d1f9      	bne.n	8008116 <_vfiprintf_r+0x96>
 8008122:	ebba 0b04 	subs.w	fp, sl, r4
 8008126:	d00b      	beq.n	8008140 <_vfiprintf_r+0xc0>
 8008128:	465b      	mov	r3, fp
 800812a:	4622      	mov	r2, r4
 800812c:	4629      	mov	r1, r5
 800812e:	4630      	mov	r0, r6
 8008130:	f7ff ff93 	bl	800805a <__sfputs_r>
 8008134:	3001      	adds	r0, #1
 8008136:	f000 80aa 	beq.w	800828e <_vfiprintf_r+0x20e>
 800813a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800813c:	445a      	add	r2, fp
 800813e:	9209      	str	r2, [sp, #36]	; 0x24
 8008140:	f89a 3000 	ldrb.w	r3, [sl]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80a2 	beq.w	800828e <_vfiprintf_r+0x20e>
 800814a:	2300      	movs	r3, #0
 800814c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008154:	f10a 0a01 	add.w	sl, sl, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008160:	931a      	str	r3, [sp, #104]	; 0x68
 8008162:	4654      	mov	r4, sl
 8008164:	2205      	movs	r2, #5
 8008166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800816a:	4858      	ldr	r0, [pc, #352]	; (80082cc <_vfiprintf_r+0x24c>)
 800816c:	f7f8 f838 	bl	80001e0 <memchr>
 8008170:	9a04      	ldr	r2, [sp, #16]
 8008172:	b9d8      	cbnz	r0, 80081ac <_vfiprintf_r+0x12c>
 8008174:	06d1      	lsls	r1, r2, #27
 8008176:	bf44      	itt	mi
 8008178:	2320      	movmi	r3, #32
 800817a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800817e:	0713      	lsls	r3, r2, #28
 8008180:	bf44      	itt	mi
 8008182:	232b      	movmi	r3, #43	; 0x2b
 8008184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008188:	f89a 3000 	ldrb.w	r3, [sl]
 800818c:	2b2a      	cmp	r3, #42	; 0x2a
 800818e:	d015      	beq.n	80081bc <_vfiprintf_r+0x13c>
 8008190:	9a07      	ldr	r2, [sp, #28]
 8008192:	4654      	mov	r4, sl
 8008194:	2000      	movs	r0, #0
 8008196:	f04f 0c0a 	mov.w	ip, #10
 800819a:	4621      	mov	r1, r4
 800819c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a0:	3b30      	subs	r3, #48	; 0x30
 80081a2:	2b09      	cmp	r3, #9
 80081a4:	d94e      	bls.n	8008244 <_vfiprintf_r+0x1c4>
 80081a6:	b1b0      	cbz	r0, 80081d6 <_vfiprintf_r+0x156>
 80081a8:	9207      	str	r2, [sp, #28]
 80081aa:	e014      	b.n	80081d6 <_vfiprintf_r+0x156>
 80081ac:	eba0 0308 	sub.w	r3, r0, r8
 80081b0:	fa09 f303 	lsl.w	r3, r9, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	9304      	str	r3, [sp, #16]
 80081b8:	46a2      	mov	sl, r4
 80081ba:	e7d2      	b.n	8008162 <_vfiprintf_r+0xe2>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	1d19      	adds	r1, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	9103      	str	r1, [sp, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfbb      	ittet	lt
 80081c8:	425b      	neglt	r3, r3
 80081ca:	f042 0202 	orrlt.w	r2, r2, #2
 80081ce:	9307      	strge	r3, [sp, #28]
 80081d0:	9307      	strlt	r3, [sp, #28]
 80081d2:	bfb8      	it	lt
 80081d4:	9204      	strlt	r2, [sp, #16]
 80081d6:	7823      	ldrb	r3, [r4, #0]
 80081d8:	2b2e      	cmp	r3, #46	; 0x2e
 80081da:	d10c      	bne.n	80081f6 <_vfiprintf_r+0x176>
 80081dc:	7863      	ldrb	r3, [r4, #1]
 80081de:	2b2a      	cmp	r3, #42	; 0x2a
 80081e0:	d135      	bne.n	800824e <_vfiprintf_r+0x1ce>
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	1d1a      	adds	r2, r3, #4
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	9203      	str	r2, [sp, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bfb8      	it	lt
 80081ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081f2:	3402      	adds	r4, #2
 80081f4:	9305      	str	r3, [sp, #20]
 80081f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082dc <_vfiprintf_r+0x25c>
 80081fa:	7821      	ldrb	r1, [r4, #0]
 80081fc:	2203      	movs	r2, #3
 80081fe:	4650      	mov	r0, sl
 8008200:	f7f7 ffee 	bl	80001e0 <memchr>
 8008204:	b140      	cbz	r0, 8008218 <_vfiprintf_r+0x198>
 8008206:	2340      	movs	r3, #64	; 0x40
 8008208:	eba0 000a 	sub.w	r0, r0, sl
 800820c:	fa03 f000 	lsl.w	r0, r3, r0
 8008210:	9b04      	ldr	r3, [sp, #16]
 8008212:	4303      	orrs	r3, r0
 8008214:	3401      	adds	r4, #1
 8008216:	9304      	str	r3, [sp, #16]
 8008218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821c:	482c      	ldr	r0, [pc, #176]	; (80082d0 <_vfiprintf_r+0x250>)
 800821e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008222:	2206      	movs	r2, #6
 8008224:	f7f7 ffdc 	bl	80001e0 <memchr>
 8008228:	2800      	cmp	r0, #0
 800822a:	d03f      	beq.n	80082ac <_vfiprintf_r+0x22c>
 800822c:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <_vfiprintf_r+0x254>)
 800822e:	bb1b      	cbnz	r3, 8008278 <_vfiprintf_r+0x1f8>
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	3307      	adds	r3, #7
 8008234:	f023 0307 	bic.w	r3, r3, #7
 8008238:	3308      	adds	r3, #8
 800823a:	9303      	str	r3, [sp, #12]
 800823c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823e:	443b      	add	r3, r7
 8008240:	9309      	str	r3, [sp, #36]	; 0x24
 8008242:	e767      	b.n	8008114 <_vfiprintf_r+0x94>
 8008244:	fb0c 3202 	mla	r2, ip, r2, r3
 8008248:	460c      	mov	r4, r1
 800824a:	2001      	movs	r0, #1
 800824c:	e7a5      	b.n	800819a <_vfiprintf_r+0x11a>
 800824e:	2300      	movs	r3, #0
 8008250:	3401      	adds	r4, #1
 8008252:	9305      	str	r3, [sp, #20]
 8008254:	4619      	mov	r1, r3
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008260:	3a30      	subs	r2, #48	; 0x30
 8008262:	2a09      	cmp	r2, #9
 8008264:	d903      	bls.n	800826e <_vfiprintf_r+0x1ee>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0c5      	beq.n	80081f6 <_vfiprintf_r+0x176>
 800826a:	9105      	str	r1, [sp, #20]
 800826c:	e7c3      	b.n	80081f6 <_vfiprintf_r+0x176>
 800826e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008272:	4604      	mov	r4, r0
 8008274:	2301      	movs	r3, #1
 8008276:	e7f0      	b.n	800825a <_vfiprintf_r+0x1da>
 8008278:	ab03      	add	r3, sp, #12
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	462a      	mov	r2, r5
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <_vfiprintf_r+0x258>)
 8008280:	a904      	add	r1, sp, #16
 8008282:	4630      	mov	r0, r6
 8008284:	f3af 8000 	nop.w
 8008288:	4607      	mov	r7, r0
 800828a:	1c78      	adds	r0, r7, #1
 800828c:	d1d6      	bne.n	800823c <_vfiprintf_r+0x1bc>
 800828e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008290:	07d9      	lsls	r1, r3, #31
 8008292:	d405      	bmi.n	80082a0 <_vfiprintf_r+0x220>
 8008294:	89ab      	ldrh	r3, [r5, #12]
 8008296:	059a      	lsls	r2, r3, #22
 8008298:	d402      	bmi.n	80082a0 <_vfiprintf_r+0x220>
 800829a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800829c:	f000 fc45 	bl	8008b2a <__retarget_lock_release_recursive>
 80082a0:	89ab      	ldrh	r3, [r5, #12]
 80082a2:	065b      	lsls	r3, r3, #25
 80082a4:	f53f af12 	bmi.w	80080cc <_vfiprintf_r+0x4c>
 80082a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082aa:	e711      	b.n	80080d0 <_vfiprintf_r+0x50>
 80082ac:	ab03      	add	r3, sp, #12
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	462a      	mov	r2, r5
 80082b2:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <_vfiprintf_r+0x258>)
 80082b4:	a904      	add	r1, sp, #16
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 f880 	bl	80083bc <_printf_i>
 80082bc:	e7e4      	b.n	8008288 <_vfiprintf_r+0x208>
 80082be:	bf00      	nop
 80082c0:	08009140 	.word	0x08009140
 80082c4:	08009160 	.word	0x08009160
 80082c8:	08009120 	.word	0x08009120
 80082cc:	080090ea 	.word	0x080090ea
 80082d0:	080090f4 	.word	0x080090f4
 80082d4:	00000000 	.word	0x00000000
 80082d8:	0800805b 	.word	0x0800805b
 80082dc:	080090f0 	.word	0x080090f0

080082e0 <_printf_common>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	4616      	mov	r6, r2
 80082e6:	4699      	mov	r9, r3
 80082e8:	688a      	ldr	r2, [r1, #8]
 80082ea:	690b      	ldr	r3, [r1, #16]
 80082ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082f0:	4293      	cmp	r3, r2
 80082f2:	bfb8      	it	lt
 80082f4:	4613      	movlt	r3, r2
 80082f6:	6033      	str	r3, [r6, #0]
 80082f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082fc:	4607      	mov	r7, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	b10a      	cbz	r2, 8008306 <_printf_common+0x26>
 8008302:	3301      	adds	r3, #1
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	0699      	lsls	r1, r3, #26
 800830a:	bf42      	ittt	mi
 800830c:	6833      	ldrmi	r3, [r6, #0]
 800830e:	3302      	addmi	r3, #2
 8008310:	6033      	strmi	r3, [r6, #0]
 8008312:	6825      	ldr	r5, [r4, #0]
 8008314:	f015 0506 	ands.w	r5, r5, #6
 8008318:	d106      	bne.n	8008328 <_printf_common+0x48>
 800831a:	f104 0a19 	add.w	sl, r4, #25
 800831e:	68e3      	ldr	r3, [r4, #12]
 8008320:	6832      	ldr	r2, [r6, #0]
 8008322:	1a9b      	subs	r3, r3, r2
 8008324:	42ab      	cmp	r3, r5
 8008326:	dc26      	bgt.n	8008376 <_printf_common+0x96>
 8008328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800832c:	1e13      	subs	r3, r2, #0
 800832e:	6822      	ldr	r2, [r4, #0]
 8008330:	bf18      	it	ne
 8008332:	2301      	movne	r3, #1
 8008334:	0692      	lsls	r2, r2, #26
 8008336:	d42b      	bmi.n	8008390 <_printf_common+0xb0>
 8008338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800833c:	4649      	mov	r1, r9
 800833e:	4638      	mov	r0, r7
 8008340:	47c0      	blx	r8
 8008342:	3001      	adds	r0, #1
 8008344:	d01e      	beq.n	8008384 <_printf_common+0xa4>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	68e5      	ldr	r5, [r4, #12]
 800834a:	6832      	ldr	r2, [r6, #0]
 800834c:	f003 0306 	and.w	r3, r3, #6
 8008350:	2b04      	cmp	r3, #4
 8008352:	bf08      	it	eq
 8008354:	1aad      	subeq	r5, r5, r2
 8008356:	68a3      	ldr	r3, [r4, #8]
 8008358:	6922      	ldr	r2, [r4, #16]
 800835a:	bf0c      	ite	eq
 800835c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008360:	2500      	movne	r5, #0
 8008362:	4293      	cmp	r3, r2
 8008364:	bfc4      	itt	gt
 8008366:	1a9b      	subgt	r3, r3, r2
 8008368:	18ed      	addgt	r5, r5, r3
 800836a:	2600      	movs	r6, #0
 800836c:	341a      	adds	r4, #26
 800836e:	42b5      	cmp	r5, r6
 8008370:	d11a      	bne.n	80083a8 <_printf_common+0xc8>
 8008372:	2000      	movs	r0, #0
 8008374:	e008      	b.n	8008388 <_printf_common+0xa8>
 8008376:	2301      	movs	r3, #1
 8008378:	4652      	mov	r2, sl
 800837a:	4649      	mov	r1, r9
 800837c:	4638      	mov	r0, r7
 800837e:	47c0      	blx	r8
 8008380:	3001      	adds	r0, #1
 8008382:	d103      	bne.n	800838c <_printf_common+0xac>
 8008384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838c:	3501      	adds	r5, #1
 800838e:	e7c6      	b.n	800831e <_printf_common+0x3e>
 8008390:	18e1      	adds	r1, r4, r3
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	2030      	movs	r0, #48	; 0x30
 8008396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800839a:	4422      	add	r2, r4
 800839c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083a4:	3302      	adds	r3, #2
 80083a6:	e7c7      	b.n	8008338 <_printf_common+0x58>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4622      	mov	r2, r4
 80083ac:	4649      	mov	r1, r9
 80083ae:	4638      	mov	r0, r7
 80083b0:	47c0      	blx	r8
 80083b2:	3001      	adds	r0, #1
 80083b4:	d0e6      	beq.n	8008384 <_printf_common+0xa4>
 80083b6:	3601      	adds	r6, #1
 80083b8:	e7d9      	b.n	800836e <_printf_common+0x8e>
	...

080083bc <_printf_i>:
 80083bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	4691      	mov	r9, r2
 80083c4:	7e27      	ldrb	r7, [r4, #24]
 80083c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083c8:	2f78      	cmp	r7, #120	; 0x78
 80083ca:	4680      	mov	r8, r0
 80083cc:	469a      	mov	sl, r3
 80083ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d2:	d807      	bhi.n	80083e4 <_printf_i+0x28>
 80083d4:	2f62      	cmp	r7, #98	; 0x62
 80083d6:	d80a      	bhi.n	80083ee <_printf_i+0x32>
 80083d8:	2f00      	cmp	r7, #0
 80083da:	f000 80d8 	beq.w	800858e <_printf_i+0x1d2>
 80083de:	2f58      	cmp	r7, #88	; 0x58
 80083e0:	f000 80a3 	beq.w	800852a <_printf_i+0x16e>
 80083e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083ec:	e03a      	b.n	8008464 <_printf_i+0xa8>
 80083ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083f2:	2b15      	cmp	r3, #21
 80083f4:	d8f6      	bhi.n	80083e4 <_printf_i+0x28>
 80083f6:	a001      	add	r0, pc, #4	; (adr r0, 80083fc <_printf_i+0x40>)
 80083f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083fc:	08008455 	.word	0x08008455
 8008400:	08008469 	.word	0x08008469
 8008404:	080083e5 	.word	0x080083e5
 8008408:	080083e5 	.word	0x080083e5
 800840c:	080083e5 	.word	0x080083e5
 8008410:	080083e5 	.word	0x080083e5
 8008414:	08008469 	.word	0x08008469
 8008418:	080083e5 	.word	0x080083e5
 800841c:	080083e5 	.word	0x080083e5
 8008420:	080083e5 	.word	0x080083e5
 8008424:	080083e5 	.word	0x080083e5
 8008428:	08008575 	.word	0x08008575
 800842c:	08008499 	.word	0x08008499
 8008430:	08008557 	.word	0x08008557
 8008434:	080083e5 	.word	0x080083e5
 8008438:	080083e5 	.word	0x080083e5
 800843c:	08008597 	.word	0x08008597
 8008440:	080083e5 	.word	0x080083e5
 8008444:	08008499 	.word	0x08008499
 8008448:	080083e5 	.word	0x080083e5
 800844c:	080083e5 	.word	0x080083e5
 8008450:	0800855f 	.word	0x0800855f
 8008454:	680b      	ldr	r3, [r1, #0]
 8008456:	1d1a      	adds	r2, r3, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	600a      	str	r2, [r1, #0]
 800845c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008464:	2301      	movs	r3, #1
 8008466:	e0a3      	b.n	80085b0 <_printf_i+0x1f4>
 8008468:	6825      	ldr	r5, [r4, #0]
 800846a:	6808      	ldr	r0, [r1, #0]
 800846c:	062e      	lsls	r6, r5, #24
 800846e:	f100 0304 	add.w	r3, r0, #4
 8008472:	d50a      	bpl.n	800848a <_printf_i+0xce>
 8008474:	6805      	ldr	r5, [r0, #0]
 8008476:	600b      	str	r3, [r1, #0]
 8008478:	2d00      	cmp	r5, #0
 800847a:	da03      	bge.n	8008484 <_printf_i+0xc8>
 800847c:	232d      	movs	r3, #45	; 0x2d
 800847e:	426d      	negs	r5, r5
 8008480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008484:	485e      	ldr	r0, [pc, #376]	; (8008600 <_printf_i+0x244>)
 8008486:	230a      	movs	r3, #10
 8008488:	e019      	b.n	80084be <_printf_i+0x102>
 800848a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800848e:	6805      	ldr	r5, [r0, #0]
 8008490:	600b      	str	r3, [r1, #0]
 8008492:	bf18      	it	ne
 8008494:	b22d      	sxthne	r5, r5
 8008496:	e7ef      	b.n	8008478 <_printf_i+0xbc>
 8008498:	680b      	ldr	r3, [r1, #0]
 800849a:	6825      	ldr	r5, [r4, #0]
 800849c:	1d18      	adds	r0, r3, #4
 800849e:	6008      	str	r0, [r1, #0]
 80084a0:	0628      	lsls	r0, r5, #24
 80084a2:	d501      	bpl.n	80084a8 <_printf_i+0xec>
 80084a4:	681d      	ldr	r5, [r3, #0]
 80084a6:	e002      	b.n	80084ae <_printf_i+0xf2>
 80084a8:	0669      	lsls	r1, r5, #25
 80084aa:	d5fb      	bpl.n	80084a4 <_printf_i+0xe8>
 80084ac:	881d      	ldrh	r5, [r3, #0]
 80084ae:	4854      	ldr	r0, [pc, #336]	; (8008600 <_printf_i+0x244>)
 80084b0:	2f6f      	cmp	r7, #111	; 0x6f
 80084b2:	bf0c      	ite	eq
 80084b4:	2308      	moveq	r3, #8
 80084b6:	230a      	movne	r3, #10
 80084b8:	2100      	movs	r1, #0
 80084ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084be:	6866      	ldr	r6, [r4, #4]
 80084c0:	60a6      	str	r6, [r4, #8]
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	bfa2      	ittt	ge
 80084c6:	6821      	ldrge	r1, [r4, #0]
 80084c8:	f021 0104 	bicge.w	r1, r1, #4
 80084cc:	6021      	strge	r1, [r4, #0]
 80084ce:	b90d      	cbnz	r5, 80084d4 <_printf_i+0x118>
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	d04d      	beq.n	8008570 <_printf_i+0x1b4>
 80084d4:	4616      	mov	r6, r2
 80084d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80084da:	fb03 5711 	mls	r7, r3, r1, r5
 80084de:	5dc7      	ldrb	r7, [r0, r7]
 80084e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084e4:	462f      	mov	r7, r5
 80084e6:	42bb      	cmp	r3, r7
 80084e8:	460d      	mov	r5, r1
 80084ea:	d9f4      	bls.n	80084d6 <_printf_i+0x11a>
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d10b      	bne.n	8008508 <_printf_i+0x14c>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	07df      	lsls	r7, r3, #31
 80084f4:	d508      	bpl.n	8008508 <_printf_i+0x14c>
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	6861      	ldr	r1, [r4, #4]
 80084fa:	4299      	cmp	r1, r3
 80084fc:	bfde      	ittt	le
 80084fe:	2330      	movle	r3, #48	; 0x30
 8008500:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008504:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008508:	1b92      	subs	r2, r2, r6
 800850a:	6122      	str	r2, [r4, #16]
 800850c:	f8cd a000 	str.w	sl, [sp]
 8008510:	464b      	mov	r3, r9
 8008512:	aa03      	add	r2, sp, #12
 8008514:	4621      	mov	r1, r4
 8008516:	4640      	mov	r0, r8
 8008518:	f7ff fee2 	bl	80082e0 <_printf_common>
 800851c:	3001      	adds	r0, #1
 800851e:	d14c      	bne.n	80085ba <_printf_i+0x1fe>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008524:	b004      	add	sp, #16
 8008526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852a:	4835      	ldr	r0, [pc, #212]	; (8008600 <_printf_i+0x244>)
 800852c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	680e      	ldr	r6, [r1, #0]
 8008534:	061f      	lsls	r7, r3, #24
 8008536:	f856 5b04 	ldr.w	r5, [r6], #4
 800853a:	600e      	str	r6, [r1, #0]
 800853c:	d514      	bpl.n	8008568 <_printf_i+0x1ac>
 800853e:	07d9      	lsls	r1, r3, #31
 8008540:	bf44      	itt	mi
 8008542:	f043 0320 	orrmi.w	r3, r3, #32
 8008546:	6023      	strmi	r3, [r4, #0]
 8008548:	b91d      	cbnz	r5, 8008552 <_printf_i+0x196>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	f023 0320 	bic.w	r3, r3, #32
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	2310      	movs	r3, #16
 8008554:	e7b0      	b.n	80084b8 <_printf_i+0xfc>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	f043 0320 	orr.w	r3, r3, #32
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	2378      	movs	r3, #120	; 0x78
 8008560:	4828      	ldr	r0, [pc, #160]	; (8008604 <_printf_i+0x248>)
 8008562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008566:	e7e3      	b.n	8008530 <_printf_i+0x174>
 8008568:	065e      	lsls	r6, r3, #25
 800856a:	bf48      	it	mi
 800856c:	b2ad      	uxthmi	r5, r5
 800856e:	e7e6      	b.n	800853e <_printf_i+0x182>
 8008570:	4616      	mov	r6, r2
 8008572:	e7bb      	b.n	80084ec <_printf_i+0x130>
 8008574:	680b      	ldr	r3, [r1, #0]
 8008576:	6826      	ldr	r6, [r4, #0]
 8008578:	6960      	ldr	r0, [r4, #20]
 800857a:	1d1d      	adds	r5, r3, #4
 800857c:	600d      	str	r5, [r1, #0]
 800857e:	0635      	lsls	r5, r6, #24
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	d501      	bpl.n	8008588 <_printf_i+0x1cc>
 8008584:	6018      	str	r0, [r3, #0]
 8008586:	e002      	b.n	800858e <_printf_i+0x1d2>
 8008588:	0671      	lsls	r1, r6, #25
 800858a:	d5fb      	bpl.n	8008584 <_printf_i+0x1c8>
 800858c:	8018      	strh	r0, [r3, #0]
 800858e:	2300      	movs	r3, #0
 8008590:	6123      	str	r3, [r4, #16]
 8008592:	4616      	mov	r6, r2
 8008594:	e7ba      	b.n	800850c <_printf_i+0x150>
 8008596:	680b      	ldr	r3, [r1, #0]
 8008598:	1d1a      	adds	r2, r3, #4
 800859a:	600a      	str	r2, [r1, #0]
 800859c:	681e      	ldr	r6, [r3, #0]
 800859e:	6862      	ldr	r2, [r4, #4]
 80085a0:	2100      	movs	r1, #0
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7f7 fe1c 	bl	80001e0 <memchr>
 80085a8:	b108      	cbz	r0, 80085ae <_printf_i+0x1f2>
 80085aa:	1b80      	subs	r0, r0, r6
 80085ac:	6060      	str	r0, [r4, #4]
 80085ae:	6863      	ldr	r3, [r4, #4]
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	2300      	movs	r3, #0
 80085b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b8:	e7a8      	b.n	800850c <_printf_i+0x150>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	4632      	mov	r2, r6
 80085be:	4649      	mov	r1, r9
 80085c0:	4640      	mov	r0, r8
 80085c2:	47d0      	blx	sl
 80085c4:	3001      	adds	r0, #1
 80085c6:	d0ab      	beq.n	8008520 <_printf_i+0x164>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	079b      	lsls	r3, r3, #30
 80085cc:	d413      	bmi.n	80085f6 <_printf_i+0x23a>
 80085ce:	68e0      	ldr	r0, [r4, #12]
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	4298      	cmp	r0, r3
 80085d4:	bfb8      	it	lt
 80085d6:	4618      	movlt	r0, r3
 80085d8:	e7a4      	b.n	8008524 <_printf_i+0x168>
 80085da:	2301      	movs	r3, #1
 80085dc:	4632      	mov	r2, r6
 80085de:	4649      	mov	r1, r9
 80085e0:	4640      	mov	r0, r8
 80085e2:	47d0      	blx	sl
 80085e4:	3001      	adds	r0, #1
 80085e6:	d09b      	beq.n	8008520 <_printf_i+0x164>
 80085e8:	3501      	adds	r5, #1
 80085ea:	68e3      	ldr	r3, [r4, #12]
 80085ec:	9903      	ldr	r1, [sp, #12]
 80085ee:	1a5b      	subs	r3, r3, r1
 80085f0:	42ab      	cmp	r3, r5
 80085f2:	dcf2      	bgt.n	80085da <_printf_i+0x21e>
 80085f4:	e7eb      	b.n	80085ce <_printf_i+0x212>
 80085f6:	2500      	movs	r5, #0
 80085f8:	f104 0619 	add.w	r6, r4, #25
 80085fc:	e7f5      	b.n	80085ea <_printf_i+0x22e>
 80085fe:	bf00      	nop
 8008600:	080090fb 	.word	0x080090fb
 8008604:	0800910c 	.word	0x0800910c

08008608 <_sbrk_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d06      	ldr	r5, [pc, #24]	; (8008624 <_sbrk_r+0x1c>)
 800860c:	2300      	movs	r3, #0
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	f7f8 fe3c 	bl	8001290 <_sbrk>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d102      	bne.n	8008622 <_sbrk_r+0x1a>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b103      	cbz	r3, 8008622 <_sbrk_r+0x1a>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	20000704 	.word	0x20000704

08008628 <__swbuf_r>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	460e      	mov	r6, r1
 800862c:	4614      	mov	r4, r2
 800862e:	4605      	mov	r5, r0
 8008630:	b118      	cbz	r0, 800863a <__swbuf_r+0x12>
 8008632:	6983      	ldr	r3, [r0, #24]
 8008634:	b90b      	cbnz	r3, 800863a <__swbuf_r+0x12>
 8008636:	f000 f9d9 	bl	80089ec <__sinit>
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <__swbuf_r+0x98>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d12b      	bne.n	8008698 <__swbuf_r+0x70>
 8008640:	686c      	ldr	r4, [r5, #4]
 8008642:	69a3      	ldr	r3, [r4, #24]
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	071a      	lsls	r2, r3, #28
 800864a:	d52f      	bpl.n	80086ac <__swbuf_r+0x84>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	b36b      	cbz	r3, 80086ac <__swbuf_r+0x84>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	1ac0      	subs	r0, r0, r3
 8008656:	6963      	ldr	r3, [r4, #20]
 8008658:	b2f6      	uxtb	r6, r6
 800865a:	4283      	cmp	r3, r0
 800865c:	4637      	mov	r7, r6
 800865e:	dc04      	bgt.n	800866a <__swbuf_r+0x42>
 8008660:	4621      	mov	r1, r4
 8008662:	4628      	mov	r0, r5
 8008664:	f000 f92e 	bl	80088c4 <_fflush_r>
 8008668:	bb30      	cbnz	r0, 80086b8 <__swbuf_r+0x90>
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	60a3      	str	r3, [r4, #8]
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	701e      	strb	r6, [r3, #0]
 8008678:	6963      	ldr	r3, [r4, #20]
 800867a:	3001      	adds	r0, #1
 800867c:	4283      	cmp	r3, r0
 800867e:	d004      	beq.n	800868a <__swbuf_r+0x62>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	07db      	lsls	r3, r3, #31
 8008684:	d506      	bpl.n	8008694 <__swbuf_r+0x6c>
 8008686:	2e0a      	cmp	r6, #10
 8008688:	d104      	bne.n	8008694 <__swbuf_r+0x6c>
 800868a:	4621      	mov	r1, r4
 800868c:	4628      	mov	r0, r5
 800868e:	f000 f919 	bl	80088c4 <_fflush_r>
 8008692:	b988      	cbnz	r0, 80086b8 <__swbuf_r+0x90>
 8008694:	4638      	mov	r0, r7
 8008696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008698:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <__swbuf_r+0x9c>)
 800869a:	429c      	cmp	r4, r3
 800869c:	d101      	bne.n	80086a2 <__swbuf_r+0x7a>
 800869e:	68ac      	ldr	r4, [r5, #8]
 80086a0:	e7cf      	b.n	8008642 <__swbuf_r+0x1a>
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <__swbuf_r+0xa0>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	bf08      	it	eq
 80086a8:	68ec      	ldreq	r4, [r5, #12]
 80086aa:	e7ca      	b.n	8008642 <__swbuf_r+0x1a>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f80c 	bl	80086cc <__swsetup_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d0cb      	beq.n	8008650 <__swbuf_r+0x28>
 80086b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086bc:	e7ea      	b.n	8008694 <__swbuf_r+0x6c>
 80086be:	bf00      	nop
 80086c0:	08009140 	.word	0x08009140
 80086c4:	08009160 	.word	0x08009160
 80086c8:	08009120 	.word	0x08009120

080086cc <__swsetup_r>:
 80086cc:	4b32      	ldr	r3, [pc, #200]	; (8008798 <__swsetup_r+0xcc>)
 80086ce:	b570      	push	{r4, r5, r6, lr}
 80086d0:	681d      	ldr	r5, [r3, #0]
 80086d2:	4606      	mov	r6, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	b125      	cbz	r5, 80086e2 <__swsetup_r+0x16>
 80086d8:	69ab      	ldr	r3, [r5, #24]
 80086da:	b913      	cbnz	r3, 80086e2 <__swsetup_r+0x16>
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 f985 	bl	80089ec <__sinit>
 80086e2:	4b2e      	ldr	r3, [pc, #184]	; (800879c <__swsetup_r+0xd0>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	d10f      	bne.n	8008708 <__swsetup_r+0x3c>
 80086e8:	686c      	ldr	r4, [r5, #4]
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f0:	0719      	lsls	r1, r3, #28
 80086f2:	d42c      	bmi.n	800874e <__swsetup_r+0x82>
 80086f4:	06dd      	lsls	r5, r3, #27
 80086f6:	d411      	bmi.n	800871c <__swsetup_r+0x50>
 80086f8:	2309      	movs	r3, #9
 80086fa:	6033      	str	r3, [r6, #0]
 80086fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008706:	e03e      	b.n	8008786 <__swsetup_r+0xba>
 8008708:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <__swsetup_r+0xd4>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d101      	bne.n	8008712 <__swsetup_r+0x46>
 800870e:	68ac      	ldr	r4, [r5, #8]
 8008710:	e7eb      	b.n	80086ea <__swsetup_r+0x1e>
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <__swsetup_r+0xd8>)
 8008714:	429c      	cmp	r4, r3
 8008716:	bf08      	it	eq
 8008718:	68ec      	ldreq	r4, [r5, #12]
 800871a:	e7e6      	b.n	80086ea <__swsetup_r+0x1e>
 800871c:	0758      	lsls	r0, r3, #29
 800871e:	d512      	bpl.n	8008746 <__swsetup_r+0x7a>
 8008720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008722:	b141      	cbz	r1, 8008736 <__swsetup_r+0x6a>
 8008724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008728:	4299      	cmp	r1, r3
 800872a:	d002      	beq.n	8008732 <__swsetup_r+0x66>
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff fa77 	bl	8007c20 <_free_r>
 8008732:	2300      	movs	r3, #0
 8008734:	6363      	str	r3, [r4, #52]	; 0x34
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	2300      	movs	r3, #0
 8008740:	6063      	str	r3, [r4, #4]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f043 0308 	orr.w	r3, r3, #8
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	b94b      	cbnz	r3, 8008766 <__swsetup_r+0x9a>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875c:	d003      	beq.n	8008766 <__swsetup_r+0x9a>
 800875e:	4621      	mov	r1, r4
 8008760:	4630      	mov	r0, r6
 8008762:	f000 fa07 	bl	8008b74 <__smakebuf_r>
 8008766:	89a0      	ldrh	r0, [r4, #12]
 8008768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800876c:	f010 0301 	ands.w	r3, r0, #1
 8008770:	d00a      	beq.n	8008788 <__swsetup_r+0xbc>
 8008772:	2300      	movs	r3, #0
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	6963      	ldr	r3, [r4, #20]
 8008778:	425b      	negs	r3, r3
 800877a:	61a3      	str	r3, [r4, #24]
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	b943      	cbnz	r3, 8008792 <__swsetup_r+0xc6>
 8008780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008784:	d1ba      	bne.n	80086fc <__swsetup_r+0x30>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	0781      	lsls	r1, r0, #30
 800878a:	bf58      	it	pl
 800878c:	6963      	ldrpl	r3, [r4, #20]
 800878e:	60a3      	str	r3, [r4, #8]
 8008790:	e7f4      	b.n	800877c <__swsetup_r+0xb0>
 8008792:	2000      	movs	r0, #0
 8008794:	e7f7      	b.n	8008786 <__swsetup_r+0xba>
 8008796:	bf00      	nop
 8008798:	20000020 	.word	0x20000020
 800879c:	08009140 	.word	0x08009140
 80087a0:	08009160 	.word	0x08009160
 80087a4:	08009120 	.word	0x08009120

080087a8 <abort>:
 80087a8:	b508      	push	{r3, lr}
 80087aa:	2006      	movs	r0, #6
 80087ac:	f000 fa96 	bl	8008cdc <raise>
 80087b0:	2001      	movs	r0, #1
 80087b2:	f7f8 fcf5 	bl	80011a0 <_exit>
	...

080087b8 <__sflush_r>:
 80087b8:	898a      	ldrh	r2, [r1, #12]
 80087ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087be:	4605      	mov	r5, r0
 80087c0:	0710      	lsls	r0, r2, #28
 80087c2:	460c      	mov	r4, r1
 80087c4:	d458      	bmi.n	8008878 <__sflush_r+0xc0>
 80087c6:	684b      	ldr	r3, [r1, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dc05      	bgt.n	80087d8 <__sflush_r+0x20>
 80087cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dc02      	bgt.n	80087d8 <__sflush_r+0x20>
 80087d2:	2000      	movs	r0, #0
 80087d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087da:	2e00      	cmp	r6, #0
 80087dc:	d0f9      	beq.n	80087d2 <__sflush_r+0x1a>
 80087de:	2300      	movs	r3, #0
 80087e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087e4:	682f      	ldr	r7, [r5, #0]
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	d032      	beq.n	8008850 <__sflush_r+0x98>
 80087ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	075a      	lsls	r2, r3, #29
 80087f0:	d505      	bpl.n	80087fe <__sflush_r+0x46>
 80087f2:	6863      	ldr	r3, [r4, #4]
 80087f4:	1ac0      	subs	r0, r0, r3
 80087f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f8:	b10b      	cbz	r3, 80087fe <__sflush_r+0x46>
 80087fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087fc:	1ac0      	subs	r0, r0, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	4602      	mov	r2, r0
 8008802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008804:	6a21      	ldr	r1, [r4, #32]
 8008806:	4628      	mov	r0, r5
 8008808:	47b0      	blx	r6
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	d106      	bne.n	800881e <__sflush_r+0x66>
 8008810:	6829      	ldr	r1, [r5, #0]
 8008812:	291d      	cmp	r1, #29
 8008814:	d82c      	bhi.n	8008870 <__sflush_r+0xb8>
 8008816:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <__sflush_r+0x108>)
 8008818:	40ca      	lsrs	r2, r1
 800881a:	07d6      	lsls	r6, r2, #31
 800881c:	d528      	bpl.n	8008870 <__sflush_r+0xb8>
 800881e:	2200      	movs	r2, #0
 8008820:	6062      	str	r2, [r4, #4]
 8008822:	04d9      	lsls	r1, r3, #19
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	6022      	str	r2, [r4, #0]
 8008828:	d504      	bpl.n	8008834 <__sflush_r+0x7c>
 800882a:	1c42      	adds	r2, r0, #1
 800882c:	d101      	bne.n	8008832 <__sflush_r+0x7a>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b903      	cbnz	r3, 8008834 <__sflush_r+0x7c>
 8008832:	6560      	str	r0, [r4, #84]	; 0x54
 8008834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008836:	602f      	str	r7, [r5, #0]
 8008838:	2900      	cmp	r1, #0
 800883a:	d0ca      	beq.n	80087d2 <__sflush_r+0x1a>
 800883c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__sflush_r+0x92>
 8008844:	4628      	mov	r0, r5
 8008846:	f7ff f9eb 	bl	8007c20 <_free_r>
 800884a:	2000      	movs	r0, #0
 800884c:	6360      	str	r0, [r4, #52]	; 0x34
 800884e:	e7c1      	b.n	80087d4 <__sflush_r+0x1c>
 8008850:	6a21      	ldr	r1, [r4, #32]
 8008852:	2301      	movs	r3, #1
 8008854:	4628      	mov	r0, r5
 8008856:	47b0      	blx	r6
 8008858:	1c41      	adds	r1, r0, #1
 800885a:	d1c7      	bne.n	80087ec <__sflush_r+0x34>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0c4      	beq.n	80087ec <__sflush_r+0x34>
 8008862:	2b1d      	cmp	r3, #29
 8008864:	d001      	beq.n	800886a <__sflush_r+0xb2>
 8008866:	2b16      	cmp	r3, #22
 8008868:	d101      	bne.n	800886e <__sflush_r+0xb6>
 800886a:	602f      	str	r7, [r5, #0]
 800886c:	e7b1      	b.n	80087d2 <__sflush_r+0x1a>
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	e7ad      	b.n	80087d4 <__sflush_r+0x1c>
 8008878:	690f      	ldr	r7, [r1, #16]
 800887a:	2f00      	cmp	r7, #0
 800887c:	d0a9      	beq.n	80087d2 <__sflush_r+0x1a>
 800887e:	0793      	lsls	r3, r2, #30
 8008880:	680e      	ldr	r6, [r1, #0]
 8008882:	bf08      	it	eq
 8008884:	694b      	ldreq	r3, [r1, #20]
 8008886:	600f      	str	r7, [r1, #0]
 8008888:	bf18      	it	ne
 800888a:	2300      	movne	r3, #0
 800888c:	eba6 0807 	sub.w	r8, r6, r7
 8008890:	608b      	str	r3, [r1, #8]
 8008892:	f1b8 0f00 	cmp.w	r8, #0
 8008896:	dd9c      	ble.n	80087d2 <__sflush_r+0x1a>
 8008898:	6a21      	ldr	r1, [r4, #32]
 800889a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800889c:	4643      	mov	r3, r8
 800889e:	463a      	mov	r2, r7
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b0      	blx	r6
 80088a4:	2800      	cmp	r0, #0
 80088a6:	dc06      	bgt.n	80088b6 <__sflush_r+0xfe>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b4:	e78e      	b.n	80087d4 <__sflush_r+0x1c>
 80088b6:	4407      	add	r7, r0
 80088b8:	eba8 0800 	sub.w	r8, r8, r0
 80088bc:	e7e9      	b.n	8008892 <__sflush_r+0xda>
 80088be:	bf00      	nop
 80088c0:	20400001 	.word	0x20400001

080088c4 <_fflush_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	690b      	ldr	r3, [r1, #16]
 80088c8:	4605      	mov	r5, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	b913      	cbnz	r3, 80088d4 <_fflush_r+0x10>
 80088ce:	2500      	movs	r5, #0
 80088d0:	4628      	mov	r0, r5
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	b118      	cbz	r0, 80088de <_fflush_r+0x1a>
 80088d6:	6983      	ldr	r3, [r0, #24]
 80088d8:	b90b      	cbnz	r3, 80088de <_fflush_r+0x1a>
 80088da:	f000 f887 	bl	80089ec <__sinit>
 80088de:	4b14      	ldr	r3, [pc, #80]	; (8008930 <_fflush_r+0x6c>)
 80088e0:	429c      	cmp	r4, r3
 80088e2:	d11b      	bne.n	800891c <_fflush_r+0x58>
 80088e4:	686c      	ldr	r4, [r5, #4]
 80088e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0ef      	beq.n	80088ce <_fflush_r+0xa>
 80088ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f0:	07d0      	lsls	r0, r2, #31
 80088f2:	d404      	bmi.n	80088fe <_fflush_r+0x3a>
 80088f4:	0599      	lsls	r1, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_fflush_r+0x3a>
 80088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fa:	f000 f915 	bl	8008b28 <__retarget_lock_acquire_recursive>
 80088fe:	4628      	mov	r0, r5
 8008900:	4621      	mov	r1, r4
 8008902:	f7ff ff59 	bl	80087b8 <__sflush_r>
 8008906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008908:	07da      	lsls	r2, r3, #31
 800890a:	4605      	mov	r5, r0
 800890c:	d4e0      	bmi.n	80088d0 <_fflush_r+0xc>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	059b      	lsls	r3, r3, #22
 8008912:	d4dd      	bmi.n	80088d0 <_fflush_r+0xc>
 8008914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008916:	f000 f908 	bl	8008b2a <__retarget_lock_release_recursive>
 800891a:	e7d9      	b.n	80088d0 <_fflush_r+0xc>
 800891c:	4b05      	ldr	r3, [pc, #20]	; (8008934 <_fflush_r+0x70>)
 800891e:	429c      	cmp	r4, r3
 8008920:	d101      	bne.n	8008926 <_fflush_r+0x62>
 8008922:	68ac      	ldr	r4, [r5, #8]
 8008924:	e7df      	b.n	80088e6 <_fflush_r+0x22>
 8008926:	4b04      	ldr	r3, [pc, #16]	; (8008938 <_fflush_r+0x74>)
 8008928:	429c      	cmp	r4, r3
 800892a:	bf08      	it	eq
 800892c:	68ec      	ldreq	r4, [r5, #12]
 800892e:	e7da      	b.n	80088e6 <_fflush_r+0x22>
 8008930:	08009140 	.word	0x08009140
 8008934:	08009160 	.word	0x08009160
 8008938:	08009120 	.word	0x08009120

0800893c <std>:
 800893c:	2300      	movs	r3, #0
 800893e:	b510      	push	{r4, lr}
 8008940:	4604      	mov	r4, r0
 8008942:	e9c0 3300 	strd	r3, r3, [r0]
 8008946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800894a:	6083      	str	r3, [r0, #8]
 800894c:	8181      	strh	r1, [r0, #12]
 800894e:	6643      	str	r3, [r0, #100]	; 0x64
 8008950:	81c2      	strh	r2, [r0, #14]
 8008952:	6183      	str	r3, [r0, #24]
 8008954:	4619      	mov	r1, r3
 8008956:	2208      	movs	r2, #8
 8008958:	305c      	adds	r0, #92	; 0x5c
 800895a:	f7fe ffd5 	bl	8007908 <memset>
 800895e:	4b05      	ldr	r3, [pc, #20]	; (8008974 <std+0x38>)
 8008960:	6263      	str	r3, [r4, #36]	; 0x24
 8008962:	4b05      	ldr	r3, [pc, #20]	; (8008978 <std+0x3c>)
 8008964:	62a3      	str	r3, [r4, #40]	; 0x28
 8008966:	4b05      	ldr	r3, [pc, #20]	; (800897c <std+0x40>)
 8008968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800896a:	4b05      	ldr	r3, [pc, #20]	; (8008980 <std+0x44>)
 800896c:	6224      	str	r4, [r4, #32]
 800896e:	6323      	str	r3, [r4, #48]	; 0x30
 8008970:	bd10      	pop	{r4, pc}
 8008972:	bf00      	nop
 8008974:	08008d15 	.word	0x08008d15
 8008978:	08008d37 	.word	0x08008d37
 800897c:	08008d6f 	.word	0x08008d6f
 8008980:	08008d93 	.word	0x08008d93

08008984 <_cleanup_r>:
 8008984:	4901      	ldr	r1, [pc, #4]	; (800898c <_cleanup_r+0x8>)
 8008986:	f000 b8af 	b.w	8008ae8 <_fwalk_reent>
 800898a:	bf00      	nop
 800898c:	080088c5 	.word	0x080088c5

08008990 <__sfmoreglue>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	1e4a      	subs	r2, r1, #1
 8008994:	2568      	movs	r5, #104	; 0x68
 8008996:	4355      	muls	r5, r2
 8008998:	460e      	mov	r6, r1
 800899a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800899e:	f7ff f98f 	bl	8007cc0 <_malloc_r>
 80089a2:	4604      	mov	r4, r0
 80089a4:	b140      	cbz	r0, 80089b8 <__sfmoreglue+0x28>
 80089a6:	2100      	movs	r1, #0
 80089a8:	e9c0 1600 	strd	r1, r6, [r0]
 80089ac:	300c      	adds	r0, #12
 80089ae:	60a0      	str	r0, [r4, #8]
 80089b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089b4:	f7fe ffa8 	bl	8007908 <memset>
 80089b8:	4620      	mov	r0, r4
 80089ba:	bd70      	pop	{r4, r5, r6, pc}

080089bc <__sfp_lock_acquire>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__sfp_lock_acquire+0x8>)
 80089be:	f000 b8b3 	b.w	8008b28 <__retarget_lock_acquire_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000700 	.word	0x20000700

080089c8 <__sfp_lock_release>:
 80089c8:	4801      	ldr	r0, [pc, #4]	; (80089d0 <__sfp_lock_release+0x8>)
 80089ca:	f000 b8ae 	b.w	8008b2a <__retarget_lock_release_recursive>
 80089ce:	bf00      	nop
 80089d0:	20000700 	.word	0x20000700

080089d4 <__sinit_lock_acquire>:
 80089d4:	4801      	ldr	r0, [pc, #4]	; (80089dc <__sinit_lock_acquire+0x8>)
 80089d6:	f000 b8a7 	b.w	8008b28 <__retarget_lock_acquire_recursive>
 80089da:	bf00      	nop
 80089dc:	200006fb 	.word	0x200006fb

080089e0 <__sinit_lock_release>:
 80089e0:	4801      	ldr	r0, [pc, #4]	; (80089e8 <__sinit_lock_release+0x8>)
 80089e2:	f000 b8a2 	b.w	8008b2a <__retarget_lock_release_recursive>
 80089e6:	bf00      	nop
 80089e8:	200006fb 	.word	0x200006fb

080089ec <__sinit>:
 80089ec:	b510      	push	{r4, lr}
 80089ee:	4604      	mov	r4, r0
 80089f0:	f7ff fff0 	bl	80089d4 <__sinit_lock_acquire>
 80089f4:	69a3      	ldr	r3, [r4, #24]
 80089f6:	b11b      	cbz	r3, 8008a00 <__sinit+0x14>
 80089f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089fc:	f7ff bff0 	b.w	80089e0 <__sinit_lock_release>
 8008a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a04:	6523      	str	r3, [r4, #80]	; 0x50
 8008a06:	4b13      	ldr	r3, [pc, #76]	; (8008a54 <__sinit+0x68>)
 8008a08:	4a13      	ldr	r2, [pc, #76]	; (8008a58 <__sinit+0x6c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	bf04      	itt	eq
 8008a12:	2301      	moveq	r3, #1
 8008a14:	61a3      	streq	r3, [r4, #24]
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 f820 	bl	8008a5c <__sfp>
 8008a1c:	6060      	str	r0, [r4, #4]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 f81c 	bl	8008a5c <__sfp>
 8008a24:	60a0      	str	r0, [r4, #8]
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 f818 	bl	8008a5c <__sfp>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	60e0      	str	r0, [r4, #12]
 8008a30:	2104      	movs	r1, #4
 8008a32:	6860      	ldr	r0, [r4, #4]
 8008a34:	f7ff ff82 	bl	800893c <std>
 8008a38:	68a0      	ldr	r0, [r4, #8]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	2109      	movs	r1, #9
 8008a3e:	f7ff ff7d 	bl	800893c <std>
 8008a42:	68e0      	ldr	r0, [r4, #12]
 8008a44:	2202      	movs	r2, #2
 8008a46:	2112      	movs	r1, #18
 8008a48:	f7ff ff78 	bl	800893c <std>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	61a3      	str	r3, [r4, #24]
 8008a50:	e7d2      	b.n	80089f8 <__sinit+0xc>
 8008a52:	bf00      	nop
 8008a54:	08008f0c 	.word	0x08008f0c
 8008a58:	08008985 	.word	0x08008985

08008a5c <__sfp>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	4607      	mov	r7, r0
 8008a60:	f7ff ffac 	bl	80089bc <__sfp_lock_acquire>
 8008a64:	4b1e      	ldr	r3, [pc, #120]	; (8008ae0 <__sfp+0x84>)
 8008a66:	681e      	ldr	r6, [r3, #0]
 8008a68:	69b3      	ldr	r3, [r6, #24]
 8008a6a:	b913      	cbnz	r3, 8008a72 <__sfp+0x16>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff ffbd 	bl	80089ec <__sinit>
 8008a72:	3648      	adds	r6, #72	; 0x48
 8008a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	d503      	bpl.n	8008a84 <__sfp+0x28>
 8008a7c:	6833      	ldr	r3, [r6, #0]
 8008a7e:	b30b      	cbz	r3, 8008ac4 <__sfp+0x68>
 8008a80:	6836      	ldr	r6, [r6, #0]
 8008a82:	e7f7      	b.n	8008a74 <__sfp+0x18>
 8008a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a88:	b9d5      	cbnz	r5, 8008ac0 <__sfp+0x64>
 8008a8a:	4b16      	ldr	r3, [pc, #88]	; (8008ae4 <__sfp+0x88>)
 8008a8c:	60e3      	str	r3, [r4, #12]
 8008a8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a92:	6665      	str	r5, [r4, #100]	; 0x64
 8008a94:	f000 f847 	bl	8008b26 <__retarget_lock_init_recursive>
 8008a98:	f7ff ff96 	bl	80089c8 <__sfp_lock_release>
 8008a9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008aa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008aa4:	6025      	str	r5, [r4, #0]
 8008aa6:	61a5      	str	r5, [r4, #24]
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ab0:	f7fe ff2a 	bl	8007908 <memset>
 8008ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008abc:	4620      	mov	r0, r4
 8008abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac0:	3468      	adds	r4, #104	; 0x68
 8008ac2:	e7d9      	b.n	8008a78 <__sfp+0x1c>
 8008ac4:	2104      	movs	r1, #4
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f7ff ff62 	bl	8008990 <__sfmoreglue>
 8008acc:	4604      	mov	r4, r0
 8008ace:	6030      	str	r0, [r6, #0]
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d1d5      	bne.n	8008a80 <__sfp+0x24>
 8008ad4:	f7ff ff78 	bl	80089c8 <__sfp_lock_release>
 8008ad8:	230c      	movs	r3, #12
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	e7ee      	b.n	8008abc <__sfp+0x60>
 8008ade:	bf00      	nop
 8008ae0:	08008f0c 	.word	0x08008f0c
 8008ae4:	ffff0001 	.word	0xffff0001

08008ae8 <_fwalk_reent>:
 8008ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aec:	4606      	mov	r6, r0
 8008aee:	4688      	mov	r8, r1
 8008af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008af4:	2700      	movs	r7, #0
 8008af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008afa:	f1b9 0901 	subs.w	r9, r9, #1
 8008afe:	d505      	bpl.n	8008b0c <_fwalk_reent+0x24>
 8008b00:	6824      	ldr	r4, [r4, #0]
 8008b02:	2c00      	cmp	r4, #0
 8008b04:	d1f7      	bne.n	8008af6 <_fwalk_reent+0xe>
 8008b06:	4638      	mov	r0, r7
 8008b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b0c:	89ab      	ldrh	r3, [r5, #12]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d907      	bls.n	8008b22 <_fwalk_reent+0x3a>
 8008b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b16:	3301      	adds	r3, #1
 8008b18:	d003      	beq.n	8008b22 <_fwalk_reent+0x3a>
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	47c0      	blx	r8
 8008b20:	4307      	orrs	r7, r0
 8008b22:	3568      	adds	r5, #104	; 0x68
 8008b24:	e7e9      	b.n	8008afa <_fwalk_reent+0x12>

08008b26 <__retarget_lock_init_recursive>:
 8008b26:	4770      	bx	lr

08008b28 <__retarget_lock_acquire_recursive>:
 8008b28:	4770      	bx	lr

08008b2a <__retarget_lock_release_recursive>:
 8008b2a:	4770      	bx	lr

08008b2c <__swhatbuf_r>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	460e      	mov	r6, r1
 8008b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b34:	2900      	cmp	r1, #0
 8008b36:	b096      	sub	sp, #88	; 0x58
 8008b38:	4614      	mov	r4, r2
 8008b3a:	461d      	mov	r5, r3
 8008b3c:	da07      	bge.n	8008b4e <__swhatbuf_r+0x22>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	89b3      	ldrh	r3, [r6, #12]
 8008b44:	061a      	lsls	r2, r3, #24
 8008b46:	d410      	bmi.n	8008b6a <__swhatbuf_r+0x3e>
 8008b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b4c:	e00e      	b.n	8008b6c <__swhatbuf_r+0x40>
 8008b4e:	466a      	mov	r2, sp
 8008b50:	f000 f946 	bl	8008de0 <_fstat_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	dbf2      	blt.n	8008b3e <__swhatbuf_r+0x12>
 8008b58:	9a01      	ldr	r2, [sp, #4]
 8008b5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b62:	425a      	negs	r2, r3
 8008b64:	415a      	adcs	r2, r3
 8008b66:	602a      	str	r2, [r5, #0]
 8008b68:	e7ee      	b.n	8008b48 <__swhatbuf_r+0x1c>
 8008b6a:	2340      	movs	r3, #64	; 0x40
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	b016      	add	sp, #88	; 0x58
 8008b72:	bd70      	pop	{r4, r5, r6, pc}

08008b74 <__smakebuf_r>:
 8008b74:	898b      	ldrh	r3, [r1, #12]
 8008b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b78:	079d      	lsls	r5, r3, #30
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	d507      	bpl.n	8008b90 <__smakebuf_r+0x1c>
 8008b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	6123      	str	r3, [r4, #16]
 8008b88:	2301      	movs	r3, #1
 8008b8a:	6163      	str	r3, [r4, #20]
 8008b8c:	b002      	add	sp, #8
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	ab01      	add	r3, sp, #4
 8008b92:	466a      	mov	r2, sp
 8008b94:	f7ff ffca 	bl	8008b2c <__swhatbuf_r>
 8008b98:	9900      	ldr	r1, [sp, #0]
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff f88f 	bl	8007cc0 <_malloc_r>
 8008ba2:	b948      	cbnz	r0, 8008bb8 <__smakebuf_r+0x44>
 8008ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba8:	059a      	lsls	r2, r3, #22
 8008baa:	d4ef      	bmi.n	8008b8c <__smakebuf_r+0x18>
 8008bac:	f023 0303 	bic.w	r3, r3, #3
 8008bb0:	f043 0302 	orr.w	r3, r3, #2
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	e7e3      	b.n	8008b80 <__smakebuf_r+0xc>
 8008bb8:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <__smakebuf_r+0x7c>)
 8008bba:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	6020      	str	r0, [r4, #0]
 8008bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	9b00      	ldr	r3, [sp, #0]
 8008bc8:	6163      	str	r3, [r4, #20]
 8008bca:	9b01      	ldr	r3, [sp, #4]
 8008bcc:	6120      	str	r0, [r4, #16]
 8008bce:	b15b      	cbz	r3, 8008be8 <__smakebuf_r+0x74>
 8008bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f000 f915 	bl	8008e04 <_isatty_r>
 8008bda:	b128      	cbz	r0, 8008be8 <__smakebuf_r+0x74>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	f023 0303 	bic.w	r3, r3, #3
 8008be2:	f043 0301 	orr.w	r3, r3, #1
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	89a0      	ldrh	r0, [r4, #12]
 8008bea:	4305      	orrs	r5, r0
 8008bec:	81a5      	strh	r5, [r4, #12]
 8008bee:	e7cd      	b.n	8008b8c <__smakebuf_r+0x18>
 8008bf0:	08008985 	.word	0x08008985

08008bf4 <memmove>:
 8008bf4:	4288      	cmp	r0, r1
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	eb01 0402 	add.w	r4, r1, r2
 8008bfc:	d902      	bls.n	8008c04 <memmove+0x10>
 8008bfe:	4284      	cmp	r4, r0
 8008c00:	4623      	mov	r3, r4
 8008c02:	d807      	bhi.n	8008c14 <memmove+0x20>
 8008c04:	1e43      	subs	r3, r0, #1
 8008c06:	42a1      	cmp	r1, r4
 8008c08:	d008      	beq.n	8008c1c <memmove+0x28>
 8008c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c12:	e7f8      	b.n	8008c06 <memmove+0x12>
 8008c14:	4402      	add	r2, r0
 8008c16:	4601      	mov	r1, r0
 8008c18:	428a      	cmp	r2, r1
 8008c1a:	d100      	bne.n	8008c1e <memmove+0x2a>
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c26:	e7f7      	b.n	8008c18 <memmove+0x24>

08008c28 <__malloc_lock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_lock+0x8>)
 8008c2a:	f7ff bf7d 	b.w	8008b28 <__retarget_lock_acquire_recursive>
 8008c2e:	bf00      	nop
 8008c30:	200006fc 	.word	0x200006fc

08008c34 <__malloc_unlock>:
 8008c34:	4801      	ldr	r0, [pc, #4]	; (8008c3c <__malloc_unlock+0x8>)
 8008c36:	f7ff bf78 	b.w	8008b2a <__retarget_lock_release_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	200006fc 	.word	0x200006fc

08008c40 <_realloc_r>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	4607      	mov	r7, r0
 8008c44:	4614      	mov	r4, r2
 8008c46:	460e      	mov	r6, r1
 8008c48:	b921      	cbnz	r1, 8008c54 <_realloc_r+0x14>
 8008c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c4e:	4611      	mov	r1, r2
 8008c50:	f7ff b836 	b.w	8007cc0 <_malloc_r>
 8008c54:	b922      	cbnz	r2, 8008c60 <_realloc_r+0x20>
 8008c56:	f7fe ffe3 	bl	8007c20 <_free_r>
 8008c5a:	4625      	mov	r5, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c60:	f000 f8f2 	bl	8008e48 <_malloc_usable_size_r>
 8008c64:	42a0      	cmp	r0, r4
 8008c66:	d20f      	bcs.n	8008c88 <_realloc_r+0x48>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	f7ff f828 	bl	8007cc0 <_malloc_r>
 8008c70:	4605      	mov	r5, r0
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d0f2      	beq.n	8008c5c <_realloc_r+0x1c>
 8008c76:	4631      	mov	r1, r6
 8008c78:	4622      	mov	r2, r4
 8008c7a:	f7fe fe37 	bl	80078ec <memcpy>
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7fe ffcd 	bl	8007c20 <_free_r>
 8008c86:	e7e9      	b.n	8008c5c <_realloc_r+0x1c>
 8008c88:	4635      	mov	r5, r6
 8008c8a:	e7e7      	b.n	8008c5c <_realloc_r+0x1c>

08008c8c <_raise_r>:
 8008c8c:	291f      	cmp	r1, #31
 8008c8e:	b538      	push	{r3, r4, r5, lr}
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	d904      	bls.n	8008ca0 <_raise_r+0x14>
 8008c96:	2316      	movs	r3, #22
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ca2:	b112      	cbz	r2, 8008caa <_raise_r+0x1e>
 8008ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ca8:	b94b      	cbnz	r3, 8008cbe <_raise_r+0x32>
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 f830 	bl	8008d10 <_getpid_r>
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cba:	f000 b817 	b.w	8008cec <_kill_r>
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d00a      	beq.n	8008cd8 <_raise_r+0x4c>
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	d103      	bne.n	8008cce <_raise_r+0x42>
 8008cc6:	2316      	movs	r3, #22
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	2001      	movs	r0, #1
 8008ccc:	e7e7      	b.n	8008c9e <_raise_r+0x12>
 8008cce:	2400      	movs	r4, #0
 8008cd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	4798      	blx	r3
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e7e0      	b.n	8008c9e <_raise_r+0x12>

08008cdc <raise>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <raise+0xc>)
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f7ff bfd3 	b.w	8008c8c <_raise_r>
 8008ce6:	bf00      	nop
 8008ce8:	20000020 	.word	0x20000020

08008cec <_kill_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d07      	ldr	r5, [pc, #28]	; (8008d0c <_kill_r+0x20>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f7f8 fa41 	bl	8001180 <_kill>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	d102      	bne.n	8008d08 <_kill_r+0x1c>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	b103      	cbz	r3, 8008d08 <_kill_r+0x1c>
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000704 	.word	0x20000704

08008d10 <_getpid_r>:
 8008d10:	f7f8 ba2e 	b.w	8001170 <_getpid>

08008d14 <__sread>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	460c      	mov	r4, r1
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	f000 f89c 	bl	8008e58 <_read_r>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	bfab      	itete	ge
 8008d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d26:	89a3      	ldrhlt	r3, [r4, #12]
 8008d28:	181b      	addge	r3, r3, r0
 8008d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d2e:	bfac      	ite	ge
 8008d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d32:	81a3      	strhlt	r3, [r4, #12]
 8008d34:	bd10      	pop	{r4, pc}

08008d36 <__swrite>:
 8008d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	461f      	mov	r7, r3
 8008d3c:	898b      	ldrh	r3, [r1, #12]
 8008d3e:	05db      	lsls	r3, r3, #23
 8008d40:	4605      	mov	r5, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	4616      	mov	r6, r2
 8008d46:	d505      	bpl.n	8008d54 <__swrite+0x1e>
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f000 f868 	bl	8008e24 <_lseek_r>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	4632      	mov	r2, r6
 8008d62:	463b      	mov	r3, r7
 8008d64:	4628      	mov	r0, r5
 8008d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	f000 b817 	b.w	8008d9c <_write_r>

08008d6e <__sseek>:
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 f855 	bl	8008e24 <_lseek_r>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	bf15      	itete	ne
 8008d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d8a:	81a3      	strheq	r3, [r4, #12]
 8008d8c:	bf18      	it	ne
 8008d8e:	81a3      	strhne	r3, [r4, #12]
 8008d90:	bd10      	pop	{r4, pc}

08008d92 <__sclose>:
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	f000 b813 	b.w	8008dc0 <_close_r>
	...

08008d9c <_write_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d07      	ldr	r5, [pc, #28]	; (8008dbc <_write_r+0x20>)
 8008da0:	4604      	mov	r4, r0
 8008da2:	4608      	mov	r0, r1
 8008da4:	4611      	mov	r1, r2
 8008da6:	2200      	movs	r2, #0
 8008da8:	602a      	str	r2, [r5, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f7f8 fa1f 	bl	80011ee <_write>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_write_r+0x1e>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_write_r+0x1e>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20000704 	.word	0x20000704

08008dc0 <_close_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d06      	ldr	r5, [pc, #24]	; (8008ddc <_close_r+0x1c>)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	f7f8 fa2b 	bl	8001226 <_close>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_close_r+0x1a>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_close_r+0x1a>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20000704 	.word	0x20000704

08008de0 <_fstat_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d07      	ldr	r5, [pc, #28]	; (8008e00 <_fstat_r+0x20>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	4611      	mov	r1, r2
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	f7f8 fa26 	bl	800123e <_fstat>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	d102      	bne.n	8008dfc <_fstat_r+0x1c>
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	b103      	cbz	r3, 8008dfc <_fstat_r+0x1c>
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	bd38      	pop	{r3, r4, r5, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000704 	.word	0x20000704

08008e04 <_isatty_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d06      	ldr	r5, [pc, #24]	; (8008e20 <_isatty_r+0x1c>)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7f8 fa25 	bl	800125e <_isatty>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_isatty_r+0x1a>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_isatty_r+0x1a>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	20000704 	.word	0x20000704

08008e24 <_lseek_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d07      	ldr	r5, [pc, #28]	; (8008e44 <_lseek_r+0x20>)
 8008e28:	4604      	mov	r4, r0
 8008e2a:	4608      	mov	r0, r1
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	2200      	movs	r2, #0
 8008e30:	602a      	str	r2, [r5, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f7f8 fa1e 	bl	8001274 <_lseek>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_lseek_r+0x1e>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_lseek_r+0x1e>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	20000704 	.word	0x20000704

08008e48 <_malloc_usable_size_r>:
 8008e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e4c:	1f18      	subs	r0, r3, #4
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	bfbc      	itt	lt
 8008e52:	580b      	ldrlt	r3, [r1, r0]
 8008e54:	18c0      	addlt	r0, r0, r3
 8008e56:	4770      	bx	lr

08008e58 <_read_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d07      	ldr	r5, [pc, #28]	; (8008e78 <_read_r+0x20>)
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4611      	mov	r1, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	602a      	str	r2, [r5, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f7f8 f9a4 	bl	80011b4 <_read>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	d102      	bne.n	8008e76 <_read_r+0x1e>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	b103      	cbz	r3, 8008e76 <_read_r+0x1e>
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	20000704 	.word	0x20000704

08008e7c <_init>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr

08008e88 <_fini>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	bf00      	nop
 8008e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8e:	bc08      	pop	{r3}
 8008e90:	469e      	mov	lr, r3
 8008e92:	4770      	bx	lr
