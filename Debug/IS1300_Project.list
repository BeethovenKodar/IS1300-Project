
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a94  08004a94  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a9c  08004a9c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000028  08004acc  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08004acc  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cede  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c3  00000000  00000000  0003cf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  00040300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  00041808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bf2  00000000  00000000  00042bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b77  00000000  00000000  000467ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd10b  00000000  00000000  0005f331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c43c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  0015c490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000028 	.word	0x20000028
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a34 	.word	0x08004a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	08004a34 	.word	0x08004a34

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a39      	ldr	r2, [pc, #228]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a33      	ldr	r2, [pc, #204]	; (80005c8 <MX_GPIO_Init+0x100>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b31      	ldr	r3, [pc, #196]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_GPIO_Init+0x100>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <MX_GPIO_Init+0x100>)
 800052c:	f043 0308 	orr.w	r3, r3, #8
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <MX_GPIO_Init+0x100>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_GPIO_Init+0x100>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f000 fe19 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000568:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	4814      	ldr	r0, [pc, #80]	; (80005cc <MX_GPIO_Init+0x104>)
 800057a:	f000 fc61 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800057e:	230c      	movs	r3, #12
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800058e:	2307      	movs	r3, #7
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 fc50 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a0:	2320      	movs	r3, #32
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fc41 	bl	8000e40 <HAL_GPIO_Init>

}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48000800 	.word	0x48000800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fa92 	bl	8000afc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f810 	bl	80005fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f7ff ff74 	bl	80004c8 <MX_GPIO_Init>
  MX_UART5_Init();
 80005e0:	f000 f9a8 	bl	8000934 <MX_UART5_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
	uart_transmit(Buffer, (uint16_t) 22);
 80005e4:	2116      	movs	r1, #22
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <main+0x28>)
 80005e8:	f000 f92c 	bl	8000844 <uart_transmit>
	uart_receive(Buffer, (uint16_t) 22);
 80005ec:	2116      	movs	r1, #22
 80005ee:	4802      	ldr	r0, [pc, #8]	; (80005f8 <main+0x28>)
 80005f0:	f000 f94e 	bl	8000890 <uart_receive>
	uart_transmit(Buffer, (uint16_t) 22);
 80005f4:	e7f6      	b.n	80005e4 <main+0x14>
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fa0a 	bl	8004a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f000 fddd 	bl	80011e0 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 f84a 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800064a:	230a      	movs	r3, #10
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064e:	2307      	movs	r3, #7
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fe14 	bl	800128c <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800066a:	f000 f82b 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2303      	movs	r3, #3
 8000674:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	2104      	movs	r1, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f9e6 	bl	8001a58 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000692:	f000 f817 	bl	80006c4 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3758      	adds	r7, #88	; 0x58
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b2:	f000 fa43 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40012c00 	.word	0x40012c00

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_MspInit+0x4c>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <HAL_MspInit+0x4c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6613      	str	r3, [r2, #96]	; 0x60
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_MspInit+0x4c>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_MspInit+0x4c>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6593      	str	r3, [r2, #88]	; 0x58
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_MspInit+0x4c>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	210f      	movs	r1, #15
 800070a:	f06f 0001 	mvn.w	r0, #1
 800070e:	f000 faed 	bl	8000cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	2019      	movs	r0, #25
 8000736:	f000 fad9 	bl	8000cec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800073a:	2019      	movs	r0, #25
 800073c:	f000 faf2 	bl	8000d24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <HAL_InitTick+0x9c>)
 8000742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <HAL_InitTick+0x9c>)
 8000746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800074a:	6613      	str	r3, [r2, #96]	; 0x60
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <HAL_InitTick+0x9c>)
 800074e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000758:	f107 0210 	add.w	r2, r7, #16
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fb1e 	bl	8001da4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000768:	f001 fb06 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 800076c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <HAL_InitTick+0xa0>)
 8000772:	fba2 2303 	umull	r2, r3, r2, r3
 8000776:	0c9b      	lsrs	r3, r3, #18
 8000778:	3b01      	subs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_InitTick+0xa4>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <HAL_InitTick+0xa8>)
 8000780:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_InitTick+0xa4>)
 8000784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000788:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_InitTick+0xa4>)
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_InitTick+0xa4>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_InitTick+0xa4>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <HAL_InitTick+0xa4>)
 800079e:	f002 f84f 	bl	8002840 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d104      	bne.n	80007b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <HAL_InitTick+0xa4>)
 80007aa:	f002 f8ab 	bl	8002904 <HAL_TIM_Base_Start_IT>
 80007ae:	4603      	mov	r3, r0
 80007b0:	e000      	b.n	80007b4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3730      	adds	r7, #48	; 0x30
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	431bde83 	.word	0x431bde83
 80007c4:	200004d0 	.word	0x200004d0
 80007c8:	40012c00 	.word	0x40012c00

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80007fe:	f002 f8f1 	bl	80029e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200004d0 	.word	0x200004d0

0800080c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <UART5_IRQHandler+0x10>)
 8000812:	f002 fbf9 	bl	8003008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000051c 	.word	0x2000051c

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <uart_transmit>:
  * @brief UART transmission initializer
  * @param buffer: the buffer to use
  * @note Starting the interrupt handler for transmitting.
  * @retval None
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
    if (UartDoneR == SET) {
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <uart_transmit+0x40>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d110      	bne.n	800087a <uart_transmit+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <uart_transmit+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <uart_transmit+0x44>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 8000864:	887b      	ldrh	r3, [r7, #2]
 8000866:	461a      	mov	r2, r3
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <uart_transmit+0x48>)
 800086c:	f002 fb08 	bl	8002e80 <HAL_UART_Transmit_IT>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <uart_transmit+0x36>
	    Error_Uart();
 8000876:	f000 f851 	bl	800091c <Error_Uart>
	}
    }
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000001d 	.word	0x2000001d
 8000888:	2000001c 	.word	0x2000001c
 800088c:	2000051c 	.word	0x2000051c

08000890 <uart_receive>:
  * @brief UART reception initializer
  * @param buffer: the buffer to use
  * @note Starting the interrupt handler for receiving.
  * @retval None
  */
void uart_receive(uint8_t buffer[], uint16_t size) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	807b      	strh	r3, [r7, #2]
    if (UartDoneT == SET) {
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <uart_receive+0x40>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d110      	bne.n	80008c6 <uart_receive+0x36>
	/* uart in reception process */
	UartDoneR = RESET;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <uart_receive+0x44>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
	UartDoneT = RESET;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <uart_receive+0x40>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive_IT(&huart5, (uint8_t*)buffer, size) != HAL_OK) {
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	461a      	mov	r2, r3
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <uart_receive+0x48>)
 80008b8:	f002 fb50 	bl	8002f5c <HAL_UART_Receive_IT>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <uart_receive+0x36>
	    Error_Uart();
 80008c2:	f000 f82b 	bl	800091c <Error_Uart>
	}
    }
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000001c 	.word	0x2000001c
 80008d4:	2000001d 	.word	0x2000001d
 80008d8:	2000051c 	.word	0x2000051c

080008dc <HAL_UART_TxCpltCallback>:
  * @brief UART transfer competed callback
  * @param UartHandle: UART handle
  * @note Reporting that the tranmission over UART is complete.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    UartDoneT = SET;
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_UART_TxCpltCallback+0x1c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	2000001c 	.word	0x2000001c

080008fc <HAL_UART_RxCpltCallback>:
* @brief UART reception completed callback
* @param UartHandle: UART handle
* @note Reporting that the reception over UART is complete.
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    UartDoneR = SET;
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <HAL_UART_RxCpltCallback+0x1c>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2000001d 	.word	0x2000001d

0800091c <Error_Uart>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Uart(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f000 fc32 	bl	8001194 <HAL_GPIO_WritePin>
 8000930:	e7f8      	b.n	8000924 <Error_Uart+0x8>
	...

08000934 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_UART5_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_UART5_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_UART5_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_UART5_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_UART5_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_UART5_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_UART5_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_UART5_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_UART5_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_UART5_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_UART5_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_UART5_Init+0x58>)
 8000978:	f002 fa34 	bl	8002de4 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000982:	f7ff fe9f 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000051c 	.word	0x2000051c
 8000990:	40005000 	.word	0x40005000

08000994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0ac      	sub	sp, #176	; 0xb0
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2288      	movs	r2, #136	; 0x88
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f004 f835 	bl	8004a24 <memset>
  if(uartHandle->Instance==UART5)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a36      	ldr	r2, [pc, #216]	; (8000a98 <HAL_UART_MspInit+0x104>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d164      	bne.n	8000a8e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80009c4:	2310      	movs	r3, #16
 80009c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fa79 	bl	8001ec8 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff fe72 	bl	80006c4 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <HAL_UART_MspInit+0x108>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <HAL_UART_MspInit+0x108>)
 80009e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009ea:	6593      	str	r3, [r2, #88]	; 0x58
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <HAL_UART_MspInit+0x108>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <HAL_UART_MspInit+0x108>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <HAL_UART_MspInit+0x108>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <HAL_UART_MspInit+0x108>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_UART_MspInit+0x108>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <HAL_UART_MspInit+0x108>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_UART_MspInit+0x108>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a42:	2308      	movs	r3, #8
 8000a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0x10c>)
 8000a50:	f000 f9f6 	bl	8000e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a54:	2304      	movs	r3, #4
 8000a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a76:	4619      	mov	r1, r3
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <HAL_UART_MspInit+0x110>)
 8000a7a:	f000 f9e1 	bl	8000e40 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2105      	movs	r1, #5
 8000a82:	2035      	movs	r0, #53	; 0x35
 8000a84:	f000 f932 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000a88:	2035      	movs	r0, #53	; 0x35
 8000a8a:	f000 f94b 	bl	8000d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000a8e:	bf00      	nop
 8000a90:	37b0      	adds	r7, #176	; 0xb0
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40005000 	.word	0x40005000
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	48000c00 	.word	0x48000c00

08000aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aac:	f7ff feb8 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f003 ff81 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ada:	f7ff fd79 	bl	80005d0 <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000aec:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8000af0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000af4:	200005a4 	.word	0x200005a4

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_Init+0x3c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <HAL_Init+0x3c>)
 8000b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b12:	2003      	movs	r0, #3
 8000b14:	f000 f8df 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b18:	200f      	movs	r0, #15
 8000b1a:	f7ff fe01 	bl	8000720 <HAL_InitTick>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	e001      	b.n	8000b2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2a:	f7ff fdd1 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000024 	.word	0x20000024
 8000b60:	200005a0 	.word	0x200005a0

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200005a0 	.word	0x200005a0

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4c 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfe:	f7ff ff61 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f7ff ffb1 	bl	8000c70 <NVIC_EncodePriority>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff80 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff54 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d008      	beq.n	8000d6a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e022      	b.n	8000db0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 020e 	bic.w	r2, r2, #14
 8000d78:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f003 021c 	and.w	r2, r3, #28
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d005      	beq.n	8000de0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e029      	b.n	8000e34 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 020e 	bic.w	r2, r2, #14
 8000dee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e04:	f003 021c 	and.w	r2, r3, #28
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	4798      	blx	r3
    }
  }
  return status;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	e17f      	b.n	8001150 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	2101      	movs	r1, #1
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8171 	beq.w	800114a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d005      	beq.n	8000e80 <HAL_GPIO_Init+0x40>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d130      	bne.n	8000ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	f003 0201 	and.w	r2, r3, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d118      	bne.n	8000f20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80ac 	beq.w	800114a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <HAL_GPIO_Init+0x330>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	4a5e      	ldr	r2, [pc, #376]	; (8001170 <HAL_GPIO_Init+0x330>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffe:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <HAL_GPIO_Init+0x330>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800100a:	4a5a      	ldr	r2, [pc, #360]	; (8001174 <HAL_GPIO_Init+0x334>)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001034:	d025      	beq.n	8001082 <HAL_GPIO_Init+0x242>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x338>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d01f      	beq.n	800107e <HAL_GPIO_Init+0x23e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x33c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x23a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x340>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x236>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x344>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x232>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_GPIO_Init+0x348>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x22e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_GPIO_Init+0x34c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x22a>
 8001066:	2306      	movs	r3, #6
 8001068:	e00c      	b.n	8001084 <HAL_GPIO_Init+0x244>
 800106a:	2307      	movs	r3, #7
 800106c:	e00a      	b.n	8001084 <HAL_GPIO_Init+0x244>
 800106e:	2305      	movs	r3, #5
 8001070:	e008      	b.n	8001084 <HAL_GPIO_Init+0x244>
 8001072:	2304      	movs	r3, #4
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x244>
 8001076:	2303      	movs	r3, #3
 8001078:	e004      	b.n	8001084 <HAL_GPIO_Init+0x244>
 800107a:	2302      	movs	r3, #2
 800107c:	e002      	b.n	8001084 <HAL_GPIO_Init+0x244>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x244>
 8001082:	2300      	movs	r3, #0
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	f002 0203 	and.w	r2, r2, #3
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	4093      	lsls	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001094:	4937      	ldr	r1, [pc, #220]	; (8001174 <HAL_GPIO_Init+0x334>)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	3302      	adds	r3, #2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a2:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <HAL_GPIO_Init+0x350>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c6:	4a32      	ldr	r2, [pc, #200]	; (8001190 <HAL_GPIO_Init+0x350>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_GPIO_Init+0x350>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010f0:	4a27      	ldr	r2, [pc, #156]	; (8001190 <HAL_GPIO_Init+0x350>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_GPIO_Init+0x350>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111a:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_GPIO_Init+0x350>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_GPIO_Init+0x350>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <HAL_GPIO_Init+0x350>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa22 f303 	lsr.w	r3, r2, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	f47f ae78 	bne.w	8000e50 <HAL_GPIO_Init+0x10>
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000
 8001178:	48000400 	.word	0x48000400
 800117c:	48000800 	.word	0x48000800
 8001180:	48000c00 	.word	0x48000c00
 8001184:	48001000 	.word	0x48001000
 8001188:	48001400 	.word	0x48001400
 800118c:	48001800 	.word	0x48001800
 8001190:	40010400 	.word	0x40010400

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_PWREx_GetVoltageRange+0x18>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40007000 	.word	0x40007000

080011e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ee:	d130      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fc:	d038      	beq.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2232      	movs	r2, #50	; 0x32
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001224:	e002      	b.n	800122c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3b01      	subs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001238:	d102      	bne.n	8001240 <HAL_PWREx_ControlVoltageScaling+0x60>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f2      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124c:	d110      	bne.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e00f      	b.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d007      	beq.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001268:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40007000 	.word	0x40007000
 8001284:	20000018 	.word	0x20000018
 8001288:	431bde83 	.word	0x431bde83

0800128c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e3d4      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129e:	4ba1      	ldr	r3, [pc, #644]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a8:	4b9e      	ldr	r3, [pc, #632]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80e4 	beq.w	8001488 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_RCC_OscConfig+0x4a>
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	f040 808b 	bne.w	80013e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	f040 8087 	bne.w	80013e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d6:	4b93      	ldr	r3, [pc, #588]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x62>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e3ac      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	4b8c      	ldr	r3, [pc, #560]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <HAL_RCC_OscConfig+0x7c>
 80012fe:	4b89      	ldr	r3, [pc, #548]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001306:	e005      	b.n	8001314 <HAL_RCC_OscConfig+0x88>
 8001308:	4b86      	ldr	r3, [pc, #536]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800130a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001314:	4293      	cmp	r3, r2
 8001316:	d223      	bcs.n	8001360 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fd73 	bl	8001e08 <RCC_SetFlashLatencyFromMSIRange>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e38d      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132c:	4b7d      	ldr	r3, [pc, #500]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a7c      	ldr	r2, [pc, #496]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b7a      	ldr	r3, [pc, #488]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4977      	ldr	r1, [pc, #476]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	4972      	ldr	r1, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	e025      	b.n	80013ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001360:	4b70      	ldr	r3, [pc, #448]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6f      	ldr	r2, [pc, #444]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b6d      	ldr	r3, [pc, #436]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	496a      	ldr	r1, [pc, #424]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137e:	4b69      	ldr	r3, [pc, #420]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4965      	ldr	r1, [pc, #404]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fd33 	bl	8001e08 <RCC_SetFlashLatencyFromMSIRange>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e34d      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ac:	f000 fc36 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	495a      	ldr	r1, [pc, #360]	; (8001528 <HAL_RCC_OscConfig+0x29c>)
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_RCC_OscConfig+0x2a0>)
 80013ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013cc:	4b58      	ldr	r3, [pc, #352]	; (8001530 <HAL_RCC_OscConfig+0x2a4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f9a5 	bl	8000720 <HAL_InitTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d052      	beq.n	8001486 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	e331      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d032      	beq.n	8001452 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ec:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fbb4 	bl	8000b64 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001400:	f7ff fbb0 	bl	8000b64 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e31a      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	493b      	ldr	r1, [pc, #236]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	4936      	ldr	r1, [pc, #216]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
 8001450:	e01a      	b.n	8001488 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a33      	ldr	r2, [pc, #204]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800145e:	f7ff fb81 	bl	8000b64 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001466:	f7ff fb7d 	bl	8000b64 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e2e7      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x1da>
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001486:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d074      	beq.n	800157e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b08      	cmp	r3, #8
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x21a>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b0c      	cmp	r3, #12
 800149e:	d10e      	bne.n	80014be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d064      	beq.n	800157c <HAL_RCC_OscConfig+0x2f0>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d160      	bne.n	800157c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e2c4      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x24a>
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e01d      	b.n	8001512 <HAL_RCC_OscConfig+0x286>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x26e>
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x286>
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800150c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01c      	beq.n	8001554 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fb23 	bl	8000b64 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001520:	e011      	b.n	8001546 <HAL_RCC_OscConfig+0x2ba>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	08004a4c 	.word	0x08004a4c
 800152c:	20000018 	.word	0x20000018
 8001530:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fb16 	bl	8000b64 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e280      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001546:	4baf      	ldr	r3, [pc, #700]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x2a8>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb06 	bl	8000b64 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb02 	bl	8000b64 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e26c      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156e:	4ba5      	ldr	r3, [pc, #660]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x2d0>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d060      	beq.n	800164c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x310>
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d119      	bne.n	80015ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d116      	bne.n	80015ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159c:	4b99      	ldr	r3, [pc, #612]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x328>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e249      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b93      	ldr	r3, [pc, #588]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	4990      	ldr	r1, [pc, #576]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	e040      	b.n	800164c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d023      	beq.n	800161a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d2:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a8b      	ldr	r2, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fac1 	bl	8000b64 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fabd 	bl	8000b64 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e227      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	4b82      	ldr	r3, [pc, #520]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	497c      	ldr	r1, [pc, #496]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b7a      	ldr	r3, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a79      	ldr	r2, [pc, #484]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fa9d 	bl	8000b64 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fa99 	bl	8000b64 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e203      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001640:	4b70      	ldr	r3, [pc, #448]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d03c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01c      	beq.n	800169a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fa78 	bl	8000b64 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff fa74 	bl	8000b64 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1de      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168a:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ef      	beq.n	8001678 <HAL_RCC_OscConfig+0x3ec>
 8001698:	e01b      	b.n	80016d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169a:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa5b 	bl	8000b64 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fa57 	bl	8000b64 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1c1      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c4:	4b4f      	ldr	r3, [pc, #316]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ef      	bne.n	80016b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80a6 	beq.w	800182c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10d      	bne.n	800170c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	4b44      	ldr	r3, [pc, #272]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	4a43      	ldr	r2, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6593      	str	r3, [r2, #88]	; 0x58
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001708:	2301      	movs	r3, #1
 800170a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170c:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d118      	bne.n	800174a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001724:	f7ff fa1e 	bl	8000b64 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172c:	f7ff fa1a 	bl	8000b64 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e184      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_RCC_OscConfig+0x4d8>
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001762:	e024      	b.n	80017ae <HAL_RCC_OscConfig+0x522>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d110      	bne.n	800178e <HAL_RCC_OscConfig+0x502>
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a20      	ldr	r2, [pc, #128]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178c:	e00f      	b.n	80017ae <HAL_RCC_OscConfig+0x522>
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d016      	beq.n	80017e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff f9d5 	bl	8000b64 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f9d1 	bl	8000b64 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e139      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0ed      	beq.n	80017be <HAL_RCC_OscConfig+0x532>
 80017e2:	e01a      	b.n	800181a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff f9be 	bl	8000b64 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ea:	e00f      	b.n	800180c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	f7ff f9ba 	bl	8000b64 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d906      	bls.n	800180c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e122      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800180c:	4b90      	ldr	r3, [pc, #576]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1e8      	bne.n	80017ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181a:	7ffb      	ldrb	r3, [r7, #31]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001820:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	4a8a      	ldr	r2, [pc, #552]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8108 	beq.w	8001a46 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	2b02      	cmp	r3, #2
 800183c:	f040 80d0 	bne.w	80019e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001840:	4b83      	ldr	r3, [pc, #524]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	429a      	cmp	r2, r3
 8001852:	d130      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	3b01      	subs	r3, #1
 8001860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d127      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001870:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d11f      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001880:	2a07      	cmp	r2, #7
 8001882:	bf14      	ite	ne
 8001884:	2201      	movne	r2, #1
 8001886:	2200      	moveq	r2, #0
 8001888:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188a:	4293      	cmp	r3, r2
 800188c:	d113      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	3b01      	subs	r3, #1
 80018b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d06e      	beq.n	8001994 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d069      	beq.n	8001990 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018bc:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b7      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5c      	ldr	r2, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e4:	f7ff f93e 	bl	8000b64 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f93a 	bl	8000b64 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e0a4      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fe:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190a:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <HAL_RCC_OscConfig+0x7c8>)
 8001910:	4013      	ands	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800191a:	3a01      	subs	r2, #1
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	4311      	orrs	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001924:	0212      	lsls	r2, r2, #8
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800192c:	0852      	lsrs	r2, r2, #1
 800192e:	3a01      	subs	r2, #1
 8001930:	0552      	lsls	r2, r2, #21
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001938:	0852      	lsrs	r2, r2, #1
 800193a:	3a01      	subs	r2, #1
 800193c:	0652      	lsls	r2, r2, #25
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001944:	0912      	lsrs	r2, r2, #4
 8001946:	0452      	lsls	r2, r2, #17
 8001948:	430a      	orrs	r2, r1
 800194a:	4941      	ldr	r1, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001968:	f7ff f8fc 	bl	8000b64 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f8f8 	bl	8000b64 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e062      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198e:	e05a      	b.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e059      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d152      	bne.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b8:	f7ff f8d4 	bl	8000b64 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f8d0 	bl	8000b64 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e03a      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x734>
 80019de:	e032      	b.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d02d      	beq.n	8001a42 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a04:	f023 0303 	bic.w	r3, r3, #3
 8001a08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f8a3 	bl	8000b64 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f89f 	bl	8000b64 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e009      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x796>
 8001a40:	e001      	b.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	f99d808c 	.word	0xf99d808c

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0c8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d910      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0207 	bic.w	r2, r3, #7
 8001a82:	4961      	ldr	r1, [pc, #388]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b0      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d04c      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d121      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e09e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d115      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e092      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae0:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e086      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e07e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b00:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 0203 	bic.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	493f      	ldr	r1, [pc, #252]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b12:	f7ff f827 	bl	8000b64 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff f823 	bl	8000b64 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e066      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 020c 	and.w	r2, r3, #12
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d1eb      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	492c      	ldr	r1, [pc, #176]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e036      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4918      	ldr	r1, [pc, #96]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4910      	ldr	r1, [pc, #64]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bce:	f000 f825 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490c      	ldr	r1, [pc, #48]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fd94 	bl	8000720 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08004a4c 	.word	0x08004a4c
 8001c14:	20000018 	.word	0x20000018
 8001c18:	20000020 	.word	0x20000020

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x34>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d121      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d11e      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c78:	4a2b      	ldr	r2, [pc, #172]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	e004      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d134      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d003      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cc0:	e005      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc4:	617b      	str	r3, [r7, #20]
      break;
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cca:	617b      	str	r3, [r7, #20]
      break;
 8001ccc:	e002      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	fb02 f203 	mul.w	r2, r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	0e5b      	lsrs	r3, r3, #25
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	3301      	adds	r3, #1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d14:	69bb      	ldr	r3, [r7, #24]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08004a64 	.word	0x08004a64
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200

08001d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000018 	.word	0x20000018

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d50:	f7ff fff0 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4904      	ldr	r1, [pc, #16]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08004a5c 	.word	0x08004a5c

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d7c:	f7ff ffda 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4904      	ldr	r1, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08004a5c 	.word	0x08004a5c

08001da4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	220f      	movs	r2, #15
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_RCC_GetClockConfig+0x60>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0207 	and.w	r2, r3, #7
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40022000 	.word	0x40022000

08001e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e14:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e20:	f7ff f9d0 	bl	80011c4 <HAL_PWREx_GetVoltageRange>
 8001e24:	6178      	str	r0, [r7, #20]
 8001e26:	e014      	b.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	; 0x58
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e40:	f7ff f9c0 	bl	80011c4 <HAL_PWREx_GetVoltageRange>
 8001e44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e58:	d10b      	bne.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d919      	bls.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2ba0      	cmp	r3, #160	; 0xa0
 8001e64:	d902      	bls.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e66:	2302      	movs	r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e013      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	e010      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b80      	cmp	r3, #128	; 0x80
 8001e76:	d902      	bls.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e78:	2303      	movs	r3, #3
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e00a      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d102      	bne.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e84:	2302      	movs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e004      	b.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b70      	cmp	r3, #112	; 0x70
 8001e8e:	d101      	bne.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 0207 	bic.w	r2, r3, #7
 8001e9c:	4909      	ldr	r1, [pc, #36]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d041      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eec:	d02a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef2:	d824      	bhi.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ef8:	d008      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001efe:	d81e      	bhi.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f08:	d010      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f0a:	e018      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f0c:	4b86      	ldr	r3, [pc, #536]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a85      	ldr	r2, [pc, #532]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f18:	e015      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fabb 	bl	800249c <RCCEx_PLLSAI1_Config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2a:	e00c      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3320      	adds	r3, #32
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fba6 	bl	8002684 <RCCEx_PLLSAI2_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f3c:	e003      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	74fb      	strb	r3, [r7, #19]
      break;
 8001f42:	e000      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f46:	7cfb      	ldrb	r3, [r7, #19]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f4c:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5a:	4973      	ldr	r1, [pc, #460]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f62:	e001      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d041      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f7c:	d02a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f82:	d824      	bhi.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f88:	d008      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f8e:	d81e      	bhi.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f98:	d010      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f9a:	e018      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f9c:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a61      	ldr	r2, [pc, #388]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fa73 	bl	800249c <RCCEx_PLLSAI1_Config>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fba:	e00c      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3320      	adds	r3, #32
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fb5e 	bl	8002684 <RCCEx_PLLSAI2_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fcc:	e003      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fdc:	4b52      	ldr	r3, [pc, #328]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fea:	494f      	ldr	r1, [pc, #316]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ff2:	e001      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a0 	beq.w	8002146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800201a:	2300      	movs	r3, #0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a40      	ldr	r2, [pc, #256]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002038:	2301      	movs	r3, #1
 800203a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a3a      	ldr	r2, [pc, #232]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002046:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002048:	f7fe fd8c 	bl	8000b64 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800204e:	e009      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002050:	f7fe fd88 	bl	8000b64 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d902      	bls.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	74fb      	strb	r3, [r7, #19]
        break;
 8002062:	e005      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002064:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ef      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d15c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002076:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002080:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01f      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	d019      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a20      	ldr	r2, [pc, #128]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d016      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7fe fd47 	bl	8000b64 <HAL_GetTick>
 80020d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d8:	e00b      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7fe fd43 	bl	8000b64 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d902      	bls.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	74fb      	strb	r3, [r7, #19]
            break;
 80020f0:	e006      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0ec      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002116:	4904      	ldr	r1, [pc, #16]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800211e:	e009      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
 8002124:	e006      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002134:	7c7b      	ldrb	r3, [r7, #17]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d105      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213a:	4b9e      	ldr	r3, [pc, #632]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	4a9d      	ldr	r2, [pc, #628]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002152:	4b98      	ldr	r3, [pc, #608]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002158:	f023 0203 	bic.w	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	4994      	ldr	r1, [pc, #592]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	f023 020c 	bic.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	498c      	ldr	r1, [pc, #560]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002196:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4983      	ldr	r1, [pc, #524]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021b8:	4b7e      	ldr	r3, [pc, #504]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	497b      	ldr	r1, [pc, #492]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021da:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	4972      	ldr	r1, [pc, #456]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fc:	4b6d      	ldr	r3, [pc, #436]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	496a      	ldr	r1, [pc, #424]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800221e:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	4961      	ldr	r1, [pc, #388]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002240:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	4959      	ldr	r1, [pc, #356]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002262:	4b54      	ldr	r3, [pc, #336]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002270:	4950      	ldr	r1, [pc, #320]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	4948      	ldr	r1, [pc, #288]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	493f      	ldr	r1, [pc, #252]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d028      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d6:	4937      	ldr	r1, [pc, #220]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e6:	d106      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f2:	60d3      	str	r3, [r2, #12]
 80022f4:	e011      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022fe:	d10c      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	2101      	movs	r1, #1
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f8c8 	bl	800249c <RCCEx_PLLSAI1_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d028      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002326:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	491f      	ldr	r1, [pc, #124]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002344:	d106      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002350:	60d3      	str	r3, [r2, #12]
 8002352:	e011      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800235c:	d10c      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	2101      	movs	r1, #1
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f899 	bl	800249c <RCCEx_PLLSAI1_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d02b      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	4908      	ldr	r1, [pc, #32]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a2:	d109      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a02      	ldr	r2, [pc, #8]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ae:	60d3      	str	r3, [r2, #12]
 80023b0:	e014      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2101      	movs	r1, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f867 	bl	800249c <RCCEx_PLLSAI1_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02f      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f6:	4928      	ldr	r1, [pc, #160]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002406:	d10d      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	2102      	movs	r1, #2
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f844 	bl	800249c <RCCEx_PLLSAI1_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d014      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	74bb      	strb	r3, [r7, #18]
 8002422:	e011      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800242c:	d10c      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3320      	adds	r3, #32
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f925 	bl	8002684 <RCCEx_PLLSAI2_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002486:	4904      	ldr	r1, [pc, #16]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800248e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000

0800249c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024aa:	4b75      	ldr	r3, [pc, #468]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d018      	beq.n	80024e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024b6:	4b72      	ldr	r3, [pc, #456]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d10d      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024ce:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
       ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d047      	beq.n	8002572 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e044      	b.n	8002572 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d018      	beq.n	8002522 <RCCEx_PLLSAI1_Config+0x86>
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d825      	bhi.n	8002540 <RCCEx_PLLSAI1_Config+0xa4>
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d002      	beq.n	80024fe <RCCEx_PLLSAI1_Config+0x62>
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d009      	beq.n	8002510 <RCCEx_PLLSAI1_Config+0x74>
 80024fc:	e020      	b.n	8002540 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024fe:	4b60      	ldr	r3, [pc, #384]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d11d      	bne.n	8002546 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800250e:	e01a      	b.n	8002546 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002510:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d116      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e013      	b.n	800254a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800252e:	4b54      	ldr	r3, [pc, #336]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800253e:	e006      	b.n	800254e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e004      	b.n	8002550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	430b      	orrs	r3, r1
 800256c:	4944      	ldr	r1, [pc, #272]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d17d      	bne.n	8002674 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002578:	4b41      	ldr	r3, [pc, #260]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a40      	ldr	r2, [pc, #256]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe faee 	bl	8000b64 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800258a:	e009      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800258c:	f7fe faea 	bl	8000b64 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d902      	bls.n	80025a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	73fb      	strb	r3, [r7, #15]
        break;
 800259e:	e005      	b.n	80025ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ef      	bne.n	800258c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d160      	bne.n	8002674 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6892      	ldr	r2, [r2, #8]
 80025c8:	0211      	lsls	r1, r2, #8
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68d2      	ldr	r2, [r2, #12]
 80025ce:	0912      	lsrs	r2, r2, #4
 80025d0:	0452      	lsls	r2, r2, #17
 80025d2:	430a      	orrs	r2, r1
 80025d4:	492a      	ldr	r1, [pc, #168]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	610b      	str	r3, [r1, #16]
 80025da:	e027      	b.n	800262c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d112      	bne.n	8002608 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	0211      	lsls	r1, r2, #8
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6912      	ldr	r2, [r2, #16]
 80025f8:	0852      	lsrs	r2, r2, #1
 80025fa:	3a01      	subs	r2, #1
 80025fc:	0552      	lsls	r2, r2, #21
 80025fe:	430a      	orrs	r2, r1
 8002600:	491f      	ldr	r1, [pc, #124]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	610b      	str	r3, [r1, #16]
 8002606:	e011      	b.n	800262c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002610:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6892      	ldr	r2, [r2, #8]
 8002618:	0211      	lsls	r1, r2, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6952      	ldr	r2, [r2, #20]
 800261e:	0852      	lsrs	r2, r2, #1
 8002620:	3a01      	subs	r2, #1
 8002622:	0652      	lsls	r2, r2, #25
 8002624:	430a      	orrs	r2, r1
 8002626:	4916      	ldr	r1, [pc, #88]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002628:	4313      	orrs	r3, r2
 800262a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a13      	ldr	r2, [pc, #76]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fa94 	bl	8000b64 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800263e:	e009      	b.n	8002654 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002640:	f7fe fa90 	bl	8000b64 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	73fb      	strb	r3, [r7, #15]
          break;
 8002652:	e005      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ef      	beq.n	8002640 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	4904      	ldr	r1, [pc, #16]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002670:	4313      	orrs	r3, r2
 8002672:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002692:	4b6a      	ldr	r3, [pc, #424]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d018      	beq.n	80026d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
       ||
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026b6:	4b61      	ldr	r3, [pc, #388]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
       ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d047      	beq.n	800275a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e044      	b.n	800275a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d018      	beq.n	800270a <RCCEx_PLLSAI2_Config+0x86>
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d825      	bhi.n	8002728 <RCCEx_PLLSAI2_Config+0xa4>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <RCCEx_PLLSAI2_Config+0x62>
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d009      	beq.n	80026f8 <RCCEx_PLLSAI2_Config+0x74>
 80026e4:	e020      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e6:	4b55      	ldr	r3, [pc, #340]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11d      	bne.n	800272e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f6:	e01a      	b.n	800272e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f8:	4b50      	ldr	r3, [pc, #320]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e013      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002716:	4b49      	ldr	r3, [pc, #292]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002726:	e006      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e004      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
    }

    if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	430b      	orrs	r3, r1
 8002754:	4939      	ldr	r1, [pc, #228]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d167      	bne.n	8002830 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a35      	ldr	r2, [pc, #212]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe f9fa 	bl	8000b64 <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002772:	e009      	b.n	8002788 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002774:	f7fe f9f6 	bl	8000b64 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	73fb      	strb	r3, [r7, #15]
        break;
 8002786:	e005      	b.n	8002794 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002788:	4b2c      	ldr	r3, [pc, #176]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ef      	bne.n	8002774 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d14a      	bne.n	8002830 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d111      	bne.n	80027c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a0:	4b26      	ldr	r3, [pc, #152]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6892      	ldr	r2, [r2, #8]
 80027b0:	0211      	lsls	r1, r2, #8
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	0912      	lsrs	r2, r2, #4
 80027b8:	0452      	lsls	r2, r2, #17
 80027ba:	430a      	orrs	r2, r1
 80027bc:	491f      	ldr	r1, [pc, #124]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	614b      	str	r3, [r1, #20]
 80027c2:	e011      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6892      	ldr	r2, [r2, #8]
 80027d4:	0211      	lsls	r1, r2, #8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6912      	ldr	r2, [r2, #16]
 80027da:	0852      	lsrs	r2, r2, #1
 80027dc:	3a01      	subs	r2, #1
 80027de:	0652      	lsls	r2, r2, #25
 80027e0:	430a      	orrs	r2, r1
 80027e2:	4916      	ldr	r1, [pc, #88]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a13      	ldr	r2, [pc, #76]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe f9b6 	bl	8000b64 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027fa:	e009      	b.n	8002810 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027fc:	f7fe f9b2 	bl	8000b64 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d902      	bls.n	8002810 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	73fb      	strb	r3, [r7, #15]
          break;
 800280e:	e005      	b.n	800281c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ef      	beq.n	80027fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4904      	ldr	r1, [pc, #16]	; (800283c <RCCEx_PLLSAI2_Config+0x1b8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e049      	b.n	80028e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f841 	bl	80028ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f000 f9f8 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d001      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e04f      	b.n	80029bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x76>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d018      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x76>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_TIM_Base_Start_IT+0xc8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x76>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x76>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x76>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_TIM_Base_Start_IT+0x76>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d115      	bne.n	80029a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d015      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0xb4>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d011      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a4:	e008      	b.n	80029b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e000      	b.n	80029ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40013400 	.word	0x40013400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	00010007 	.word	0x00010007

080029e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d122      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11b      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0202 	mvn.w	r2, #2
 8002a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f905 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 8002a2c:	e005      	b.n	8002a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8f7 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f908 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0204 	mvn.w	r2, #4
 8002a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8db 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8cd 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8de 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8b1 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8a3 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8b4 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f887 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f879 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f88a 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd fd9c 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f914 	bl	8002dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba2:	d10e      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b80      	cmp	r3, #128	; 0x80
 8002bb0:	d107      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f907 	bl	8002dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d10e      	bne.n	8002bee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d107      	bne.n	8002bee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f838 	bl	8002c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d10e      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f06f 0220 	mvn.w	r2, #32
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f8c7 	bl	8002da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a40      	ldr	r2, [pc, #256]	; (8002d88 <TIM_Base_SetConfig+0x114>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d00f      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a3d      	ldr	r2, [pc, #244]	; (8002d8c <TIM_Base_SetConfig+0x118>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <TIM_Base_SetConfig+0x11c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <TIM_Base_SetConfig+0x120>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <TIM_Base_SetConfig+0x124>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d108      	bne.n	8002cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <TIM_Base_SetConfig+0x114>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01f      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d01b      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <TIM_Base_SetConfig+0x118>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d017      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <TIM_Base_SetConfig+0x11c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <TIM_Base_SetConfig+0x120>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00f      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <TIM_Base_SetConfig+0x124>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <TIM_Base_SetConfig+0x128>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <TIM_Base_SetConfig+0x12c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <TIM_Base_SetConfig+0x130>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <TIM_Base_SetConfig+0x114>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00f      	beq.n	8002d6c <TIM_Base_SetConfig+0xf8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <TIM_Base_SetConfig+0x124>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <TIM_Base_SetConfig+0xf8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <TIM_Base_SetConfig+0x128>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d007      	beq.n	8002d6c <TIM_Base_SetConfig+0xf8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <TIM_Base_SetConfig+0x12c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <TIM_Base_SetConfig+0xf8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <TIM_Base_SetConfig+0x130>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d103      	bne.n	8002d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	615a      	str	r2, [r3, #20]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800
 8002d94:	40000c00 	.word	0x40000c00
 8002d98:	40013400 	.word	0x40013400
 8002d9c:	40014000 	.word	0x40014000
 8002da0:	40014400 	.word	0x40014400
 8002da4:	40014800 	.word	0x40014800

08002da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e040      	b.n	8002e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fdc4 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fbe8 	bl	80035f8 <UART_SetConfig>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e022      	b.n	8002e78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fe66 	bl	8003b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 feed 	bl	8003c50 <UART_CheckIdleState>
 8002e76:	4603      	mov	r3, r0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b08b      	sub	sp, #44	; 0x2c
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d156      	bne.n	8002f44 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_Transmit_IT+0x22>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04f      	b.n	8002f46 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Transmit_IT+0x34>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e048      	b.n	8002f46 <HAL_UART_Transmit_IT+0xc6>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	88fa      	ldrh	r2, [r7, #6]
 8002ec6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2221      	movs	r2, #33	; 0x21
 8002ee4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	d107      	bne.n	8002f00 <HAL_UART_Transmit_IT+0x80>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_UART_Transmit_IT+0xd4>)
 8002efc:	669a      	str	r2, [r3, #104]	; 0x68
 8002efe:	e002      	b.n	8002f06 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <HAL_UART_Transmit_IT+0xd8>)
 8002f04:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	69f9      	ldr	r1, [r7, #28]
 8002f32:	6a3a      	ldr	r2, [r7, #32]
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e6      	bne.n	8002f0e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	372c      	adds	r7, #44	; 0x2c
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	080041ab 	.word	0x080041ab
 8002f58:	080040f3 	.word	0x080040f3

08002f5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d142      	bne.n	8002ff8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_UART_Receive_IT+0x22>
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e03b      	b.n	8002ffa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Receive_IT+0x34>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e034      	b.n	8002ffa <HAL_UART_Receive_IT+0x9e>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_UART_Receive_IT+0xa8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d01f      	beq.n	8002fe8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	69f9      	ldr	r1, [r7, #28]
 8002fda:	6a3a      	ldr	r2, [r7, #32]
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e6      	bne.n	8002fb6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 ff3c 	bl	8003e6c <UART_Start_Receive_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	e000      	b.n	8002ffa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3728      	adds	r7, #40	; 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40008000 	.word	0x40008000

08003008 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0ba      	sub	sp, #232	; 0xe8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800302e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003032:	f640 030f 	movw	r3, #2063	; 0x80f
 8003036:	4013      	ands	r3, r2
 8003038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800303c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d115      	bne.n	8003070 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00f      	beq.n	8003070 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 82a6 	beq.w	80035b2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
      }
      return;
 800306e:	e2a0      	b.n	80035b2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8117 	beq.w	80032a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800307a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003086:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800308a:	4b85      	ldr	r3, [pc, #532]	; (80032a0 <HAL_UART_IRQHandler+0x298>)
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 810a 	beq.w	80032a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <HAL_UART_IRQHandler+0xbc>
 80030a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <HAL_UART_IRQHandler+0xec>
 80030d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2202      	movs	r2, #2
 80030e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d011      	beq.n	8003124 <HAL_UART_IRQHandler+0x11c>
 8003100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2204      	movs	r2, #4
 8003112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d017      	beq.n	8003160 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800313c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003140:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2208      	movs	r2, #8
 800314e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003156:	f043 0208 	orr.w	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <HAL_UART_IRQHandler+0x18a>
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00c      	beq.n	8003192 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 820c 	beq.w	80035b6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800319e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d005      	beq.n	80031ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d04f      	beq.n	800328a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 ff08 	bl	8004000 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d141      	bne.n	8003282 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3308      	adds	r3, #8
 8003204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3308      	adds	r3, #8
 8003226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800322a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800322e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1d9      	bne.n	80031fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	2b00      	cmp	r3, #0
 8003250:	d013      	beq.n	800327a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <HAL_UART_IRQHandler+0x29c>)
 8003258:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fdac 	bl	8000dbc <HAL_DMA_Abort_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d017      	beq.n	800329a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003274:	4610      	mov	r0, r2
 8003276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	e00f      	b.n	800329a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9a6 	bl	80035cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	e00b      	b.n	800329a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f9a2 	bl	80035cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	e007      	b.n	800329a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f99e 	bl	80035cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003298:	e18d      	b.n	80035b6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	bf00      	nop
    return;
 800329c:	e18b      	b.n	80035b6 <HAL_UART_IRQHandler+0x5ae>
 800329e:	bf00      	nop
 80032a0:	04000120 	.word	0x04000120
 80032a4:	080040c7 	.word	0x080040c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 8146 	bne.w	800353e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 813f 	beq.w	800353e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8138 	beq.w	800353e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2210      	movs	r2, #16
 80032d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	f040 80b4 	bne.w	800344e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 815f 	beq.w	80035ba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003306:	429a      	cmp	r2, r3
 8003308:	f080 8157 	bcs.w	80035ba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003312:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8085 	bne.w	8003432 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800333c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003356:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800335e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1da      	bne.n	8003328 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3308      	adds	r3, #8
 8003378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3308      	adds	r3, #8
 8003392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800339a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800339e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e1      	bne.n	8003372 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3308      	adds	r3, #8
 80033b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3308      	adds	r3, #8
 80033ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e3      	bne.n	80033ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003414:	65bb      	str	r3, [r7, #88]	; 0x58
 8003416:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800341a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e4      	bne.n	80033f2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fc87 	bl	8000d40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800343e:	b29b      	uxth	r3, r3
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8ca 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800344c:	e0b5      	b.n	80035ba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800345a:	b29b      	uxth	r3, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a7 	beq.w	80035be <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a2 	beq.w	80035be <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800348e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
 800349e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e4      	bne.n	800347a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3308      	adds	r3, #8
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	623b      	str	r3, [r7, #32]
   return(result);
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3308      	adds	r3, #8
 80034d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034d4:	633a      	str	r2, [r7, #48]	; 0x30
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e3      	bne.n	80034b0 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	60fb      	str	r3, [r7, #12]
   return(result);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0310 	bic.w	r3, r3, #16
 800350e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	69b9      	ldr	r1, [r7, #24]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	617b      	str	r3, [r7, #20]
   return(result);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e4      	bne.n	80034fa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f852 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800353c:	e03f      	b.n	80035be <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <HAL_UART_IRQHandler+0x560>
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800355e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f001 f80c 	bl	800457e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003566:	e02d      	b.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
    }
    return;
 8003590:	e017      	b.n	80035c2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
 800359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00c      	beq.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fe5d 	bl	800426a <UART_EndTransmit_IT>
    return;
 80035b0:	e008      	b.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035b2:	bf00      	nop
 80035b4:	e006      	b.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80035b6:	bf00      	nop
 80035b8:	e004      	b.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80035c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035c4:	37e8      	adds	r7, #232	; 0xe8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop

080035cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4313      	orrs	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4bad      	ldr	r3, [pc, #692]	; (80038d8 <UART_SetConfig+0x2e0>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	69f9      	ldr	r1, [r7, #28]
 800362c:	430b      	orrs	r3, r1
 800362e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4aa2      	ldr	r2, [pc, #648]	; (80038dc <UART_SetConfig+0x2e4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	4313      	orrs	r3, r2
 800365e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a99      	ldr	r2, [pc, #612]	; (80038e0 <UART_SetConfig+0x2e8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d121      	bne.n	80036c2 <UART_SetConfig+0xca>
 800367e:	4b99      	ldr	r3, [pc, #612]	; (80038e4 <UART_SetConfig+0x2ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b03      	cmp	r3, #3
 800368a:	d817      	bhi.n	80036bc <UART_SetConfig+0xc4>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <UART_SetConfig+0x9c>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036b1 	.word	0x080036b1
 800369c:	080036ab 	.word	0x080036ab
 80036a0:	080036b7 	.word	0x080036b7
 80036a4:	2301      	movs	r3, #1
 80036a6:	76fb      	strb	r3, [r7, #27]
 80036a8:	e0e7      	b.n	800387a <UART_SetConfig+0x282>
 80036aa:	2302      	movs	r3, #2
 80036ac:	76fb      	strb	r3, [r7, #27]
 80036ae:	e0e4      	b.n	800387a <UART_SetConfig+0x282>
 80036b0:	2304      	movs	r3, #4
 80036b2:	76fb      	strb	r3, [r7, #27]
 80036b4:	e0e1      	b.n	800387a <UART_SetConfig+0x282>
 80036b6:	2308      	movs	r3, #8
 80036b8:	76fb      	strb	r3, [r7, #27]
 80036ba:	e0de      	b.n	800387a <UART_SetConfig+0x282>
 80036bc:	2310      	movs	r3, #16
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e0db      	b.n	800387a <UART_SetConfig+0x282>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a88      	ldr	r2, [pc, #544]	; (80038e8 <UART_SetConfig+0x2f0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d132      	bne.n	8003732 <UART_SetConfig+0x13a>
 80036cc:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <UART_SetConfig+0x2ec>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d828      	bhi.n	800372c <UART_SetConfig+0x134>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0xe8>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003715 	.word	0x08003715
 80036e4:	0800372d 	.word	0x0800372d
 80036e8:	0800372d 	.word	0x0800372d
 80036ec:	0800372d 	.word	0x0800372d
 80036f0:	08003721 	.word	0x08003721
 80036f4:	0800372d 	.word	0x0800372d
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	0800372d 	.word	0x0800372d
 8003700:	0800371b 	.word	0x0800371b
 8003704:	0800372d 	.word	0x0800372d
 8003708:	0800372d 	.word	0x0800372d
 800370c:	0800372d 	.word	0x0800372d
 8003710:	08003727 	.word	0x08003727
 8003714:	2300      	movs	r3, #0
 8003716:	76fb      	strb	r3, [r7, #27]
 8003718:	e0af      	b.n	800387a <UART_SetConfig+0x282>
 800371a:	2302      	movs	r3, #2
 800371c:	76fb      	strb	r3, [r7, #27]
 800371e:	e0ac      	b.n	800387a <UART_SetConfig+0x282>
 8003720:	2304      	movs	r3, #4
 8003722:	76fb      	strb	r3, [r7, #27]
 8003724:	e0a9      	b.n	800387a <UART_SetConfig+0x282>
 8003726:	2308      	movs	r3, #8
 8003728:	76fb      	strb	r3, [r7, #27]
 800372a:	e0a6      	b.n	800387a <UART_SetConfig+0x282>
 800372c:	2310      	movs	r3, #16
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e0a3      	b.n	800387a <UART_SetConfig+0x282>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6d      	ldr	r2, [pc, #436]	; (80038ec <UART_SetConfig+0x2f4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d120      	bne.n	800377e <UART_SetConfig+0x186>
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <UART_SetConfig+0x2ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003746:	2b30      	cmp	r3, #48	; 0x30
 8003748:	d013      	beq.n	8003772 <UART_SetConfig+0x17a>
 800374a:	2b30      	cmp	r3, #48	; 0x30
 800374c:	d814      	bhi.n	8003778 <UART_SetConfig+0x180>
 800374e:	2b20      	cmp	r3, #32
 8003750:	d009      	beq.n	8003766 <UART_SetConfig+0x16e>
 8003752:	2b20      	cmp	r3, #32
 8003754:	d810      	bhi.n	8003778 <UART_SetConfig+0x180>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <UART_SetConfig+0x168>
 800375a:	2b10      	cmp	r3, #16
 800375c:	d006      	beq.n	800376c <UART_SetConfig+0x174>
 800375e:	e00b      	b.n	8003778 <UART_SetConfig+0x180>
 8003760:	2300      	movs	r3, #0
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e089      	b.n	800387a <UART_SetConfig+0x282>
 8003766:	2302      	movs	r3, #2
 8003768:	76fb      	strb	r3, [r7, #27]
 800376a:	e086      	b.n	800387a <UART_SetConfig+0x282>
 800376c:	2304      	movs	r3, #4
 800376e:	76fb      	strb	r3, [r7, #27]
 8003770:	e083      	b.n	800387a <UART_SetConfig+0x282>
 8003772:	2308      	movs	r3, #8
 8003774:	76fb      	strb	r3, [r7, #27]
 8003776:	e080      	b.n	800387a <UART_SetConfig+0x282>
 8003778:	2310      	movs	r3, #16
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e07d      	b.n	800387a <UART_SetConfig+0x282>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <UART_SetConfig+0x2f8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d120      	bne.n	80037ca <UART_SetConfig+0x1d2>
 8003788:	4b56      	ldr	r3, [pc, #344]	; (80038e4 <UART_SetConfig+0x2ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003792:	2bc0      	cmp	r3, #192	; 0xc0
 8003794:	d013      	beq.n	80037be <UART_SetConfig+0x1c6>
 8003796:	2bc0      	cmp	r3, #192	; 0xc0
 8003798:	d814      	bhi.n	80037c4 <UART_SetConfig+0x1cc>
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d009      	beq.n	80037b2 <UART_SetConfig+0x1ba>
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d810      	bhi.n	80037c4 <UART_SetConfig+0x1cc>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <UART_SetConfig+0x1b4>
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d006      	beq.n	80037b8 <UART_SetConfig+0x1c0>
 80037aa:	e00b      	b.n	80037c4 <UART_SetConfig+0x1cc>
 80037ac:	2300      	movs	r3, #0
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	e063      	b.n	800387a <UART_SetConfig+0x282>
 80037b2:	2302      	movs	r3, #2
 80037b4:	76fb      	strb	r3, [r7, #27]
 80037b6:	e060      	b.n	800387a <UART_SetConfig+0x282>
 80037b8:	2304      	movs	r3, #4
 80037ba:	76fb      	strb	r3, [r7, #27]
 80037bc:	e05d      	b.n	800387a <UART_SetConfig+0x282>
 80037be:	2308      	movs	r3, #8
 80037c0:	76fb      	strb	r3, [r7, #27]
 80037c2:	e05a      	b.n	800387a <UART_SetConfig+0x282>
 80037c4:	2310      	movs	r3, #16
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	e057      	b.n	800387a <UART_SetConfig+0x282>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a49      	ldr	r2, [pc, #292]	; (80038f4 <UART_SetConfig+0x2fc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d125      	bne.n	8003820 <UART_SetConfig+0x228>
 80037d4:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <UART_SetConfig+0x2ec>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037e2:	d017      	beq.n	8003814 <UART_SetConfig+0x21c>
 80037e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037e8:	d817      	bhi.n	800381a <UART_SetConfig+0x222>
 80037ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ee:	d00b      	beq.n	8003808 <UART_SetConfig+0x210>
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f4:	d811      	bhi.n	800381a <UART_SetConfig+0x222>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <UART_SetConfig+0x20a>
 80037fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fe:	d006      	beq.n	800380e <UART_SetConfig+0x216>
 8003800:	e00b      	b.n	800381a <UART_SetConfig+0x222>
 8003802:	2300      	movs	r3, #0
 8003804:	76fb      	strb	r3, [r7, #27]
 8003806:	e038      	b.n	800387a <UART_SetConfig+0x282>
 8003808:	2302      	movs	r3, #2
 800380a:	76fb      	strb	r3, [r7, #27]
 800380c:	e035      	b.n	800387a <UART_SetConfig+0x282>
 800380e:	2304      	movs	r3, #4
 8003810:	76fb      	strb	r3, [r7, #27]
 8003812:	e032      	b.n	800387a <UART_SetConfig+0x282>
 8003814:	2308      	movs	r3, #8
 8003816:	76fb      	strb	r3, [r7, #27]
 8003818:	e02f      	b.n	800387a <UART_SetConfig+0x282>
 800381a:	2310      	movs	r3, #16
 800381c:	76fb      	strb	r3, [r7, #27]
 800381e:	e02c      	b.n	800387a <UART_SetConfig+0x282>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2d      	ldr	r2, [pc, #180]	; (80038dc <UART_SetConfig+0x2e4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d125      	bne.n	8003876 <UART_SetConfig+0x27e>
 800382a:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <UART_SetConfig+0x2ec>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003838:	d017      	beq.n	800386a <UART_SetConfig+0x272>
 800383a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800383e:	d817      	bhi.n	8003870 <UART_SetConfig+0x278>
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003844:	d00b      	beq.n	800385e <UART_SetConfig+0x266>
 8003846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384a:	d811      	bhi.n	8003870 <UART_SetConfig+0x278>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <UART_SetConfig+0x260>
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003854:	d006      	beq.n	8003864 <UART_SetConfig+0x26c>
 8003856:	e00b      	b.n	8003870 <UART_SetConfig+0x278>
 8003858:	2300      	movs	r3, #0
 800385a:	76fb      	strb	r3, [r7, #27]
 800385c:	e00d      	b.n	800387a <UART_SetConfig+0x282>
 800385e:	2302      	movs	r3, #2
 8003860:	76fb      	strb	r3, [r7, #27]
 8003862:	e00a      	b.n	800387a <UART_SetConfig+0x282>
 8003864:	2304      	movs	r3, #4
 8003866:	76fb      	strb	r3, [r7, #27]
 8003868:	e007      	b.n	800387a <UART_SetConfig+0x282>
 800386a:	2308      	movs	r3, #8
 800386c:	76fb      	strb	r3, [r7, #27]
 800386e:	e004      	b.n	800387a <UART_SetConfig+0x282>
 8003870:	2310      	movs	r3, #16
 8003872:	76fb      	strb	r3, [r7, #27]
 8003874:	e001      	b.n	800387a <UART_SetConfig+0x282>
 8003876:	2310      	movs	r3, #16
 8003878:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a17      	ldr	r2, [pc, #92]	; (80038dc <UART_SetConfig+0x2e4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	f040 8087 	bne.w	8003994 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003886:	7efb      	ldrb	r3, [r7, #27]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d837      	bhi.n	80038fc <UART_SetConfig+0x304>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x29c>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038fd 	.word	0x080038fd
 800389c:	080038c1 	.word	0x080038c1
 80038a0:	080038fd 	.word	0x080038fd
 80038a4:	080038c7 	.word	0x080038c7
 80038a8:	080038fd 	.word	0x080038fd
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe fa48 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 80038bc:	6178      	str	r0, [r7, #20]
        break;
 80038be:	e022      	b.n	8003906 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <UART_SetConfig+0x300>)
 80038c2:	617b      	str	r3, [r7, #20]
        break;
 80038c4:	e01f      	b.n	8003906 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe f9a9 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80038ca:	6178      	str	r0, [r7, #20]
        break;
 80038cc:	e01b      	b.n	8003906 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	617b      	str	r3, [r7, #20]
        break;
 80038d4:	e017      	b.n	8003906 <UART_SetConfig+0x30e>
 80038d6:	bf00      	nop
 80038d8:	efff69f3 	.word	0xefff69f3
 80038dc:	40008000 	.word	0x40008000
 80038e0:	40013800 	.word	0x40013800
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40004400 	.word	0x40004400
 80038ec:	40004800 	.word	0x40004800
 80038f0:	40004c00 	.word	0x40004c00
 80038f4:	40005000 	.word	0x40005000
 80038f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	76bb      	strb	r3, [r7, #26]
        break;
 8003904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80f1 	beq.w	8003af0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	429a      	cmp	r2, r3
 800391c:	d305      	bcc.n	800392a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	429a      	cmp	r2, r3
 8003928:	d902      	bls.n	8003930 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	76bb      	strb	r3, [r7, #26]
 800392e:	e0df      	b.n	8003af0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	4618      	mov	r0, r3
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	020b      	lsls	r3, r1, #8
 8003942:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003946:	0202      	lsls	r2, r0, #8
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	6849      	ldr	r1, [r1, #4]
 800394c:	0849      	lsrs	r1, r1, #1
 800394e:	4608      	mov	r0, r1
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	1814      	adds	r4, r2, r0
 8003956:	eb43 0501 	adc.w	r5, r3, r1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	461a      	mov	r2, r3
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	4620      	mov	r0, r4
 8003966:	4629      	mov	r1, r5
 8003968:	f7fc fc32 	bl	80001d0 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397a:	d308      	bcc.n	800398e <UART_SetConfig+0x396>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003982:	d204      	bcs.n	800398e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	e0b0      	b.n	8003af0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	76bb      	strb	r3, [r7, #26]
 8003992:	e0ad      	b.n	8003af0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399c:	d15b      	bne.n	8003a56 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800399e:	7efb      	ldrb	r3, [r7, #27]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d828      	bhi.n	80039f6 <UART_SetConfig+0x3fe>
 80039a4:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0x3b4>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039e1 	.word	0x080039e1
 80039b8:	080039f7 	.word	0x080039f7
 80039bc:	080039e7 	.word	0x080039e7
 80039c0:	080039f7 	.word	0x080039f7
 80039c4:	080039f7 	.word	0x080039f7
 80039c8:	080039f7 	.word	0x080039f7
 80039cc:	080039ef 	.word	0x080039ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe f9bc 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 80039d4:	6178      	str	r0, [r7, #20]
        break;
 80039d6:	e013      	b.n	8003a00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d8:	f7fe f9ce 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80039dc:	6178      	str	r0, [r7, #20]
        break;
 80039de:	e00f      	b.n	8003a00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e0:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <UART_SetConfig+0x510>)
 80039e2:	617b      	str	r3, [r7, #20]
        break;
 80039e4:	e00c      	b.n	8003a00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e6:	f7fe f919 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80039ea:	6178      	str	r0, [r7, #20]
        break;
 80039ec:	e008      	b.n	8003a00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f2:	617b      	str	r3, [r7, #20]
        break;
 80039f4:	e004      	b.n	8003a00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	76bb      	strb	r3, [r7, #26]
        break;
 80039fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d074      	beq.n	8003af0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005a      	lsls	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d916      	bls.n	8003a50 <UART_SetConfig+0x458>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a28:	d212      	bcs.n	8003a50 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f023 030f 	bic.w	r3, r3, #15
 8003a32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	89fb      	ldrh	r3, [r7, #14]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	89fa      	ldrh	r2, [r7, #14]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	e04f      	b.n	8003af0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	76bb      	strb	r3, [r7, #26]
 8003a54:	e04c      	b.n	8003af0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a56:	7efb      	ldrb	r3, [r7, #27]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d828      	bhi.n	8003aae <UART_SetConfig+0x4b6>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <UART_SetConfig+0x46c>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003a99 	.word	0x08003a99
 8003a70:	08003aaf 	.word	0x08003aaf
 8003a74:	08003a9f 	.word	0x08003a9f
 8003a78:	08003aaf 	.word	0x08003aaf
 8003a7c:	08003aaf 	.word	0x08003aaf
 8003a80:	08003aaf 	.word	0x08003aaf
 8003a84:	08003aa7 	.word	0x08003aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a88:	f7fe f960 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8003a8c:	6178      	str	r0, [r7, #20]
        break;
 8003a8e:	e013      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a90:	f7fe f972 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8003a94:	6178      	str	r0, [r7, #20]
        break;
 8003a96:	e00f      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <UART_SetConfig+0x510>)
 8003a9a:	617b      	str	r3, [r7, #20]
        break;
 8003a9c:	e00c      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9e:	f7fe f8bd 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8003aa2:	6178      	str	r0, [r7, #20]
        break;
 8003aa4:	e008      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aaa:	617b      	str	r3, [r7, #20]
        break;
 8003aac:	e004      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d018      	beq.n	8003af0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	085a      	lsrs	r2, r3, #1
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	441a      	add	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b0f      	cmp	r3, #15
 8003ad6:	d909      	bls.n	8003aec <UART_SetConfig+0x4f4>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ade:	d205      	bcs.n	8003aec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e001      	b.n	8003af0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003afc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bdb0      	pop	{r4, r5, r7, pc}
 8003b06:	bf00      	nop
 8003b08:	00f42400 	.word	0x00f42400

08003b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01a      	beq.n	8003c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0a:	d10a      	bne.n	8003c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c60:	f7fc ff80 	bl	8000b64 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d10e      	bne.n	8003c92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f82d 	bl	8003ce2 <UART_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e023      	b.n	8003cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d10e      	bne.n	8003cbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f817 	bl	8003ce2 <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e00d      	b.n	8003cda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b09c      	sub	sp, #112	; 0x70
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	e0a5      	b.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cfa:	f000 80a1 	beq.w	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fc ff31 	bl	8000b64 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d13e      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d28:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e6      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3308      	adds	r3, #8
 8003d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d66:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e067      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d04f      	beq.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d147      	bne.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e6      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3308      	adds	r3, #8
 8003df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e0c:	623a      	str	r2, [r7, #32]
 8003e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	69f9      	ldr	r1, [r7, #28]
 8003e12:	6a3a      	ldr	r2, [r7, #32]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e010      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	f43f af4a 	beq.w	8003cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3770      	adds	r7, #112	; 0x70
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b097      	sub	sp, #92	; 0x5c
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	88fa      	ldrh	r2, [r7, #6]
 8003e8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d10e      	bne.n	8003ebe <UART_Start_Receive_IT+0x52>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d105      	bne.n	8003eb4 <UART_Start_Receive_IT+0x48>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003eae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eb2:	e02d      	b.n	8003f10 <UART_Start_Receive_IT+0xa4>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	22ff      	movs	r2, #255	; 0xff
 8003eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ebc:	e028      	b.n	8003f10 <UART_Start_Receive_IT+0xa4>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10d      	bne.n	8003ee2 <UART_Start_Receive_IT+0x76>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <UART_Start_Receive_IT+0x6c>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	22ff      	movs	r2, #255	; 0xff
 8003ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ed6:	e01b      	b.n	8003f10 <UART_Start_Receive_IT+0xa4>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	227f      	movs	r2, #127	; 0x7f
 8003edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee0:	e016      	b.n	8003f10 <UART_Start_Receive_IT+0xa4>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eea:	d10d      	bne.n	8003f08 <UART_Start_Receive_IT+0x9c>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <UART_Start_Receive_IT+0x92>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	227f      	movs	r2, #127	; 0x7f
 8003ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003efc:	e008      	b.n	8003f10 <UART_Start_Receive_IT+0xa4>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	223f      	movs	r2, #63	; 0x3f
 8003f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f06:	e003      	b.n	8003f10 <UART_Start_Receive_IT+0xa4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2222      	movs	r2, #34	; 0x22
 8003f1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	657b      	str	r3, [r7, #84]	; 0x54
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e5      	bne.n	8003f1e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	d107      	bne.n	8003f6c <UART_Start_Receive_IT+0x100>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a24      	ldr	r2, [pc, #144]	; (8003ff8 <UART_Start_Receive_IT+0x18c>)
 8003f68:	665a      	str	r2, [r3, #100]	; 0x64
 8003f6a:	e002      	b.n	8003f72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <UART_Start_Receive_IT+0x190>)
 8003f70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d019      	beq.n	8003fb6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_Start_Receive_IT+0x116>
 8003fb4:	e018      	b.n	8003fe8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f043 0320 	orr.w	r3, r3, #32
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	69f9      	ldr	r1, [r7, #28]
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	375c      	adds	r7, #92	; 0x5c
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	0800441f 	.word	0x0800441f
 8003ffc:	080042bf 	.word	0x080042bf

08004000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b095      	sub	sp, #84	; 0x54
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800401c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
 8004028:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800402c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e6      	bne.n	8004008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	61fb      	str	r3, [r7, #28]
   return(result);
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	64bb      	str	r3, [r7, #72]	; 0x48
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e5      	bne.n	800403a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	2b01      	cmp	r3, #1
 8004074:	d118      	bne.n	80040a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	60bb      	str	r3, [r7, #8]
   return(result);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f023 0310 	bic.w	r3, r3, #16
 800408a:	647b      	str	r3, [r7, #68]	; 0x44
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6979      	ldr	r1, [r7, #20]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	613b      	str	r3, [r7, #16]
   return(result);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040ba:	bf00      	nop
 80040bc:	3754      	adds	r7, #84	; 0x54
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff fa71 	bl	80035cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b08f      	sub	sp, #60	; 0x3c
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040fe:	2b21      	cmp	r3, #33	; 0x21
 8004100:	d14d      	bne.n	800419e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d132      	bne.n	8004174 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	61fb      	str	r3, [r7, #28]
   return(result);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	60bb      	str	r3, [r7, #8]
   return(result);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6979      	ldr	r1, [r7, #20]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e6      	bne.n	8004140 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004172:	e014      	b.n	800419e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	b292      	uxth	r2, r2
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800419e:	bf00      	nop
 80041a0:	373c      	adds	r7, #60	; 0x3c
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b091      	sub	sp, #68	; 0x44
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b6:	2b21      	cmp	r3, #33	; 0x21
 80041b8:	d151      	bne.n	800425e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d132      	bne.n	800422c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	623b      	str	r3, [r7, #32]
   return(result);
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30
 80041e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e6      	bne.n	80041c6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	60fb      	str	r3, [r7, #12]
   return(result);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	69b9      	ldr	r1, [r7, #24]
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	617b      	str	r3, [r7, #20]
   return(result);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e6      	bne.n	80041f8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800422a:	e018      	b.n	800425e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423e:	b292      	uxth	r2, r2
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	1c9a      	adds	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800425e:	bf00      	nop
 8004260:	3744      	adds	r7, #68	; 0x44
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b088      	sub	sp, #32
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	613b      	str	r3, [r7, #16]
   return(result);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc fb13 	bl	80008dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b6:	bf00      	nop
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b096      	sub	sp, #88	; 0x58
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d4:	2b22      	cmp	r3, #34	; 0x22
 80042d6:	f040 8094 	bne.w	8004402 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80042e8:	b2d9      	uxtb	r1, r3
 80042ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	400a      	ands	r2, r1
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d179      	bne.n	8004416 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004336:	653b      	str	r3, [r7, #80]	; 0x50
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004340:	647b      	str	r3, [r7, #68]	; 0x44
 8004342:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e6      	bne.n	8004322 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	623b      	str	r3, [r7, #32]
   return(result);
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004374:	633a      	str	r2, [r7, #48]	; 0x30
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800437a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	2b01      	cmp	r3, #1
 800439a:	d12e      	bne.n	80043fa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0310 	bic.w	r3, r3, #16
 80043b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	617b      	str	r3, [r7, #20]
   return(result);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e6      	bne.n	80043a2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d103      	bne.n	80043ea <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2210      	movs	r2, #16
 80043e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff f8f4 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043f8:	e00d      	b.n	8004416 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fa7e 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 8004400:	e009      	b.n	8004416 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	8b1b      	ldrh	r3, [r3, #24]
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0208 	orr.w	r2, r2, #8
 8004412:	b292      	uxth	r2, r2
 8004414:	831a      	strh	r2, [r3, #24]
}
 8004416:	bf00      	nop
 8004418:	3758      	adds	r7, #88	; 0x58
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b096      	sub	sp, #88	; 0x58
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800442c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004434:	2b22      	cmp	r3, #34	; 0x22
 8004436:	f040 8094 	bne.w	8004562 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004440:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800444a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800444e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004452:	4013      	ands	r3, r2
 8004454:	b29a      	uxth	r2, r3
 8004456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004458:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	1c9a      	adds	r2, r3, #2
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d179      	bne.n	8004576 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
 80044a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e6      	bne.n	8004482 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d12e      	bne.n	800455a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f023 0310 	bic.w	r3, r3, #16
 8004516:	647b      	str	r3, [r7, #68]	; 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6979      	ldr	r1, [r7, #20]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	613b      	str	r3, [r7, #16]
   return(result);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e6      	bne.n	8004502 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b10      	cmp	r3, #16
 8004540:	d103      	bne.n	800454a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2210      	movs	r2, #16
 8004548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff f844 	bl	80035e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004558:	e00d      	b.n	8004576 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc f9ce 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 8004560:	e009      	b.n	8004576 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	8b1b      	ldrh	r3, [r3, #24]
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0208 	orr.w	r2, r2, #8
 8004572:	b292      	uxth	r2, r2
 8004574:	831a      	strh	r2, [r3, #24]
}
 8004576:	bf00      	nop
 8004578:	3758      	adds	r7, #88	; 0x58
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <SysTick_Handler+0x1c>)
 800459a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800459c:	f000 f990 	bl	80048c0 <xTaskGetSchedulerState>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d001      	beq.n	80045aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045a6:	f000 f9f7 	bl	8004998 <xPortSysTickHandler>
  }
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6892      	ldr	r2, [r2, #8]
 8004612:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6852      	ldr	r2, [r2, #4]
 800461c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d103      	bne.n	8004630 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465a:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <xTaskIncrementTick+0x148>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 808f 	bne.w	8004782 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <xTaskIncrementTick+0x14c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800466c:	4a4b      	ldr	r2, [pc, #300]	; (800479c <xTaskIncrementTick+0x14c>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d120      	bne.n	80046ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004678:	4b49      	ldr	r3, [pc, #292]	; (80047a0 <xTaskIncrementTick+0x150>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <xTaskIncrementTick+0x46>
 8004698:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <xTaskIncrementTick+0x150>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <xTaskIncrementTick+0x154>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3f      	ldr	r2, [pc, #252]	; (80047a0 <xTaskIncrementTick+0x150>)
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <xTaskIncrementTick+0x154>)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	4b3e      	ldr	r3, [pc, #248]	; (80047a8 <xTaskIncrementTick+0x158>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	4a3d      	ldr	r2, [pc, #244]	; (80047a8 <xTaskIncrementTick+0x158>)
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	f000 f8e3 	bl	8004880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046ba:	4b3c      	ldr	r3, [pc, #240]	; (80047ac <xTaskIncrementTick+0x15c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d349      	bcc.n	8004758 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c4:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <xTaskIncrementTick+0x150>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <xTaskIncrementTick+0x15c>)
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d4:	601a      	str	r2, [r3, #0]
					break;
 80046d6:	e03f      	b.n	8004758 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <xTaskIncrementTick+0x150>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d203      	bcs.n	80046f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046f0:	4a2e      	ldr	r2, [pc, #184]	; (80047ac <xTaskIncrementTick+0x15c>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046f6:	e02f      	b.n	8004758 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff7d 	bl	80045fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3318      	adds	r3, #24
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ff74 	bl	80045fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <xTaskIncrementTick+0x160>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d903      	bls.n	8004728 <xTaskIncrementTick+0xd8>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <xTaskIncrementTick+0x160>)
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <xTaskIncrementTick+0x164>)
 8004736:	441a      	add	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f7ff ff38 	bl	80045b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <xTaskIncrementTick+0x168>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	429a      	cmp	r2, r3
 8004750:	d3b8      	bcc.n	80046c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004756:	e7b5      	b.n	80046c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <xTaskIncrementTick+0x168>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	4915      	ldr	r1, [pc, #84]	; (80047b4 <xTaskIncrementTick+0x164>)
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d901      	bls.n	8004774 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <xTaskIncrementTick+0x16c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e004      	b.n	800478c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <xTaskIncrementTick+0x170>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	4a0d      	ldr	r2, [pc, #52]	; (80047c0 <xTaskIncrementTick+0x170>)
 800478a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800478c:	697b      	ldr	r3, [r7, #20]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	200004cc 	.word	0x200004cc
 800479c:	200004b0 	.word	0x200004b0
 80047a0:	200004a8 	.word	0x200004a8
 80047a4:	200004ac 	.word	0x200004ac
 80047a8:	200004c4 	.word	0x200004c4
 80047ac:	200004c8 	.word	0x200004c8
 80047b0:	200004b4 	.word	0x200004b4
 80047b4:	20000048 	.word	0x20000048
 80047b8:	20000044 	.word	0x20000044
 80047bc:	200004c0 	.word	0x200004c0
 80047c0:	200004bc 	.word	0x200004bc

080047c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ca:	4b28      	ldr	r3, [pc, #160]	; (800486c <vTaskSwitchContext+0xa8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047d2:	4b27      	ldr	r3, [pc, #156]	; (8004870 <vTaskSwitchContext+0xac>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047d8:	e041      	b.n	800485e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80047da:	4b25      	ldr	r3, [pc, #148]	; (8004870 <vTaskSwitchContext+0xac>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e0:	4b24      	ldr	r3, [pc, #144]	; (8004874 <vTaskSwitchContext+0xb0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e010      	b.n	800480a <vTaskSwitchContext+0x46>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <vTaskSwitchContext+0x40>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <vTaskSwitchContext+0x3e>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3b01      	subs	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	491b      	ldr	r1, [pc, #108]	; (8004878 <vTaskSwitchContext+0xb4>)
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0e4      	beq.n	80047e8 <vTaskSwitchContext+0x24>
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <vTaskSwitchContext+0xb4>)
 800482a:	4413      	add	r3, r2
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	605a      	str	r2, [r3, #4]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3308      	adds	r3, #8
 8004840:	429a      	cmp	r2, r3
 8004842:	d104      	bne.n	800484e <vTaskSwitchContext+0x8a>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a09      	ldr	r2, [pc, #36]	; (800487c <vTaskSwitchContext+0xb8>)
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4a06      	ldr	r2, [pc, #24]	; (8004874 <vTaskSwitchContext+0xb0>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6013      	str	r3, [r2, #0]
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	200004cc 	.word	0x200004cc
 8004870:	200004c0 	.word	0x200004c0
 8004874:	200004b4 	.word	0x200004b4
 8004878:	20000048 	.word	0x20000048
 800487c:	20000044 	.word	0x20000044

08004880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <prvResetNextTaskUnblockTime+0x38>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004890:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <prvResetNextTaskUnblockTime+0x3c>)
 8004892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004898:	e008      	b.n	80048ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <prvResetNextTaskUnblockTime+0x38>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a04      	ldr	r2, [pc, #16]	; (80048bc <prvResetNextTaskUnblockTime+0x3c>)
 80048aa:	6013      	str	r3, [r2, #0]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	200004a8 	.word	0x200004a8
 80048bc:	200004c8 	.word	0x200004c8

080048c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <xTaskGetSchedulerState+0x34>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048ce:	2301      	movs	r3, #1
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	e008      	b.n	80048e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <xTaskGetSchedulerState+0x38>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048dc:	2302      	movs	r3, #2
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	e001      	b.n	80048e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048e6:	687b      	ldr	r3, [r7, #4]
	}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	200004b8 	.word	0x200004b8
 80048f8:	200004cc 	.word	0x200004cc
 80048fc:	00000000 	.word	0x00000000

08004900 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <pxCurrentTCBConst2>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	f380 8809 	msr	PSP, r0
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	4770      	bx	lr
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst2>:
 8004920:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
	...

08004930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004930:	f3ef 8009 	mrs	r0, PSP
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <pxCurrentTCBConst>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	f01e 0f10 	tst.w	lr, #16
 8004940:	bf08      	it	eq
 8004942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494a:	6010      	str	r0, [r2, #0]
 800494c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004954:	f380 8811 	msr	BASEPRI, r0
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f7ff ff30 	bl	80047c4 <vTaskSwitchContext>
 8004964:	f04f 0000 	mov.w	r0, #0
 8004968:	f380 8811 	msr	BASEPRI, r0
 800496c:	bc09      	pop	{r0, r3}
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	6808      	ldr	r0, [r1, #0]
 8004972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004976:	f01e 0f10 	tst.w	lr, #16
 800497a:	bf08      	it	eq
 800497c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004980:	f380 8809 	msr	PSP, r0
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	f3af 8000 	nop.w

08004990 <pxCurrentTCBConst>:
 8004990:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop

08004998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	607b      	str	r3, [r7, #4]
}
 80049b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049b2:	f7ff fe4d 	bl	8004650 <xTaskIncrementTick>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <xPortSysTickHandler+0x40>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4d0d      	ldr	r5, [pc, #52]	; (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2600      	movs	r6, #0
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4d0b      	ldr	r5, [pc, #44]	; (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	; (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f820 	bl	8004a34 <_init>
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2600      	movs	r6, #0
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08004a9c 	.word	0x08004a9c
 8004a18:	08004a9c 	.word	0x08004a9c
 8004a1c:	08004a9c 	.word	0x08004a9c
 8004a20:	08004aa0 	.word	0x08004aa0

08004a24 <memset>:
 8004a24:	4402      	add	r2, r0
 8004a26:	4603      	mov	r3, r0
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d100      	bne.n	8004a2e <memset+0xa>
 8004a2c:	4770      	bx	lr
 8004a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a32:	e7f9      	b.n	8004a28 <memset+0x4>

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
