
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08007e9c  08007e9c  00017e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b4  080081b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081bc  080081bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080081c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000070  08008234  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08008234  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b45  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000463b  00000000  00000000  00049be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  0004e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  0004fee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cace  00000000  00000000  000519e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021eed  00000000  00000000  0007e4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab79  00000000  00000000  000a03a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001baf1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008540  00000000  00000000  001baf70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e84 	.word	0x08007e84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007e84 	.word	0x08007e84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <MX_ADC1_Init+0xe0>)
 800059c:	4a2f      	ldr	r2, [pc, #188]	; (800065c <MX_ADC1_Init+0xe4>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b2:	4b29      	ldr	r3, [pc, #164]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fa:	4817      	ldr	r0, [pc, #92]	; (8000658 <MX_ADC1_Init+0xe0>)
 80005fc:	f001 f91a 	bl	8001834 <HAL_ADC_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000606:	f000 f9b1 	bl	800096c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000616:	f001 fe79 	bl	800230c <HAL_ADCEx_MultiModeConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 f9a4 	bl	800096c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_ADC1_Init+0xe8>)
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2306      	movs	r3, #6
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000630:	237f      	movs	r3, #127	; 0x7f
 8000632:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_ADC1_Init+0xe0>)
 8000642:	f001 fa4d 	bl	8001ae0 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800064c:	f000 f98e 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000524 	.word	0x20000524
 800065c:	50040000 	.word	0x50040000
 8000660:	43210000 	.word	0x43210000

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2288      	movs	r2, #136	; 0x88
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f006 f985 	bl	8006994 <memset>
  if(adcHandle->Instance==ADC1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_ADC_MspInit+0xc8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d146      	bne.n	8000722 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800069a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006aa:	2308      	movs	r3, #8
 80006ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fff7 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006d0:	f000 f94c 	bl	800096c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006f2:	f043 0302 	orr.w	r3, r3, #2
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800070a:	230b      	movs	r3, #11
 800070c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_ADC_MspInit+0xd0>)
 800071e:	f001 ff87 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000722:	bf00      	nop
 8000724:	37b0      	adds	r7, #176	; 0xb0
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	50040000 	.word	0x50040000
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400

08000738 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b48      	ldr	r3, [pc, #288]	; (8000870 <MX_GPIO_Init+0x138>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a47      	ldr	r2, [pc, #284]	; (8000870 <MX_GPIO_Init+0x138>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <MX_GPIO_Init+0x138>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b42      	ldr	r3, [pc, #264]	; (8000870 <MX_GPIO_Init+0x138>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a41      	ldr	r2, [pc, #260]	; (8000870 <MX_GPIO_Init+0x138>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <MX_GPIO_Init+0x138>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <MX_GPIO_Init+0x138>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a3b      	ldr	r2, [pc, #236]	; (8000870 <MX_GPIO_Init+0x138>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b39      	ldr	r3, [pc, #228]	; (8000870 <MX_GPIO_Init+0x138>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b36      	ldr	r3, [pc, #216]	; (8000870 <MX_GPIO_Init+0x138>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a35      	ldr	r2, [pc, #212]	; (8000870 <MX_GPIO_Init+0x138>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b33      	ldr	r3, [pc, #204]	; (8000870 <MX_GPIO_Init+0x138>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <MX_GPIO_Init+0x138>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <MX_GPIO_Init+0x138>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <MX_GPIO_Init+0x138>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f002 f8d9 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f002 f8d2 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Green_Backlight_Pin|White_Backlight_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80007e6:	4823      	ldr	r0, [pc, #140]	; (8000874 <MX_GPIO_Init+0x13c>)
 80007e8:	f002 f8cc 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <MX_GPIO_Init+0x13c>)
 8000804:	f001 ff14 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000808:	230c      	movs	r3, #12
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000818:	2307      	movs	r3, #7
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f001 ff03 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800082a:	f248 0320 	movw	r3, #32800	; 0x8020
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f001 fef3 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Green_Backlight_Pin|White_Backlight_Pin;
 800084a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_GPIO_Init+0x13c>)
 8000864:	f001 fee4 	bl	8002630 <HAL_GPIO_Init>

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	48000800 	.word	0x48000800

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f000 fdea 	bl	8001454 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f80f 	bl	80008a2 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f7ff ff58 	bl	8000738 <MX_GPIO_Init>
  MX_UART5_Init();
 8000888:	f000 fce6 	bl	8001258 <MX_UART5_Init>
  MX_SPI2_Init();
 800088c:	f000 f98a 	bl	8000ba4 <MX_SPI2_Init>
  MX_RTC_Init();
 8000890:	f000 f872 	bl	8000978 <MX_RTC_Init>
  MX_ADC1_Init();
 8000894:	f7ff fe70 	bl	8000578 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000898:	f000 fbda 	bl	8001050 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  main_test();
 800089c:	f000 fbd2 	bl	8001044 <main_test>
  while(1);
 80008a0:	e7fe      	b.n	80008a0 <main+0x28>

080008a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b096      	sub	sp, #88	; 0x58
 80008a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2244      	movs	r2, #68	; 0x44
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f006 f86f 	bl	8006994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c8:	f002 f882 	bl	80029d0 <HAL_PWREx_ControlVoltageScaling>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d2:	f000 f84b 	bl	800096c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008d6:	230a      	movs	r3, #10
 80008d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2310      	movs	r3, #16
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008f4:	230a      	movs	r3, #10
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008f8:	2307      	movs	r3, #7
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4618      	mov	r0, r3
 800090a:	f002 f8b7 	bl	8002a7c <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000914:	f000 f82a 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	2104      	movs	r1, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fc89 	bl	8003248 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800093c:	f000 f816 	bl	800096c <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3758      	adds	r7, #88	; 0x58
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 fd9b 	bl	8001494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40012c00 	.word	0x40012c00

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_RTC_Init+0xb0>)
 8000992:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <MX_RTC_Init+0xb4>)
 8000994:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <MX_RTC_Init+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_RTC_Init+0xb0>)
 800099e:	227f      	movs	r2, #127	; 0x7f
 80009a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_RTC_Init+0xb0>)
 80009a4:	22ff      	movs	r2, #255	; 0xff
 80009a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_RTC_Init+0xb0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_RTC_Init+0xb0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_RTC_Init+0xb0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_RTC_Init+0xb0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c0:	4819      	ldr	r0, [pc, #100]	; (8000a28 <MX_RTC_Init+0xb0>)
 80009c2:	f003 fb35 	bl	8004030 <HAL_RTC_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009cc:	f7ff ffce 	bl	800096c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009d8:	2300      	movs	r3, #0
 80009da:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <MX_RTC_Init+0xb0>)
 80009ec:	f003 fb9b 	bl	8004126 <HAL_RTC_SetTime>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009f6:	f7ff ffb9 	bl	800096c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80009fa:	2303      	movs	r3, #3
 80009fc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 80009fe:	2312      	movs	r3, #18
 8000a00:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x22;
 8000a02:	2322      	movs	r3, #34	; 0x22
 8000a04:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8000a06:	2321      	movs	r3, #33	; 0x21
 8000a08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_RTC_Init+0xb0>)
 8000a12:	f003 fc81 	bl	8004318 <HAL_RTC_SetDate>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a1c:	f7ff ffa6 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000588 	.word	0x20000588
 8000a2c:	40002800 	.word	0x40002800

08000a30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0a4      	sub	sp, #144	; 0x90
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2288      	movs	r2, #136	; 0x88
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f005 ffa7 	bl	8006994 <memset>
  if(rtcHandle->Instance==RTC)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_RTC_MspInit+0x5c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d118      	bne.n	8000a82 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fe28 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a6e:	f7ff ff7d 	bl	800096c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_RTC_MspInit+0x60>)
 8000a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a78:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <HAL_RTC_MspInit+0x60>)
 8000a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a82:	bf00      	nop
 8000a84:	3790      	adds	r7, #144	; 0x90
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40002800 	.word	0x40002800
 8000a90:	40021000 	.word	0x40021000

08000a94 <RTC_Error>:
/**
 * @brief Called when an error generated during RTC interaction has
 * been detected.
 * @note Activates the LD2 led on the Nucleo board and loops infinitely.
 */
void RTC_Error() {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f001 ff70 	bl	8002984 <HAL_GPIO_WritePin>
    while (1) {}
 8000aa4:	e7fe      	b.n	8000aa4 <RTC_Error+0x10>
	...

08000aa8 <rtc_set_time>:

/**
 * @brief Set the RTC time.
 * @param tstr[in]: time string on format "HH:MM:SS".
 */
void rtc_set_time(uint8_t tstr[]) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
    char *del = ":";
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <rtc_set_time+0x80>)
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24

    char *token = strtok((char*)tstr, del); //tokenize tstr on given delimiter
 8000ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f005 ff8c 	bl	80069e4 <strtok>
 8000acc:	6238      	str	r0, [r7, #32]
    time.Hours = atoi(token);
 8000ace:	6a38      	ldr	r0, [r7, #32]
 8000ad0:	f005 ff24 	bl	800691c <atoi>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	733b      	strb	r3, [r7, #12]
    token = strtok(NULL, del);
 8000ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000adc:	2000      	movs	r0, #0
 8000ade:	f005 ff81 	bl	80069e4 <strtok>
 8000ae2:	6238      	str	r0, [r7, #32]
    time.Minutes = atoi(token);
 8000ae4:	6a38      	ldr	r0, [r7, #32]
 8000ae6:	f005 ff19 	bl	800691c <atoi>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	737b      	strb	r3, [r7, #13]
    token = strtok(NULL, del);
 8000af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000af2:	2000      	movs	r0, #0
 8000af4:	f005 ff76 	bl	80069e4 <strtok>
 8000af8:	6238      	str	r0, [r7, #32]
    time.Seconds = atoi(token);
 8000afa:	6a38      	ldr	r0, [r7, #32]
 8000afc:	f005 ff0e 	bl	800691c <atoi>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	73bb      	strb	r3, [r7, #14]

    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4807      	ldr	r0, [pc, #28]	; (8000b2c <rtc_set_time+0x84>)
 8000b10:	f003 fb09 	bl	8004126 <HAL_RTC_SetTime>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <rtc_set_time+0x76>
	RTC_Error();
 8000b1a:	f7ff ffbb 	bl	8000a94 <RTC_Error>
    }
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08007e9c 	.word	0x08007e9c
 8000b2c:	20000588 	.word	0x20000588

08000b30 <rtc_get_time>:
/**
  * @brief Retrieval function for the current RTC time.
  * @param buffer[out]: buffer to store the current time.
  * @note Date function is called to properly retreive the time.
  */
void rtc_get_time(uint8_t buffer[]) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef time = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef date = {0};
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]

    if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <rtc_get_time+0x6c>)
 8000b56:	f003 fb83 	bl	8004260 <HAL_RTC_GetTime>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <rtc_get_time+0x34>
	RTC_Error();
 8000b60:	f7ff ff98 	bl	8000a94 <RTC_Error>
    }

    if (HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) {
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <rtc_get_time+0x6c>)
 8000b6e:	f003 fc5a 	bl	8004426 <HAL_RTC_GetDate>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <rtc_get_time+0x4c>
	RTC_Error();
 8000b78:	f7ff ff8c 	bl	8000a94 <RTC_Error>
    }

    sprintf((char*)buffer, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000b7c:	7b3b      	ldrb	r3, [r7, #12]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	7b7b      	ldrb	r3, [r7, #13]
 8000b82:	4619      	mov	r1, r3
 8000b84:	7bbb      	ldrb	r3, [r7, #14]
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4905      	ldr	r1, [pc, #20]	; (8000ba0 <rtc_get_time+0x70>)
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f005 ff09 	bl	80069a4 <siprintf>
}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000588 	.word	0x20000588
 8000ba0:	08007ea0 	.word	0x08007ea0

08000ba4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 0 */
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <MX_SPI2_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bbc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bc0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bd4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bdc:	2230      	movs	r2, #48	; 0x30
 8000bde:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI2_Init+0x74>)
 8000c06:	f003 fd2d 	bl	8004664 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000c10:	f7ff feac 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200005ac 	.word	0x200005ac
 8000c1c:	40003800 	.word	0x40003800

08000c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <HAL_SPI_MspInit+0xb4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d144      	bne.n	8000ccc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */
  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a24      	ldr	r2, [pc, #144]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_SPI_MspInit+0xb8>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <HAL_SPI_MspInit+0xbc>)
 8000ca6:	f001 fcc3 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000caa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <HAL_SPI_MspInit+0xc0>)
 8000cc8:	f001 fcb2 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */
  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40003800 	.word	0x40003800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	48000400 	.word	0x48000400

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	f06f 0001 	mvn.w	r0, #1
 8000d22:	f001 fc5b 	bl	80025dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2019      	movs	r0, #25
 8000d4a:	f001 fc47 	bl	80025dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d4e:	2019      	movs	r0, #25
 8000d50:	f001 fc60 	bl	8002614 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_InitTick+0x9c>)
 8000d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_InitTick+0x9c>)
 8000d5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_InitTick+0x9c>)
 8000d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d6c:	f107 0210 	add.w	r2, r7, #16
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fc0c 	bl	8003594 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d7c:	f002 fbf4 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8000d80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_InitTick+0xa0>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0c9b      	lsrs	r3, r3, #18
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_InitTick+0xa8>)
 8000d94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000d98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000db2:	f003 fcfa 	bl	80047aa <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d104      	bne.n	8000dc6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000dbe:	f003 fd4b 	bl	8004858 <HAL_TIM_Base_Start_IT>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	20000610 	.word	0x20000610
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e12:	f003 fdf2 	bl	80049fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000610 	.word	0x20000610

08000e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	return 1;
 8000e24:	2301      	movs	r3, #1
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_kill>:

int _kill(int pid, int sig)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e3a:	f005 fd73 	bl	8006924 <__errno>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2216      	movs	r2, #22
 8000e42:	601a      	str	r2, [r3, #0]
	return -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_exit>:

void _exit (int status)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffe7 	bl	8000e30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e62:	e7fe      	b.n	8000e62 <_exit+0x12>

08000e64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e00a      	b.n	8000e8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e76:	f3af 8000 	nop.w
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	b2ca      	uxtb	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf0      	blt.n	8000e76 <_read+0x12>
	}

return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e009      	b.n	8000ec4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf1      	blt.n	8000eb0 <_write+0x12>
	}
	return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:

int _close(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_isatty>:

int _isatty(int file)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return 1;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f005 fcd8 	bl	8006924 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20018000 	.word	0x20018000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	2000008c 	.word	0x2000008c
 8000fa8:	20000740 	.word	0x20000740

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <test_rtc>:
/**
 * @brief Testing that RTC time is correctly set and
 * counts correctly. Visual result shown over uart.
 * @note uart needs to be working beforehand.
 */
void test_rtc() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
    uint8_t timestr1[] = "23:59:58";
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <test_rtc+0x6c>)
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fde:	c303      	stmia	r3!, {r0, r1}
 8000fe0:	701a      	strb	r2, [r3, #0]
    uint8_t currtime[8];

    rtc_set_time(timestr1);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fd5e 	bl	8000aa8 <rtc_set_time>
    uint8_t i = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]
    while (i < 5) {
 8000ff0:	e01c      	b.n	800102c <test_rtc+0x5c>
	HAL_Delay(999);
 8000ff2:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000ff6:	f000 fa6d 	bl	80014d4 <HAL_Delay>
	rtc_get_time(currtime);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fd97 	bl	8000b30 <rtc_get_time>
	uart_transmit(currtime, strlen((char*)currtime));
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8e3 	bl	80001d0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f9dc 	bl	80013d0 <uart_transmit>
	HAL_Delay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f000 fa5b 	bl	80014d4 <HAL_Delay>
	uart_transmit((uint8_t*)"\r\n", 2);
 800101e:	2102      	movs	r1, #2
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <test_rtc+0x70>)
 8001022:	f000 f9d5 	bl	80013d0 <uart_transmit>
	i++;
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	3301      	adds	r3, #1
 800102a:	75fb      	strb	r3, [r7, #23]
    while (i < 5) {
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b04      	cmp	r3, #4
 8001030:	d9df      	bls.n	8000ff2 <test_rtc+0x22>
    }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08007eb4 	.word	0x08007eb4
 8001040:	08007eb0 	.word	0x08007eb0

08001044 <main_test>:
    display_write_line((uint8_t*)"   DONE", 7, 2);
    HAL_Delay(1000);
    display_write_line((uint8_t*)"", 0, 2);
}

void main_test() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
//    test_uart();
    test_rtc();
 8001048:	f7ff ffc2 	bl	8000fd0 <test_rtc>
//    test_display();
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b09a      	sub	sp, #104	; 0x68
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	222c      	movs	r2, #44	; 0x2c
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fc82 	bl	8006994 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <MX_TIM8_Init+0x150>)
 8001092:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <MX_TIM8_Init+0x154>)
 8001094:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4000;
 8001096:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <MX_TIM8_Init+0x150>)
 8001098:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800109c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b40      	ldr	r3, [pc, #256]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 80010a4:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010a6:	2264      	movs	r2, #100	; 0x64
 80010a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010b0:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010bc:	4838      	ldr	r0, [pc, #224]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010be:	f003 fb74 	bl	80047aa <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80010c8:	f7ff fc50 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010d6:	4619      	mov	r1, r3
 80010d8:	4831      	ldr	r0, [pc, #196]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010da:	f003 fec1 	bl	8004e60 <HAL_TIM_ConfigClockSource>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80010e4:	f7ff fc42 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010e8:	482d      	ldr	r0, [pc, #180]	; (80011a0 <MX_TIM8_Init+0x150>)
 80010ea:	f003 fc25 	bl	8004938 <HAL_TIM_PWM_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80010f4:	f7ff fc3a 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001104:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001108:	4619      	mov	r1, r3
 800110a:	4825      	ldr	r0, [pc, #148]	; (80011a0 <MX_TIM8_Init+0x150>)
 800110c:	f004 fba4 	bl	8005858 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001116:	f7ff fc29 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111a:	2360      	movs	r3, #96	; 0x60
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 800111e:	2332      	movs	r3, #50	; 0x32
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001122:	2300      	movs	r3, #0
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113a:	2204      	movs	r2, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <MX_TIM8_Init+0x150>)
 8001140:	f003 fd7a 	bl	8004c38 <HAL_TIM_PWM_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800114a:	f7ff fc0f 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <MX_TIM8_Init+0x150>)
 8001184:	f004 fbf0 	bl	8005968 <HAL_TIMEx_ConfigBreakDeadTime>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800118e:	f7ff fbed 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <MX_TIM8_Init+0x150>)
 8001194:	f000 f828 	bl	80011e8 <HAL_TIM_MspPostInit>

}
 8001198:	bf00      	nop
 800119a:	3768      	adds	r7, #104	; 0x68
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000065c 	.word	0x2000065c
 80011a4:	40013400 	.word	0x40013400

080011a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_TIM_Base_MspInit+0x38>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10b      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_TIM_Base_MspInit+0x3c>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_TIM_Base_MspInit+0x3c>)
 80011c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c4:	6613      	str	r3, [r2, #96]	; 0x60
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_TIM_Base_MspInit+0x3c>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40013400 	.word	0x40013400
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_TIM_MspPostInit+0x64>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d11b      	bne.n	8001242 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_TIM_MspPostInit+0x68>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_TIM_MspPostInit+0x68>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_TIM_MspPostInit+0x68>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001232:	2303      	movs	r3, #3
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_TIM_MspPostInit+0x6c>)
 800123e:	f001 f9f7 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40013400 	.word	0x40013400
 8001250:	40021000 	.word	0x40021000
 8001254:	48000800 	.word	0x48000800

08001258 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_UART5_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_UART5_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_UART5_Init+0x58>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_UART5_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_UART5_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_UART5_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_UART5_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_UART5_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_UART5_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_UART5_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_UART5_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_UART5_Init+0x58>)
 800129c:	f004 fc00 	bl	8005aa0 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80012a6:	f7ff fb61 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200006a8 	.word	0x200006a8
 80012b4:	40005000 	.word	0x40005000

080012b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0ac      	sub	sp, #176	; 0xb0
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2288      	movs	r2, #136	; 0x88
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 fb5b 	bl	8006994 <memset>
  if(uartHandle->Instance==UART5)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_UART_MspInit+0xf4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d15c      	bne.n	80013a2 <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80012e8:	2310      	movs	r3, #16
 80012ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 f9df 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001300:	f7ff fb34 	bl	800096c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 800130a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800130e:	6593      	str	r3, [r2, #88]	; 0x58
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001320:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_UART_MspInit+0xf8>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001366:	2308      	movs	r3, #8
 8001368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001370:	4619      	mov	r1, r3
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <HAL_UART_MspInit+0xfc>)
 8001374:	f001 f95c 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001378:	2304      	movs	r3, #4
 800137a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001390:	2308      	movs	r3, #8
 8001392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001396:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139a:	4619      	mov	r1, r3
 800139c:	4806      	ldr	r0, [pc, #24]	; (80013b8 <HAL_UART_MspInit+0x100>)
 800139e:	f001 f947 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80013a2:	bf00      	nop
 80013a4:	37b0      	adds	r7, #176	; 0xb0
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40005000 	.word	0x40005000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000800 	.word	0x48000800
 80013b8:	48000c00 	.word	0x48000c00

080013bc <UART_Error>:
/**
 * @brief Called when an error generated during UART communication
 * has been detected.
 * @note Enables the LD2 LED on the Nucleo board and loops infinitely.
 */
void UART_Error() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2120      	movs	r1, #32
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f001 fadc 	bl	8002984 <HAL_GPIO_WritePin>
    while (1) {}
 80013cc:	e7fe      	b.n	80013cc <UART_Error+0x10>
	...

080013d0 <uart_transmit>:
/**
  * @brief UART transmission entry point.
  * @param buffer[in]: the buffer of data to transmit.
  * @param size[in]: amount of bytes to transmit.
  */
void uart_transmit(uint8_t buffer[], uint16_t size) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
    /* uart in reception process */
    if (HAL_UART_Transmit(&huart5, buffer, size, 100) != HAL_OK) {
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <uart_transmit+0x2c>)
 80013e4:	f004 fbaa 	bl	8005b3c <HAL_UART_Transmit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <uart_transmit+0x22>
	UART_Error();
 80013ee:	f7ff ffe5 	bl	80013bc <UART_Error>
    }
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200006a8 	.word	0x200006a8

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff fdd2 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f005 fa7f 	bl	8006930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff fa21 	bl	8000878 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001444:	080081c4 	.word	0x080081c4
  ldr r2, =_sbss
 8001448:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800144c:	20000740 	.word	0x20000740

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>
	...

08001454 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_Init+0x3c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_Init+0x3c>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146a:	2003      	movs	r0, #3
 800146c:	f001 f8ab 	bl	80025c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001470:	200f      	movs	r0, #15
 8001472:	f7ff fc5f 	bl	8000d34 <HAL_InitTick>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	e001      	b.n	8001486 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001482:	f7ff fc2f 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001486:	79fb      	ldrb	r3, [r7, #7]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40022000 	.word	0x40022000

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	2000072c 	.word	0x2000072c

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000072c 	.word	0x2000072c

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	609a      	str	r2, [r3, #8]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3360      	adds	r3, #96	; 0x60
 8001596:	461a      	mov	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <LL_ADC_SetOffset+0x44>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	4313      	orrs	r3, r2
 80015b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	03fff000 	.word	0x03fff000

080015cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3360      	adds	r3, #96	; 0x60
 80015da:	461a      	mov	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3360      	adds	r3, #96	; 0x60
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001622:	bf00      	nop
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800162e:	b480      	push	{r7}
 8001630:	b087      	sub	sp, #28
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3330      	adds	r3, #48	; 0x30
 800163e:	461a      	mov	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	211f      	movs	r1, #31
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0e9b      	lsrs	r3, r3, #26
 8001666:	f003 011f 	and.w	r1, r3, #31
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001686:	b480      	push	{r7}
 8001688:	b087      	sub	sp, #28
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3314      	adds	r3, #20
 8001696:	461a      	mov	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0e5b      	lsrs	r3, r3, #25
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0d1b      	lsrs	r3, r3, #20
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2107      	movs	r1, #7
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0d1b      	lsrs	r3, r3, #20
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0318 	and.w	r3, r3, #24
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001700:	40d9      	lsrs	r1, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	400b      	ands	r3, r1
 8001706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	0007ffff 	.word	0x0007ffff

08001724 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6093      	str	r3, [r2, #8]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800175c:	d101      	bne.n	8001762 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001780:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001784:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017ac:	d101      	bne.n	80017b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <LL_ADC_IsEnabled+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_ADC_IsEnabled+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d101      	bne.n	80017fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d101      	bne.n	8001824 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e136      	b.n	8001abc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe ff01 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff67 	bl	8001748 <LL_ADC_IsDeepPowerDownEnabled>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff4d 	bl	8001724 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff82 	bl	8001798 <LL_ADC_IsInternalRegulatorEnabled>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff66 	bl	8001770 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018a4:	4b87      	ldr	r3, [pc, #540]	; (8001ac4 <HAL_ADC_Init+0x290>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	4a87      	ldr	r2, [pc, #540]	; (8001ac8 <HAL_ADC_Init+0x294>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	3301      	adds	r3, #1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff64 	bl	8001798 <LL_ADC_IsInternalRegulatorEnabled>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10d      	bne.n	80018f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff75 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 80018fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80cf 	bne.w	8001aaa <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 80cb 	bne.w	8001aaa <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff49 	bl	80017c0 <LL_ADC_IsEnabled>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d115      	bne.n	8001960 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001934:	4865      	ldr	r0, [pc, #404]	; (8001acc <HAL_ADC_Init+0x298>)
 8001936:	f7ff ff43 	bl	80017c0 <LL_ADC_IsEnabled>
 800193a:	4604      	mov	r4, r0
 800193c:	4864      	ldr	r0, [pc, #400]	; (8001ad0 <HAL_ADC_Init+0x29c>)
 800193e:	f7ff ff3f 	bl	80017c0 <LL_ADC_IsEnabled>
 8001942:	4603      	mov	r3, r0
 8001944:	431c      	orrs	r4, r3
 8001946:	4863      	ldr	r0, [pc, #396]	; (8001ad4 <HAL_ADC_Init+0x2a0>)
 8001948:	f7ff ff3a 	bl	80017c0 <LL_ADC_IsEnabled>
 800194c:	4603      	mov	r3, r0
 800194e:	4323      	orrs	r3, r4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4619      	mov	r1, r3
 800195a:	485f      	ldr	r0, [pc, #380]	; (8001ad8 <HAL_ADC_Init+0x2a4>)
 800195c:	f7ff fdde 	bl	800151c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7e5b      	ldrb	r3, [r3, #25]
 8001964:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001970:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001976:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d106      	bne.n	800199c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	3b01      	subs	r3, #1
 8001994:	045b      	lsls	r3, r3, #17
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_ADC_Init+0x2a8>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff08 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 80019d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff15 	bl	800180c <LL_ADC_INJ_IsConversionOngoing>
 80019e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d13d      	bne.n	8001a66 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d13a      	bne.n	8001a66 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a0c:	f023 0302 	bic.w	r3, r3, #2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	69b9      	ldr	r1, [r7, #24]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d118      	bne.n	8001a56 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a2e:	f023 0304 	bic.w	r3, r3, #4
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a46:	430a      	orrs	r2, r1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	e007      	b.n	8001a66 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d10c      	bne.n	8001a88 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	f023 010f 	bic.w	r1, r3, #15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
 8001a86:	e007      	b.n	8001a98 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 020f 	bic.w	r2, r2, #15
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	f023 0303 	bic.w	r3, r3, #3
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
 8001aa8:	e007      	b.n	8001aba <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f043 0210 	orr.w	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3724      	adds	r7, #36	; 0x24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	053e2d63 	.word	0x053e2d63
 8001acc:	50040000 	.word	0x50040000
 8001ad0:	50040100 	.word	0x50040100
 8001ad4:	50040200 	.word	0x50040200
 8001ad8:	50040300 	.word	0x50040300
 8001adc:	fff0c007 	.word	0xfff0c007

08001ae0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0b6      	sub	sp, #216	; 0xd8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x22>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e3c7      	b.n	8002292 <HAL_ADC_ConfigChannel+0x7b2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fe69 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 83a8 	bne.w	800226c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d824      	bhi.n	8001b6e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	3b02      	subs	r3, #2
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d81b      	bhi.n	8001b66 <HAL_ADC_ConfigChannel+0x86>
 8001b2e:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <HAL_ADC_ConfigChannel+0x54>)
 8001b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b34:	08001b45 	.word	0x08001b45
 8001b38:	08001b4d 	.word	0x08001b4d
 8001b3c:	08001b55 	.word	0x08001b55
 8001b40:	08001b5d 	.word	0x08001b5d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	220c      	movs	r2, #12
 8001b48:	605a      	str	r2, [r3, #4]
          break;
 8001b4a:	e011      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2212      	movs	r2, #18
 8001b50:	605a      	str	r2, [r3, #4]
          break;
 8001b52:	e00d      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2218      	movs	r2, #24
 8001b58:	605a      	str	r2, [r3, #4]
          break;
 8001b5a:	e009      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b62:	605a      	str	r2, [r3, #4]
          break;
 8001b64:	e004      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2206      	movs	r2, #6
 8001b6a:	605a      	str	r2, [r3, #4]
          break;
 8001b6c:	e000      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b6e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f7ff fd56 	bl	800162e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe2d 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 8001b8c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fe39 	bl	800180c <LL_ADC_INJ_IsConversionOngoing>
 8001b9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 81a6 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 81a1 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f7ff fd61 	bl	8001686 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	08db      	lsrs	r3, r3, #3
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d00a      	beq.n	8001bfc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bf6:	f7ff fcc5 	bl	8001584 <LL_ADC_SetOffset>
 8001bfa:	e17b      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fce2 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10a      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x148>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fcd7 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	f003 021f 	and.w	r2, r3, #31
 8001c26:	e01e      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x186>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fccc 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e004      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x19e>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0e9b      	lsrs	r3, r3, #26
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	e018      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x1d0>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e004      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d106      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fc9b 	bl	80015f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fc7f 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x20e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fc74 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	e01e      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x24c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fc69 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	e004      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x264>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	e018      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x296>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e004      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d106      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2101      	movs	r1, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fc38 	bl	80015f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fc1c 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x2d4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2102      	movs	r1, #2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fc11 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	0e9b      	lsrs	r3, r3, #26
 8001dae:	f003 021f 	and.w	r2, r3, #31
 8001db2:	e01e      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x312>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2102      	movs	r1, #2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fc06 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001de2:	2320      	movs	r3, #32
 8001de4:	e004      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x32a>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	e016      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x358>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	e004      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d106      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	2102      	movs	r1, #2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fbd7 	bl	80015f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2103      	movs	r1, #3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbbb 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x396>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2103      	movs	r1, #3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fbb0 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	0e9b      	lsrs	r3, r3, #26
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	e017      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x3c6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fba5 	bl	80015cc <LL_ADC_GetOffsetChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e003      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x3de>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	e011      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x402>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ece:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e003      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d106      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2103      	movs	r1, #3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fb82 	bl	80015f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fc61 	bl	80017c0 <LL_ADC_IsEnabled>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f040 813f 	bne.w	8002184 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f7ff fbe2 	bl	80016dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a8e      	ldr	r2, [pc, #568]	; (8002158 <HAL_ADC_ConfigChannel+0x678>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	f040 8130 	bne.w	8002184 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10b      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x46c>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	bf94      	ite	ls
 8001f44:	2301      	movls	r3, #1
 8001f46:	2300      	movhi	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e019      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x4a0>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	bf94      	ite	ls
 8001f7a:	2301      	movls	r3, #1
 8001f7c:	2300      	movhi	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d079      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x4c0>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	3301      	adds	r3, #1
 8001f98:	069b      	lsls	r3, r3, #26
 8001f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9e:	e015      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x4ec>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e003      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	069b      	lsls	r3, r3, #26
 8001fc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x50c>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	e017      	b.n	800201c <HAL_ADC_ConfigChannel+0x53c>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ffc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	ea42 0103 	orr.w	r1, r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x562>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	3301      	adds	r3, #1
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	051b      	lsls	r3, r3, #20
 8002040:	e018      	b.n	8002074 <HAL_ADC_ConfigChannel+0x594>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800205a:	2320      	movs	r3, #32
 800205c:	e003      	b.n	8002066 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800205e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002074:	430b      	orrs	r3, r1
 8002076:	e080      	b.n	800217a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x5b4>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	3301      	adds	r3, #1
 800208c:	069b      	lsls	r3, r3, #26
 800208e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002092:	e015      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x5e0>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x600>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	3301      	adds	r3, #1
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	e017      	b.n	8002110 <HAL_ADC_ConfigChannel+0x630>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	61fb      	str	r3, [r7, #28]
  return result;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e003      	b.n	8002104 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	ea42 0103 	orr.w	r1, r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_ADC_ConfigChannel+0x65c>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	3301      	adds	r3, #1
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	3b1e      	subs	r3, #30
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213a:	e01d      	b.n	8002178 <HAL_ADC_ConfigChannel+0x698>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	613b      	str	r3, [r7, #16]
  return result;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e005      	b.n	8002164 <HAL_ADC_ConfigChannel+0x684>
 8002158:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3301      	adds	r3, #1
 8002166:	f003 021f 	and.w	r2, r3, #31
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	3b1e      	subs	r3, #30
 8002172:	051b      	lsls	r3, r3, #20
 8002174:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002178:	430b      	orrs	r3, r1
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	6892      	ldr	r2, [r2, #8]
 800217e:	4619      	mov	r1, r3
 8002180:	f7ff fa81 	bl	8001686 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <HAL_ADC_ConfigChannel+0x7bc>)
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d07a      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002190:	4843      	ldr	r0, [pc, #268]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002192:	f7ff f9e9 	bl	8001568 <LL_ADC_GetCommonPathInternalCh>
 8002196:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a41      	ldr	r2, [pc, #260]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d12c      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d126      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_ADC_ConfigChannel+0x6e4>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_ADC_ConfigChannel+0x7cc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d15d      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021cc:	4619      	mov	r1, r3
 80021ce:	4834      	ldr	r0, [pc, #208]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80021d0:	f7ff f9b7 	bl	8001542 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021ee:	e002      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f9      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021fc:	e040      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d118      	bne.n	800223a <HAL_ADC_ConfigChannel+0x75a>
 8002208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800220c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d112      	bne.n	800223a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_ADC_ConfigChannel+0x748>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_ADC_ConfigChannel+0x7cc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12d      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800222c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002230:	4619      	mov	r1, r3
 8002232:	481b      	ldr	r0, [pc, #108]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002234:	f7ff f985 	bl	8001542 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002238:	e024      	b.n	8002284 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <HAL_ADC_ConfigChannel+0x7dc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d120      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11a      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d115      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800225e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002262:	4619      	mov	r1, r3
 8002264:	480e      	ldr	r0, [pc, #56]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002266:	f7ff f96c 	bl	8001542 <LL_ADC_SetCommonPathInternalCh>
 800226a:	e00c      	b.n	8002286 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800227e:	e002      	b.n	8002286 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002280:	bf00      	nop
 8002282:	e000      	b.n	8002286 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002284:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800228e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002292:	4618      	mov	r0, r3
 8002294:	37d8      	adds	r7, #216	; 0xd8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	80080000 	.word	0x80080000
 80022a0:	50040300 	.word	0x50040300
 80022a4:	c7520000 	.word	0xc7520000
 80022a8:	50040000 	.word	0x50040000
 80022ac:	50040200 	.word	0x50040200
 80022b0:	20000000 	.word	0x20000000
 80022b4:	053e2d63 	.word	0x053e2d63
 80022b8:	cb840000 	.word	0xcb840000
 80022bc:	80000001 	.word	0x80000001

080022c0 <LL_ADC_IsEnabled>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <LL_ADC_IsEnabled+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_ADC_IsEnabled+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d101      	bne.n	80022fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b09f      	sub	sp, #124	; 0x7c
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002326:	2302      	movs	r3, #2
 8002328:	e093      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002332:	2300      	movs	r3, #0
 8002334:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002336:	2300      	movs	r3, #0
 8002338:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d102      	bne.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002344:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	e001      	b.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e072      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffb9 	bl	80022e6 <LL_ADC_REG_IsConversionOngoing>
 8002374:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ffb3 	bl	80022e6 <LL_ADC_REG_IsConversionOngoing>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d154      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002388:	2b00      	cmp	r3, #0
 800238a:	d151      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800238e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d02c      	beq.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023aa:	035b      	lsls	r3, r3, #13
 80023ac:	430b      	orrs	r3, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023b4:	4829      	ldr	r0, [pc, #164]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023b6:	f7ff ff83 	bl	80022c0 <LL_ADC_IsEnabled>
 80023ba:	4604      	mov	r4, r0
 80023bc:	4828      	ldr	r0, [pc, #160]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023be:	f7ff ff7f 	bl	80022c0 <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	431c      	orrs	r4, r3
 80023c6:	4828      	ldr	r0, [pc, #160]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023c8:	f7ff ff7a 	bl	80022c0 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4323      	orrs	r3, r4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d137      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023dc:	f023 030f 	bic.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	6811      	ldr	r1, [r2, #0]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023f0:	e028      	b.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fe:	4817      	ldr	r0, [pc, #92]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002400:	f7ff ff5e 	bl	80022c0 <LL_ADC_IsEnabled>
 8002404:	4604      	mov	r4, r0
 8002406:	4816      	ldr	r0, [pc, #88]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002408:	f7ff ff5a 	bl	80022c0 <LL_ADC_IsEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	431c      	orrs	r4, r3
 8002410:	4815      	ldr	r0, [pc, #84]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002412:	f7ff ff55 	bl	80022c0 <LL_ADC_IsEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	4323      	orrs	r3, r4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d112      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002426:	f023 030f 	bic.w	r3, r3, #15
 800242a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800242c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800242e:	e009      	b.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002442:	e000      	b.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800244e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002452:	4618      	mov	r0, r3
 8002454:	377c      	adds	r7, #124	; 0x7c
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	50040000 	.word	0x50040000
 8002460:	50040100 	.word	0x50040100
 8002464:	50040300 	.word	0x50040300
 8002468:	50040200 	.word	0x50040200

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff4c 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025ee:	f7ff ff61 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 80025f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f7ff ffb1 	bl	8002560 <NVIC_EncodePriority>
 80025fe:	4602      	mov	r2, r0
 8002600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff80 	bl	800250c <__NVIC_SetPriority>
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff54 	bl	80024d0 <__NVIC_EnableIRQ>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	e17f      	b.n	8002940 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8171 	beq.w	800293a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d005      	beq.n	8002670 <HAL_GPIO_Init+0x40>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d130      	bne.n	80026d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026a6:	2201      	movs	r2, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0201 	and.w	r2, r3, #1
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d118      	bne.n	8002710 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026e4:	2201      	movs	r2, #1
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	08db      	lsrs	r3, r3, #3
 80026fa:	f003 0201 	and.w	r2, r3, #1
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b03      	cmp	r3, #3
 800271a:	d017      	beq.n	800274c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d123      	bne.n	80027a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	08da      	lsrs	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3208      	adds	r2, #8
 800279a:	6939      	ldr	r1, [r7, #16]
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80ac 	beq.w	800293a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_GPIO_Init+0x330>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	4a5e      	ldr	r2, [pc, #376]	; (8002960 <HAL_GPIO_Init+0x330>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6613      	str	r3, [r2, #96]	; 0x60
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_GPIO_Init+0x330>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027fa:	4a5a      	ldr	r2, [pc, #360]	; (8002964 <HAL_GPIO_Init+0x334>)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x242>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <HAL_GPIO_Init+0x338>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x23e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_GPIO_Init+0x33c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x23a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4d      	ldr	r2, [pc, #308]	; (8002970 <HAL_GPIO_Init+0x340>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x236>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4c      	ldr	r2, [pc, #304]	; (8002974 <HAL_GPIO_Init+0x344>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x232>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_GPIO_Init+0x348>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x22e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4a      	ldr	r2, [pc, #296]	; (800297c <HAL_GPIO_Init+0x34c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x22a>
 8002856:	2306      	movs	r3, #6
 8002858:	e00c      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800285a:	2307      	movs	r3, #7
 800285c:	e00a      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800285e:	2305      	movs	r3, #5
 8002860:	e008      	b.n	8002874 <HAL_GPIO_Init+0x244>
 8002862:	2304      	movs	r3, #4
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x244>
 8002866:	2303      	movs	r3, #3
 8002868:	e004      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800286a:	2302      	movs	r3, #2
 800286c:	e002      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_GPIO_Init+0x244>
 8002872:	2300      	movs	r3, #0
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	f002 0203 	and.w	r2, r2, #3
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	4093      	lsls	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002884:	4937      	ldr	r1, [pc, #220]	; (8002964 <HAL_GPIO_Init+0x334>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_GPIO_Init+0x350>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_GPIO_Init+0x350>)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_GPIO_Init+0x350>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <HAL_GPIO_Init+0x350>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f47f ae78 	bne.w	8002640 <HAL_GPIO_Init+0x10>
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000
 8002968:	48000400 	.word	0x48000400
 800296c:	48000800 	.word	0x48000800
 8002970:	48000c00 	.word	0x48000c00
 8002974:	48001000 	.word	0x48001000
 8002978:	48001400 	.word	0x48001400
 800297c:	48001800 	.word	0x48001800
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029a0:	e002      	b.n	80029a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <HAL_PWREx_GetVoltageRange+0x18>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000

080029d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029de:	d130      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ec:	d038      	beq.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2232      	movs	r2, #50	; 0x32
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	3301      	adds	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a14:	e002      	b.n	8002a1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d102      	bne.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f2      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3c:	d110      	bne.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e00f      	b.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d007      	beq.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40007000 	.word	0x40007000
 8002a74:	20000000 	.word	0x20000000
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e3d4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8e:	4ba1      	ldr	r3, [pc, #644]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a98:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80e4 	beq.w	8002c78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4a>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	f040 808b 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 8087 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x62>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e3ac      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1a      	ldr	r2, [r3, #32]
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_RCC_OscConfig+0x7c>
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_OscConfig+0x88>
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d223      	bcs.n	8002b50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fd73 	bl	80035f8 <RCC_SetFlashLatencyFromMSIRange>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e38d      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b22:	f043 0308 	orr.w	r3, r3, #8
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4977      	ldr	r1, [pc, #476]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4972      	ldr	r1, [pc, #456]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
 8002b4e:	e025      	b.n	8002b9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b50:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6f      	ldr	r2, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b56:	f043 0308 	orr.w	r3, r3, #8
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	496a      	ldr	r1, [pc, #424]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4965      	ldr	r1, [pc, #404]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fd33 	bl	80035f8 <RCC_SetFlashLatencyFromMSIRange>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e34d      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b9c:	f000 fc36 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	495a      	ldr	r1, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x2a0>)
 8002bba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bbc:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x2a4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe f8b7 	bl	8000d34 <HAL_InitTick>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d052      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	e331      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d032      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fc68 	bl	80014bc <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fc64 	bl	80014bc <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e31a      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c02:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	493b      	ldr	r1, [pc, #236]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	4936      	ldr	r1, [pc, #216]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
 8002c40:	e01a      	b.n	8002c78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c42:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fc35 	bl	80014bc <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c56:	f7fe fc31 	bl	80014bc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e2e7      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x1da>
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d074      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x21a>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d10e      	bne.n	8002cae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d10b      	bne.n	8002cae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d064      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d160      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e2c4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x24a>
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e01d      	b.n	8002d02 <HAL_RCC_OscConfig+0x286>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x26e>
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x286>
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fbd7 	bl	80014bc <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d10:	e011      	b.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08007f20 	.word	0x08007f20
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fbca 	bl	80014bc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e280      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d36:	4baf      	ldr	r3, [pc, #700]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2a8>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fbba 	bl	80014bc <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fbb6 	bl	80014bc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e26c      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2d0>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d060      	beq.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x310>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d116      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	4b99      	ldr	r3, [pc, #612]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x328>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e249      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4990      	ldr	r1, [pc, #576]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db8:	e040      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d023      	beq.n	8002e0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc2:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a8b      	ldr	r2, [pc, #556]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fb75 	bl	80014bc <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fb71 	bl	80014bc <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e227      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b7f      	ldr	r3, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	497c      	ldr	r1, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	e018      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe fb51 	bl	80014bc <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fb4d 	bl	80014bc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e203      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e30:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e56:	4a67      	ldr	r2, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe fb2c 	bl	80014bc <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fe fb28 	bl	80014bc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1de      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ef      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3ec>
 8002e88:	e01b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe fb0f 	bl	80014bc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fb0b 	bl	80014bc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1c1      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ef      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a6 	beq.w	800301c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	4a43      	ldr	r2, [pc, #268]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d118      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f14:	f7fe fad2 	bl	80014bc <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1c:	f7fe face 	bl	80014bc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e184      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4d8>
 8002f42:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f52:	e024      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d110      	bne.n	8002f7e <HAL_RCC_OscConfig+0x502>
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7c:	e00f      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d016      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe fa89 	bl	80014bc <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe fa85 	bl	80014bc <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e139      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0ed      	beq.n	8002fae <HAL_RCC_OscConfig+0x532>
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fa72 	bl	80014bc <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fda:	e00f      	b.n	8002ffc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fa6e 	bl	80014bc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d906      	bls.n	8002ffc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e122      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ffc:	4b90      	ldr	r3, [pc, #576]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e8      	bne.n	8002fdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7ffb      	ldrb	r3, [r7, #31]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b8b      	ldr	r3, [pc, #556]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a8a      	ldr	r2, [pc, #552]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8108 	beq.w	8003236 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b02      	cmp	r3, #2
 800302c:	f040 80d0 	bne.w	80031d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003030:	4b83      	ldr	r3, [pc, #524]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d130      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	3b01      	subs	r3, #1
 8003050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d127      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d11f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003070:	2a07      	cmp	r2, #7
 8003072:	bf14      	ite	ne
 8003074:	2201      	movne	r2, #1
 8003076:	2200      	moveq	r2, #0
 8003078:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	3b01      	subs	r3, #1
 800308c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d06e      	beq.n	8003184 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d069      	beq.n	8003180 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ac:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b7      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030c8:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d4:	f7fe f9f2 	bl	80014bc <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe f9ee 	bl	80014bc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0a4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCC_OscConfig+0x7c8>)
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800310a:	3a01      	subs	r2, #1
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003114:	0212      	lsls	r2, r2, #8
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800311c:	0852      	lsrs	r2, r2, #1
 800311e:	3a01      	subs	r2, #1
 8003120:	0552      	lsls	r2, r2, #21
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003128:	0852      	lsrs	r2, r2, #1
 800312a:	3a01      	subs	r2, #1
 800312c:	0652      	lsls	r2, r2, #25
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003134:	0912      	lsrs	r2, r2, #4
 8003136:	0452      	lsls	r2, r2, #17
 8003138:	430a      	orrs	r2, r1
 800313a:	4941      	ldr	r1, [pc, #260]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3e      	ldr	r2, [pc, #248]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003158:	f7fe f9b0 	bl	80014bc <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe f9ac 	bl	80014bc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e062      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800317e:	e05a      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e059      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d152      	bne.n	8003236 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a8:	f7fe f988 	bl	80014bc <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe f984 	bl	80014bc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e03a      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x734>
 80031ce:	e032      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d02d      	beq.n	8003232 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031f4:	f023 0303 	bic.w	r3, r3, #3
 80031f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003200:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe f957 	bl	80014bc <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe f953 	bl	80014bc <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e009      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x796>
 8003230:	e001      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	f99d808c 	.word	0xf99d808c

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0c8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	4961      	ldr	r1, [pc, #388]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b0      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d04c      	beq.n	8003332 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a0:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d121      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e09e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e092      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e086      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e07e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	493f      	ldr	r1, [pc, #252]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003302:	f7fe f8db 	bl	80014bc <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003308:	e00a      	b.n	8003320 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330a:	f7fe f8d7 	bl	80014bc <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e066      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 020c 	and.w	r2, r3, #12
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	429a      	cmp	r2, r3
 8003330:	d1eb      	bne.n	800330a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333e:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	492c      	ldr	r1, [pc, #176]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d210      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	4924      	ldr	r1, [pc, #144]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e036      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4918      	ldr	r1, [pc, #96]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4910      	ldr	r1, [pc, #64]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033be:	f000 f825 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	490c      	ldr	r1, [pc, #48]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fca6 	bl	8000d34 <HAL_InitTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ec:	7afb      	ldrb	r3, [r7, #11]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	08007f20 	.word	0x08007f20
 8003404:	20000000 	.word	0x20000000
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d121      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d11e      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e005      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800345c:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <HAL_RCC_GetSysClockFreq+0x10c>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d102      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e004      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d101      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_RCC_GetSysClockFreq+0x114>)
 8003492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b0c      	cmp	r3, #12
 8003498:	d134      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d003      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0xac>
 80034b0:	e005      	b.n	80034be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 80034b4:	617b      	str	r3, [r7, #20]
      break;
 80034b6:	e005      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ba:	617b      	str	r3, [r7, #20]
      break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	3301      	adds	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	fb02 f203 	mul.w	r2, r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	0e5b      	lsrs	r3, r3, #25
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	3301      	adds	r3, #1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003504:	69bb      	ldr	r3, [r7, #24]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	08007f38 	.word	0x08007f38
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000000 	.word	0x20000000

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4904      	ldr	r1, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	08007f30 	.word	0x08007f30

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800356c:	f7ff ffda 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0adb      	lsrs	r3, r3, #11
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	08007f30 	.word	0x08007f30

08003594 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	220f      	movs	r2, #15
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <HAL_RCC_GetClockConfig+0x60>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40022000 	.word	0x40022000

080035f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003610:	f7ff f9d0 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 8003614:	6178      	str	r0, [r7, #20]
 8003616:	e014      	b.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	4a24      	ldr	r2, [pc, #144]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003622:	6593      	str	r3, [r2, #88]	; 0x58
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003630:	f7ff f9c0 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 8003634:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003640:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d10b      	bne.n	8003662 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d919      	bls.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2ba0      	cmp	r3, #160	; 0xa0
 8003654:	d902      	bls.n	800365c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003656:	2302      	movs	r3, #2
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e013      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800365c:	2301      	movs	r3, #1
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	e010      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d902      	bls.n	800366e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003668:	2303      	movs	r3, #3
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e00a      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d102      	bne.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003674:	2302      	movs	r3, #2
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	e004      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d101      	bne.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003680:	2301      	movs	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 0207 	bic.w	r2, r3, #7
 800368c:	4909      	ldr	r1, [pc, #36]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40022000 	.word	0x40022000

080036b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036c0:	2300      	movs	r3, #0
 80036c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c4:	2300      	movs	r3, #0
 80036c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d041      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036dc:	d02a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036e2:	d824      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ee:	d81e      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f8:	d010      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036fa:	e018      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036fc:	4b86      	ldr	r3, [pc, #536]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a85      	ldr	r2, [pc, #532]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003708:	e015      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fabb 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371a:	e00c      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3320      	adds	r3, #32
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fba6 	bl	8003e74 <RCCEx_PLLSAI2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800372c:	e003      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	74fb      	strb	r3, [r7, #19]
      break;
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800373c:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374a:	4973      	ldr	r1, [pc, #460]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003752:	e001      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d041      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003768:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800376c:	d02a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800376e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003772:	d824      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003778:	d008      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800377a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800377e:	d81e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003788:	d010      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800378a:	e018      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800378c:	4b62      	ldr	r3, [pc, #392]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a61      	ldr	r2, [pc, #388]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003798:	e015      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fa73 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037aa:	e00c      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3320      	adds	r3, #32
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fb5e 	bl	8003e74 <RCCEx_PLLSAI2_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	74fb      	strb	r3, [r7, #19]
      break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037cc:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037da:	494f      	ldr	r1, [pc, #316]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80a0 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f6:	2300      	movs	r3, #0
 80037f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a40      	ldr	r2, [pc, #256]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003828:	2301      	movs	r3, #1
 800382a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3a      	ldr	r2, [pc, #232]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003838:	f7fd fe40 	bl	80014bc <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800383e:	e009      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fd fe3c 	bl	80014bc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	74fb      	strb	r3, [r7, #19]
        break;
 8003852:	e005      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003854:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d15c      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	d019      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a20      	ldr	r2, [pc, #128]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd fdfb 	bl	80014bc <HAL_GetTick>
 80038c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c8:	e00b      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd fdf7 	bl	80014bc <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d902      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	74fb      	strb	r3, [r7, #19]
            break;
 80038e0:	e006      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ec      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003906:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003924:	7c7b      	ldrb	r3, [r7, #17]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392a:	4b9e      	ldr	r3, [pc, #632]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	4a9d      	ldr	r2, [pc, #628]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003942:	4b98      	ldr	r3, [pc, #608]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	4994      	ldr	r1, [pc, #592]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003964:	4b8f      	ldr	r3, [pc, #572]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 020c 	bic.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	498c      	ldr	r1, [pc, #560]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003986:	4b87      	ldr	r3, [pc, #540]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	4983      	ldr	r1, [pc, #524]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a8:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	497b      	ldr	r1, [pc, #492]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	4972      	ldr	r1, [pc, #456]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ec:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	496a      	ldr	r1, [pc, #424]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	4961      	ldr	r1, [pc, #388]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a30:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	4959      	ldr	r1, [pc, #356]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a52:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	4950      	ldr	r1, [pc, #320]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	4948      	ldr	r1, [pc, #288]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	493f      	ldr	r1, [pc, #252]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d028      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab8:	4b3a      	ldr	r3, [pc, #232]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac6:	4937      	ldr	r1, [pc, #220]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae2:	60d3      	str	r3, [r2, #12]
 8003ae4:	e011      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f8c8 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b16:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	491f      	ldr	r1, [pc, #124]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b40:	60d3      	str	r3, [r2, #12]
 8003b42:	e011      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2101      	movs	r1, #1
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f899 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d02b      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a02      	ldr	r2, [pc, #8]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9e:	60d3      	str	r3, [r2, #12]
 8003ba0:	e014      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f867 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02f      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be6:	4928      	ldr	r1, [pc, #160]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d10d      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f844 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d014      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	74bb      	strb	r3, [r7, #18]
 8003c12:	e011      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3320      	adds	r3, #32
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f925 	bl	8003e74 <RCCEx_PLLSAI2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c52:	490d      	ldr	r1, [pc, #52]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c76:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000

08003c8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c9a:	4b75      	ldr	r3, [pc, #468]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d018      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ca6:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d047      	beq.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e044      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d018      	beq.n	8003d12 <RCCEx_PLLSAI1_Config+0x86>
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d825      	bhi.n	8003d30 <RCCEx_PLLSAI1_Config+0xa4>
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d002      	beq.n	8003cee <RCCEx_PLLSAI1_Config+0x62>
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d009      	beq.n	8003d00 <RCCEx_PLLSAI1_Config+0x74>
 8003cec:	e020      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cee:	4b60      	ldr	r3, [pc, #384]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfe:	e01a      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d00:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d116      	bne.n	8003d3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e013      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d12:	4b57      	ldr	r3, [pc, #348]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d1e:	4b54      	ldr	r3, [pc, #336]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d2e:	e006      	b.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e004      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	4944      	ldr	r1, [pc, #272]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d17d      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d68:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a40      	ldr	r2, [pc, #256]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fba2 	bl	80014bc <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d7a:	e009      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d7c:	f7fd fb9e 	bl	80014bc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d8e:	e005      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d90:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ef      	bne.n	8003d7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d160      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d111      	bne.n	8003dcc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6892      	ldr	r2, [r2, #8]
 8003db8:	0211      	lsls	r1, r2, #8
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	0912      	lsrs	r2, r2, #4
 8003dc0:	0452      	lsls	r2, r2, #17
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	492a      	ldr	r1, [pc, #168]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
 8003dca:	e027      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d112      	bne.n	8003df8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd2:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6892      	ldr	r2, [r2, #8]
 8003de2:	0211      	lsls	r1, r2, #8
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6912      	ldr	r2, [r2, #16]
 8003de8:	0852      	lsrs	r2, r2, #1
 8003dea:	3a01      	subs	r2, #1
 8003dec:	0552      	lsls	r2, r2, #21
 8003dee:	430a      	orrs	r2, r1
 8003df0:	491f      	ldr	r1, [pc, #124]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	610b      	str	r3, [r1, #16]
 8003df6:	e011      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6892      	ldr	r2, [r2, #8]
 8003e08:	0211      	lsls	r1, r2, #8
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6952      	ldr	r2, [r2, #20]
 8003e0e:	0852      	lsrs	r2, r2, #1
 8003e10:	3a01      	subs	r2, #1
 8003e12:	0652      	lsls	r2, r2, #25
 8003e14:	430a      	orrs	r2, r1
 8003e16:	4916      	ldr	r1, [pc, #88]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd fb48 	bl	80014bc <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e2e:	e009      	b.n	8003e44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e30:	f7fd fb44 	bl	80014bc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	73fb      	strb	r3, [r7, #15]
          break;
 8003e42:	e005      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	4904      	ldr	r1, [pc, #16]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000

08003e74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e82:	4b6a      	ldr	r3, [pc, #424]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e8e:	4b67      	ldr	r3, [pc, #412]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0203 	and.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d10d      	bne.n	8003eba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ea6:	4b61      	ldr	r3, [pc, #388]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d047      	beq.n	8003f4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	e044      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d018      	beq.n	8003efa <RCCEx_PLLSAI2_Config+0x86>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d825      	bhi.n	8003f18 <RCCEx_PLLSAI2_Config+0xa4>
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d002      	beq.n	8003ed6 <RCCEx_PLLSAI2_Config+0x62>
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d009      	beq.n	8003ee8 <RCCEx_PLLSAI2_Config+0x74>
 8003ed4:	e020      	b.n	8003f18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ed6:	4b55      	ldr	r3, [pc, #340]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11d      	bne.n	8003f1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee6:	e01a      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d116      	bne.n	8003f22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef8:	e013      	b.n	8003f22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003efa:	4b4c      	ldr	r3, [pc, #304]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f16:	e006      	b.n	8003f26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e004      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	430b      	orrs	r3, r1
 8003f44:	4939      	ldr	r1, [pc, #228]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d167      	bne.n	8004020 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f50:	4b36      	ldr	r3, [pc, #216]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a35      	ldr	r2, [pc, #212]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5c:	f7fd faae 	bl	80014bc <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f62:	e009      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f64:	f7fd faaa 	bl	80014bc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d902      	bls.n	8003f78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	73fb      	strb	r3, [r7, #15]
        break;
 8003f76:	e005      	b.n	8003f84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f78:	4b2c      	ldr	r3, [pc, #176]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ef      	bne.n	8003f64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d14a      	bne.n	8004020 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d111      	bne.n	8003fb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6892      	ldr	r2, [r2, #8]
 8003fa0:	0211      	lsls	r1, r2, #8
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68d2      	ldr	r2, [r2, #12]
 8003fa6:	0912      	lsrs	r2, r2, #4
 8003fa8:	0452      	lsls	r2, r2, #17
 8003faa:	430a      	orrs	r2, r1
 8003fac:	491f      	ldr	r1, [pc, #124]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	614b      	str	r3, [r1, #20]
 8003fb2:	e011      	b.n	8003fd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6892      	ldr	r2, [r2, #8]
 8003fc4:	0211      	lsls	r1, r2, #8
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6912      	ldr	r2, [r2, #16]
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0652      	lsls	r2, r2, #25
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	4916      	ldr	r1, [pc, #88]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fd8:	4b14      	ldr	r3, [pc, #80]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd fa6a 	bl	80014bc <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fea:	e009      	b.n	8004000 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fec:	f7fd fa66 	bl	80014bc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	73fb      	strb	r3, [r7, #15]
          break;
 8003ffe:	e005      	b.n	800400c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ef      	beq.n	8003fec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4904      	ldr	r1, [pc, #16]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 800401c:	4313      	orrs	r3, r2
 800401e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d06c      	beq.n	800411c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fcea 	bl	8000a30 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	22ca      	movs	r2, #202	; 0xca
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2253      	movs	r2, #83	; 0x53
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fa49 	bl	800450c <RTC_EnterInitMode>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d14b      	bne.n	800411c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004096:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68d2      	ldr	r2, [r2, #12]
 80040be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6919      	ldr	r1, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	041a      	lsls	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fa4d 	bl	8004574 <RTC_ExitInitMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d11b      	bne.n	800411c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0203 	bic.w	r2, r2, #3
 80040f2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004126:	b590      	push	{r4, r7, lr}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_RTC_SetTime+0x1a>
 800413c:	2302      	movs	r3, #2
 800413e:	e08b      	b.n	8004258 <HAL_RTC_SetTime+0x132>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	22ca      	movs	r2, #202	; 0xca
 8004156:	625a      	str	r2, [r3, #36]	; 0x24
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2253      	movs	r2, #83	; 0x53
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f9d3 	bl	800450c <RTC_EnterInitMode>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d163      	bne.n	8004238 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d126      	bne.n	80041c4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fa2e 	bl	80045f0 <RTC_ByteToBcd2>
 8004194:	4603      	mov	r3, r0
 8004196:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fa27 	bl	80045f0 <RTC_ByteToBcd2>
 80041a2:	4603      	mov	r3, r0
 80041a4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041a6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fa1f 	bl	80045f0 <RTC_ByteToBcd2>
 80041b2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041b4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	78db      	ldrb	r3, [r3, #3]
 80041bc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e018      	b.n	80041f6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2200      	movs	r2, #0
 80041d6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041e4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041ea:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	78db      	ldrb	r3, [r3, #3]
 80041f0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004200:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004204:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004214:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f9a0 	bl	8004574 <RTC_ExitInitMode>
 8004234:	4603      	mov	r3, r0
 8004236:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	22ff      	movs	r2, #255	; 0xff
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d103      	bne.n	800424e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004256:	7cfb      	ldrb	r3, [r7, #19]
}
 8004258:	4618      	mov	r0, r3
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd90      	pop	{r4, r7, pc}

08004260 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800428e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004292:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	0d9b      	lsrs	r3, r3, #22
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11a      	bne.n	800430e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f9a7 	bl	8004630 <RTC_Bcd2ToByte>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f99e 	bl	8004630 <RTC_Bcd2ToByte>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f995 	bl	8004630 <RTC_Bcd2ToByte>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004318:	b590      	push	{r4, r7, lr}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_RTC_SetDate+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e075      	b.n	800441e <HAL_RTC_SetDate+0x106>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10e      	bne.n	8004366 <HAL_RTC_SetDate+0x4e>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	b2db      	uxtb	r3, r3
 800435e:	330a      	adds	r3, #10
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11c      	bne.n	80043a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	78db      	ldrb	r3, [r3, #3]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f93d 	bl	80045f0 <RTC_ByteToBcd2>
 8004376:	4603      	mov	r3, r0
 8004378:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f936 	bl	80045f0 <RTC_ByteToBcd2>
 8004384:	4603      	mov	r3, r0
 8004386:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004388:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	789b      	ldrb	r3, [r3, #2]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f92e 	bl	80045f0 <RTC_ByteToBcd2>
 8004394:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004396:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e00e      	b.n	80043c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	78db      	ldrb	r3, [r3, #3]
 80043aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	785b      	ldrb	r3, [r3, #1]
 80043b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80043b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80043b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	22ca      	movs	r2, #202	; 0xca
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2253      	movs	r2, #83	; 0x53
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f899 	bl	800450c <RTC_EnterInitMode>
 80043da:	4603      	mov	r3, r0
 80043dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10c      	bne.n	80043fe <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043f2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f8bd 	bl	8004574 <RTC_ExitInitMode>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	22ff      	movs	r2, #255	; 0xff
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800441c:	7cfb      	ldrb	r3, [r7, #19]
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}

08004426 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800443c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004440:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	0b5b      	lsrs	r3, r3, #13
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11a      	bne.n	80044b6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f8d3 	bl	8004630 <RTC_Bcd2ToByte>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	785b      	ldrb	r3, [r3, #1]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f8ca 	bl	8004630 <RTC_Bcd2ToByte>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	789b      	ldrb	r3, [r3, #2]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f8c1 	bl	8004630 <RTC_Bcd2ToByte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044d6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80044d8:	f7fc fff0 	bl	80014bc <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044de:	e009      	b.n	80044f4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044e0:	f7fc ffec 	bl	80014bc <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ee:	d901      	bls.n	80044f4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e007      	b.n	8004504 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ee      	beq.n	80044e0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d120      	bne.n	8004568 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800452e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004530:	f7fc ffc4 	bl	80014bc <HAL_GetTick>
 8004534:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004536:	e00d      	b.n	8004554 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004538:	f7fc ffc0 	bl	80014bc <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004546:	d905      	bls.n	8004554 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2203      	movs	r2, #3
 8004550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <RTC_EnterInitMode+0x5c>
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d1e7      	bne.n	8004538 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <RTC_ExitInitMode+0x78>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <RTC_ExitInitMode+0x78>)
 8004586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800458a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800458c:	4b17      	ldr	r3, [pc, #92]	; (80045ec <RTC_ExitInitMode+0x78>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10c      	bne.n	80045b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff91 	bl	80044c0 <HAL_RTC_WaitForSynchro>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01e      	beq.n	80045e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2203      	movs	r2, #3
 80045a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e017      	b.n	80045e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <RTC_ExitInitMode+0x78>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <RTC_ExitInitMode+0x78>)
 80045b8:	f023 0320 	bic.w	r3, r3, #32
 80045bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ff7e 	bl	80044c0 <HAL_RTC_WaitForSynchro>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2203      	movs	r2, #3
 80045ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <RTC_ExitInitMode+0x78>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <RTC_ExitInitMode+0x78>)
 80045dc:	f043 0320 	orr.w	r3, r3, #32
 80045e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40002800 	.word	0x40002800

080045f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004602:	e005      	b.n	8004610 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	3b0a      	subs	r3, #10
 800460e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	2b09      	cmp	r3, #9
 8004614:	d8f6      	bhi.n	8004604 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	b2da      	uxtb	r2, r3
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	4313      	orrs	r3, r2
 8004622:	b2db      	uxtb	r3, r3
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	0092      	lsls	r2, r2, #2
 8004644:	4413      	add	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	b2da      	uxtb	r2, r3
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	4413      	add	r3, r2
 8004656:	b2db      	uxtb	r3, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e095      	b.n	80047a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	d108      	bne.n	8004690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004686:	d009      	beq.n	800469c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	61da      	str	r2, [r3, #28]
 800468e:	e005      	b.n	800469c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc fab2 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046dc:	d902      	bls.n	80046e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e002      	b.n	80046ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80046f2:	d007      	beq.n	8004704 <HAL_SPI_Init+0xa0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	ea42 0103 	orr.w	r1, r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	0c1b      	lsrs	r3, r3, #16
 8004760:	f003 0204 	and.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004780:	ea42 0103 	orr.w	r1, r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e049      	b.n	8004850 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fc fce9 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f000 fc2b 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d001      	beq.n	8004870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e04f      	b.n	8004910 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a23      	ldr	r2, [pc, #140]	; (800491c <HAL_TIM_Base_Start_IT+0xc4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d018      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_TIM_Base_Start_IT+0xc8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <HAL_TIM_Base_Start_IT+0xcc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_TIM_Base_Start_IT+0xd0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HAL_TIM_Base_Start_IT+0xd4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIM_Base_Start_IT+0x76>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_TIM_Base_Start_IT+0xd8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d115      	bne.n	80048fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b17      	ldr	r3, [pc, #92]	; (8004934 <HAL_TIM_Base_Start_IT+0xdc>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d015      	beq.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d011      	beq.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	e008      	b.n	800490c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e000      	b.n	800490e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40013400 	.word	0x40013400
 8004930:	40014000 	.word	0x40014000
 8004934:	00010007 	.word	0x00010007

08004938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e049      	b.n	80049de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f841 	bl	80049e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 fb64 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d122      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d11b      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0202 	mvn.w	r2, #2
 8004a26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fae2 	bl	8005006 <HAL_TIM_IC_CaptureCallback>
 8004a42:	e005      	b.n	8004a50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fad4 	bl	8004ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fae5 	bl	800501a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d122      	bne.n	8004aaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d11b      	bne.n	8004aaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0204 	mvn.w	r2, #4
 8004a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fab8 	bl	8005006 <HAL_TIM_IC_CaptureCallback>
 8004a96:	e005      	b.n	8004aa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 faaa 	bl	8004ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fabb 	bl	800501a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d122      	bne.n	8004afe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d11b      	bne.n	8004afe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0208 	mvn.w	r2, #8
 8004ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fa8e 	bl	8005006 <HAL_TIM_IC_CaptureCallback>
 8004aea:	e005      	b.n	8004af8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa80 	bl	8004ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa91 	bl	800501a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d122      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d11b      	bne.n	8004b52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0210 	mvn.w	r2, #16
 8004b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2208      	movs	r2, #8
 8004b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fa64 	bl	8005006 <HAL_TIM_IC_CaptureCallback>
 8004b3e:	e005      	b.n	8004b4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fa56 	bl	8004ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa67 	bl	800501a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d10e      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0201 	mvn.w	r2, #1
 8004b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fb fee5 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b88:	2b80      	cmp	r3, #128	; 0x80
 8004b8a:	d10e      	bne.n	8004baa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b80      	cmp	r3, #128	; 0x80
 8004b98:	d107      	bne.n	8004baa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 ff67 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 ff5a 	bl	8005a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d10e      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d107      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa15 	bl	800502e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d10e      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d107      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0220 	mvn.w	r2, #32
 8004c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 ff1a 	bl	8005a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0ff      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b14      	cmp	r3, #20
 8004c62:	f200 80f0 	bhi.w	8004e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c66:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004e47 	.word	0x08004e47
 8004c74:	08004e47 	.word	0x08004e47
 8004c78:	08004e47 	.word	0x08004e47
 8004c7c:	08004d01 	.word	0x08004d01
 8004c80:	08004e47 	.word	0x08004e47
 8004c84:	08004e47 	.word	0x08004e47
 8004c88:	08004e47 	.word	0x08004e47
 8004c8c:	08004d43 	.word	0x08004d43
 8004c90:	08004e47 	.word	0x08004e47
 8004c94:	08004e47 	.word	0x08004e47
 8004c98:	08004e47 	.word	0x08004e47
 8004c9c:	08004d83 	.word	0x08004d83
 8004ca0:	08004e47 	.word	0x08004e47
 8004ca4:	08004e47 	.word	0x08004e47
 8004ca8:	08004e47 	.word	0x08004e47
 8004cac:	08004dc5 	.word	0x08004dc5
 8004cb0:	08004e47 	.word	0x08004e47
 8004cb4:	08004e47 	.word	0x08004e47
 8004cb8:	08004e47 	.word	0x08004e47
 8004cbc:	08004e05 	.word	0x08004e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fa56 	bl	8005178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0208 	orr.w	r2, r2, #8
 8004cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0204 	bic.w	r2, r2, #4
 8004cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6999      	ldr	r1, [r3, #24]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	619a      	str	r2, [r3, #24]
      break;
 8004cfe:	e0a5      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fac6 	bl	8005298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6999      	ldr	r1, [r3, #24]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	021a      	lsls	r2, r3, #8
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	619a      	str	r2, [r3, #24]
      break;
 8004d40:	e084      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fb2f 	bl	80053ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0208 	orr.w	r2, r2, #8
 8004d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0204 	bic.w	r2, r2, #4
 8004d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69d9      	ldr	r1, [r3, #28]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	61da      	str	r2, [r3, #28]
      break;
 8004d80:	e064      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fb97 	bl	80054bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69d9      	ldr	r1, [r3, #28]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	021a      	lsls	r2, r3, #8
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	61da      	str	r2, [r3, #28]
      break;
 8004dc2:	e043      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fbe0 	bl	8005590 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0208 	orr.w	r2, r2, #8
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0204 	bic.w	r2, r2, #4
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e02:	e023      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fc24 	bl	8005658 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	021a      	lsls	r2, r3, #8
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e44:	e002      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop

08004e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e0b6      	b.n	8004fea <HAL_TIM_ConfigClockSource+0x18a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb8:	d03e      	beq.n	8004f38 <HAL_TIM_ConfigClockSource+0xd8>
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	f200 8087 	bhi.w	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec6:	f000 8086 	beq.w	8004fd6 <HAL_TIM_ConfigClockSource+0x176>
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	d87f      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004ed0:	2b70      	cmp	r3, #112	; 0x70
 8004ed2:	d01a      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0xaa>
 8004ed4:	2b70      	cmp	r3, #112	; 0x70
 8004ed6:	d87b      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004ed8:	2b60      	cmp	r3, #96	; 0x60
 8004eda:	d050      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x11e>
 8004edc:	2b60      	cmp	r3, #96	; 0x60
 8004ede:	d877      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004ee0:	2b50      	cmp	r3, #80	; 0x50
 8004ee2:	d03c      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0xfe>
 8004ee4:	2b50      	cmp	r3, #80	; 0x50
 8004ee6:	d873      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d058      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0x13e>
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d86f      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004ef0:	2b30      	cmp	r3, #48	; 0x30
 8004ef2:	d064      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x15e>
 8004ef4:	2b30      	cmp	r3, #48	; 0x30
 8004ef6:	d86b      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d060      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x15e>
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d867      	bhi.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d05c      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x15e>
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d05a      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0x15e>
 8004f08:	e062      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6899      	ldr	r1, [r3, #8]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f000 fc7d 	bl	8005818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]
      break;
 8004f36:	e04f      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	6899      	ldr	r1, [r3, #8]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f000 fc66 	bl	8005818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f5a:	609a      	str	r2, [r3, #8]
      break;
 8004f5c:	e03c      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f000 fbda 	bl	8005724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2150      	movs	r1, #80	; 0x50
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fc33 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8004f7c:	e02c      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6859      	ldr	r1, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f000 fbf9 	bl	8005782 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2160      	movs	r1, #96	; 0x60
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fc23 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8004f9c:	e01c      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f000 fbba 	bl	8005724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2140      	movs	r1, #64	; 0x40
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fc13 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8004fbc:	e00c      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fc0a 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 8004fce:	e003      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd4:	e000      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a40      	ldr	r2, [pc, #256]	; (8005158 <TIM_Base_SetConfig+0x114>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005062:	d00f      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a3d      	ldr	r2, [pc, #244]	; (800515c <TIM_Base_SetConfig+0x118>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00b      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a3c      	ldr	r2, [pc, #240]	; (8005160 <TIM_Base_SetConfig+0x11c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a3b      	ldr	r2, [pc, #236]	; (8005164 <TIM_Base_SetConfig+0x120>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a3a      	ldr	r2, [pc, #232]	; (8005168 <TIM_Base_SetConfig+0x124>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d108      	bne.n	8005096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2f      	ldr	r2, [pc, #188]	; (8005158 <TIM_Base_SetConfig+0x114>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01f      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d01b      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2c      	ldr	r2, [pc, #176]	; (800515c <TIM_Base_SetConfig+0x118>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d017      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <TIM_Base_SetConfig+0x11c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <TIM_Base_SetConfig+0x120>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <TIM_Base_SetConfig+0x124>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a28      	ldr	r2, [pc, #160]	; (800516c <TIM_Base_SetConfig+0x128>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a27      	ldr	r2, [pc, #156]	; (8005170 <TIM_Base_SetConfig+0x12c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_Base_SetConfig+0x9a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a26      	ldr	r2, [pc, #152]	; (8005174 <TIM_Base_SetConfig+0x130>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a10      	ldr	r2, [pc, #64]	; (8005158 <TIM_Base_SetConfig+0x114>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00f      	beq.n	800513c <TIM_Base_SetConfig+0xf8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a12      	ldr	r2, [pc, #72]	; (8005168 <TIM_Base_SetConfig+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00b      	beq.n	800513c <TIM_Base_SetConfig+0xf8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a11      	ldr	r2, [pc, #68]	; (800516c <TIM_Base_SetConfig+0x128>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_Base_SetConfig+0xf8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a10      	ldr	r2, [pc, #64]	; (8005170 <TIM_Base_SetConfig+0x12c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_Base_SetConfig+0xf8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a0f      	ldr	r2, [pc, #60]	; (8005174 <TIM_Base_SetConfig+0x130>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d103      	bne.n	8005144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	615a      	str	r2, [r3, #20]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800

08005178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 0302 	bic.w	r3, r3, #2
 80051c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <TIM_OC1_SetConfig+0x10c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00f      	beq.n	80051f8 <TIM_OC1_SetConfig+0x80>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <TIM_OC1_SetConfig+0x110>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_OC1_SetConfig+0x80>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a2a      	ldr	r2, [pc, #168]	; (800528c <TIM_OC1_SetConfig+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_OC1_SetConfig+0x80>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a29      	ldr	r2, [pc, #164]	; (8005290 <TIM_OC1_SetConfig+0x118>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC1_SetConfig+0x80>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_OC1_SetConfig+0x11c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10c      	bne.n	8005212 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0308 	bic.w	r3, r3, #8
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0304 	bic.w	r3, r3, #4
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <TIM_OC1_SetConfig+0x10c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00f      	beq.n	800523a <TIM_OC1_SetConfig+0xc2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <TIM_OC1_SetConfig+0x110>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_OC1_SetConfig+0xc2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <TIM_OC1_SetConfig+0x114>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_OC1_SetConfig+0xc2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a18      	ldr	r2, [pc, #96]	; (8005290 <TIM_OC1_SetConfig+0x118>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC1_SetConfig+0xc2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a17      	ldr	r2, [pc, #92]	; (8005294 <TIM_OC1_SetConfig+0x11c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d111      	bne.n	800525e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40013400 	.word	0x40013400
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800

08005298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0210 	bic.w	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0320 	bic.w	r3, r3, #32
 80052e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a28      	ldr	r2, [pc, #160]	; (8005398 <TIM_OC2_SetConfig+0x100>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC2_SetConfig+0x6c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a27      	ldr	r2, [pc, #156]	; (800539c <TIM_OC2_SetConfig+0x104>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10d      	bne.n	8005320 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <TIM_OC2_SetConfig+0x100>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00f      	beq.n	8005348 <TIM_OC2_SetConfig+0xb0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1c      	ldr	r2, [pc, #112]	; (800539c <TIM_OC2_SetConfig+0x104>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_OC2_SetConfig+0xb0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <TIM_OC2_SetConfig+0x108>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_OC2_SetConfig+0xb0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <TIM_OC2_SetConfig+0x10c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_OC2_SetConfig+0xb0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <TIM_OC2_SetConfig+0x110>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d113      	bne.n	8005370 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40013400 	.word	0x40013400
 80053a0:	40014000 	.word	0x40014000
 80053a4:	40014400 	.word	0x40014400
 80053a8:	40014800 	.word	0x40014800

080053ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a27      	ldr	r2, [pc, #156]	; (80054a8 <TIM_OC3_SetConfig+0xfc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC3_SetConfig+0x6a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a26      	ldr	r2, [pc, #152]	; (80054ac <TIM_OC3_SetConfig+0x100>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d10d      	bne.n	8005432 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800541c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <TIM_OC3_SetConfig+0xfc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00f      	beq.n	800545a <TIM_OC3_SetConfig+0xae>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a1b      	ldr	r2, [pc, #108]	; (80054ac <TIM_OC3_SetConfig+0x100>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_OC3_SetConfig+0xae>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1a      	ldr	r2, [pc, #104]	; (80054b0 <TIM_OC3_SetConfig+0x104>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <TIM_OC3_SetConfig+0xae>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a19      	ldr	r2, [pc, #100]	; (80054b4 <TIM_OC3_SetConfig+0x108>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_OC3_SetConfig+0xae>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <TIM_OC3_SetConfig+0x10c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d113      	bne.n	8005482 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40013400 	.word	0x40013400
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800

080054bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800550a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	031b      	lsls	r3, r3, #12
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a18      	ldr	r2, [pc, #96]	; (800557c <TIM_OC4_SetConfig+0xc0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00f      	beq.n	8005540 <TIM_OC4_SetConfig+0x84>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <TIM_OC4_SetConfig+0xc4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_OC4_SetConfig+0x84>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <TIM_OC4_SetConfig+0xc8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_OC4_SetConfig+0x84>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <TIM_OC4_SetConfig+0xcc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC4_SetConfig+0x84>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a14      	ldr	r2, [pc, #80]	; (800558c <TIM_OC4_SetConfig+0xd0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d109      	bne.n	8005554 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40013400 	.word	0x40013400
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a17      	ldr	r2, [pc, #92]	; (8005644 <TIM_OC5_SetConfig+0xb4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00f      	beq.n	800560a <TIM_OC5_SetConfig+0x7a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC5_SetConfig+0xb8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00b      	beq.n	800560a <TIM_OC5_SetConfig+0x7a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <TIM_OC5_SetConfig+0xbc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d007      	beq.n	800560a <TIM_OC5_SetConfig+0x7a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a14      	ldr	r2, [pc, #80]	; (8005650 <TIM_OC5_SetConfig+0xc0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <TIM_OC5_SetConfig+0x7a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a13      	ldr	r2, [pc, #76]	; (8005654 <TIM_OC5_SetConfig+0xc4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d109      	bne.n	800561e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005610:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40013400 	.word	0x40013400
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	021b      	lsls	r3, r3, #8
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800569e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	051b      	lsls	r3, r3, #20
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a18      	ldr	r2, [pc, #96]	; (8005710 <TIM_OC6_SetConfig+0xb8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00f      	beq.n	80056d4 <TIM_OC6_SetConfig+0x7c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a17      	ldr	r2, [pc, #92]	; (8005714 <TIM_OC6_SetConfig+0xbc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_OC6_SetConfig+0x7c>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a16      	ldr	r2, [pc, #88]	; (8005718 <TIM_OC6_SetConfig+0xc0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_OC6_SetConfig+0x7c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <TIM_OC6_SetConfig+0xc4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC6_SetConfig+0x7c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a14      	ldr	r2, [pc, #80]	; (8005720 <TIM_OC6_SetConfig+0xc8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d109      	bne.n	80056e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	029b      	lsls	r3, r3, #10
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40013400 	.word	0x40013400
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800

08005724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f023 0201 	bic.w	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800574e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f023 030a 	bic.w	r3, r3, #10
 8005760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0210 	bic.w	r2, r3, #16
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	031b      	lsls	r3, r3, #12
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f043 0307 	orr.w	r3, r3, #7
 8005804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	431a      	orrs	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4313      	orrs	r3, r2
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e068      	b.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2e      	ldr	r2, [pc, #184]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d108      	bne.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01d      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e2:	d018      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1b      	ldr	r2, [pc, #108]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00e      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a14      	ldr	r2, [pc, #80]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d10c      	bne.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800591c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40013400 	.word	0x40013400
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000

08005968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e065      	b.n	8005a50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d115      	bne.n	8005a3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	051b      	lsls	r3, r3, #20
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40013400 	.word	0x40013400

08005a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e040      	b.n	8005b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb fbf8 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2224      	movs	r2, #36	; 0x24
 8005acc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8c0 	bl	8005c64 <UART_SetConfig>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e022      	b.n	8005b34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fb3e 	bl	8006178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fbc5 	bl	80062bc <UART_CheckIdleState>
 8005b32:	4603      	mov	r3, r0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	f040 8082 	bne.w	8005c5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_UART_Transmit+0x26>
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e07a      	b.n	8005c5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_UART_Transmit+0x38>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e073      	b.n	8005c5c <HAL_UART_Transmit+0x120>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2221      	movs	r2, #33	; 0x21
 8005b88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b8a:	f7fb fc97 	bl	80014bc <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba8:	d108      	bne.n	8005bbc <HAL_UART_Transmit+0x80>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e003      	b.n	8005bc4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005bcc:	e02d      	b.n	8005c2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fbb8 	bl	800634e <UART_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e039      	b.n	8005c5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	881a      	ldrh	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	3302      	adds	r3, #2
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	e008      	b.n	8005c18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3301      	adds	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1cb      	bne.n	8005bce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2140      	movs	r1, #64	; 0x40
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fb84 	bl	800634e <UART_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e005      	b.n	8005c5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e000      	b.n	8005c5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
  }
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4bad      	ldr	r3, [pc, #692]	; (8005f44 <UART_SetConfig+0x2e0>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	69f9      	ldr	r1, [r7, #28]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4aa2      	ldr	r2, [pc, #648]	; (8005f48 <UART_SetConfig+0x2e4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a99      	ldr	r2, [pc, #612]	; (8005f4c <UART_SetConfig+0x2e8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d121      	bne.n	8005d2e <UART_SetConfig+0xca>
 8005cea:	4b99      	ldr	r3, [pc, #612]	; (8005f50 <UART_SetConfig+0x2ec>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d817      	bhi.n	8005d28 <UART_SetConfig+0xc4>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0x9c>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d17 	.word	0x08005d17
 8005d0c:	08005d23 	.word	0x08005d23
 8005d10:	2301      	movs	r3, #1
 8005d12:	76fb      	strb	r3, [r7, #27]
 8005d14:	e0e7      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d16:	2302      	movs	r3, #2
 8005d18:	76fb      	strb	r3, [r7, #27]
 8005d1a:	e0e4      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	76fb      	strb	r3, [r7, #27]
 8005d20:	e0e1      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d22:	2308      	movs	r3, #8
 8005d24:	76fb      	strb	r3, [r7, #27]
 8005d26:	e0de      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	76fb      	strb	r3, [r7, #27]
 8005d2c:	e0db      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a88      	ldr	r2, [pc, #544]	; (8005f54 <UART_SetConfig+0x2f0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d132      	bne.n	8005d9e <UART_SetConfig+0x13a>
 8005d38:	4b85      	ldr	r3, [pc, #532]	; (8005f50 <UART_SetConfig+0x2ec>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b0c      	cmp	r3, #12
 8005d44:	d828      	bhi.n	8005d98 <UART_SetConfig+0x134>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0xe8>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d81 	.word	0x08005d81
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005d99 	.word	0x08005d99
 8005d6c:	08005d87 	.word	0x08005d87
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005d93 	.word	0x08005d93
 8005d80:	2300      	movs	r3, #0
 8005d82:	76fb      	strb	r3, [r7, #27]
 8005d84:	e0af      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d86:	2302      	movs	r3, #2
 8005d88:	76fb      	strb	r3, [r7, #27]
 8005d8a:	e0ac      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	76fb      	strb	r3, [r7, #27]
 8005d90:	e0a9      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d92:	2308      	movs	r3, #8
 8005d94:	76fb      	strb	r3, [r7, #27]
 8005d96:	e0a6      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d98:	2310      	movs	r3, #16
 8005d9a:	76fb      	strb	r3, [r7, #27]
 8005d9c:	e0a3      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a6d      	ldr	r2, [pc, #436]	; (8005f58 <UART_SetConfig+0x2f4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d120      	bne.n	8005dea <UART_SetConfig+0x186>
 8005da8:	4b69      	ldr	r3, [pc, #420]	; (8005f50 <UART_SetConfig+0x2ec>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005db2:	2b30      	cmp	r3, #48	; 0x30
 8005db4:	d013      	beq.n	8005dde <UART_SetConfig+0x17a>
 8005db6:	2b30      	cmp	r3, #48	; 0x30
 8005db8:	d814      	bhi.n	8005de4 <UART_SetConfig+0x180>
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d009      	beq.n	8005dd2 <UART_SetConfig+0x16e>
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d810      	bhi.n	8005de4 <UART_SetConfig+0x180>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <UART_SetConfig+0x168>
 8005dc6:	2b10      	cmp	r3, #16
 8005dc8:	d006      	beq.n	8005dd8 <UART_SetConfig+0x174>
 8005dca:	e00b      	b.n	8005de4 <UART_SetConfig+0x180>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	76fb      	strb	r3, [r7, #27]
 8005dd0:	e089      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	76fb      	strb	r3, [r7, #27]
 8005dd6:	e086      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	76fb      	strb	r3, [r7, #27]
 8005ddc:	e083      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005dde:	2308      	movs	r3, #8
 8005de0:	76fb      	strb	r3, [r7, #27]
 8005de2:	e080      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005de4:	2310      	movs	r3, #16
 8005de6:	76fb      	strb	r3, [r7, #27]
 8005de8:	e07d      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5b      	ldr	r2, [pc, #364]	; (8005f5c <UART_SetConfig+0x2f8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d120      	bne.n	8005e36 <UART_SetConfig+0x1d2>
 8005df4:	4b56      	ldr	r3, [pc, #344]	; (8005f50 <UART_SetConfig+0x2ec>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8005e00:	d013      	beq.n	8005e2a <UART_SetConfig+0x1c6>
 8005e02:	2bc0      	cmp	r3, #192	; 0xc0
 8005e04:	d814      	bhi.n	8005e30 <UART_SetConfig+0x1cc>
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d009      	beq.n	8005e1e <UART_SetConfig+0x1ba>
 8005e0a:	2b80      	cmp	r3, #128	; 0x80
 8005e0c:	d810      	bhi.n	8005e30 <UART_SetConfig+0x1cc>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <UART_SetConfig+0x1b4>
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d006      	beq.n	8005e24 <UART_SetConfig+0x1c0>
 8005e16:	e00b      	b.n	8005e30 <UART_SetConfig+0x1cc>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	76fb      	strb	r3, [r7, #27]
 8005e1c:	e063      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	76fb      	strb	r3, [r7, #27]
 8005e22:	e060      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e24:	2304      	movs	r3, #4
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	e05d      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	76fb      	strb	r3, [r7, #27]
 8005e2e:	e05a      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e30:	2310      	movs	r3, #16
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	e057      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a49      	ldr	r2, [pc, #292]	; (8005f60 <UART_SetConfig+0x2fc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d125      	bne.n	8005e8c <UART_SetConfig+0x228>
 8005e40:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <UART_SetConfig+0x2ec>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e4e:	d017      	beq.n	8005e80 <UART_SetConfig+0x21c>
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e54:	d817      	bhi.n	8005e86 <UART_SetConfig+0x222>
 8005e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5a:	d00b      	beq.n	8005e74 <UART_SetConfig+0x210>
 8005e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e60:	d811      	bhi.n	8005e86 <UART_SetConfig+0x222>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <UART_SetConfig+0x20a>
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	d006      	beq.n	8005e7a <UART_SetConfig+0x216>
 8005e6c:	e00b      	b.n	8005e86 <UART_SetConfig+0x222>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	76fb      	strb	r3, [r7, #27]
 8005e72:	e038      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e74:	2302      	movs	r3, #2
 8005e76:	76fb      	strb	r3, [r7, #27]
 8005e78:	e035      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	76fb      	strb	r3, [r7, #27]
 8005e7e:	e032      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e80:	2308      	movs	r3, #8
 8005e82:	76fb      	strb	r3, [r7, #27]
 8005e84:	e02f      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e86:	2310      	movs	r3, #16
 8005e88:	76fb      	strb	r3, [r7, #27]
 8005e8a:	e02c      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <UART_SetConfig+0x2e4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d125      	bne.n	8005ee2 <UART_SetConfig+0x27e>
 8005e96:	4b2e      	ldr	r3, [pc, #184]	; (8005f50 <UART_SetConfig+0x2ec>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ea4:	d017      	beq.n	8005ed6 <UART_SetConfig+0x272>
 8005ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eaa:	d817      	bhi.n	8005edc <UART_SetConfig+0x278>
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d00b      	beq.n	8005eca <UART_SetConfig+0x266>
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	d811      	bhi.n	8005edc <UART_SetConfig+0x278>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <UART_SetConfig+0x260>
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d006      	beq.n	8005ed0 <UART_SetConfig+0x26c>
 8005ec2:	e00b      	b.n	8005edc <UART_SetConfig+0x278>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	76fb      	strb	r3, [r7, #27]
 8005ec8:	e00d      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	76fb      	strb	r3, [r7, #27]
 8005ece:	e00a      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	76fb      	strb	r3, [r7, #27]
 8005ed4:	e007      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	76fb      	strb	r3, [r7, #27]
 8005eda:	e004      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005edc:	2310      	movs	r3, #16
 8005ede:	76fb      	strb	r3, [r7, #27]
 8005ee0:	e001      	b.n	8005ee6 <UART_SetConfig+0x282>
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <UART_SetConfig+0x2e4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f040 8087 	bne.w	8006000 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ef2:	7efb      	ldrb	r3, [r7, #27]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d837      	bhi.n	8005f68 <UART_SetConfig+0x304>
 8005ef8:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <UART_SetConfig+0x29c>)
 8005efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f69 	.word	0x08005f69
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f69 	.word	0x08005f69
 8005f10:	08005f33 	.word	0x08005f33
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005f69 	.word	0x08005f69
 8005f1c:	08005f69 	.word	0x08005f69
 8005f20:	08005f3b 	.word	0x08005f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fd fb0a 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8005f28:	6178      	str	r0, [r7, #20]
        break;
 8005f2a:	e022      	b.n	8005f72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <UART_SetConfig+0x300>)
 8005f2e:	617b      	str	r3, [r7, #20]
        break;
 8005f30:	e01f      	b.n	8005f72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f32:	f7fd fa6b 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8005f36:	6178      	str	r0, [r7, #20]
        break;
 8005f38:	e01b      	b.n	8005f72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	617b      	str	r3, [r7, #20]
        break;
 8005f40:	e017      	b.n	8005f72 <UART_SetConfig+0x30e>
 8005f42:	bf00      	nop
 8005f44:	efff69f3 	.word	0xefff69f3
 8005f48:	40008000 	.word	0x40008000
 8005f4c:	40013800 	.word	0x40013800
 8005f50:	40021000 	.word	0x40021000
 8005f54:	40004400 	.word	0x40004400
 8005f58:	40004800 	.word	0x40004800
 8005f5c:	40004c00 	.word	0x40004c00
 8005f60:	40005000 	.word	0x40005000
 8005f64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	76bb      	strb	r3, [r7, #26]
        break;
 8005f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 80f1 	beq.w	800615c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	4413      	add	r3, r2
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d305      	bcc.n	8005f96 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d902      	bls.n	8005f9c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	76bb      	strb	r3, [r7, #26]
 8005f9a:	e0df      	b.n	800615c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	020b      	lsls	r3, r1, #8
 8005fae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fb2:	0202      	lsls	r2, r0, #8
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	6849      	ldr	r1, [r1, #4]
 8005fb8:	0849      	lsrs	r1, r1, #1
 8005fba:	4608      	mov	r0, r1
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	1814      	adds	r4, r2, r0
 8005fc2:	eb43 0501 	adc.w	r5, r3, r1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	f7fa f954 	bl	8000280 <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4613      	mov	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe6:	d308      	bcc.n	8005ffa <UART_SetConfig+0x396>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d204      	bcs.n	8005ffa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	60da      	str	r2, [r3, #12]
 8005ff8:	e0b0      	b.n	800615c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	76bb      	strb	r3, [r7, #26]
 8005ffe:	e0ad      	b.n	800615c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	d15b      	bne.n	80060c2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800600a:	7efb      	ldrb	r3, [r7, #27]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d828      	bhi.n	8006062 <UART_SetConfig+0x3fe>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x3b4>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	08006063 	.word	0x08006063
 8006028:	08006053 	.word	0x08006053
 800602c:	08006063 	.word	0x08006063
 8006030:	08006063 	.word	0x08006063
 8006034:	08006063 	.word	0x08006063
 8006038:	0800605b 	.word	0x0800605b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800603c:	f7fd fa7e 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8006040:	6178      	str	r0, [r7, #20]
        break;
 8006042:	e013      	b.n	800606c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006044:	f7fd fa90 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8006048:	6178      	str	r0, [r7, #20]
        break;
 800604a:	e00f      	b.n	800606c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800604c:	4b49      	ldr	r3, [pc, #292]	; (8006174 <UART_SetConfig+0x510>)
 800604e:	617b      	str	r3, [r7, #20]
        break;
 8006050:	e00c      	b.n	800606c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006052:	f7fd f9db 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8006056:	6178      	str	r0, [r7, #20]
        break;
 8006058:	e008      	b.n	800606c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605e:	617b      	str	r3, [r7, #20]
        break;
 8006060:	e004      	b.n	800606c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	76bb      	strb	r3, [r7, #26]
        break;
 800606a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d074      	beq.n	800615c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	005a      	lsls	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	441a      	add	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	d916      	bls.n	80060bc <UART_SetConfig+0x458>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006094:	d212      	bcs.n	80060bc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	b29b      	uxth	r3, r3
 800609a:	f023 030f 	bic.w	r3, r3, #15
 800609e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	89fb      	ldrh	r3, [r7, #14]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	89fa      	ldrh	r2, [r7, #14]
 80060b8:	60da      	str	r2, [r3, #12]
 80060ba:	e04f      	b.n	800615c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	76bb      	strb	r3, [r7, #26]
 80060c0:	e04c      	b.n	800615c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060c2:	7efb      	ldrb	r3, [r7, #27]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d828      	bhi.n	800611a <UART_SetConfig+0x4b6>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x46c>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611b 	.word	0x0800611b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800611b 	.word	0x0800611b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7fd fa22 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80060f8:	6178      	str	r0, [r7, #20]
        break;
 80060fa:	e013      	b.n	8006124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fd fa34 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8006100:	6178      	str	r0, [r7, #20]
        break;
 8006102:	e00f      	b.n	8006124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <UART_SetConfig+0x510>)
 8006106:	617b      	str	r3, [r7, #20]
        break;
 8006108:	e00c      	b.n	8006124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fd f97f 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800610e:	6178      	str	r0, [r7, #20]
        break;
 8006110:	e008      	b.n	8006124 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006116:	617b      	str	r3, [r7, #20]
        break;
 8006118:	e004      	b.n	8006124 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	76bb      	strb	r3, [r7, #26]
        break;
 8006122:	bf00      	nop
    }

    if (pclk != 0U)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	085a      	lsrs	r2, r3, #1
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	441a      	add	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d909      	bls.n	8006158 <UART_SetConfig+0x4f4>
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614a:	d205      	bcs.n	8006158 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	e001      	b.n	800615c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006168:	7ebb      	ldrb	r3, [r7, #26]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bdb0      	pop	{r4, r5, r7, pc}
 8006172:	bf00      	nop
 8006174:	00f42400 	.word	0x00f42400

08006178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01a      	beq.n	800628e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006276:	d10a      	bne.n	800628e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062cc:	f7fb f8f6 	bl	80014bc <HAL_GetTick>
 80062d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d10e      	bne.n	80062fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f82d 	bl	800634e <UART_WaitOnFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e023      	b.n	8006346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d10e      	bne.n	800632a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f817 	bl	800634e <UART_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e00d      	b.n	8006346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b09c      	sub	sp, #112	; 0x70
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635e:	e0a5      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006366:	f000 80a1 	beq.w	80064ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636a:	f7fb f8a7 	bl	80014bc <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <UART_WaitOnFlagUntilTimeout+0x32>
 800637a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637c:	2b00      	cmp	r3, #0
 800637e:	d13e      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800638e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006394:	667b      	str	r3, [r7, #100]	; 0x64
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800639e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e6      	bne.n	8006380 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	663b      	str	r3, [r7, #96]	; 0x60
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80063d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e5      	bne.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e067      	b.n	80064ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d04f      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641a:	d147      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006424:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800643a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800644a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e6      	bne.n	8006426 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	613b      	str	r3, [r7, #16]
   return(result);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006478:	623a      	str	r2, [r7, #32]
 800647a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	69f9      	ldr	r1, [r7, #28]
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	61bb      	str	r3, [r7, #24]
   return(result);
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e5      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e010      	b.n	80064ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	f43f af4a 	beq.w	8006360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3770      	adds	r7, #112	; 0x70
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <SysTick_Handler+0x1c>)
 80064de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064e0:	f000 f990 	bl	8006804 <xTaskGetSchedulerState>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d001      	beq.n	80064ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80064ea:	f000 f9f5 	bl	80068d8 <xPortSysTickHandler>
  }
}
 80064ee:	bf00      	nop
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	e000e010 	.word	0xe000e010

080064f8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6892      	ldr	r2, [r2, #8]
 8006556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6852      	ldr	r2, [r2, #4]
 8006560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d103      	bne.n	8006574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	1e5a      	subs	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800659e:	4b4f      	ldr	r3, [pc, #316]	; (80066dc <xTaskIncrementTick+0x148>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 808f 	bne.w	80066c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065a8:	4b4d      	ldr	r3, [pc, #308]	; (80066e0 <xTaskIncrementTick+0x14c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3301      	adds	r3, #1
 80065ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065b0:	4a4b      	ldr	r2, [pc, #300]	; (80066e0 <xTaskIncrementTick+0x14c>)
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d120      	bne.n	80065fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065bc:	4b49      	ldr	r3, [pc, #292]	; (80066e4 <xTaskIncrementTick+0x150>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <xTaskIncrementTick+0x46>
 80065dc:	4b41      	ldr	r3, [pc, #260]	; (80066e4 <xTaskIncrementTick+0x150>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	4b41      	ldr	r3, [pc, #260]	; (80066e8 <xTaskIncrementTick+0x154>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a3f      	ldr	r2, [pc, #252]	; (80066e4 <xTaskIncrementTick+0x150>)
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	4a3f      	ldr	r2, [pc, #252]	; (80066e8 <xTaskIncrementTick+0x154>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	4b3e      	ldr	r3, [pc, #248]	; (80066ec <xTaskIncrementTick+0x158>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a3d      	ldr	r2, [pc, #244]	; (80066ec <xTaskIncrementTick+0x158>)
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	f000 f8e3 	bl	80067c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065fe:	4b3c      	ldr	r3, [pc, #240]	; (80066f0 <xTaskIncrementTick+0x15c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d349      	bcc.n	800669c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006608:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <xTaskIncrementTick+0x150>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006612:	4b37      	ldr	r3, [pc, #220]	; (80066f0 <xTaskIncrementTick+0x15c>)
 8006614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006618:	601a      	str	r2, [r3, #0]
					break;
 800661a:	e03f      	b.n	800669c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661c:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <xTaskIncrementTick+0x150>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d203      	bcs.n	800663c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006634:	4a2e      	ldr	r2, [pc, #184]	; (80066f0 <xTaskIncrementTick+0x15c>)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800663a:	e02f      	b.n	800669c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff7d 	bl	8006540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d004      	beq.n	8006658 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	3318      	adds	r3, #24
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff ff74 	bl	8006540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665c:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <xTaskIncrementTick+0x160>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d903      	bls.n	800666c <xTaskIncrementTick+0xd8>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	4a22      	ldr	r2, [pc, #136]	; (80066f4 <xTaskIncrementTick+0x160>)
 800666a:	6013      	str	r3, [r2, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <xTaskIncrementTick+0x164>)
 800667a:	441a      	add	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f7ff ff38 	bl	80064f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <xTaskIncrementTick+0x168>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	429a      	cmp	r2, r3
 8006694:	d3b8      	bcc.n	8006608 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006696:	2301      	movs	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800669a:	e7b5      	b.n	8006608 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800669c:	4b17      	ldr	r3, [pc, #92]	; (80066fc <xTaskIncrementTick+0x168>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4915      	ldr	r1, [pc, #84]	; (80066f8 <xTaskIncrementTick+0x164>)
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d901      	bls.n	80066b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <xTaskIncrementTick+0x16c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	e004      	b.n	80066d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <xTaskIncrementTick+0x170>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <xTaskIncrementTick+0x170>)
 80066ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066d0:	697b      	ldr	r3, [r7, #20]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000518 	.word	0x20000518
 80066e0:	200004fc 	.word	0x200004fc
 80066e4:	200004f4 	.word	0x200004f4
 80066e8:	200004f8 	.word	0x200004f8
 80066ec:	20000510 	.word	0x20000510
 80066f0:	20000514 	.word	0x20000514
 80066f4:	20000500 	.word	0x20000500
 80066f8:	20000094 	.word	0x20000094
 80066fc:	20000090 	.word	0x20000090
 8006700:	2000050c 	.word	0x2000050c
 8006704:	20000508 	.word	0x20000508

08006708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800670e:	4b28      	ldr	r3, [pc, #160]	; (80067b0 <vTaskSwitchContext+0xa8>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006716:	4b27      	ldr	r3, [pc, #156]	; (80067b4 <vTaskSwitchContext+0xac>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800671c:	e041      	b.n	80067a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800671e:	4b25      	ldr	r3, [pc, #148]	; (80067b4 <vTaskSwitchContext+0xac>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006724:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <vTaskSwitchContext+0xb0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e010      	b.n	800674e <vTaskSwitchContext+0x46>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <vTaskSwitchContext+0x40>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <vTaskSwitchContext+0x3e>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3b01      	subs	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	491b      	ldr	r1, [pc, #108]	; (80067bc <vTaskSwitchContext+0xb4>)
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0e4      	beq.n	800672c <vTaskSwitchContext+0x24>
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4a13      	ldr	r2, [pc, #76]	; (80067bc <vTaskSwitchContext+0xb4>)
 800676e:	4413      	add	r3, r2
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	605a      	str	r2, [r3, #4]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3308      	adds	r3, #8
 8006784:	429a      	cmp	r2, r3
 8006786:	d104      	bne.n	8006792 <vTaskSwitchContext+0x8a>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a09      	ldr	r2, [pc, #36]	; (80067c0 <vTaskSwitchContext+0xb8>)
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	4a06      	ldr	r2, [pc, #24]	; (80067b8 <vTaskSwitchContext+0xb0>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6013      	str	r3, [r2, #0]
}
 80067a2:	bf00      	nop
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000518 	.word	0x20000518
 80067b4:	2000050c 	.word	0x2000050c
 80067b8:	20000500 	.word	0x20000500
 80067bc:	20000094 	.word	0x20000094
 80067c0:	20000090 	.word	0x20000090

080067c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ca:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <prvResetNextTaskUnblockTime+0x38>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <prvResetNextTaskUnblockTime+0x3c>)
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067dc:	e008      	b.n	80067f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067de:	4b07      	ldr	r3, [pc, #28]	; (80067fc <prvResetNextTaskUnblockTime+0x38>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4a04      	ldr	r2, [pc, #16]	; (8006800 <prvResetNextTaskUnblockTime+0x3c>)
 80067ee:	6013      	str	r3, [r2, #0]
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	200004f4 	.word	0x200004f4
 8006800:	20000514 	.word	0x20000514

08006804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <xTaskGetSchedulerState+0x34>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d102      	bne.n	8006818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006812:	2301      	movs	r3, #1
 8006814:	607b      	str	r3, [r7, #4]
 8006816:	e008      	b.n	800682a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <xTaskGetSchedulerState+0x38>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006820:	2302      	movs	r3, #2
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	e001      	b.n	800682a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800682a:	687b      	ldr	r3, [r7, #4]
	}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	20000504 	.word	0x20000504
 800683c:	20000518 	.word	0x20000518

08006840 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
	...

08006870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006870:	f3ef 8009 	mrs	r0, PSP
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <pxCurrentTCBConst>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	f01e 0f10 	tst.w	lr, #16
 8006880:	bf08      	it	eq
 8006882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	6010      	str	r0, [r2, #0]
 800688c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006894:	f380 8811 	msr	BASEPRI, r0
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f7ff ff32 	bl	8006708 <vTaskSwitchContext>
 80068a4:	f04f 0000 	mov.w	r0, #0
 80068a8:	f380 8811 	msr	BASEPRI, r0
 80068ac:	bc09      	pop	{r0, r3}
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	6808      	ldr	r0, [r1, #0]
 80068b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b6:	f01e 0f10 	tst.w	lr, #16
 80068ba:	bf08      	it	eq
 80068bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068c0:	f380 8809 	msr	PSP, r0
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	f3af 8000 	nop.w

080068d0 <pxCurrentTCBConst>:
 80068d0:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068f2:	f7ff fe4f 	bl	8006594 <xTaskIncrementTick>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068fc:	4b06      	ldr	r3, [pc, #24]	; (8006918 <xPortSysTickHandler+0x40>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800690e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <atoi>:
 800691c:	220a      	movs	r2, #10
 800691e:	2100      	movs	r1, #0
 8006920:	f000 b940 	b.w	8006ba4 <strtol>

08006924 <__errno>:
 8006924:	4b01      	ldr	r3, [pc, #4]	; (800692c <__errno+0x8>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	2000000c 	.word	0x2000000c

08006930 <__libc_init_array>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4d0d      	ldr	r5, [pc, #52]	; (8006968 <__libc_init_array+0x38>)
 8006934:	4c0d      	ldr	r4, [pc, #52]	; (800696c <__libc_init_array+0x3c>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	2600      	movs	r6, #0
 800693c:	42a6      	cmp	r6, r4
 800693e:	d109      	bne.n	8006954 <__libc_init_array+0x24>
 8006940:	4d0b      	ldr	r5, [pc, #44]	; (8006970 <__libc_init_array+0x40>)
 8006942:	4c0c      	ldr	r4, [pc, #48]	; (8006974 <__libc_init_array+0x44>)
 8006944:	f001 fa9e 	bl	8007e84 <_init>
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	2600      	movs	r6, #0
 800694e:	42a6      	cmp	r6, r4
 8006950:	d105      	bne.n	800695e <__libc_init_array+0x2e>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f855 3b04 	ldr.w	r3, [r5], #4
 8006958:	4798      	blx	r3
 800695a:	3601      	adds	r6, #1
 800695c:	e7ee      	b.n	800693c <__libc_init_array+0xc>
 800695e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006962:	4798      	blx	r3
 8006964:	3601      	adds	r6, #1
 8006966:	e7f2      	b.n	800694e <__libc_init_array+0x1e>
 8006968:	080081bc 	.word	0x080081bc
 800696c:	080081bc 	.word	0x080081bc
 8006970:	080081bc 	.word	0x080081bc
 8006974:	080081c0 	.word	0x080081c0

08006978 <memcpy>:
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006980:	d100      	bne.n	8006984 <memcpy+0xc>
 8006982:	4770      	bx	lr
 8006984:	b510      	push	{r4, lr}
 8006986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698e:	4291      	cmp	r1, r2
 8006990:	d1f9      	bne.n	8006986 <memcpy+0xe>
 8006992:	bd10      	pop	{r4, pc}

08006994 <memset>:
 8006994:	4402      	add	r2, r0
 8006996:	4603      	mov	r3, r0
 8006998:	4293      	cmp	r3, r2
 800699a:	d100      	bne.n	800699e <memset+0xa>
 800699c:	4770      	bx	lr
 800699e:	f803 1b01 	strb.w	r1, [r3], #1
 80069a2:	e7f9      	b.n	8006998 <memset+0x4>

080069a4 <siprintf>:
 80069a4:	b40e      	push	{r1, r2, r3}
 80069a6:	b500      	push	{lr}
 80069a8:	b09c      	sub	sp, #112	; 0x70
 80069aa:	ab1d      	add	r3, sp, #116	; 0x74
 80069ac:	9002      	str	r0, [sp, #8]
 80069ae:	9006      	str	r0, [sp, #24]
 80069b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069b4:	4809      	ldr	r0, [pc, #36]	; (80069dc <siprintf+0x38>)
 80069b6:	9107      	str	r1, [sp, #28]
 80069b8:	9104      	str	r1, [sp, #16]
 80069ba:	4909      	ldr	r1, [pc, #36]	; (80069e0 <siprintf+0x3c>)
 80069bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c0:	9105      	str	r1, [sp, #20]
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	a902      	add	r1, sp, #8
 80069c8:	f000 fa34 	bl	8006e34 <_svfiprintf_r>
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	b01c      	add	sp, #112	; 0x70
 80069d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d8:	b003      	add	sp, #12
 80069da:	4770      	bx	lr
 80069dc:	2000000c 	.word	0x2000000c
 80069e0:	ffff0208 	.word	0xffff0208

080069e4 <strtok>:
 80069e4:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <strtok+0x5c>)
 80069e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069e8:	681e      	ldr	r6, [r3, #0]
 80069ea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80069ec:	4605      	mov	r5, r0
 80069ee:	b9fc      	cbnz	r4, 8006a30 <strtok+0x4c>
 80069f0:	2050      	movs	r0, #80	; 0x50
 80069f2:	9101      	str	r1, [sp, #4]
 80069f4:	f000 f910 	bl	8006c18 <malloc>
 80069f8:	9901      	ldr	r1, [sp, #4]
 80069fa:	65b0      	str	r0, [r6, #88]	; 0x58
 80069fc:	4602      	mov	r2, r0
 80069fe:	b920      	cbnz	r0, 8006a0a <strtok+0x26>
 8006a00:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <strtok+0x60>)
 8006a02:	4811      	ldr	r0, [pc, #68]	; (8006a48 <strtok+0x64>)
 8006a04:	2157      	movs	r1, #87	; 0x57
 8006a06:	f000 f8d7 	bl	8006bb8 <__assert_func>
 8006a0a:	e9c0 4400 	strd	r4, r4, [r0]
 8006a0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006a12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006a16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006a1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006a1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006a22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006a26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006a2a:	6184      	str	r4, [r0, #24]
 8006a2c:	7704      	strb	r4, [r0, #28]
 8006a2e:	6244      	str	r4, [r0, #36]	; 0x24
 8006a30:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006a32:	2301      	movs	r3, #1
 8006a34:	4628      	mov	r0, r5
 8006a36:	b002      	add	sp, #8
 8006a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a3c:	f000 b806 	b.w	8006a4c <__strtok_r>
 8006a40:	2000000c 	.word	0x2000000c
 8006a44:	08007f6c 	.word	0x08007f6c
 8006a48:	08007f83 	.word	0x08007f83

08006a4c <__strtok_r>:
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4e:	b908      	cbnz	r0, 8006a54 <__strtok_r+0x8>
 8006a50:	6810      	ldr	r0, [r2, #0]
 8006a52:	b188      	cbz	r0, 8006a78 <__strtok_r+0x2c>
 8006a54:	4604      	mov	r4, r0
 8006a56:	4620      	mov	r0, r4
 8006a58:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006a62:	b91e      	cbnz	r6, 8006a6c <__strtok_r+0x20>
 8006a64:	b965      	cbnz	r5, 8006a80 <__strtok_r+0x34>
 8006a66:	6015      	str	r5, [r2, #0]
 8006a68:	4628      	mov	r0, r5
 8006a6a:	e005      	b.n	8006a78 <__strtok_r+0x2c>
 8006a6c:	42b5      	cmp	r5, r6
 8006a6e:	d1f6      	bne.n	8006a5e <__strtok_r+0x12>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f0      	bne.n	8006a56 <__strtok_r+0xa>
 8006a74:	6014      	str	r4, [r2, #0]
 8006a76:	7003      	strb	r3, [r0, #0]
 8006a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7a:	461c      	mov	r4, r3
 8006a7c:	e00c      	b.n	8006a98 <__strtok_r+0x4c>
 8006a7e:	b915      	cbnz	r5, 8006a86 <__strtok_r+0x3a>
 8006a80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a84:	460e      	mov	r6, r1
 8006a86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006a8a:	42ab      	cmp	r3, r5
 8006a8c:	d1f7      	bne.n	8006a7e <__strtok_r+0x32>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0f3      	beq.n	8006a7a <__strtok_r+0x2e>
 8006a92:	2300      	movs	r3, #0
 8006a94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006a98:	6014      	str	r4, [r2, #0]
 8006a9a:	e7ed      	b.n	8006a78 <__strtok_r+0x2c>

08006a9c <_strtol_l.isra.0>:
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa2:	d001      	beq.n	8006aa8 <_strtol_l.isra.0+0xc>
 8006aa4:	2b24      	cmp	r3, #36	; 0x24
 8006aa6:	d906      	bls.n	8006ab6 <_strtol_l.isra.0+0x1a>
 8006aa8:	f7ff ff3c 	bl	8006924 <__errno>
 8006aac:	2316      	movs	r3, #22
 8006aae:	6003      	str	r3, [r0, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab6:	4f3a      	ldr	r7, [pc, #232]	; (8006ba0 <_strtol_l.isra.0+0x104>)
 8006ab8:	468e      	mov	lr, r1
 8006aba:	4676      	mov	r6, lr
 8006abc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006ac0:	5de5      	ldrb	r5, [r4, r7]
 8006ac2:	f015 0508 	ands.w	r5, r5, #8
 8006ac6:	d1f8      	bne.n	8006aba <_strtol_l.isra.0+0x1e>
 8006ac8:	2c2d      	cmp	r4, #45	; 0x2d
 8006aca:	d134      	bne.n	8006b36 <_strtol_l.isra.0+0x9a>
 8006acc:	f89e 4000 	ldrb.w	r4, [lr]
 8006ad0:	f04f 0801 	mov.w	r8, #1
 8006ad4:	f106 0e02 	add.w	lr, r6, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d05c      	beq.n	8006b96 <_strtol_l.isra.0+0xfa>
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d10c      	bne.n	8006afa <_strtol_l.isra.0+0x5e>
 8006ae0:	2c30      	cmp	r4, #48	; 0x30
 8006ae2:	d10a      	bne.n	8006afa <_strtol_l.isra.0+0x5e>
 8006ae4:	f89e 4000 	ldrb.w	r4, [lr]
 8006ae8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006aec:	2c58      	cmp	r4, #88	; 0x58
 8006aee:	d14d      	bne.n	8006b8c <_strtol_l.isra.0+0xf0>
 8006af0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006af4:	2310      	movs	r3, #16
 8006af6:	f10e 0e02 	add.w	lr, lr, #2
 8006afa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006afe:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006b02:	2600      	movs	r6, #0
 8006b04:	fbbc f9f3 	udiv	r9, ip, r3
 8006b08:	4635      	mov	r5, r6
 8006b0a:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b0e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006b12:	2f09      	cmp	r7, #9
 8006b14:	d818      	bhi.n	8006b48 <_strtol_l.isra.0+0xac>
 8006b16:	463c      	mov	r4, r7
 8006b18:	42a3      	cmp	r3, r4
 8006b1a:	dd24      	ble.n	8006b66 <_strtol_l.isra.0+0xca>
 8006b1c:	2e00      	cmp	r6, #0
 8006b1e:	db1f      	blt.n	8006b60 <_strtol_l.isra.0+0xc4>
 8006b20:	45a9      	cmp	r9, r5
 8006b22:	d31d      	bcc.n	8006b60 <_strtol_l.isra.0+0xc4>
 8006b24:	d101      	bne.n	8006b2a <_strtol_l.isra.0+0x8e>
 8006b26:	45a2      	cmp	sl, r4
 8006b28:	db1a      	blt.n	8006b60 <_strtol_l.isra.0+0xc4>
 8006b2a:	fb05 4503 	mla	r5, r5, r3, r4
 8006b2e:	2601      	movs	r6, #1
 8006b30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006b34:	e7eb      	b.n	8006b0e <_strtol_l.isra.0+0x72>
 8006b36:	2c2b      	cmp	r4, #43	; 0x2b
 8006b38:	bf08      	it	eq
 8006b3a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006b3e:	46a8      	mov	r8, r5
 8006b40:	bf08      	it	eq
 8006b42:	f106 0e02 	addeq.w	lr, r6, #2
 8006b46:	e7c7      	b.n	8006ad8 <_strtol_l.isra.0+0x3c>
 8006b48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006b4c:	2f19      	cmp	r7, #25
 8006b4e:	d801      	bhi.n	8006b54 <_strtol_l.isra.0+0xb8>
 8006b50:	3c37      	subs	r4, #55	; 0x37
 8006b52:	e7e1      	b.n	8006b18 <_strtol_l.isra.0+0x7c>
 8006b54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006b58:	2f19      	cmp	r7, #25
 8006b5a:	d804      	bhi.n	8006b66 <_strtol_l.isra.0+0xca>
 8006b5c:	3c57      	subs	r4, #87	; 0x57
 8006b5e:	e7db      	b.n	8006b18 <_strtol_l.isra.0+0x7c>
 8006b60:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006b64:	e7e4      	b.n	8006b30 <_strtol_l.isra.0+0x94>
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	da05      	bge.n	8006b76 <_strtol_l.isra.0+0xda>
 8006b6a:	2322      	movs	r3, #34	; 0x22
 8006b6c:	6003      	str	r3, [r0, #0]
 8006b6e:	4665      	mov	r5, ip
 8006b70:	b942      	cbnz	r2, 8006b84 <_strtol_l.isra.0+0xe8>
 8006b72:	4628      	mov	r0, r5
 8006b74:	e79d      	b.n	8006ab2 <_strtol_l.isra.0+0x16>
 8006b76:	f1b8 0f00 	cmp.w	r8, #0
 8006b7a:	d000      	beq.n	8006b7e <_strtol_l.isra.0+0xe2>
 8006b7c:	426d      	negs	r5, r5
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	d0f7      	beq.n	8006b72 <_strtol_l.isra.0+0xd6>
 8006b82:	b10e      	cbz	r6, 8006b88 <_strtol_l.isra.0+0xec>
 8006b84:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8006b88:	6011      	str	r1, [r2, #0]
 8006b8a:	e7f2      	b.n	8006b72 <_strtol_l.isra.0+0xd6>
 8006b8c:	2430      	movs	r4, #48	; 0x30
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1b3      	bne.n	8006afa <_strtol_l.isra.0+0x5e>
 8006b92:	2308      	movs	r3, #8
 8006b94:	e7b1      	b.n	8006afa <_strtol_l.isra.0+0x5e>
 8006b96:	2c30      	cmp	r4, #48	; 0x30
 8006b98:	d0a4      	beq.n	8006ae4 <_strtol_l.isra.0+0x48>
 8006b9a:	230a      	movs	r3, #10
 8006b9c:	e7ad      	b.n	8006afa <_strtol_l.isra.0+0x5e>
 8006b9e:	bf00      	nop
 8006ba0:	08008021 	.word	0x08008021

08006ba4 <strtol>:
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	460a      	mov	r2, r1
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4802      	ldr	r0, [pc, #8]	; (8006bb4 <strtol+0x10>)
 8006bac:	6800      	ldr	r0, [r0, #0]
 8006bae:	f7ff bf75 	b.w	8006a9c <_strtol_l.isra.0>
 8006bb2:	bf00      	nop
 8006bb4:	2000000c 	.word	0x2000000c

08006bb8 <__assert_func>:
 8006bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bba:	4614      	mov	r4, r2
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <__assert_func+0x2c>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	68d8      	ldr	r0, [r3, #12]
 8006bc6:	b14c      	cbz	r4, 8006bdc <__assert_func+0x24>
 8006bc8:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <__assert_func+0x30>)
 8006bca:	9100      	str	r1, [sp, #0]
 8006bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bd0:	4906      	ldr	r1, [pc, #24]	; (8006bec <__assert_func+0x34>)
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	f000 f80e 	bl	8006bf4 <fiprintf>
 8006bd8:	f000 fdea 	bl	80077b0 <abort>
 8006bdc:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <__assert_func+0x38>)
 8006bde:	461c      	mov	r4, r3
 8006be0:	e7f3      	b.n	8006bca <__assert_func+0x12>
 8006be2:	bf00      	nop
 8006be4:	2000000c 	.word	0x2000000c
 8006be8:	08007fe4 	.word	0x08007fe4
 8006bec:	08007ff1 	.word	0x08007ff1
 8006bf0:	0800801f 	.word	0x0800801f

08006bf4 <fiprintf>:
 8006bf4:	b40e      	push	{r1, r2, r3}
 8006bf6:	b503      	push	{r0, r1, lr}
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	ab03      	add	r3, sp, #12
 8006bfc:	4805      	ldr	r0, [pc, #20]	; (8006c14 <fiprintf+0x20>)
 8006bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c02:	6800      	ldr	r0, [r0, #0]
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	f000 fa3f 	bl	8007088 <_vfiprintf_r>
 8006c0a:	b002      	add	sp, #8
 8006c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c10:	b003      	add	sp, #12
 8006c12:	4770      	bx	lr
 8006c14:	2000000c 	.word	0x2000000c

08006c18 <malloc>:
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <malloc+0xc>)
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f000 b853 	b.w	8006cc8 <_malloc_r>
 8006c22:	bf00      	nop
 8006c24:	2000000c 	.word	0x2000000c

08006c28 <_free_r>:
 8006c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c2a:	2900      	cmp	r1, #0
 8006c2c:	d048      	beq.n	8006cc0 <_free_r+0x98>
 8006c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c32:	9001      	str	r0, [sp, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f1a1 0404 	sub.w	r4, r1, #4
 8006c3a:	bfb8      	it	lt
 8006c3c:	18e4      	addlt	r4, r4, r3
 8006c3e:	f000 fff7 	bl	8007c30 <__malloc_lock>
 8006c42:	4a20      	ldr	r2, [pc, #128]	; (8006cc4 <_free_r+0x9c>)
 8006c44:	9801      	ldr	r0, [sp, #4]
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	4615      	mov	r5, r2
 8006c4a:	b933      	cbnz	r3, 8006c5a <_free_r+0x32>
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	6014      	str	r4, [r2, #0]
 8006c50:	b003      	add	sp, #12
 8006c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c56:	f000 bff1 	b.w	8007c3c <__malloc_unlock>
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	d90b      	bls.n	8006c76 <_free_r+0x4e>
 8006c5e:	6821      	ldr	r1, [r4, #0]
 8006c60:	1862      	adds	r2, r4, r1
 8006c62:	4293      	cmp	r3, r2
 8006c64:	bf04      	itt	eq
 8006c66:	681a      	ldreq	r2, [r3, #0]
 8006c68:	685b      	ldreq	r3, [r3, #4]
 8006c6a:	6063      	str	r3, [r4, #4]
 8006c6c:	bf04      	itt	eq
 8006c6e:	1852      	addeq	r2, r2, r1
 8006c70:	6022      	streq	r2, [r4, #0]
 8006c72:	602c      	str	r4, [r5, #0]
 8006c74:	e7ec      	b.n	8006c50 <_free_r+0x28>
 8006c76:	461a      	mov	r2, r3
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b10b      	cbz	r3, 8006c80 <_free_r+0x58>
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	d9fa      	bls.n	8006c76 <_free_r+0x4e>
 8006c80:	6811      	ldr	r1, [r2, #0]
 8006c82:	1855      	adds	r5, r2, r1
 8006c84:	42a5      	cmp	r5, r4
 8006c86:	d10b      	bne.n	8006ca0 <_free_r+0x78>
 8006c88:	6824      	ldr	r4, [r4, #0]
 8006c8a:	4421      	add	r1, r4
 8006c8c:	1854      	adds	r4, r2, r1
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	6011      	str	r1, [r2, #0]
 8006c92:	d1dd      	bne.n	8006c50 <_free_r+0x28>
 8006c94:	681c      	ldr	r4, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	6053      	str	r3, [r2, #4]
 8006c9a:	4421      	add	r1, r4
 8006c9c:	6011      	str	r1, [r2, #0]
 8006c9e:	e7d7      	b.n	8006c50 <_free_r+0x28>
 8006ca0:	d902      	bls.n	8006ca8 <_free_r+0x80>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	e7d3      	b.n	8006c50 <_free_r+0x28>
 8006ca8:	6825      	ldr	r5, [r4, #0]
 8006caa:	1961      	adds	r1, r4, r5
 8006cac:	428b      	cmp	r3, r1
 8006cae:	bf04      	itt	eq
 8006cb0:	6819      	ldreq	r1, [r3, #0]
 8006cb2:	685b      	ldreq	r3, [r3, #4]
 8006cb4:	6063      	str	r3, [r4, #4]
 8006cb6:	bf04      	itt	eq
 8006cb8:	1949      	addeq	r1, r1, r5
 8006cba:	6021      	streq	r1, [r4, #0]
 8006cbc:	6054      	str	r4, [r2, #4]
 8006cbe:	e7c7      	b.n	8006c50 <_free_r+0x28>
 8006cc0:	b003      	add	sp, #12
 8006cc2:	bd30      	pop	{r4, r5, pc}
 8006cc4:	2000051c 	.word	0x2000051c

08006cc8 <_malloc_r>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	1ccd      	adds	r5, r1, #3
 8006ccc:	f025 0503 	bic.w	r5, r5, #3
 8006cd0:	3508      	adds	r5, #8
 8006cd2:	2d0c      	cmp	r5, #12
 8006cd4:	bf38      	it	cc
 8006cd6:	250c      	movcc	r5, #12
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	4606      	mov	r6, r0
 8006cdc:	db01      	blt.n	8006ce2 <_malloc_r+0x1a>
 8006cde:	42a9      	cmp	r1, r5
 8006ce0:	d903      	bls.n	8006cea <_malloc_r+0x22>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cea:	f000 ffa1 	bl	8007c30 <__malloc_lock>
 8006cee:	4921      	ldr	r1, [pc, #132]	; (8006d74 <_malloc_r+0xac>)
 8006cf0:	680a      	ldr	r2, [r1, #0]
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	b99c      	cbnz	r4, 8006d1e <_malloc_r+0x56>
 8006cf6:	4f20      	ldr	r7, [pc, #128]	; (8006d78 <_malloc_r+0xb0>)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	b923      	cbnz	r3, 8006d06 <_malloc_r+0x3e>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f000 fc86 	bl	8007610 <_sbrk_r>
 8006d04:	6038      	str	r0, [r7, #0]
 8006d06:	4629      	mov	r1, r5
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f000 fc81 	bl	8007610 <_sbrk_r>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	d123      	bne.n	8006d5a <_malloc_r+0x92>
 8006d12:	230c      	movs	r3, #12
 8006d14:	6033      	str	r3, [r6, #0]
 8006d16:	4630      	mov	r0, r6
 8006d18:	f000 ff90 	bl	8007c3c <__malloc_unlock>
 8006d1c:	e7e3      	b.n	8006ce6 <_malloc_r+0x1e>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	1b5b      	subs	r3, r3, r5
 8006d22:	d417      	bmi.n	8006d54 <_malloc_r+0x8c>
 8006d24:	2b0b      	cmp	r3, #11
 8006d26:	d903      	bls.n	8006d30 <_malloc_r+0x68>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	441c      	add	r4, r3
 8006d2c:	6025      	str	r5, [r4, #0]
 8006d2e:	e004      	b.n	8006d3a <_malloc_r+0x72>
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	42a2      	cmp	r2, r4
 8006d34:	bf0c      	ite	eq
 8006d36:	600b      	streq	r3, [r1, #0]
 8006d38:	6053      	strne	r3, [r2, #4]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 ff7e 	bl	8007c3c <__malloc_unlock>
 8006d40:	f104 000b 	add.w	r0, r4, #11
 8006d44:	1d23      	adds	r3, r4, #4
 8006d46:	f020 0007 	bic.w	r0, r0, #7
 8006d4a:	1ac2      	subs	r2, r0, r3
 8006d4c:	d0cc      	beq.n	8006ce8 <_malloc_r+0x20>
 8006d4e:	1a1b      	subs	r3, r3, r0
 8006d50:	50a3      	str	r3, [r4, r2]
 8006d52:	e7c9      	b.n	8006ce8 <_malloc_r+0x20>
 8006d54:	4622      	mov	r2, r4
 8006d56:	6864      	ldr	r4, [r4, #4]
 8006d58:	e7cc      	b.n	8006cf4 <_malloc_r+0x2c>
 8006d5a:	1cc4      	adds	r4, r0, #3
 8006d5c:	f024 0403 	bic.w	r4, r4, #3
 8006d60:	42a0      	cmp	r0, r4
 8006d62:	d0e3      	beq.n	8006d2c <_malloc_r+0x64>
 8006d64:	1a21      	subs	r1, r4, r0
 8006d66:	4630      	mov	r0, r6
 8006d68:	f000 fc52 	bl	8007610 <_sbrk_r>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d1dd      	bne.n	8006d2c <_malloc_r+0x64>
 8006d70:	e7cf      	b.n	8006d12 <_malloc_r+0x4a>
 8006d72:	bf00      	nop
 8006d74:	2000051c 	.word	0x2000051c
 8006d78:	20000520 	.word	0x20000520

08006d7c <__ssputs_r>:
 8006d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	688e      	ldr	r6, [r1, #8]
 8006d82:	429e      	cmp	r6, r3
 8006d84:	4682      	mov	sl, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	4690      	mov	r8, r2
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	d838      	bhi.n	8006e00 <__ssputs_r+0x84>
 8006d8e:	898a      	ldrh	r2, [r1, #12]
 8006d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d94:	d032      	beq.n	8006dfc <__ssputs_r+0x80>
 8006d96:	6825      	ldr	r5, [r4, #0]
 8006d98:	6909      	ldr	r1, [r1, #16]
 8006d9a:	eba5 0901 	sub.w	r9, r5, r1
 8006d9e:	6965      	ldr	r5, [r4, #20]
 8006da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006da8:	3301      	adds	r3, #1
 8006daa:	444b      	add	r3, r9
 8006dac:	106d      	asrs	r5, r5, #1
 8006dae:	429d      	cmp	r5, r3
 8006db0:	bf38      	it	cc
 8006db2:	461d      	movcc	r5, r3
 8006db4:	0553      	lsls	r3, r2, #21
 8006db6:	d531      	bpl.n	8006e1c <__ssputs_r+0xa0>
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7ff ff85 	bl	8006cc8 <_malloc_r>
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	b950      	cbnz	r0, 8006dd8 <__ssputs_r+0x5c>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	f8ca 3000 	str.w	r3, [sl]
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	6921      	ldr	r1, [r4, #16]
 8006dda:	464a      	mov	r2, r9
 8006ddc:	f7ff fdcc 	bl	8006978 <memcpy>
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	6126      	str	r6, [r4, #16]
 8006dee:	6165      	str	r5, [r4, #20]
 8006df0:	444e      	add	r6, r9
 8006df2:	eba5 0509 	sub.w	r5, r5, r9
 8006df6:	6026      	str	r6, [r4, #0]
 8006df8:	60a5      	str	r5, [r4, #8]
 8006dfa:	463e      	mov	r6, r7
 8006dfc:	42be      	cmp	r6, r7
 8006dfe:	d900      	bls.n	8006e02 <__ssputs_r+0x86>
 8006e00:	463e      	mov	r6, r7
 8006e02:	4632      	mov	r2, r6
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	4641      	mov	r1, r8
 8006e08:	f000 fef8 	bl	8007bfc <memmove>
 8006e0c:	68a3      	ldr	r3, [r4, #8]
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	1b9b      	subs	r3, r3, r6
 8006e12:	4432      	add	r2, r6
 8006e14:	60a3      	str	r3, [r4, #8]
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e7db      	b.n	8006dd4 <__ssputs_r+0x58>
 8006e1c:	462a      	mov	r2, r5
 8006e1e:	f000 ff13 	bl	8007c48 <_realloc_r>
 8006e22:	4606      	mov	r6, r0
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d1e1      	bne.n	8006dec <__ssputs_r+0x70>
 8006e28:	6921      	ldr	r1, [r4, #16]
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	f7ff fefc 	bl	8006c28 <_free_r>
 8006e30:	e7c7      	b.n	8006dc2 <__ssputs_r+0x46>
	...

08006e34 <_svfiprintf_r>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	4698      	mov	r8, r3
 8006e3a:	898b      	ldrh	r3, [r1, #12]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	b09d      	sub	sp, #116	; 0x74
 8006e40:	4607      	mov	r7, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	4614      	mov	r4, r2
 8006e46:	d50e      	bpl.n	8006e66 <_svfiprintf_r+0x32>
 8006e48:	690b      	ldr	r3, [r1, #16]
 8006e4a:	b963      	cbnz	r3, 8006e66 <_svfiprintf_r+0x32>
 8006e4c:	2140      	movs	r1, #64	; 0x40
 8006e4e:	f7ff ff3b 	bl	8006cc8 <_malloc_r>
 8006e52:	6028      	str	r0, [r5, #0]
 8006e54:	6128      	str	r0, [r5, #16]
 8006e56:	b920      	cbnz	r0, 8006e62 <_svfiprintf_r+0x2e>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e60:	e0d1      	b.n	8007006 <_svfiprintf_r+0x1d2>
 8006e62:	2340      	movs	r3, #64	; 0x40
 8006e64:	616b      	str	r3, [r5, #20]
 8006e66:	2300      	movs	r3, #0
 8006e68:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6a:	2320      	movs	r3, #32
 8006e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e74:	2330      	movs	r3, #48	; 0x30
 8006e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007020 <_svfiprintf_r+0x1ec>
 8006e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e7e:	f04f 0901 	mov.w	r9, #1
 8006e82:	4623      	mov	r3, r4
 8006e84:	469a      	mov	sl, r3
 8006e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e8a:	b10a      	cbz	r2, 8006e90 <_svfiprintf_r+0x5c>
 8006e8c:	2a25      	cmp	r2, #37	; 0x25
 8006e8e:	d1f9      	bne.n	8006e84 <_svfiprintf_r+0x50>
 8006e90:	ebba 0b04 	subs.w	fp, sl, r4
 8006e94:	d00b      	beq.n	8006eae <_svfiprintf_r+0x7a>
 8006e96:	465b      	mov	r3, fp
 8006e98:	4622      	mov	r2, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f7ff ff6d 	bl	8006d7c <__ssputs_r>
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f000 80aa 	beq.w	8006ffc <_svfiprintf_r+0x1c8>
 8006ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eaa:	445a      	add	r2, fp
 8006eac:	9209      	str	r2, [sp, #36]	; 0x24
 8006eae:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80a2 	beq.w	8006ffc <_svfiprintf_r+0x1c8>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec2:	f10a 0a01 	add.w	sl, sl, #1
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	9307      	str	r3, [sp, #28]
 8006eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ece:	931a      	str	r3, [sp, #104]	; 0x68
 8006ed0:	4654      	mov	r4, sl
 8006ed2:	2205      	movs	r2, #5
 8006ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed8:	4851      	ldr	r0, [pc, #324]	; (8007020 <_svfiprintf_r+0x1ec>)
 8006eda:	f7f9 f981 	bl	80001e0 <memchr>
 8006ede:	9a04      	ldr	r2, [sp, #16]
 8006ee0:	b9d8      	cbnz	r0, 8006f1a <_svfiprintf_r+0xe6>
 8006ee2:	06d0      	lsls	r0, r2, #27
 8006ee4:	bf44      	itt	mi
 8006ee6:	2320      	movmi	r3, #32
 8006ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eec:	0711      	lsls	r1, r2, #28
 8006eee:	bf44      	itt	mi
 8006ef0:	232b      	movmi	r3, #43	; 0x2b
 8006ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8006efa:	2b2a      	cmp	r3, #42	; 0x2a
 8006efc:	d015      	beq.n	8006f2a <_svfiprintf_r+0xf6>
 8006efe:	9a07      	ldr	r2, [sp, #28]
 8006f00:	4654      	mov	r4, sl
 8006f02:	2000      	movs	r0, #0
 8006f04:	f04f 0c0a 	mov.w	ip, #10
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f0e:	3b30      	subs	r3, #48	; 0x30
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	d94e      	bls.n	8006fb2 <_svfiprintf_r+0x17e>
 8006f14:	b1b0      	cbz	r0, 8006f44 <_svfiprintf_r+0x110>
 8006f16:	9207      	str	r2, [sp, #28]
 8006f18:	e014      	b.n	8006f44 <_svfiprintf_r+0x110>
 8006f1a:	eba0 0308 	sub.w	r3, r0, r8
 8006f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	46a2      	mov	sl, r4
 8006f28:	e7d2      	b.n	8006ed0 <_svfiprintf_r+0x9c>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	1d19      	adds	r1, r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	9103      	str	r1, [sp, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bfbb      	ittet	lt
 8006f36:	425b      	neglt	r3, r3
 8006f38:	f042 0202 	orrlt.w	r2, r2, #2
 8006f3c:	9307      	strge	r3, [sp, #28]
 8006f3e:	9307      	strlt	r3, [sp, #28]
 8006f40:	bfb8      	it	lt
 8006f42:	9204      	strlt	r2, [sp, #16]
 8006f44:	7823      	ldrb	r3, [r4, #0]
 8006f46:	2b2e      	cmp	r3, #46	; 0x2e
 8006f48:	d10c      	bne.n	8006f64 <_svfiprintf_r+0x130>
 8006f4a:	7863      	ldrb	r3, [r4, #1]
 8006f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4e:	d135      	bne.n	8006fbc <_svfiprintf_r+0x188>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	9203      	str	r2, [sp, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bfb8      	it	lt
 8006f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f60:	3402      	adds	r4, #2
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007030 <_svfiprintf_r+0x1fc>
 8006f68:	7821      	ldrb	r1, [r4, #0]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	f7f9 f937 	bl	80001e0 <memchr>
 8006f72:	b140      	cbz	r0, 8006f86 <_svfiprintf_r+0x152>
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	eba0 000a 	sub.w	r0, r0, sl
 8006f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f7e:	9b04      	ldr	r3, [sp, #16]
 8006f80:	4303      	orrs	r3, r0
 8006f82:	3401      	adds	r4, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	4826      	ldr	r0, [pc, #152]	; (8007024 <_svfiprintf_r+0x1f0>)
 8006f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f90:	2206      	movs	r2, #6
 8006f92:	f7f9 f925 	bl	80001e0 <memchr>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d038      	beq.n	800700c <_svfiprintf_r+0x1d8>
 8006f9a:	4b23      	ldr	r3, [pc, #140]	; (8007028 <_svfiprintf_r+0x1f4>)
 8006f9c:	bb1b      	cbnz	r3, 8006fe6 <_svfiprintf_r+0x1b2>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	3307      	adds	r3, #7
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	4433      	add	r3, r6
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	e767      	b.n	8006e82 <_svfiprintf_r+0x4e>
 8006fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	2001      	movs	r0, #1
 8006fba:	e7a5      	b.n	8006f08 <_svfiprintf_r+0xd4>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	9305      	str	r3, [sp, #20]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 0c0a 	mov.w	ip, #10
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fce:	3a30      	subs	r2, #48	; 0x30
 8006fd0:	2a09      	cmp	r2, #9
 8006fd2:	d903      	bls.n	8006fdc <_svfiprintf_r+0x1a8>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c5      	beq.n	8006f64 <_svfiprintf_r+0x130>
 8006fd8:	9105      	str	r1, [sp, #20]
 8006fda:	e7c3      	b.n	8006f64 <_svfiprintf_r+0x130>
 8006fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7f0      	b.n	8006fc8 <_svfiprintf_r+0x194>
 8006fe6:	ab03      	add	r3, sp, #12
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	462a      	mov	r2, r5
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <_svfiprintf_r+0x1f8>)
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f3af 8000 	nop.w
 8006ff6:	1c42      	adds	r2, r0, #1
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	d1d6      	bne.n	8006faa <_svfiprintf_r+0x176>
 8006ffc:	89ab      	ldrh	r3, [r5, #12]
 8006ffe:	065b      	lsls	r3, r3, #25
 8007000:	f53f af2c 	bmi.w	8006e5c <_svfiprintf_r+0x28>
 8007004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007006:	b01d      	add	sp, #116	; 0x74
 8007008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700c:	ab03      	add	r3, sp, #12
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	462a      	mov	r2, r5
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <_svfiprintf_r+0x1f8>)
 8007014:	a904      	add	r1, sp, #16
 8007016:	4638      	mov	r0, r7
 8007018:	f000 f9d4 	bl	80073c4 <_printf_i>
 800701c:	e7eb      	b.n	8006ff6 <_svfiprintf_r+0x1c2>
 800701e:	bf00      	nop
 8007020:	08008121 	.word	0x08008121
 8007024:	0800812b 	.word	0x0800812b
 8007028:	00000000 	.word	0x00000000
 800702c:	08006d7d 	.word	0x08006d7d
 8007030:	08008127 	.word	0x08008127

08007034 <__sfputc_r>:
 8007034:	6893      	ldr	r3, [r2, #8]
 8007036:	3b01      	subs	r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	b410      	push	{r4}
 800703c:	6093      	str	r3, [r2, #8]
 800703e:	da08      	bge.n	8007052 <__sfputc_r+0x1e>
 8007040:	6994      	ldr	r4, [r2, #24]
 8007042:	42a3      	cmp	r3, r4
 8007044:	db01      	blt.n	800704a <__sfputc_r+0x16>
 8007046:	290a      	cmp	r1, #10
 8007048:	d103      	bne.n	8007052 <__sfputc_r+0x1e>
 800704a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800704e:	f000 baef 	b.w	8007630 <__swbuf_r>
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	1c58      	adds	r0, r3, #1
 8007056:	6010      	str	r0, [r2, #0]
 8007058:	7019      	strb	r1, [r3, #0]
 800705a:	4608      	mov	r0, r1
 800705c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007060:	4770      	bx	lr

08007062 <__sfputs_r>:
 8007062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	4614      	mov	r4, r2
 800706a:	18d5      	adds	r5, r2, r3
 800706c:	42ac      	cmp	r4, r5
 800706e:	d101      	bne.n	8007074 <__sfputs_r+0x12>
 8007070:	2000      	movs	r0, #0
 8007072:	e007      	b.n	8007084 <__sfputs_r+0x22>
 8007074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007078:	463a      	mov	r2, r7
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ffda 	bl	8007034 <__sfputc_r>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d1f3      	bne.n	800706c <__sfputs_r+0xa>
 8007084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007088 <_vfiprintf_r>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	460d      	mov	r5, r1
 800708e:	b09d      	sub	sp, #116	; 0x74
 8007090:	4614      	mov	r4, r2
 8007092:	4698      	mov	r8, r3
 8007094:	4606      	mov	r6, r0
 8007096:	b118      	cbz	r0, 80070a0 <_vfiprintf_r+0x18>
 8007098:	6983      	ldr	r3, [r0, #24]
 800709a:	b90b      	cbnz	r3, 80070a0 <_vfiprintf_r+0x18>
 800709c:	f000 fcaa 	bl	80079f4 <__sinit>
 80070a0:	4b89      	ldr	r3, [pc, #548]	; (80072c8 <_vfiprintf_r+0x240>)
 80070a2:	429d      	cmp	r5, r3
 80070a4:	d11b      	bne.n	80070de <_vfiprintf_r+0x56>
 80070a6:	6875      	ldr	r5, [r6, #4]
 80070a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	d405      	bmi.n	80070ba <_vfiprintf_r+0x32>
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	059a      	lsls	r2, r3, #22
 80070b2:	d402      	bmi.n	80070ba <_vfiprintf_r+0x32>
 80070b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b6:	f000 fd3b 	bl	8007b30 <__retarget_lock_acquire_recursive>
 80070ba:	89ab      	ldrh	r3, [r5, #12]
 80070bc:	071b      	lsls	r3, r3, #28
 80070be:	d501      	bpl.n	80070c4 <_vfiprintf_r+0x3c>
 80070c0:	692b      	ldr	r3, [r5, #16]
 80070c2:	b9eb      	cbnz	r3, 8007100 <_vfiprintf_r+0x78>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 fb04 	bl	80076d4 <__swsetup_r>
 80070cc:	b1c0      	cbz	r0, 8007100 <_vfiprintf_r+0x78>
 80070ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d0:	07dc      	lsls	r4, r3, #31
 80070d2:	d50e      	bpl.n	80070f2 <_vfiprintf_r+0x6a>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070d8:	b01d      	add	sp, #116	; 0x74
 80070da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070de:	4b7b      	ldr	r3, [pc, #492]	; (80072cc <_vfiprintf_r+0x244>)
 80070e0:	429d      	cmp	r5, r3
 80070e2:	d101      	bne.n	80070e8 <_vfiprintf_r+0x60>
 80070e4:	68b5      	ldr	r5, [r6, #8]
 80070e6:	e7df      	b.n	80070a8 <_vfiprintf_r+0x20>
 80070e8:	4b79      	ldr	r3, [pc, #484]	; (80072d0 <_vfiprintf_r+0x248>)
 80070ea:	429d      	cmp	r5, r3
 80070ec:	bf08      	it	eq
 80070ee:	68f5      	ldreq	r5, [r6, #12]
 80070f0:	e7da      	b.n	80070a8 <_vfiprintf_r+0x20>
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	0598      	lsls	r0, r3, #22
 80070f6:	d4ed      	bmi.n	80070d4 <_vfiprintf_r+0x4c>
 80070f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070fa:	f000 fd1a 	bl	8007b32 <__retarget_lock_release_recursive>
 80070fe:	e7e9      	b.n	80070d4 <_vfiprintf_r+0x4c>
 8007100:	2300      	movs	r3, #0
 8007102:	9309      	str	r3, [sp, #36]	; 0x24
 8007104:	2320      	movs	r3, #32
 8007106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800710a:	f8cd 800c 	str.w	r8, [sp, #12]
 800710e:	2330      	movs	r3, #48	; 0x30
 8007110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072d4 <_vfiprintf_r+0x24c>
 8007114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007118:	f04f 0901 	mov.w	r9, #1
 800711c:	4623      	mov	r3, r4
 800711e:	469a      	mov	sl, r3
 8007120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007124:	b10a      	cbz	r2, 800712a <_vfiprintf_r+0xa2>
 8007126:	2a25      	cmp	r2, #37	; 0x25
 8007128:	d1f9      	bne.n	800711e <_vfiprintf_r+0x96>
 800712a:	ebba 0b04 	subs.w	fp, sl, r4
 800712e:	d00b      	beq.n	8007148 <_vfiprintf_r+0xc0>
 8007130:	465b      	mov	r3, fp
 8007132:	4622      	mov	r2, r4
 8007134:	4629      	mov	r1, r5
 8007136:	4630      	mov	r0, r6
 8007138:	f7ff ff93 	bl	8007062 <__sfputs_r>
 800713c:	3001      	adds	r0, #1
 800713e:	f000 80aa 	beq.w	8007296 <_vfiprintf_r+0x20e>
 8007142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007144:	445a      	add	r2, fp
 8007146:	9209      	str	r2, [sp, #36]	; 0x24
 8007148:	f89a 3000 	ldrb.w	r3, [sl]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80a2 	beq.w	8007296 <_vfiprintf_r+0x20e>
 8007152:	2300      	movs	r3, #0
 8007154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800715c:	f10a 0a01 	add.w	sl, sl, #1
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	9307      	str	r3, [sp, #28]
 8007164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007168:	931a      	str	r3, [sp, #104]	; 0x68
 800716a:	4654      	mov	r4, sl
 800716c:	2205      	movs	r2, #5
 800716e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007172:	4858      	ldr	r0, [pc, #352]	; (80072d4 <_vfiprintf_r+0x24c>)
 8007174:	f7f9 f834 	bl	80001e0 <memchr>
 8007178:	9a04      	ldr	r2, [sp, #16]
 800717a:	b9d8      	cbnz	r0, 80071b4 <_vfiprintf_r+0x12c>
 800717c:	06d1      	lsls	r1, r2, #27
 800717e:	bf44      	itt	mi
 8007180:	2320      	movmi	r3, #32
 8007182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007186:	0713      	lsls	r3, r2, #28
 8007188:	bf44      	itt	mi
 800718a:	232b      	movmi	r3, #43	; 0x2b
 800718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007190:	f89a 3000 	ldrb.w	r3, [sl]
 8007194:	2b2a      	cmp	r3, #42	; 0x2a
 8007196:	d015      	beq.n	80071c4 <_vfiprintf_r+0x13c>
 8007198:	9a07      	ldr	r2, [sp, #28]
 800719a:	4654      	mov	r4, sl
 800719c:	2000      	movs	r0, #0
 800719e:	f04f 0c0a 	mov.w	ip, #10
 80071a2:	4621      	mov	r1, r4
 80071a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a8:	3b30      	subs	r3, #48	; 0x30
 80071aa:	2b09      	cmp	r3, #9
 80071ac:	d94e      	bls.n	800724c <_vfiprintf_r+0x1c4>
 80071ae:	b1b0      	cbz	r0, 80071de <_vfiprintf_r+0x156>
 80071b0:	9207      	str	r2, [sp, #28]
 80071b2:	e014      	b.n	80071de <_vfiprintf_r+0x156>
 80071b4:	eba0 0308 	sub.w	r3, r0, r8
 80071b8:	fa09 f303 	lsl.w	r3, r9, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	46a2      	mov	sl, r4
 80071c2:	e7d2      	b.n	800716a <_vfiprintf_r+0xe2>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	1d19      	adds	r1, r3, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	9103      	str	r1, [sp, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfbb      	ittet	lt
 80071d0:	425b      	neglt	r3, r3
 80071d2:	f042 0202 	orrlt.w	r2, r2, #2
 80071d6:	9307      	strge	r3, [sp, #28]
 80071d8:	9307      	strlt	r3, [sp, #28]
 80071da:	bfb8      	it	lt
 80071dc:	9204      	strlt	r2, [sp, #16]
 80071de:	7823      	ldrb	r3, [r4, #0]
 80071e0:	2b2e      	cmp	r3, #46	; 0x2e
 80071e2:	d10c      	bne.n	80071fe <_vfiprintf_r+0x176>
 80071e4:	7863      	ldrb	r3, [r4, #1]
 80071e6:	2b2a      	cmp	r3, #42	; 0x2a
 80071e8:	d135      	bne.n	8007256 <_vfiprintf_r+0x1ce>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	1d1a      	adds	r2, r3, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	9203      	str	r2, [sp, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfb8      	it	lt
 80071f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071fa:	3402      	adds	r4, #2
 80071fc:	9305      	str	r3, [sp, #20]
 80071fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072e4 <_vfiprintf_r+0x25c>
 8007202:	7821      	ldrb	r1, [r4, #0]
 8007204:	2203      	movs	r2, #3
 8007206:	4650      	mov	r0, sl
 8007208:	f7f8 ffea 	bl	80001e0 <memchr>
 800720c:	b140      	cbz	r0, 8007220 <_vfiprintf_r+0x198>
 800720e:	2340      	movs	r3, #64	; 0x40
 8007210:	eba0 000a 	sub.w	r0, r0, sl
 8007214:	fa03 f000 	lsl.w	r0, r3, r0
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	4303      	orrs	r3, r0
 800721c:	3401      	adds	r4, #1
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007224:	482c      	ldr	r0, [pc, #176]	; (80072d8 <_vfiprintf_r+0x250>)
 8007226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800722a:	2206      	movs	r2, #6
 800722c:	f7f8 ffd8 	bl	80001e0 <memchr>
 8007230:	2800      	cmp	r0, #0
 8007232:	d03f      	beq.n	80072b4 <_vfiprintf_r+0x22c>
 8007234:	4b29      	ldr	r3, [pc, #164]	; (80072dc <_vfiprintf_r+0x254>)
 8007236:	bb1b      	cbnz	r3, 8007280 <_vfiprintf_r+0x1f8>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	3307      	adds	r3, #7
 800723c:	f023 0307 	bic.w	r3, r3, #7
 8007240:	3308      	adds	r3, #8
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007246:	443b      	add	r3, r7
 8007248:	9309      	str	r3, [sp, #36]	; 0x24
 800724a:	e767      	b.n	800711c <_vfiprintf_r+0x94>
 800724c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007250:	460c      	mov	r4, r1
 8007252:	2001      	movs	r0, #1
 8007254:	e7a5      	b.n	80071a2 <_vfiprintf_r+0x11a>
 8007256:	2300      	movs	r3, #0
 8007258:	3401      	adds	r4, #1
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	4619      	mov	r1, r3
 800725e:	f04f 0c0a 	mov.w	ip, #10
 8007262:	4620      	mov	r0, r4
 8007264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007268:	3a30      	subs	r2, #48	; 0x30
 800726a:	2a09      	cmp	r2, #9
 800726c:	d903      	bls.n	8007276 <_vfiprintf_r+0x1ee>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0c5      	beq.n	80071fe <_vfiprintf_r+0x176>
 8007272:	9105      	str	r1, [sp, #20]
 8007274:	e7c3      	b.n	80071fe <_vfiprintf_r+0x176>
 8007276:	fb0c 2101 	mla	r1, ip, r1, r2
 800727a:	4604      	mov	r4, r0
 800727c:	2301      	movs	r3, #1
 800727e:	e7f0      	b.n	8007262 <_vfiprintf_r+0x1da>
 8007280:	ab03      	add	r3, sp, #12
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	462a      	mov	r2, r5
 8007286:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <_vfiprintf_r+0x258>)
 8007288:	a904      	add	r1, sp, #16
 800728a:	4630      	mov	r0, r6
 800728c:	f3af 8000 	nop.w
 8007290:	4607      	mov	r7, r0
 8007292:	1c78      	adds	r0, r7, #1
 8007294:	d1d6      	bne.n	8007244 <_vfiprintf_r+0x1bc>
 8007296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007298:	07d9      	lsls	r1, r3, #31
 800729a:	d405      	bmi.n	80072a8 <_vfiprintf_r+0x220>
 800729c:	89ab      	ldrh	r3, [r5, #12]
 800729e:	059a      	lsls	r2, r3, #22
 80072a0:	d402      	bmi.n	80072a8 <_vfiprintf_r+0x220>
 80072a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072a4:	f000 fc45 	bl	8007b32 <__retarget_lock_release_recursive>
 80072a8:	89ab      	ldrh	r3, [r5, #12]
 80072aa:	065b      	lsls	r3, r3, #25
 80072ac:	f53f af12 	bmi.w	80070d4 <_vfiprintf_r+0x4c>
 80072b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072b2:	e711      	b.n	80070d8 <_vfiprintf_r+0x50>
 80072b4:	ab03      	add	r3, sp, #12
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	462a      	mov	r2, r5
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <_vfiprintf_r+0x258>)
 80072bc:	a904      	add	r1, sp, #16
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f880 	bl	80073c4 <_printf_i>
 80072c4:	e7e4      	b.n	8007290 <_vfiprintf_r+0x208>
 80072c6:	bf00      	nop
 80072c8:	08008174 	.word	0x08008174
 80072cc:	08008194 	.word	0x08008194
 80072d0:	08008154 	.word	0x08008154
 80072d4:	08008121 	.word	0x08008121
 80072d8:	0800812b 	.word	0x0800812b
 80072dc:	00000000 	.word	0x00000000
 80072e0:	08007063 	.word	0x08007063
 80072e4:	08008127 	.word	0x08008127

080072e8 <_printf_common>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	4616      	mov	r6, r2
 80072ee:	4699      	mov	r9, r3
 80072f0:	688a      	ldr	r2, [r1, #8]
 80072f2:	690b      	ldr	r3, [r1, #16]
 80072f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bfb8      	it	lt
 80072fc:	4613      	movlt	r3, r2
 80072fe:	6033      	str	r3, [r6, #0]
 8007300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007304:	4607      	mov	r7, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b10a      	cbz	r2, 800730e <_printf_common+0x26>
 800730a:	3301      	adds	r3, #1
 800730c:	6033      	str	r3, [r6, #0]
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	0699      	lsls	r1, r3, #26
 8007312:	bf42      	ittt	mi
 8007314:	6833      	ldrmi	r3, [r6, #0]
 8007316:	3302      	addmi	r3, #2
 8007318:	6033      	strmi	r3, [r6, #0]
 800731a:	6825      	ldr	r5, [r4, #0]
 800731c:	f015 0506 	ands.w	r5, r5, #6
 8007320:	d106      	bne.n	8007330 <_printf_common+0x48>
 8007322:	f104 0a19 	add.w	sl, r4, #25
 8007326:	68e3      	ldr	r3, [r4, #12]
 8007328:	6832      	ldr	r2, [r6, #0]
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	42ab      	cmp	r3, r5
 800732e:	dc26      	bgt.n	800737e <_printf_common+0x96>
 8007330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007334:	1e13      	subs	r3, r2, #0
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	bf18      	it	ne
 800733a:	2301      	movne	r3, #1
 800733c:	0692      	lsls	r2, r2, #26
 800733e:	d42b      	bmi.n	8007398 <_printf_common+0xb0>
 8007340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007344:	4649      	mov	r1, r9
 8007346:	4638      	mov	r0, r7
 8007348:	47c0      	blx	r8
 800734a:	3001      	adds	r0, #1
 800734c:	d01e      	beq.n	800738c <_printf_common+0xa4>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	68e5      	ldr	r5, [r4, #12]
 8007352:	6832      	ldr	r2, [r6, #0]
 8007354:	f003 0306 	and.w	r3, r3, #6
 8007358:	2b04      	cmp	r3, #4
 800735a:	bf08      	it	eq
 800735c:	1aad      	subeq	r5, r5, r2
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	6922      	ldr	r2, [r4, #16]
 8007362:	bf0c      	ite	eq
 8007364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007368:	2500      	movne	r5, #0
 800736a:	4293      	cmp	r3, r2
 800736c:	bfc4      	itt	gt
 800736e:	1a9b      	subgt	r3, r3, r2
 8007370:	18ed      	addgt	r5, r5, r3
 8007372:	2600      	movs	r6, #0
 8007374:	341a      	adds	r4, #26
 8007376:	42b5      	cmp	r5, r6
 8007378:	d11a      	bne.n	80073b0 <_printf_common+0xc8>
 800737a:	2000      	movs	r0, #0
 800737c:	e008      	b.n	8007390 <_printf_common+0xa8>
 800737e:	2301      	movs	r3, #1
 8007380:	4652      	mov	r2, sl
 8007382:	4649      	mov	r1, r9
 8007384:	4638      	mov	r0, r7
 8007386:	47c0      	blx	r8
 8007388:	3001      	adds	r0, #1
 800738a:	d103      	bne.n	8007394 <_printf_common+0xac>
 800738c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	3501      	adds	r5, #1
 8007396:	e7c6      	b.n	8007326 <_printf_common+0x3e>
 8007398:	18e1      	adds	r1, r4, r3
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	2030      	movs	r0, #48	; 0x30
 800739e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073a2:	4422      	add	r2, r4
 80073a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ac:	3302      	adds	r3, #2
 80073ae:	e7c7      	b.n	8007340 <_printf_common+0x58>
 80073b0:	2301      	movs	r3, #1
 80073b2:	4622      	mov	r2, r4
 80073b4:	4649      	mov	r1, r9
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d0e6      	beq.n	800738c <_printf_common+0xa4>
 80073be:	3601      	adds	r6, #1
 80073c0:	e7d9      	b.n	8007376 <_printf_common+0x8e>
	...

080073c4 <_printf_i>:
 80073c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	460c      	mov	r4, r1
 80073ca:	4691      	mov	r9, r2
 80073cc:	7e27      	ldrb	r7, [r4, #24]
 80073ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073d0:	2f78      	cmp	r7, #120	; 0x78
 80073d2:	4680      	mov	r8, r0
 80073d4:	469a      	mov	sl, r3
 80073d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073da:	d807      	bhi.n	80073ec <_printf_i+0x28>
 80073dc:	2f62      	cmp	r7, #98	; 0x62
 80073de:	d80a      	bhi.n	80073f6 <_printf_i+0x32>
 80073e0:	2f00      	cmp	r7, #0
 80073e2:	f000 80d8 	beq.w	8007596 <_printf_i+0x1d2>
 80073e6:	2f58      	cmp	r7, #88	; 0x58
 80073e8:	f000 80a3 	beq.w	8007532 <_printf_i+0x16e>
 80073ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073f4:	e03a      	b.n	800746c <_printf_i+0xa8>
 80073f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073fa:	2b15      	cmp	r3, #21
 80073fc:	d8f6      	bhi.n	80073ec <_printf_i+0x28>
 80073fe:	a001      	add	r0, pc, #4	; (adr r0, 8007404 <_printf_i+0x40>)
 8007400:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007404:	0800745d 	.word	0x0800745d
 8007408:	08007471 	.word	0x08007471
 800740c:	080073ed 	.word	0x080073ed
 8007410:	080073ed 	.word	0x080073ed
 8007414:	080073ed 	.word	0x080073ed
 8007418:	080073ed 	.word	0x080073ed
 800741c:	08007471 	.word	0x08007471
 8007420:	080073ed 	.word	0x080073ed
 8007424:	080073ed 	.word	0x080073ed
 8007428:	080073ed 	.word	0x080073ed
 800742c:	080073ed 	.word	0x080073ed
 8007430:	0800757d 	.word	0x0800757d
 8007434:	080074a1 	.word	0x080074a1
 8007438:	0800755f 	.word	0x0800755f
 800743c:	080073ed 	.word	0x080073ed
 8007440:	080073ed 	.word	0x080073ed
 8007444:	0800759f 	.word	0x0800759f
 8007448:	080073ed 	.word	0x080073ed
 800744c:	080074a1 	.word	0x080074a1
 8007450:	080073ed 	.word	0x080073ed
 8007454:	080073ed 	.word	0x080073ed
 8007458:	08007567 	.word	0x08007567
 800745c:	680b      	ldr	r3, [r1, #0]
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	600a      	str	r2, [r1, #0]
 8007464:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800746c:	2301      	movs	r3, #1
 800746e:	e0a3      	b.n	80075b8 <_printf_i+0x1f4>
 8007470:	6825      	ldr	r5, [r4, #0]
 8007472:	6808      	ldr	r0, [r1, #0]
 8007474:	062e      	lsls	r6, r5, #24
 8007476:	f100 0304 	add.w	r3, r0, #4
 800747a:	d50a      	bpl.n	8007492 <_printf_i+0xce>
 800747c:	6805      	ldr	r5, [r0, #0]
 800747e:	600b      	str	r3, [r1, #0]
 8007480:	2d00      	cmp	r5, #0
 8007482:	da03      	bge.n	800748c <_printf_i+0xc8>
 8007484:	232d      	movs	r3, #45	; 0x2d
 8007486:	426d      	negs	r5, r5
 8007488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748c:	485e      	ldr	r0, [pc, #376]	; (8007608 <_printf_i+0x244>)
 800748e:	230a      	movs	r3, #10
 8007490:	e019      	b.n	80074c6 <_printf_i+0x102>
 8007492:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007496:	6805      	ldr	r5, [r0, #0]
 8007498:	600b      	str	r3, [r1, #0]
 800749a:	bf18      	it	ne
 800749c:	b22d      	sxthne	r5, r5
 800749e:	e7ef      	b.n	8007480 <_printf_i+0xbc>
 80074a0:	680b      	ldr	r3, [r1, #0]
 80074a2:	6825      	ldr	r5, [r4, #0]
 80074a4:	1d18      	adds	r0, r3, #4
 80074a6:	6008      	str	r0, [r1, #0]
 80074a8:	0628      	lsls	r0, r5, #24
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0xec>
 80074ac:	681d      	ldr	r5, [r3, #0]
 80074ae:	e002      	b.n	80074b6 <_printf_i+0xf2>
 80074b0:	0669      	lsls	r1, r5, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0xe8>
 80074b4:	881d      	ldrh	r5, [r3, #0]
 80074b6:	4854      	ldr	r0, [pc, #336]	; (8007608 <_printf_i+0x244>)
 80074b8:	2f6f      	cmp	r7, #111	; 0x6f
 80074ba:	bf0c      	ite	eq
 80074bc:	2308      	moveq	r3, #8
 80074be:	230a      	movne	r3, #10
 80074c0:	2100      	movs	r1, #0
 80074c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074c6:	6866      	ldr	r6, [r4, #4]
 80074c8:	60a6      	str	r6, [r4, #8]
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	bfa2      	ittt	ge
 80074ce:	6821      	ldrge	r1, [r4, #0]
 80074d0:	f021 0104 	bicge.w	r1, r1, #4
 80074d4:	6021      	strge	r1, [r4, #0]
 80074d6:	b90d      	cbnz	r5, 80074dc <_printf_i+0x118>
 80074d8:	2e00      	cmp	r6, #0
 80074da:	d04d      	beq.n	8007578 <_printf_i+0x1b4>
 80074dc:	4616      	mov	r6, r2
 80074de:	fbb5 f1f3 	udiv	r1, r5, r3
 80074e2:	fb03 5711 	mls	r7, r3, r1, r5
 80074e6:	5dc7      	ldrb	r7, [r0, r7]
 80074e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074ec:	462f      	mov	r7, r5
 80074ee:	42bb      	cmp	r3, r7
 80074f0:	460d      	mov	r5, r1
 80074f2:	d9f4      	bls.n	80074de <_printf_i+0x11a>
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d10b      	bne.n	8007510 <_printf_i+0x14c>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	07df      	lsls	r7, r3, #31
 80074fc:	d508      	bpl.n	8007510 <_printf_i+0x14c>
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	6861      	ldr	r1, [r4, #4]
 8007502:	4299      	cmp	r1, r3
 8007504:	bfde      	ittt	le
 8007506:	2330      	movle	r3, #48	; 0x30
 8007508:	f806 3c01 	strble.w	r3, [r6, #-1]
 800750c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007510:	1b92      	subs	r2, r2, r6
 8007512:	6122      	str	r2, [r4, #16]
 8007514:	f8cd a000 	str.w	sl, [sp]
 8007518:	464b      	mov	r3, r9
 800751a:	aa03      	add	r2, sp, #12
 800751c:	4621      	mov	r1, r4
 800751e:	4640      	mov	r0, r8
 8007520:	f7ff fee2 	bl	80072e8 <_printf_common>
 8007524:	3001      	adds	r0, #1
 8007526:	d14c      	bne.n	80075c2 <_printf_i+0x1fe>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800752c:	b004      	add	sp, #16
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007532:	4835      	ldr	r0, [pc, #212]	; (8007608 <_printf_i+0x244>)
 8007534:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	680e      	ldr	r6, [r1, #0]
 800753c:	061f      	lsls	r7, r3, #24
 800753e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007542:	600e      	str	r6, [r1, #0]
 8007544:	d514      	bpl.n	8007570 <_printf_i+0x1ac>
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	bf44      	itt	mi
 800754a:	f043 0320 	orrmi.w	r3, r3, #32
 800754e:	6023      	strmi	r3, [r4, #0]
 8007550:	b91d      	cbnz	r5, 800755a <_printf_i+0x196>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	f023 0320 	bic.w	r3, r3, #32
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	2310      	movs	r3, #16
 800755c:	e7b0      	b.n	80074c0 <_printf_i+0xfc>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	f043 0320 	orr.w	r3, r3, #32
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	2378      	movs	r3, #120	; 0x78
 8007568:	4828      	ldr	r0, [pc, #160]	; (800760c <_printf_i+0x248>)
 800756a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800756e:	e7e3      	b.n	8007538 <_printf_i+0x174>
 8007570:	065e      	lsls	r6, r3, #25
 8007572:	bf48      	it	mi
 8007574:	b2ad      	uxthmi	r5, r5
 8007576:	e7e6      	b.n	8007546 <_printf_i+0x182>
 8007578:	4616      	mov	r6, r2
 800757a:	e7bb      	b.n	80074f4 <_printf_i+0x130>
 800757c:	680b      	ldr	r3, [r1, #0]
 800757e:	6826      	ldr	r6, [r4, #0]
 8007580:	6960      	ldr	r0, [r4, #20]
 8007582:	1d1d      	adds	r5, r3, #4
 8007584:	600d      	str	r5, [r1, #0]
 8007586:	0635      	lsls	r5, r6, #24
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	d501      	bpl.n	8007590 <_printf_i+0x1cc>
 800758c:	6018      	str	r0, [r3, #0]
 800758e:	e002      	b.n	8007596 <_printf_i+0x1d2>
 8007590:	0671      	lsls	r1, r6, #25
 8007592:	d5fb      	bpl.n	800758c <_printf_i+0x1c8>
 8007594:	8018      	strh	r0, [r3, #0]
 8007596:	2300      	movs	r3, #0
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	4616      	mov	r6, r2
 800759c:	e7ba      	b.n	8007514 <_printf_i+0x150>
 800759e:	680b      	ldr	r3, [r1, #0]
 80075a0:	1d1a      	adds	r2, r3, #4
 80075a2:	600a      	str	r2, [r1, #0]
 80075a4:	681e      	ldr	r6, [r3, #0]
 80075a6:	6862      	ldr	r2, [r4, #4]
 80075a8:	2100      	movs	r1, #0
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7f8 fe18 	bl	80001e0 <memchr>
 80075b0:	b108      	cbz	r0, 80075b6 <_printf_i+0x1f2>
 80075b2:	1b80      	subs	r0, r0, r6
 80075b4:	6060      	str	r0, [r4, #4]
 80075b6:	6863      	ldr	r3, [r4, #4]
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	2300      	movs	r3, #0
 80075bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c0:	e7a8      	b.n	8007514 <_printf_i+0x150>
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	4632      	mov	r2, r6
 80075c6:	4649      	mov	r1, r9
 80075c8:	4640      	mov	r0, r8
 80075ca:	47d0      	blx	sl
 80075cc:	3001      	adds	r0, #1
 80075ce:	d0ab      	beq.n	8007528 <_printf_i+0x164>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	079b      	lsls	r3, r3, #30
 80075d4:	d413      	bmi.n	80075fe <_printf_i+0x23a>
 80075d6:	68e0      	ldr	r0, [r4, #12]
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	4298      	cmp	r0, r3
 80075dc:	bfb8      	it	lt
 80075de:	4618      	movlt	r0, r3
 80075e0:	e7a4      	b.n	800752c <_printf_i+0x168>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4632      	mov	r2, r6
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d09b      	beq.n	8007528 <_printf_i+0x164>
 80075f0:	3501      	adds	r5, #1
 80075f2:	68e3      	ldr	r3, [r4, #12]
 80075f4:	9903      	ldr	r1, [sp, #12]
 80075f6:	1a5b      	subs	r3, r3, r1
 80075f8:	42ab      	cmp	r3, r5
 80075fa:	dcf2      	bgt.n	80075e2 <_printf_i+0x21e>
 80075fc:	e7eb      	b.n	80075d6 <_printf_i+0x212>
 80075fe:	2500      	movs	r5, #0
 8007600:	f104 0619 	add.w	r6, r4, #25
 8007604:	e7f5      	b.n	80075f2 <_printf_i+0x22e>
 8007606:	bf00      	nop
 8007608:	08008132 	.word	0x08008132
 800760c:	08008143 	.word	0x08008143

08007610 <_sbrk_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d06      	ldr	r5, [pc, #24]	; (800762c <_sbrk_r+0x1c>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	602b      	str	r3, [r5, #0]
 800761c:	f7f9 fc90 	bl	8000f40 <_sbrk>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_sbrk_r+0x1a>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_sbrk_r+0x1a>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	2000073c 	.word	0x2000073c

08007630 <__swbuf_r>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	460e      	mov	r6, r1
 8007634:	4614      	mov	r4, r2
 8007636:	4605      	mov	r5, r0
 8007638:	b118      	cbz	r0, 8007642 <__swbuf_r+0x12>
 800763a:	6983      	ldr	r3, [r0, #24]
 800763c:	b90b      	cbnz	r3, 8007642 <__swbuf_r+0x12>
 800763e:	f000 f9d9 	bl	80079f4 <__sinit>
 8007642:	4b21      	ldr	r3, [pc, #132]	; (80076c8 <__swbuf_r+0x98>)
 8007644:	429c      	cmp	r4, r3
 8007646:	d12b      	bne.n	80076a0 <__swbuf_r+0x70>
 8007648:	686c      	ldr	r4, [r5, #4]
 800764a:	69a3      	ldr	r3, [r4, #24]
 800764c:	60a3      	str	r3, [r4, #8]
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	071a      	lsls	r2, r3, #28
 8007652:	d52f      	bpl.n	80076b4 <__swbuf_r+0x84>
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	b36b      	cbz	r3, 80076b4 <__swbuf_r+0x84>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	6820      	ldr	r0, [r4, #0]
 800765c:	1ac0      	subs	r0, r0, r3
 800765e:	6963      	ldr	r3, [r4, #20]
 8007660:	b2f6      	uxtb	r6, r6
 8007662:	4283      	cmp	r3, r0
 8007664:	4637      	mov	r7, r6
 8007666:	dc04      	bgt.n	8007672 <__swbuf_r+0x42>
 8007668:	4621      	mov	r1, r4
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f92e 	bl	80078cc <_fflush_r>
 8007670:	bb30      	cbnz	r0, 80076c0 <__swbuf_r+0x90>
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	3b01      	subs	r3, #1
 8007676:	60a3      	str	r3, [r4, #8]
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	6022      	str	r2, [r4, #0]
 800767e:	701e      	strb	r6, [r3, #0]
 8007680:	6963      	ldr	r3, [r4, #20]
 8007682:	3001      	adds	r0, #1
 8007684:	4283      	cmp	r3, r0
 8007686:	d004      	beq.n	8007692 <__swbuf_r+0x62>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	07db      	lsls	r3, r3, #31
 800768c:	d506      	bpl.n	800769c <__swbuf_r+0x6c>
 800768e:	2e0a      	cmp	r6, #10
 8007690:	d104      	bne.n	800769c <__swbuf_r+0x6c>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 f919 	bl	80078cc <_fflush_r>
 800769a:	b988      	cbnz	r0, 80076c0 <__swbuf_r+0x90>
 800769c:	4638      	mov	r0, r7
 800769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <__swbuf_r+0x9c>)
 80076a2:	429c      	cmp	r4, r3
 80076a4:	d101      	bne.n	80076aa <__swbuf_r+0x7a>
 80076a6:	68ac      	ldr	r4, [r5, #8]
 80076a8:	e7cf      	b.n	800764a <__swbuf_r+0x1a>
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <__swbuf_r+0xa0>)
 80076ac:	429c      	cmp	r4, r3
 80076ae:	bf08      	it	eq
 80076b0:	68ec      	ldreq	r4, [r5, #12]
 80076b2:	e7ca      	b.n	800764a <__swbuf_r+0x1a>
 80076b4:	4621      	mov	r1, r4
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 f80c 	bl	80076d4 <__swsetup_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d0cb      	beq.n	8007658 <__swbuf_r+0x28>
 80076c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80076c4:	e7ea      	b.n	800769c <__swbuf_r+0x6c>
 80076c6:	bf00      	nop
 80076c8:	08008174 	.word	0x08008174
 80076cc:	08008194 	.word	0x08008194
 80076d0:	08008154 	.word	0x08008154

080076d4 <__swsetup_r>:
 80076d4:	4b32      	ldr	r3, [pc, #200]	; (80077a0 <__swsetup_r+0xcc>)
 80076d6:	b570      	push	{r4, r5, r6, lr}
 80076d8:	681d      	ldr	r5, [r3, #0]
 80076da:	4606      	mov	r6, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	b125      	cbz	r5, 80076ea <__swsetup_r+0x16>
 80076e0:	69ab      	ldr	r3, [r5, #24]
 80076e2:	b913      	cbnz	r3, 80076ea <__swsetup_r+0x16>
 80076e4:	4628      	mov	r0, r5
 80076e6:	f000 f985 	bl	80079f4 <__sinit>
 80076ea:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <__swsetup_r+0xd0>)
 80076ec:	429c      	cmp	r4, r3
 80076ee:	d10f      	bne.n	8007710 <__swsetup_r+0x3c>
 80076f0:	686c      	ldr	r4, [r5, #4]
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076f8:	0719      	lsls	r1, r3, #28
 80076fa:	d42c      	bmi.n	8007756 <__swsetup_r+0x82>
 80076fc:	06dd      	lsls	r5, r3, #27
 80076fe:	d411      	bmi.n	8007724 <__swsetup_r+0x50>
 8007700:	2309      	movs	r3, #9
 8007702:	6033      	str	r3, [r6, #0]
 8007704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800770e:	e03e      	b.n	800778e <__swsetup_r+0xba>
 8007710:	4b25      	ldr	r3, [pc, #148]	; (80077a8 <__swsetup_r+0xd4>)
 8007712:	429c      	cmp	r4, r3
 8007714:	d101      	bne.n	800771a <__swsetup_r+0x46>
 8007716:	68ac      	ldr	r4, [r5, #8]
 8007718:	e7eb      	b.n	80076f2 <__swsetup_r+0x1e>
 800771a:	4b24      	ldr	r3, [pc, #144]	; (80077ac <__swsetup_r+0xd8>)
 800771c:	429c      	cmp	r4, r3
 800771e:	bf08      	it	eq
 8007720:	68ec      	ldreq	r4, [r5, #12]
 8007722:	e7e6      	b.n	80076f2 <__swsetup_r+0x1e>
 8007724:	0758      	lsls	r0, r3, #29
 8007726:	d512      	bpl.n	800774e <__swsetup_r+0x7a>
 8007728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800772a:	b141      	cbz	r1, 800773e <__swsetup_r+0x6a>
 800772c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007730:	4299      	cmp	r1, r3
 8007732:	d002      	beq.n	800773a <__swsetup_r+0x66>
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff fa77 	bl	8006c28 <_free_r>
 800773a:	2300      	movs	r3, #0
 800773c:	6363      	str	r3, [r4, #52]	; 0x34
 800773e:	89a3      	ldrh	r3, [r4, #12]
 8007740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007744:	81a3      	strh	r3, [r4, #12]
 8007746:	2300      	movs	r3, #0
 8007748:	6063      	str	r3, [r4, #4]
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	f043 0308 	orr.w	r3, r3, #8
 8007754:	81a3      	strh	r3, [r4, #12]
 8007756:	6923      	ldr	r3, [r4, #16]
 8007758:	b94b      	cbnz	r3, 800776e <__swsetup_r+0x9a>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007764:	d003      	beq.n	800776e <__swsetup_r+0x9a>
 8007766:	4621      	mov	r1, r4
 8007768:	4630      	mov	r0, r6
 800776a:	f000 fa07 	bl	8007b7c <__smakebuf_r>
 800776e:	89a0      	ldrh	r0, [r4, #12]
 8007770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007774:	f010 0301 	ands.w	r3, r0, #1
 8007778:	d00a      	beq.n	8007790 <__swsetup_r+0xbc>
 800777a:	2300      	movs	r3, #0
 800777c:	60a3      	str	r3, [r4, #8]
 800777e:	6963      	ldr	r3, [r4, #20]
 8007780:	425b      	negs	r3, r3
 8007782:	61a3      	str	r3, [r4, #24]
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	b943      	cbnz	r3, 800779a <__swsetup_r+0xc6>
 8007788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800778c:	d1ba      	bne.n	8007704 <__swsetup_r+0x30>
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	0781      	lsls	r1, r0, #30
 8007792:	bf58      	it	pl
 8007794:	6963      	ldrpl	r3, [r4, #20]
 8007796:	60a3      	str	r3, [r4, #8]
 8007798:	e7f4      	b.n	8007784 <__swsetup_r+0xb0>
 800779a:	2000      	movs	r0, #0
 800779c:	e7f7      	b.n	800778e <__swsetup_r+0xba>
 800779e:	bf00      	nop
 80077a0:	2000000c 	.word	0x2000000c
 80077a4:	08008174 	.word	0x08008174
 80077a8:	08008194 	.word	0x08008194
 80077ac:	08008154 	.word	0x08008154

080077b0 <abort>:
 80077b0:	b508      	push	{r3, lr}
 80077b2:	2006      	movs	r0, #6
 80077b4:	f000 fa96 	bl	8007ce4 <raise>
 80077b8:	2001      	movs	r0, #1
 80077ba:	f7f9 fb49 	bl	8000e50 <_exit>
	...

080077c0 <__sflush_r>:
 80077c0:	898a      	ldrh	r2, [r1, #12]
 80077c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c6:	4605      	mov	r5, r0
 80077c8:	0710      	lsls	r0, r2, #28
 80077ca:	460c      	mov	r4, r1
 80077cc:	d458      	bmi.n	8007880 <__sflush_r+0xc0>
 80077ce:	684b      	ldr	r3, [r1, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dc05      	bgt.n	80077e0 <__sflush_r+0x20>
 80077d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	dc02      	bgt.n	80077e0 <__sflush_r+0x20>
 80077da:	2000      	movs	r0, #0
 80077dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077e2:	2e00      	cmp	r6, #0
 80077e4:	d0f9      	beq.n	80077da <__sflush_r+0x1a>
 80077e6:	2300      	movs	r3, #0
 80077e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077ec:	682f      	ldr	r7, [r5, #0]
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	d032      	beq.n	8007858 <__sflush_r+0x98>
 80077f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	075a      	lsls	r2, r3, #29
 80077f8:	d505      	bpl.n	8007806 <__sflush_r+0x46>
 80077fa:	6863      	ldr	r3, [r4, #4]
 80077fc:	1ac0      	subs	r0, r0, r3
 80077fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007800:	b10b      	cbz	r3, 8007806 <__sflush_r+0x46>
 8007802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007804:	1ac0      	subs	r0, r0, r3
 8007806:	2300      	movs	r3, #0
 8007808:	4602      	mov	r2, r0
 800780a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800780c:	6a21      	ldr	r1, [r4, #32]
 800780e:	4628      	mov	r0, r5
 8007810:	47b0      	blx	r6
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	d106      	bne.n	8007826 <__sflush_r+0x66>
 8007818:	6829      	ldr	r1, [r5, #0]
 800781a:	291d      	cmp	r1, #29
 800781c:	d82c      	bhi.n	8007878 <__sflush_r+0xb8>
 800781e:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <__sflush_r+0x108>)
 8007820:	40ca      	lsrs	r2, r1
 8007822:	07d6      	lsls	r6, r2, #31
 8007824:	d528      	bpl.n	8007878 <__sflush_r+0xb8>
 8007826:	2200      	movs	r2, #0
 8007828:	6062      	str	r2, [r4, #4]
 800782a:	04d9      	lsls	r1, r3, #19
 800782c:	6922      	ldr	r2, [r4, #16]
 800782e:	6022      	str	r2, [r4, #0]
 8007830:	d504      	bpl.n	800783c <__sflush_r+0x7c>
 8007832:	1c42      	adds	r2, r0, #1
 8007834:	d101      	bne.n	800783a <__sflush_r+0x7a>
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	b903      	cbnz	r3, 800783c <__sflush_r+0x7c>
 800783a:	6560      	str	r0, [r4, #84]	; 0x54
 800783c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800783e:	602f      	str	r7, [r5, #0]
 8007840:	2900      	cmp	r1, #0
 8007842:	d0ca      	beq.n	80077da <__sflush_r+0x1a>
 8007844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007848:	4299      	cmp	r1, r3
 800784a:	d002      	beq.n	8007852 <__sflush_r+0x92>
 800784c:	4628      	mov	r0, r5
 800784e:	f7ff f9eb 	bl	8006c28 <_free_r>
 8007852:	2000      	movs	r0, #0
 8007854:	6360      	str	r0, [r4, #52]	; 0x34
 8007856:	e7c1      	b.n	80077dc <__sflush_r+0x1c>
 8007858:	6a21      	ldr	r1, [r4, #32]
 800785a:	2301      	movs	r3, #1
 800785c:	4628      	mov	r0, r5
 800785e:	47b0      	blx	r6
 8007860:	1c41      	adds	r1, r0, #1
 8007862:	d1c7      	bne.n	80077f4 <__sflush_r+0x34>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0c4      	beq.n	80077f4 <__sflush_r+0x34>
 800786a:	2b1d      	cmp	r3, #29
 800786c:	d001      	beq.n	8007872 <__sflush_r+0xb2>
 800786e:	2b16      	cmp	r3, #22
 8007870:	d101      	bne.n	8007876 <__sflush_r+0xb6>
 8007872:	602f      	str	r7, [r5, #0]
 8007874:	e7b1      	b.n	80077da <__sflush_r+0x1a>
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	e7ad      	b.n	80077dc <__sflush_r+0x1c>
 8007880:	690f      	ldr	r7, [r1, #16]
 8007882:	2f00      	cmp	r7, #0
 8007884:	d0a9      	beq.n	80077da <__sflush_r+0x1a>
 8007886:	0793      	lsls	r3, r2, #30
 8007888:	680e      	ldr	r6, [r1, #0]
 800788a:	bf08      	it	eq
 800788c:	694b      	ldreq	r3, [r1, #20]
 800788e:	600f      	str	r7, [r1, #0]
 8007890:	bf18      	it	ne
 8007892:	2300      	movne	r3, #0
 8007894:	eba6 0807 	sub.w	r8, r6, r7
 8007898:	608b      	str	r3, [r1, #8]
 800789a:	f1b8 0f00 	cmp.w	r8, #0
 800789e:	dd9c      	ble.n	80077da <__sflush_r+0x1a>
 80078a0:	6a21      	ldr	r1, [r4, #32]
 80078a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078a4:	4643      	mov	r3, r8
 80078a6:	463a      	mov	r2, r7
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b0      	blx	r6
 80078ac:	2800      	cmp	r0, #0
 80078ae:	dc06      	bgt.n	80078be <__sflush_r+0xfe>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078bc:	e78e      	b.n	80077dc <__sflush_r+0x1c>
 80078be:	4407      	add	r7, r0
 80078c0:	eba8 0800 	sub.w	r8, r8, r0
 80078c4:	e7e9      	b.n	800789a <__sflush_r+0xda>
 80078c6:	bf00      	nop
 80078c8:	20400001 	.word	0x20400001

080078cc <_fflush_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	690b      	ldr	r3, [r1, #16]
 80078d0:	4605      	mov	r5, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	b913      	cbnz	r3, 80078dc <_fflush_r+0x10>
 80078d6:	2500      	movs	r5, #0
 80078d8:	4628      	mov	r0, r5
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	b118      	cbz	r0, 80078e6 <_fflush_r+0x1a>
 80078de:	6983      	ldr	r3, [r0, #24]
 80078e0:	b90b      	cbnz	r3, 80078e6 <_fflush_r+0x1a>
 80078e2:	f000 f887 	bl	80079f4 <__sinit>
 80078e6:	4b14      	ldr	r3, [pc, #80]	; (8007938 <_fflush_r+0x6c>)
 80078e8:	429c      	cmp	r4, r3
 80078ea:	d11b      	bne.n	8007924 <_fflush_r+0x58>
 80078ec:	686c      	ldr	r4, [r5, #4]
 80078ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0ef      	beq.n	80078d6 <_fflush_r+0xa>
 80078f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078f8:	07d0      	lsls	r0, r2, #31
 80078fa:	d404      	bmi.n	8007906 <_fflush_r+0x3a>
 80078fc:	0599      	lsls	r1, r3, #22
 80078fe:	d402      	bmi.n	8007906 <_fflush_r+0x3a>
 8007900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007902:	f000 f915 	bl	8007b30 <__retarget_lock_acquire_recursive>
 8007906:	4628      	mov	r0, r5
 8007908:	4621      	mov	r1, r4
 800790a:	f7ff ff59 	bl	80077c0 <__sflush_r>
 800790e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007910:	07da      	lsls	r2, r3, #31
 8007912:	4605      	mov	r5, r0
 8007914:	d4e0      	bmi.n	80078d8 <_fflush_r+0xc>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	059b      	lsls	r3, r3, #22
 800791a:	d4dd      	bmi.n	80078d8 <_fflush_r+0xc>
 800791c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800791e:	f000 f908 	bl	8007b32 <__retarget_lock_release_recursive>
 8007922:	e7d9      	b.n	80078d8 <_fflush_r+0xc>
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <_fflush_r+0x70>)
 8007926:	429c      	cmp	r4, r3
 8007928:	d101      	bne.n	800792e <_fflush_r+0x62>
 800792a:	68ac      	ldr	r4, [r5, #8]
 800792c:	e7df      	b.n	80078ee <_fflush_r+0x22>
 800792e:	4b04      	ldr	r3, [pc, #16]	; (8007940 <_fflush_r+0x74>)
 8007930:	429c      	cmp	r4, r3
 8007932:	bf08      	it	eq
 8007934:	68ec      	ldreq	r4, [r5, #12]
 8007936:	e7da      	b.n	80078ee <_fflush_r+0x22>
 8007938:	08008174 	.word	0x08008174
 800793c:	08008194 	.word	0x08008194
 8007940:	08008154 	.word	0x08008154

08007944 <std>:
 8007944:	2300      	movs	r3, #0
 8007946:	b510      	push	{r4, lr}
 8007948:	4604      	mov	r4, r0
 800794a:	e9c0 3300 	strd	r3, r3, [r0]
 800794e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007952:	6083      	str	r3, [r0, #8]
 8007954:	8181      	strh	r1, [r0, #12]
 8007956:	6643      	str	r3, [r0, #100]	; 0x64
 8007958:	81c2      	strh	r2, [r0, #14]
 800795a:	6183      	str	r3, [r0, #24]
 800795c:	4619      	mov	r1, r3
 800795e:	2208      	movs	r2, #8
 8007960:	305c      	adds	r0, #92	; 0x5c
 8007962:	f7ff f817 	bl	8006994 <memset>
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <std+0x38>)
 8007968:	6263      	str	r3, [r4, #36]	; 0x24
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <std+0x3c>)
 800796c:	62a3      	str	r3, [r4, #40]	; 0x28
 800796e:	4b05      	ldr	r3, [pc, #20]	; (8007984 <std+0x40>)
 8007970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007972:	4b05      	ldr	r3, [pc, #20]	; (8007988 <std+0x44>)
 8007974:	6224      	str	r4, [r4, #32]
 8007976:	6323      	str	r3, [r4, #48]	; 0x30
 8007978:	bd10      	pop	{r4, pc}
 800797a:	bf00      	nop
 800797c:	08007d1d 	.word	0x08007d1d
 8007980:	08007d3f 	.word	0x08007d3f
 8007984:	08007d77 	.word	0x08007d77
 8007988:	08007d9b 	.word	0x08007d9b

0800798c <_cleanup_r>:
 800798c:	4901      	ldr	r1, [pc, #4]	; (8007994 <_cleanup_r+0x8>)
 800798e:	f000 b8af 	b.w	8007af0 <_fwalk_reent>
 8007992:	bf00      	nop
 8007994:	080078cd 	.word	0x080078cd

08007998 <__sfmoreglue>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	1e4a      	subs	r2, r1, #1
 800799c:	2568      	movs	r5, #104	; 0x68
 800799e:	4355      	muls	r5, r2
 80079a0:	460e      	mov	r6, r1
 80079a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079a6:	f7ff f98f 	bl	8006cc8 <_malloc_r>
 80079aa:	4604      	mov	r4, r0
 80079ac:	b140      	cbz	r0, 80079c0 <__sfmoreglue+0x28>
 80079ae:	2100      	movs	r1, #0
 80079b0:	e9c0 1600 	strd	r1, r6, [r0]
 80079b4:	300c      	adds	r0, #12
 80079b6:	60a0      	str	r0, [r4, #8]
 80079b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079bc:	f7fe ffea 	bl	8006994 <memset>
 80079c0:	4620      	mov	r0, r4
 80079c2:	bd70      	pop	{r4, r5, r6, pc}

080079c4 <__sfp_lock_acquire>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__sfp_lock_acquire+0x8>)
 80079c6:	f000 b8b3 	b.w	8007b30 <__retarget_lock_acquire_recursive>
 80079ca:	bf00      	nop
 80079cc:	20000738 	.word	0x20000738

080079d0 <__sfp_lock_release>:
 80079d0:	4801      	ldr	r0, [pc, #4]	; (80079d8 <__sfp_lock_release+0x8>)
 80079d2:	f000 b8ae 	b.w	8007b32 <__retarget_lock_release_recursive>
 80079d6:	bf00      	nop
 80079d8:	20000738 	.word	0x20000738

080079dc <__sinit_lock_acquire>:
 80079dc:	4801      	ldr	r0, [pc, #4]	; (80079e4 <__sinit_lock_acquire+0x8>)
 80079de:	f000 b8a7 	b.w	8007b30 <__retarget_lock_acquire_recursive>
 80079e2:	bf00      	nop
 80079e4:	20000733 	.word	0x20000733

080079e8 <__sinit_lock_release>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__sinit_lock_release+0x8>)
 80079ea:	f000 b8a2 	b.w	8007b32 <__retarget_lock_release_recursive>
 80079ee:	bf00      	nop
 80079f0:	20000733 	.word	0x20000733

080079f4 <__sinit>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4604      	mov	r4, r0
 80079f8:	f7ff fff0 	bl	80079dc <__sinit_lock_acquire>
 80079fc:	69a3      	ldr	r3, [r4, #24]
 80079fe:	b11b      	cbz	r3, 8007a08 <__sinit+0x14>
 8007a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a04:	f7ff bff0 	b.w	80079e8 <__sinit_lock_release>
 8007a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8007a0e:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <__sinit+0x68>)
 8007a10:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <__sinit+0x6c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	bf04      	itt	eq
 8007a1a:	2301      	moveq	r3, #1
 8007a1c:	61a3      	streq	r3, [r4, #24]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 f820 	bl	8007a64 <__sfp>
 8007a24:	6060      	str	r0, [r4, #4]
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 f81c 	bl	8007a64 <__sfp>
 8007a2c:	60a0      	str	r0, [r4, #8]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 f818 	bl	8007a64 <__sfp>
 8007a34:	2200      	movs	r2, #0
 8007a36:	60e0      	str	r0, [r4, #12]
 8007a38:	2104      	movs	r1, #4
 8007a3a:	6860      	ldr	r0, [r4, #4]
 8007a3c:	f7ff ff82 	bl	8007944 <std>
 8007a40:	68a0      	ldr	r0, [r4, #8]
 8007a42:	2201      	movs	r2, #1
 8007a44:	2109      	movs	r1, #9
 8007a46:	f7ff ff7d 	bl	8007944 <std>
 8007a4a:	68e0      	ldr	r0, [r4, #12]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	2112      	movs	r1, #18
 8007a50:	f7ff ff78 	bl	8007944 <std>
 8007a54:	2301      	movs	r3, #1
 8007a56:	61a3      	str	r3, [r4, #24]
 8007a58:	e7d2      	b.n	8007a00 <__sinit+0xc>
 8007a5a:	bf00      	nop
 8007a5c:	08007f68 	.word	0x08007f68
 8007a60:	0800798d 	.word	0x0800798d

08007a64 <__sfp>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	4607      	mov	r7, r0
 8007a68:	f7ff ffac 	bl	80079c4 <__sfp_lock_acquire>
 8007a6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <__sfp+0x84>)
 8007a6e:	681e      	ldr	r6, [r3, #0]
 8007a70:	69b3      	ldr	r3, [r6, #24]
 8007a72:	b913      	cbnz	r3, 8007a7a <__sfp+0x16>
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff ffbd 	bl	80079f4 <__sinit>
 8007a7a:	3648      	adds	r6, #72	; 0x48
 8007a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	d503      	bpl.n	8007a8c <__sfp+0x28>
 8007a84:	6833      	ldr	r3, [r6, #0]
 8007a86:	b30b      	cbz	r3, 8007acc <__sfp+0x68>
 8007a88:	6836      	ldr	r6, [r6, #0]
 8007a8a:	e7f7      	b.n	8007a7c <__sfp+0x18>
 8007a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a90:	b9d5      	cbnz	r5, 8007ac8 <__sfp+0x64>
 8007a92:	4b16      	ldr	r3, [pc, #88]	; (8007aec <__sfp+0x88>)
 8007a94:	60e3      	str	r3, [r4, #12]
 8007a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a9c:	f000 f847 	bl	8007b2e <__retarget_lock_init_recursive>
 8007aa0:	f7ff ff96 	bl	80079d0 <__sfp_lock_release>
 8007aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007aac:	6025      	str	r5, [r4, #0]
 8007aae:	61a5      	str	r5, [r4, #24]
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ab8:	f7fe ff6c 	bl	8006994 <memset>
 8007abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac8:	3468      	adds	r4, #104	; 0x68
 8007aca:	e7d9      	b.n	8007a80 <__sfp+0x1c>
 8007acc:	2104      	movs	r1, #4
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f7ff ff62 	bl	8007998 <__sfmoreglue>
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	6030      	str	r0, [r6, #0]
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1d5      	bne.n	8007a88 <__sfp+0x24>
 8007adc:	f7ff ff78 	bl	80079d0 <__sfp_lock_release>
 8007ae0:	230c      	movs	r3, #12
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	e7ee      	b.n	8007ac4 <__sfp+0x60>
 8007ae6:	bf00      	nop
 8007ae8:	08007f68 	.word	0x08007f68
 8007aec:	ffff0001 	.word	0xffff0001

08007af0 <_fwalk_reent>:
 8007af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af4:	4606      	mov	r6, r0
 8007af6:	4688      	mov	r8, r1
 8007af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007afc:	2700      	movs	r7, #0
 8007afe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b02:	f1b9 0901 	subs.w	r9, r9, #1
 8007b06:	d505      	bpl.n	8007b14 <_fwalk_reent+0x24>
 8007b08:	6824      	ldr	r4, [r4, #0]
 8007b0a:	2c00      	cmp	r4, #0
 8007b0c:	d1f7      	bne.n	8007afe <_fwalk_reent+0xe>
 8007b0e:	4638      	mov	r0, r7
 8007b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b14:	89ab      	ldrh	r3, [r5, #12]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d907      	bls.n	8007b2a <_fwalk_reent+0x3a>
 8007b1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	d003      	beq.n	8007b2a <_fwalk_reent+0x3a>
 8007b22:	4629      	mov	r1, r5
 8007b24:	4630      	mov	r0, r6
 8007b26:	47c0      	blx	r8
 8007b28:	4307      	orrs	r7, r0
 8007b2a:	3568      	adds	r5, #104	; 0x68
 8007b2c:	e7e9      	b.n	8007b02 <_fwalk_reent+0x12>

08007b2e <__retarget_lock_init_recursive>:
 8007b2e:	4770      	bx	lr

08007b30 <__retarget_lock_acquire_recursive>:
 8007b30:	4770      	bx	lr

08007b32 <__retarget_lock_release_recursive>:
 8007b32:	4770      	bx	lr

08007b34 <__swhatbuf_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	460e      	mov	r6, r1
 8007b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	b096      	sub	sp, #88	; 0x58
 8007b40:	4614      	mov	r4, r2
 8007b42:	461d      	mov	r5, r3
 8007b44:	da07      	bge.n	8007b56 <__swhatbuf_r+0x22>
 8007b46:	2300      	movs	r3, #0
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	89b3      	ldrh	r3, [r6, #12]
 8007b4c:	061a      	lsls	r2, r3, #24
 8007b4e:	d410      	bmi.n	8007b72 <__swhatbuf_r+0x3e>
 8007b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b54:	e00e      	b.n	8007b74 <__swhatbuf_r+0x40>
 8007b56:	466a      	mov	r2, sp
 8007b58:	f000 f946 	bl	8007de8 <_fstat_r>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	dbf2      	blt.n	8007b46 <__swhatbuf_r+0x12>
 8007b60:	9a01      	ldr	r2, [sp, #4]
 8007b62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b6a:	425a      	negs	r2, r3
 8007b6c:	415a      	adcs	r2, r3
 8007b6e:	602a      	str	r2, [r5, #0]
 8007b70:	e7ee      	b.n	8007b50 <__swhatbuf_r+0x1c>
 8007b72:	2340      	movs	r3, #64	; 0x40
 8007b74:	2000      	movs	r0, #0
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	b016      	add	sp, #88	; 0x58
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}

08007b7c <__smakebuf_r>:
 8007b7c:	898b      	ldrh	r3, [r1, #12]
 8007b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b80:	079d      	lsls	r5, r3, #30
 8007b82:	4606      	mov	r6, r0
 8007b84:	460c      	mov	r4, r1
 8007b86:	d507      	bpl.n	8007b98 <__smakebuf_r+0x1c>
 8007b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	6123      	str	r3, [r4, #16]
 8007b90:	2301      	movs	r3, #1
 8007b92:	6163      	str	r3, [r4, #20]
 8007b94:	b002      	add	sp, #8
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	ab01      	add	r3, sp, #4
 8007b9a:	466a      	mov	r2, sp
 8007b9c:	f7ff ffca 	bl	8007b34 <__swhatbuf_r>
 8007ba0:	9900      	ldr	r1, [sp, #0]
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f7ff f88f 	bl	8006cc8 <_malloc_r>
 8007baa:	b948      	cbnz	r0, 8007bc0 <__smakebuf_r+0x44>
 8007bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb0:	059a      	lsls	r2, r3, #22
 8007bb2:	d4ef      	bmi.n	8007b94 <__smakebuf_r+0x18>
 8007bb4:	f023 0303 	bic.w	r3, r3, #3
 8007bb8:	f043 0302 	orr.w	r3, r3, #2
 8007bbc:	81a3      	strh	r3, [r4, #12]
 8007bbe:	e7e3      	b.n	8007b88 <__smakebuf_r+0xc>
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <__smakebuf_r+0x7c>)
 8007bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	6020      	str	r0, [r4, #0]
 8007bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	6163      	str	r3, [r4, #20]
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	6120      	str	r0, [r4, #16]
 8007bd6:	b15b      	cbz	r3, 8007bf0 <__smakebuf_r+0x74>
 8007bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 f915 	bl	8007e0c <_isatty_r>
 8007be2:	b128      	cbz	r0, 8007bf0 <__smakebuf_r+0x74>
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	89a0      	ldrh	r0, [r4, #12]
 8007bf2:	4305      	orrs	r5, r0
 8007bf4:	81a5      	strh	r5, [r4, #12]
 8007bf6:	e7cd      	b.n	8007b94 <__smakebuf_r+0x18>
 8007bf8:	0800798d 	.word	0x0800798d

08007bfc <memmove>:
 8007bfc:	4288      	cmp	r0, r1
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	eb01 0402 	add.w	r4, r1, r2
 8007c04:	d902      	bls.n	8007c0c <memmove+0x10>
 8007c06:	4284      	cmp	r4, r0
 8007c08:	4623      	mov	r3, r4
 8007c0a:	d807      	bhi.n	8007c1c <memmove+0x20>
 8007c0c:	1e43      	subs	r3, r0, #1
 8007c0e:	42a1      	cmp	r1, r4
 8007c10:	d008      	beq.n	8007c24 <memmove+0x28>
 8007c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c1a:	e7f8      	b.n	8007c0e <memmove+0x12>
 8007c1c:	4402      	add	r2, r0
 8007c1e:	4601      	mov	r1, r0
 8007c20:	428a      	cmp	r2, r1
 8007c22:	d100      	bne.n	8007c26 <memmove+0x2a>
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2e:	e7f7      	b.n	8007c20 <memmove+0x24>

08007c30 <__malloc_lock>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__malloc_lock+0x8>)
 8007c32:	f7ff bf7d 	b.w	8007b30 <__retarget_lock_acquire_recursive>
 8007c36:	bf00      	nop
 8007c38:	20000734 	.word	0x20000734

08007c3c <__malloc_unlock>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__malloc_unlock+0x8>)
 8007c3e:	f7ff bf78 	b.w	8007b32 <__retarget_lock_release_recursive>
 8007c42:	bf00      	nop
 8007c44:	20000734 	.word	0x20000734

08007c48 <_realloc_r>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	460e      	mov	r6, r1
 8007c50:	b921      	cbnz	r1, 8007c5c <_realloc_r+0x14>
 8007c52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c56:	4611      	mov	r1, r2
 8007c58:	f7ff b836 	b.w	8006cc8 <_malloc_r>
 8007c5c:	b922      	cbnz	r2, 8007c68 <_realloc_r+0x20>
 8007c5e:	f7fe ffe3 	bl	8006c28 <_free_r>
 8007c62:	4625      	mov	r5, r4
 8007c64:	4628      	mov	r0, r5
 8007c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c68:	f000 f8f2 	bl	8007e50 <_malloc_usable_size_r>
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d20f      	bcs.n	8007c90 <_realloc_r+0x48>
 8007c70:	4621      	mov	r1, r4
 8007c72:	4638      	mov	r0, r7
 8007c74:	f7ff f828 	bl	8006cc8 <_malloc_r>
 8007c78:	4605      	mov	r5, r0
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d0f2      	beq.n	8007c64 <_realloc_r+0x1c>
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4622      	mov	r2, r4
 8007c82:	f7fe fe79 	bl	8006978 <memcpy>
 8007c86:	4631      	mov	r1, r6
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f7fe ffcd 	bl	8006c28 <_free_r>
 8007c8e:	e7e9      	b.n	8007c64 <_realloc_r+0x1c>
 8007c90:	4635      	mov	r5, r6
 8007c92:	e7e7      	b.n	8007c64 <_realloc_r+0x1c>

08007c94 <_raise_r>:
 8007c94:	291f      	cmp	r1, #31
 8007c96:	b538      	push	{r3, r4, r5, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	d904      	bls.n	8007ca8 <_raise_r+0x14>
 8007c9e:	2316      	movs	r3, #22
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007caa:	b112      	cbz	r2, 8007cb2 <_raise_r+0x1e>
 8007cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cb0:	b94b      	cbnz	r3, 8007cc6 <_raise_r+0x32>
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 f830 	bl	8007d18 <_getpid_r>
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4601      	mov	r1, r0
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc2:	f000 b817 	b.w	8007cf4 <_kill_r>
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d00a      	beq.n	8007ce0 <_raise_r+0x4c>
 8007cca:	1c59      	adds	r1, r3, #1
 8007ccc:	d103      	bne.n	8007cd6 <_raise_r+0x42>
 8007cce:	2316      	movs	r3, #22
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	e7e7      	b.n	8007ca6 <_raise_r+0x12>
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cdc:	4628      	mov	r0, r5
 8007cde:	4798      	blx	r3
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e7e0      	b.n	8007ca6 <_raise_r+0x12>

08007ce4 <raise>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <raise+0xc>)
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f7ff bfd3 	b.w	8007c94 <_raise_r>
 8007cee:	bf00      	nop
 8007cf0:	2000000c 	.word	0x2000000c

08007cf4 <_kill_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d07      	ldr	r5, [pc, #28]	; (8007d14 <_kill_r+0x20>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	f7f9 f895 	bl	8000e30 <_kill>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d102      	bne.n	8007d10 <_kill_r+0x1c>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	b103      	cbz	r3, 8007d10 <_kill_r+0x1c>
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	bd38      	pop	{r3, r4, r5, pc}
 8007d12:	bf00      	nop
 8007d14:	2000073c 	.word	0x2000073c

08007d18 <_getpid_r>:
 8007d18:	f7f9 b882 	b.w	8000e20 <_getpid>

08007d1c <__sread>:
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	460c      	mov	r4, r1
 8007d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d24:	f000 f89c 	bl	8007e60 <_read_r>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	bfab      	itete	ge
 8007d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d30:	181b      	addge	r3, r3, r0
 8007d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d36:	bfac      	ite	ge
 8007d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d3a:	81a3      	strhlt	r3, [r4, #12]
 8007d3c:	bd10      	pop	{r4, pc}

08007d3e <__swrite>:
 8007d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	461f      	mov	r7, r3
 8007d44:	898b      	ldrh	r3, [r1, #12]
 8007d46:	05db      	lsls	r3, r3, #23
 8007d48:	4605      	mov	r5, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	d505      	bpl.n	8007d5c <__swrite+0x1e>
 8007d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d54:	2302      	movs	r3, #2
 8007d56:	2200      	movs	r2, #0
 8007d58:	f000 f868 	bl	8007e2c <_lseek_r>
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	4632      	mov	r2, r6
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d72:	f000 b817 	b.w	8007da4 <_write_r>

08007d76 <__sseek>:
 8007d76:	b510      	push	{r4, lr}
 8007d78:	460c      	mov	r4, r1
 8007d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7e:	f000 f855 	bl	8007e2c <_lseek_r>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	bf15      	itete	ne
 8007d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d92:	81a3      	strheq	r3, [r4, #12]
 8007d94:	bf18      	it	ne
 8007d96:	81a3      	strhne	r3, [r4, #12]
 8007d98:	bd10      	pop	{r4, pc}

08007d9a <__sclose>:
 8007d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9e:	f000 b813 	b.w	8007dc8 <_close_r>
	...

08007da4 <_write_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	; (8007dc4 <_write_r+0x20>)
 8007da8:	4604      	mov	r4, r0
 8007daa:	4608      	mov	r0, r1
 8007dac:	4611      	mov	r1, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7f9 f873 	bl	8000e9e <_write>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_write_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_write_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	2000073c 	.word	0x2000073c

08007dc8 <_close_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	; (8007de4 <_close_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7f9 f87f 	bl	8000ed6 <_close>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_close_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_close_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	2000073c 	.word	0x2000073c

08007de8 <_fstat_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_fstat_r+0x20>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f7f9 f87a 	bl	8000eee <_fstat>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <_fstat_r+0x1c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	b103      	cbz	r3, 8007e04 <_fstat_r+0x1c>
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	2000073c 	.word	0x2000073c

08007e0c <_isatty_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	; (8007e28 <_isatty_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7f9 f879 	bl	8000f0e <_isatty>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_isatty_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_isatty_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	2000073c 	.word	0x2000073c

08007e2c <_lseek_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	; (8007e4c <_lseek_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7f9 f872 	bl	8000f24 <_lseek>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_lseek_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_lseek_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	2000073c 	.word	0x2000073c

08007e50 <_malloc_usable_size_r>:
 8007e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e54:	1f18      	subs	r0, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bfbc      	itt	lt
 8007e5a:	580b      	ldrlt	r3, [r1, r0]
 8007e5c:	18c0      	addlt	r0, r0, r3
 8007e5e:	4770      	bx	lr

08007e60 <_read_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d07      	ldr	r5, [pc, #28]	; (8007e80 <_read_r+0x20>)
 8007e64:	4604      	mov	r4, r0
 8007e66:	4608      	mov	r0, r1
 8007e68:	4611      	mov	r1, r2
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f7f8 fff8 	bl	8000e64 <_read>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_read_r+0x1e>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_read_r+0x1e>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	2000073c 	.word	0x2000073c

08007e84 <_init>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	bf00      	nop
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr

08007e90 <_fini>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	bf00      	nop
 8007e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e96:	bc08      	pop	{r3}
 8007e98:	469e      	mov	lr, r3
 8007e9a:	4770      	bx	lr
