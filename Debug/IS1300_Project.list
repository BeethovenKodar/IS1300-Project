
IS1300_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007224  08007224  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800722c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  20000028  08007254  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a2c  08007254  00021a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021855  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbc  00000000  00000000  000418ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  00045570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  00046d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296bd  00000000  00000000  00048348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bae9  00000000  00000000  00071a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe2e4  00000000  00000000  0008d4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b7d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062cc  00000000  00000000  0018b828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000028 	.word	0x20000028
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007140 	.word	0x08007140

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	08007140 	.word	0x08007140

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the threads */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004cc:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <MX_FREERTOS_Init+0x28>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <MX_FREERTOS_Init+0x2c>)
 80004d2:	f004 f8f3 	bl	80046bc <osThreadNew>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <MX_FREERTOS_Init+0x30>)
 80004da:	6013      	str	r3, [r2, #0]

  /* creation of digitalClock */
  digitalClockHandle = osThreadNew(startDigitalClock, NULL, &digitalClock_attributes);
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <MX_FREERTOS_Init+0x34>)
 80004de:	2100      	movs	r1, #0
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <MX_FREERTOS_Init+0x38>)
 80004e2:	f004 f8eb 	bl	80046bc <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <MX_FREERTOS_Init+0x3c>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	0800718c 	.word	0x0800718c
 80004f4:	08000509 	.word	0x08000509
 80004f8:	20001910 	.word	0x20001910
 80004fc:	080071b0 	.word	0x080071b0
 8000500:	08000519 	.word	0x08000519
 8000504:	20001914 	.word	0x20001914

08000508 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f004 f965 	bl	80047e0 <osDelay>
 8000516:	e7fb      	b.n	8000510 <StartDefaultTask+0x8>

08000518 <startDigitalClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDigitalClock */
void startDigitalClock(void *argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDigitalClock */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f004 f95d 	bl	80047e0 <osDelay>
 8000526:	e7fb      	b.n	8000520 <startDigitalClock+0x8>

08000528 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <MX_GPIO_Init+0x100>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a39      	ldr	r2, [pc, #228]	; (8000628 <MX_GPIO_Init+0x100>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <MX_GPIO_Init+0x100>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000556:	4b34      	ldr	r3, [pc, #208]	; (8000628 <MX_GPIO_Init+0x100>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a33      	ldr	r2, [pc, #204]	; (8000628 <MX_GPIO_Init+0x100>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <MX_GPIO_Init+0x100>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <MX_GPIO_Init+0x100>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a2d      	ldr	r2, [pc, #180]	; (8000628 <MX_GPIO_Init+0x100>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <MX_GPIO_Init+0x100>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <MX_GPIO_Init+0x100>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <MX_GPIO_Init+0x100>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <MX_GPIO_Init+0x100>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <MX_GPIO_Init+0x100>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a21      	ldr	r2, [pc, #132]	; (8000628 <MX_GPIO_Init+0x100>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <MX_GPIO_Init+0x100>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2120      	movs	r1, #32
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 fdef 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4814      	ldr	r0, [pc, #80]	; (800062c <MX_GPIO_Init+0x104>)
 80005da:	f000 fc37 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005de:	230c      	movs	r3, #12
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ee:	2307      	movs	r3, #7
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fc26 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000600:	2320      	movs	r3, #32
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f000 fc17 	bl	8000e4c <HAL_GPIO_Init>

}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	48000800 	.word	0x48000800

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fa68 	bl	8000b08 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f838 	bl	80006ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f7ff ff74 	bl	8000528 <MX_GPIO_Init>
  MX_UART5_Init();
 8000640:	f000 f97e 	bl	8000940 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000644:	f003 fff0 	bl	8004628 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000648:	f7ff ff3e 	bl	80004c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800064c:	f004 f810 	bl	8004670 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
	/* peripheral in transmission process */
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)Buffer, BUFFERSIZE) != HAL_OK) {
 8000650:	2216      	movs	r2, #22
 8000652:	4913      	ldr	r1, [pc, #76]	; (80006a0 <main+0x70>)
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <main+0x74>)
 8000656:	f002 fc19 	bl	8002e8c <HAL_UART_Transmit_IT>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <main+0x34>
	    Error_Handler();
 8000660:	f000 f8a8 	bl	80007b4 <Error_Handler>
	}

	while (UartReady != SET) {};
 8000664:	bf00      	nop
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0x78>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d1fb      	bne.n	8000666 <main+0x36>
	UartReady = RESET;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <main+0x78>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]

	Error_Handler();
 8000674:	f000 f89e 	bl	80007b4 <Error_Handler>

	/* peripheral in reception process */
	if (HAL_UART_Receive_IT(&huart5, (uint8_t*)Buffer, BUFFERSIZE) != HAL_OK) {
 8000678:	2216      	movs	r2, #22
 800067a:	4909      	ldr	r1, [pc, #36]	; (80006a0 <main+0x70>)
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <main+0x74>)
 800067e:	f002 fc73 	bl	8002f68 <HAL_UART_Receive_IT>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <main+0x5c>
	    Error_Handler();
 8000688:	f000 f894 	bl	80007b4 <Error_Handler>
	}

	while (UartReady != SET) {};
 800068c:	bf00      	nop
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <main+0x78>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d1fb      	bne.n	800068e <main+0x5e>
	UartReady = RESET;
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <main+0x78>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)Buffer, BUFFERSIZE) != HAL_OK) {
 800069c:	e7d8      	b.n	8000650 <main+0x20>
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20001964 	.word	0x20001964
 80006a8:	20000044 	.word	0x20000044

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	; 0x58
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2244      	movs	r2, #68	; 0x44
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fd38 	bl	8007130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d2:	f000 fd8b 	bl	80011ec <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 f86a 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fa:	230a      	movs	r3, #10
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fdc2 	bl	8001298 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071a:	f000 f84b 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f994 	bl	8001a64 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000742:	f000 f837 	bl	80007b4 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3758      	adds	r7, #88	; 0x58
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer competed callback
  * @param UartHandle: UART handle
  * @note Reporting that the tranmission over UART is complete.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    UartReady = SET;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <HAL_UART_TxCpltCallback+0x1c>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000044 	.word	0x20000044

08000770 <HAL_UART_RxCpltCallback>:
* @brief Rx Transfer completed callback
* @param UartHandle: UART handle
* @note Reporting that the reception over UART is complete.
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    UartReady = SET;
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <HAL_UART_RxCpltCallback+0x1c>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000044 	.word	0x20000044

08000790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d101      	bne.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a2:	f000 f9d1 	bl	8000b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add an own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2120      	movs	r1, #32
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 fcec 	bl	80011a0 <HAL_GPIO_WritePin>
 80007c8:	e7f8      	b.n	80007bc <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_MspInit+0x4c>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_MspInit+0x4c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6613      	str	r3, [r2, #96]	; 0x60
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_MspInit+0x4c>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_MspInit+0x4c>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6593      	str	r3, [r2, #88]	; 0x58
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_MspInit+0x4c>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	210f      	movs	r1, #15
 8000806:	f06f 0001 	mvn.w	r0, #1
 800080a:	f000 fa75 	bl	8000cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2019      	movs	r0, #25
 8000832:	f000 fa61 	bl	8000cf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000836:	2019      	movs	r0, #25
 8000838:	f000 fa7a 	bl	8000d30 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <HAL_InitTick+0x9c>)
 800083e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <HAL_InitTick+0x9c>)
 8000842:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000846:	6613      	str	r3, [r2, #96]	; 0x60
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_InitTick+0x9c>)
 800084a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000854:	f107 0210 	add.w	r2, r7, #16
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 faa6 	bl	8001db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000864:	f001 fa8e 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 8000868:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <HAL_InitTick+0xa0>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0c9b      	lsrs	r3, r3, #18
 8000874:	3b01      	subs	r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_InitTick+0xa4>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <HAL_InitTick+0xa8>)
 800087c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_InitTick+0xa4>)
 8000880:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000884:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_InitTick+0xa4>)
 8000888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_InitTick+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_InitTick+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_InitTick+0xa4>)
 800089a:	f001 ffd7 	bl	800284c <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <HAL_InitTick+0xa4>)
 80008a6:	f002 f833 	bl	8002910 <HAL_TIM_Base_Start_IT>
 80008aa:	4603      	mov	r3, r0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	20001918 	.word	0x20001918
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008fa:	f002 f879 	bl	80029f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20001918 	.word	0x20001918

08000908 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <UART5_IRQHandler+0x10>)
 800090e:	f002 fb81 	bl	8003014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20001964 	.word	0x20001964

0800091c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <SystemInit+0x20>)
 8000922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <SystemInit+0x20>)
 8000928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800092c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 0 */
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_UART5_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_UART5_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_UART5_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_UART5_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_UART5_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_UART5_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_UART5_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_UART5_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_UART5_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_UART5_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_UART5_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_UART5_Init+0x58>)
 8000984:	f002 fa34 	bl	8002df0 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800098e:	f7ff ff11 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  /* USER CODE END UART5_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20001964 	.word	0x20001964
 800099c:	40005000 	.word	0x40005000

080009a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b0ac      	sub	sp, #176	; 0xb0
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2288      	movs	r2, #136	; 0x88
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f006 fbb5 	bl	8007130 <memset>
  if(uartHandle->Instance==UART5)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a36      	ldr	r2, [pc, #216]	; (8000aa4 <HAL_UART_MspInit+0x104>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d164      	bne.n	8000a9a <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80009d0:	2310      	movs	r3, #16
 80009d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fa79 	bl	8001ed4 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e8:	f7ff fee4 	bl	80007b4 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f0:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 80009f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009f6:	6593      	str	r3, [r2, #88]	; 0x58
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_UART_MspInit+0x108>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <HAL_UART_MspInit+0x10c>)
 8000a5c:	f000 f9f6 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a60:	2304      	movs	r3, #4
 8000a62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a82:	4619      	mov	r1, r3
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <HAL_UART_MspInit+0x110>)
 8000a86:	f000 f9e1 	bl	8000e4c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	2035      	movs	r0, #53	; 0x35
 8000a90:	f000 f932 	bl	8000cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000a94:	2035      	movs	r0, #53	; 0x35
 8000a96:	f000 f94b 	bl	8000d30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	37b0      	adds	r7, #176	; 0xb0
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40005000 	.word	0x40005000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	48000800 	.word	0x48000800
 8000ab0:	48000c00 	.word	0x48000c00

08000ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab8:	f7ff ff30 	bl	800091c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	; (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f006 faf3 	bl	80070cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae6:	f7ff fda3 	bl	8000630 <main>

08000aea <LoopForever>:

LoopForever:
    b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000af8:	0800722c 	.word	0x0800722c
  ldr r2, =_sbss
 8000afc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000b00:	20001a2c 	.word	0x20001a2c

08000b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_2_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_Init+0x3c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_Init+0x3c>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f8df 	bl	8000ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b24:	200f      	movs	r0, #15
 8000b26:	f7ff fe79 	bl	800081c <HAL_InitTick>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	e001      	b.n	8000b3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b36:	f7ff fe49 	bl	80007cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000020 	.word	0x20000020
 8000b6c:	200019e8 	.word	0x200019e8

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200019e8 	.word	0x200019e8

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff4c 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0a:	f7ff ff61 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	6978      	ldr	r0, [r7, #20]
 8000d16:	f7ff ffb1 	bl	8000c7c <NVIC_EncodePriority>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff80 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff54 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d008      	beq.n	8000d76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2204      	movs	r2, #4
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e022      	b.n	8000dbc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 020e 	bic.w	r2, r2, #14
 8000d84:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f003 021c 	and.w	r2, r3, #28
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d005      	beq.n	8000dec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e029      	b.n	8000e40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 020e 	bic.w	r2, r2, #14
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e10:	f003 021c 	and.w	r2, r3, #28
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	4798      	blx	r3
    }
  }
  return status;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e17f      	b.n	800115c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8171 	beq.w	8001156 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <HAL_GPIO_Init+0x40>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d118      	bne.n	8000f2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	08db      	lsrs	r3, r3, #3
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d017      	beq.n	8000f68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	6939      	ldr	r1, [r7, #16]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80ac 	beq.w	8001156 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	; (800117c <HAL_GPIO_Init+0x330>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	4a5e      	ldr	r2, [pc, #376]	; (800117c <HAL_GPIO_Init+0x330>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6613      	str	r3, [r2, #96]	; 0x60
 800100a:	4b5c      	ldr	r3, [pc, #368]	; (800117c <HAL_GPIO_Init+0x330>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001016:	4a5a      	ldr	r2, [pc, #360]	; (8001180 <HAL_GPIO_Init+0x334>)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x242>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	; (8001184 <HAL_GPIO_Init+0x338>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x23e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_GPIO_Init+0x33c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x23a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x340>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x236>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x344>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x232>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	; (8001194 <HAL_GPIO_Init+0x348>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x22e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x34c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x22a>
 8001072:	2306      	movs	r3, #6
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x244>
 8001076:	2307      	movs	r3, #7
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x244>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x244>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800108e:	2300      	movs	r3, #0
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a0:	4937      	ldr	r1, [pc, #220]	; (8001180 <HAL_GPIO_Init+0x334>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ae:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_GPIO_Init+0x350>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_GPIO_Init+0x350>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_GPIO_Init+0x350>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_GPIO_Init+0x350>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_GPIO_Init+0x350>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_GPIO_Init+0x350>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_GPIO_Init+0x350>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_GPIO_Init+0x350>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa22 f303 	lsr.w	r3, r2, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	f47f ae78 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	48000c00 	.word	0x48000c00
 8001190:	48001000 	.word	0x48001000
 8001194:	48001400 	.word	0x48001400
 8001198:	48001800 	.word	0x48001800
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fa:	d130      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001208:	d038      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2232      	movs	r2, #50	; 0x32
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001230:	e002      	b.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3b01      	subs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001244:	d102      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f2      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001258:	d110      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e00f      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126a:	d007      	beq.n	800127c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40007000 	.word	0x40007000
 8001290:	20000018 	.word	0x20000018
 8001294:	431bde83 	.word	0x431bde83

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e3d4      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012aa:	4ba1      	ldr	r3, [pc, #644]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b4:	4b9e      	ldr	r3, [pc, #632]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80e4 	beq.w	8001494 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <HAL_RCC_OscConfig+0x4a>
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b0c      	cmp	r3, #12
 80012d6:	f040 808b 	bne.w	80013f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	f040 8087 	bne.w	80013f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e2:	4b93      	ldr	r3, [pc, #588]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x62>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3ac      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <HAL_RCC_OscConfig+0x7c>
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001312:	e005      	b.n	8001320 <HAL_RCC_OscConfig+0x88>
 8001314:	4b86      	ldr	r3, [pc, #536]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001320:	4293      	cmp	r3, r2
 8001322:	d223      	bcs.n	800136c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fd73 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e38d      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001338:	4b7d      	ldr	r3, [pc, #500]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a7c      	ldr	r2, [pc, #496]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4977      	ldr	r1, [pc, #476]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001356:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4972      	ldr	r1, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
 800136a:	e025      	b.n	80013b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136c:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a6f      	ldr	r2, [pc, #444]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	496a      	ldr	r1, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138a:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4965      	ldr	r1, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fd33 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e34d      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b8:	f000 fc36 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	495a      	ldr	r1, [pc, #360]	; (8001534 <HAL_RCC_OscConfig+0x29c>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	f003 031f 	and.w	r3, r3, #31
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_RCC_OscConfig+0x2a0>)
 80013d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d8:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_RCC_OscConfig+0x2a4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fa1d 	bl	800081c <HAL_InitTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d052      	beq.n	8001492 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	e331      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d032      	beq.n	800145e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001404:	f7ff fbb4 	bl	8000b70 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140c:	f7ff fbb0 	bl	8000b70 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e31a      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	493b      	ldr	r1, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	4936      	ldr	r1, [pc, #216]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e01a      	b.n	8001494 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a33      	ldr	r2, [pc, #204]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800146a:	f7ff fb81 	bl	8000b70 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001472:	f7ff fb7d 	bl	8000b70 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e2e7      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x1da>
 8001490:	e000      	b.n	8001494 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001492:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d074      	beq.n	800158a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x21a>
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d10e      	bne.n	80014ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d10b      	bne.n	80014ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d064      	beq.n	8001588 <HAL_RCC_OscConfig+0x2f0>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d160      	bne.n	8001588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e2c4      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x24a>
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e01d      	b.n	800151e <HAL_RCC_OscConfig+0x286>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x26e>
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e00b      	b.n	800151e <HAL_RCC_OscConfig+0x286>
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x298>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01c      	beq.n	8001560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fb23 	bl	8000b70 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152c:	e011      	b.n	8001552 <HAL_RCC_OscConfig+0x2ba>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	080071d4 	.word	0x080071d4
 8001538:	20000018 	.word	0x20000018
 800153c:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fb16 	bl	8000b70 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e280      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001552:	4baf      	ldr	r3, [pc, #700]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x2a8>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fb06 	bl	8000b70 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fb02 	bl	8000b70 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e26c      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157a:	4ba5      	ldr	r3, [pc, #660]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x2d0>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d060      	beq.n	8001658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_OscConfig+0x310>
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d116      	bne.n	80015d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a8:	4b99      	ldr	r3, [pc, #612]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_OscConfig+0x328>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e249      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b93      	ldr	r3, [pc, #588]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	4990      	ldr	r1, [pc, #576]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d4:	e040      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d023      	beq.n	8001626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015de:	4b8c      	ldr	r3, [pc, #560]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a8b      	ldr	r2, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fac1 	bl	8000b70 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fabd 	bl	8000b70 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e227      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	4b82      	ldr	r3, [pc, #520]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	497c      	ldr	r1, [pc, #496]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e018      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b7a      	ldr	r3, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a79      	ldr	r2, [pc, #484]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800162c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fa9d 	bl	8000b70 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fa99 	bl	8000b70 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e203      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164c:	4b70      	ldr	r3, [pc, #448]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d03c      	beq.n	80016de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800166e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001672:	4a67      	ldr	r2, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fa78 	bl	8000b70 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fa74 	bl	8000b70 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1de      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001696:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ef      	beq.n	8001684 <HAL_RCC_OscConfig+0x3ec>
 80016a4:	e01b      	b.n	80016de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa5b 	bl	8000b70 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fa57 	bl	8000b70 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1c1      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ef      	bne.n	80016be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a6 	beq.w	8001838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10d      	bne.n	8001718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b44      	ldr	r3, [pc, #272]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	4a43      	ldr	r2, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6593      	str	r3, [r2, #88]	; 0x58
 8001708:	4b41      	ldr	r3, [pc, #260]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001714:	2301      	movs	r3, #1
 8001716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001718:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d118      	bne.n	8001756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001724:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001730:	f7ff fa1e 	bl	8000b70 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001738:	f7ff fa1a 	bl	8000b70 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e184      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_RCC_OscConfig+0x57c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_RCC_OscConfig+0x4d8>
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800176e:	e024      	b.n	80017ba <HAL_RCC_OscConfig+0x522>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d110      	bne.n	800179a <HAL_RCC_OscConfig+0x502>
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	4a20      	ldr	r2, [pc, #128]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001798:	e00f      	b.n	80017ba <HAL_RCC_OscConfig+0x522>
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017b2:	f023 0304 	bic.w	r3, r3, #4
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff f9d5 	bl	8000b70 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff f9d1 	bl	8000b70 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e139      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_OscConfig+0x578>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0ed      	beq.n	80017ca <HAL_RCC_OscConfig+0x532>
 80017ee:	e01a      	b.n	8001826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff f9be 	bl	8000b70 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff f9ba 	bl	8000b70 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d906      	bls.n	8001818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e122      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001818:	4b90      	ldr	r3, [pc, #576]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1e8      	bne.n	80017f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a8a      	ldr	r2, [pc, #552]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8108 	beq.w	8001a52 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	2b02      	cmp	r3, #2
 8001848:	f040 80d0 	bne.w	80019ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800184c:	4b83      	ldr	r3, [pc, #524]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	429a      	cmp	r2, r3
 800185e:	d130      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	3b01      	subs	r3, #1
 800186c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d127      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d11f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800188c:	2a07      	cmp	r2, #7
 800188e:	bf14      	ite	ne
 8001890:	2201      	movne	r2, #1
 8001892:	2200      	moveq	r2, #0
 8001894:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001896:	4293      	cmp	r3, r2
 8001898:	d113      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	3b01      	subs	r3, #1
 80018a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	3b01      	subs	r3, #1
 80018bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d06e      	beq.n	80019a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d069      	beq.n	800199c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018c8:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018d4:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b7      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018e4:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80018ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f0:	f7ff f93e 	bl	8000b70 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff f93a 	bl	8000b70 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0a4      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001916:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <HAL_RCC_OscConfig+0x7c8>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001926:	3a01      	subs	r2, #1
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001930:	0212      	lsls	r2, r2, #8
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001938:	0852      	lsrs	r2, r2, #1
 800193a:	3a01      	subs	r2, #1
 800193c:	0552      	lsls	r2, r2, #21
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	3a01      	subs	r2, #1
 8001948:	0652      	lsls	r2, r2, #25
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001950:	0912      	lsrs	r2, r2, #4
 8001952:	0452      	lsls	r2, r2, #17
 8001954:	430a      	orrs	r2, r1
 8001956:	4941      	ldr	r1, [pc, #260]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001974:	f7ff f8fc 	bl	8000b70 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f8f8 	bl	8000b70 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e062      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199a:	e05a      	b.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e059      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d152      	bne.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c4:	f7ff f8d4 	bl	8000b70 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f8d0 	bl	8000b70 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e03a      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x734>
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d02d      	beq.n	8001a4e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 80019f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a10:	f023 0303 	bic.w	r3, r3, #3
 8001a14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff f8a3 	bl	8000b70 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff f89f 	bl	8000b70 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e009      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x7c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x796>
 8001a4c:	e001      	b.n	8001a52 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	f99d808c 	.word	0xf99d808c

08001a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0c8      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d910      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 0207 	bic.w	r2, r3, #7
 8001a8e:	4961      	ldr	r1, [pc, #388]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0b0      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d04c      	beq.n	8001b4e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d121      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e09e      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d115      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e092      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e086      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e07e      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 0203 	bic.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	493f      	ldr	r1, [pc, #252]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b1e:	f7ff f827 	bl	8000b70 <HAL_GetTick>
 8001b22:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7ff f823 	bl	8000b70 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e066      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 020c 	and.w	r2, r3, #12
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d1eb      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	492c      	ldr	r1, [pc, #176]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d210      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0207 	bic.w	r2, r3, #7
 8001b82:	4924      	ldr	r1, [pc, #144]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e036      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4918      	ldr	r1, [pc, #96]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4910      	ldr	r1, [pc, #64]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bda:	f000 f825 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_ClockConfig+0x1b4>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	490c      	ldr	r1, [pc, #48]	; (8001c1c <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	5ccb      	ldrb	r3, [r1, r3]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fe0c 	bl	800081c <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c08:	7afb      	ldrb	r3, [r7, #11]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	080071d4 	.word	0x080071d4
 8001c20:	20000018 	.word	0x20000018
 8001c24:	2000001c 	.word	0x2000001c

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d121      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d11e      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e005      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c84:	4a2b      	ldr	r2, [pc, #172]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10d      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	e004      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d134      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0xa6>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d003      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ccc:	e005      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cd6:	617b      	str	r3, [r7, #20]
      break;
 8001cd8:	e002      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	617b      	str	r3, [r7, #20]
      break;
 8001cde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	3301      	adds	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	fb02 f203 	mul.w	r2, r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	0e5b      	lsrs	r3, r3, #25
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	3301      	adds	r3, #1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d20:	69bb      	ldr	r3, [r7, #24]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	080071ec 	.word	0x080071ec
 8001d38:	00f42400 	.word	0x00f42400
 8001d3c:	007a1200 	.word	0x007a1200

08001d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000018 	.word	0x20000018

08001d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d5c:	f7ff fff0 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4904      	ldr	r1, [pc, #16]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080071e4 	.word	0x080071e4

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d88:	f7ff ffda 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4904      	ldr	r1, [pc, #16]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080071e4 	.word	0x080071e4

08001db0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_RCC_GetClockConfig+0x60>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0207 	and.w	r2, r3, #7
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40022000 	.word	0x40022000

08001e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e2c:	f7ff f9d0 	bl	80011d0 <HAL_PWREx_GetVoltageRange>
 8001e30:	6178      	str	r0, [r7, #20]
 8001e32:	e014      	b.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e4c:	f7ff f9c0 	bl	80011d0 <HAL_PWREx_GetVoltageRange>
 8001e50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e64:	d10b      	bne.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d919      	bls.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e70:	d902      	bls.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e72:	2302      	movs	r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e013      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e78:	2301      	movs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e010      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d902      	bls.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e84:	2303      	movs	r3, #3
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e00a      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b80      	cmp	r3, #128	; 0x80
 8001e8e:	d102      	bne.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e004      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b70      	cmp	r3, #112	; 0x70
 8001e9a:	d101      	bne.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 0207 	bic.w	r2, r3, #7
 8001ea8:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001edc:	2300      	movs	r3, #0
 8001ede:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d041      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef8:	d02a      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001efa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001efe:	d824      	bhi.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f04:	d008      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f0a:	d81e      	bhi.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f14:	d010      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f16:	e018      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f18:	4b86      	ldr	r3, [pc, #536]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a85      	ldr	r2, [pc, #532]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f24:	e015      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fabb 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8001f32:	4603      	mov	r3, r0
 8001f34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f36:	e00c      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3320      	adds	r3, #32
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fba6 	bl	8002690 <RCCEx_PLLSAI2_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f48:	e003      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f4e:	e000      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10b      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f58:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f66:	4973      	ldr	r1, [pc, #460]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f6e:	e001      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d041      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f88:	d02a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f8e:	d824      	bhi.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f94:	d008      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f9a:	d81e      	bhi.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fa6:	e018      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa8:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4a61      	ldr	r2, [pc, #388]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fa73 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc6:	e00c      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3320      	adds	r3, #32
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fb5e 	bl	8002690 <RCCEx_PLLSAI2_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd8:	e003      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	74fb      	strb	r3, [r7, #19]
      break;
 8001fde:	e000      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe8:	4b52      	ldr	r3, [pc, #328]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff6:	494f      	ldr	r1, [pc, #316]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ffe:	e001      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80a0 	beq.w	8002152 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a40      	ldr	r2, [pc, #256]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002044:	2301      	movs	r3, #1
 8002046:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002054:	f7fe fd8c 	bl	8000b70 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800205a:	e009      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe fd88 	bl	8000b70 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d902      	bls.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	74fb      	strb	r3, [r7, #19]
        break;
 800206e:	e005      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d15c      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01f      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	d019      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7fe fd47 	bl	8000b70 <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e4:	e00b      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fd43 	bl	8000b70 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d902      	bls.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	74fb      	strb	r3, [r7, #19]
            break;
 80020fc:	e006      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ec      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002122:	4904      	ldr	r1, [pc, #16]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800212a:	e009      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
 8002130:	e006      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002140:	7c7b      	ldrb	r3, [r7, #17]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002146:	4b9e      	ldr	r3, [pc, #632]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	4a9d      	ldr	r2, [pc, #628]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002150:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800215e:	4b98      	ldr	r3, [pc, #608]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f023 0203 	bic.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	4994      	ldr	r1, [pc, #592]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002180:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 020c 	bic.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	498c      	ldr	r1, [pc, #560]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a2:	4b87      	ldr	r3, [pc, #540]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	4983      	ldr	r1, [pc, #524]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	497b      	ldr	r1, [pc, #492]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f4:	4972      	ldr	r1, [pc, #456]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002208:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	496a      	ldr	r1, [pc, #424]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222a:	4b65      	ldr	r3, [pc, #404]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002230:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	4961      	ldr	r1, [pc, #388]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800224c:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	4959      	ldr	r1, [pc, #356]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226e:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	4950      	ldr	r1, [pc, #320]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002290:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	4948      	ldr	r1, [pc, #288]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	493f      	ldr	r1, [pc, #252]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d028      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d4:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e2:	4937      	ldr	r1, [pc, #220]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f2:	d106      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
 8002300:	e011      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800230a:	d10c      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f8c8 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d028      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	491f      	ldr	r1, [pc, #124]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002350:	d106      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235c:	60d3      	str	r3, [r2, #12]
 800235e:	e011      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002368:	d10c      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	2101      	movs	r1, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f899 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d02b      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ae:	d109      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ba:	60d3      	str	r3, [r2, #12]
 80023bc:	e014      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f867 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02f      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002402:	4928      	ldr	r1, [pc, #160]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800240e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002412:	d10d      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	2102      	movs	r1, #2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f844 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	74bb      	strb	r3, [r7, #18]
 800242e:	e011      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3320      	adds	r3, #32
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f925 	bl	8002690 <RCCEx_PLLSAI2_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800246e:	490d      	ldr	r1, [pc, #52]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002492:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800249a:	7cbb      	ldrb	r3, [r7, #18]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000

080024a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024b6:	4b75      	ldr	r3, [pc, #468]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024c2:	4b72      	ldr	r3, [pc, #456]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0203 	and.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10d      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
       ||
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024da:	4b6c      	ldr	r3, [pc, #432]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
       ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d047      	beq.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e044      	b.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d018      	beq.n	800252e <RCCEx_PLLSAI1_Config+0x86>
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d825      	bhi.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <RCCEx_PLLSAI1_Config+0x62>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d009      	beq.n	800251c <RCCEx_PLLSAI1_Config+0x74>
 8002508:	e020      	b.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250a:	4b60      	ldr	r3, [pc, #384]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11d      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251a:	e01a      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800251c:	4b5b      	ldr	r3, [pc, #364]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e013      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800252e:	4b57      	ldr	r3, [pc, #348]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253a:	4b54      	ldr	r3, [pc, #336]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800254a:	e006      	b.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      break;
 8002550:	e004      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
    }

    if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	430b      	orrs	r3, r1
 8002578:	4944      	ldr	r1, [pc, #272]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d17d      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002584:	4b41      	ldr	r3, [pc, #260]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a40      	ldr	r2, [pc, #256]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe faee 	bl	8000b70 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002596:	e009      	b.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002598:	f7fe faea 	bl	8000b70 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d902      	bls.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	73fb      	strb	r3, [r7, #15]
        break;
 80025aa:	e005      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ac:	4b37      	ldr	r3, [pc, #220]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ef      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d160      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d111      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c4:	4b31      	ldr	r3, [pc, #196]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	0211      	lsls	r1, r2, #8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0912      	lsrs	r2, r2, #4
 80025dc:	0452      	lsls	r2, r2, #17
 80025de:	430a      	orrs	r2, r1
 80025e0:	492a      	ldr	r1, [pc, #168]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	610b      	str	r3, [r1, #16]
 80025e6:	e027      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d112      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	0211      	lsls	r1, r2, #8
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6912      	ldr	r2, [r2, #16]
 8002604:	0852      	lsrs	r2, r2, #1
 8002606:	3a01      	subs	r2, #1
 8002608:	0552      	lsls	r2, r2, #21
 800260a:	430a      	orrs	r2, r1
 800260c:	491f      	ldr	r1, [pc, #124]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	610b      	str	r3, [r1, #16]
 8002612:	e011      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800261c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6892      	ldr	r2, [r2, #8]
 8002624:	0211      	lsls	r1, r2, #8
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6952      	ldr	r2, [r2, #20]
 800262a:	0852      	lsrs	r2, r2, #1
 800262c:	3a01      	subs	r2, #1
 800262e:	0652      	lsls	r2, r2, #25
 8002630:	430a      	orrs	r2, r1
 8002632:	4916      	ldr	r1, [pc, #88]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002642:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe fa94 	bl	8000b70 <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264c:	f7fe fa90 	bl	8000b70 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
          break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800269e:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d018      	beq.n	80026dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d10d      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
       ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026c2:	4b61      	ldr	r3, [pc, #388]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
       ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d047      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e044      	b.n	8002766 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d018      	beq.n	8002716 <RCCEx_PLLSAI2_Config+0x86>
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d825      	bhi.n	8002734 <RCCEx_PLLSAI2_Config+0xa4>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d002      	beq.n	80026f2 <RCCEx_PLLSAI2_Config+0x62>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d009      	beq.n	8002704 <RCCEx_PLLSAI2_Config+0x74>
 80026f0:	e020      	b.n	8002734 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026f2:	4b55      	ldr	r3, [pc, #340]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11d      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002702:	e01a      	b.n	800273a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d116      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002714:	e013      	b.n	800273e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002716:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002732:	e006      	b.n	8002742 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e004      	b.n	8002744 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
 800273c:	e002      	b.n	8002744 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002742:	bf00      	nop
    }

    if(status == HAL_OK)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800274a:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	430b      	orrs	r3, r1
 8002760:	4939      	ldr	r1, [pc, #228]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d167      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a35      	ldr	r2, [pc, #212]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fe f9fa 	bl	8000b70 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800277e:	e009      	b.n	8002794 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002780:	f7fe f9f6 	bl	8000b70 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d902      	bls.n	8002794 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	73fb      	strb	r3, [r7, #15]
        break;
 8002792:	e005      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002794:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ef      	bne.n	8002780 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d14a      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d111      	bne.n	80027d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6892      	ldr	r2, [r2, #8]
 80027bc:	0211      	lsls	r1, r2, #8
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	0912      	lsrs	r2, r2, #4
 80027c4:	0452      	lsls	r2, r2, #17
 80027c6:	430a      	orrs	r2, r1
 80027c8:	491f      	ldr	r1, [pc, #124]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	614b      	str	r3, [r1, #20]
 80027ce:	e011      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6892      	ldr	r2, [r2, #8]
 80027e0:	0211      	lsls	r1, r2, #8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6912      	ldr	r2, [r2, #16]
 80027e6:	0852      	lsrs	r2, r2, #1
 80027e8:	3a01      	subs	r2, #1
 80027ea:	0652      	lsls	r2, r2, #25
 80027ec:	430a      	orrs	r2, r1
 80027ee:	4916      	ldr	r1, [pc, #88]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a13      	ldr	r2, [pc, #76]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe f9b6 	bl	8000b70 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002806:	e009      	b.n	800281c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002808:	f7fe f9b2 	bl	8000b70 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
          break;
 800281a:	e005      	b.n	8002828 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4904      	ldr	r1, [pc, #16]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	4313      	orrs	r3, r2
 800283a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e049      	b.n	80028f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f841 	bl	80028fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3304      	adds	r3, #4
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f000 f9f8 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e04f      	b.n	80029c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a23      	ldr	r2, [pc, #140]	; (80029d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01d      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x76>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d018      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x76>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x76>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_TIM_Base_Start_IT+0xcc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00e      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x76>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x76>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x76>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d115      	bne.n	80029b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_TIM_Base_Start_IT+0xdc>)
 800298e:	4013      	ands	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b06      	cmp	r3, #6
 8002996:	d015      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0xb4>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d011      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b0:	e008      	b.n	80029c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e000      	b.n	80029c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	40000c00 	.word	0x40000c00
 80029e4:	40013400 	.word	0x40013400
 80029e8:	40014000 	.word	0x40014000
 80029ec:	00010007 	.word	0x00010007

080029f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0202 	mvn.w	r2, #2
 8002a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f905 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8f7 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f908 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0204 	mvn.w	r2, #4
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8db 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8cd 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f8de 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0208 	mvn.w	r2, #8
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8b1 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8a3 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8b4 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0210 	mvn.w	r2, #16
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f887 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f879 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f88a 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10e      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d107      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0201 	mvn.w	r2, #1
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd fe0e 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d10e      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b80      	cmp	r3, #128	; 0x80
 8002b8e:	d107      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f914 	bl	8002dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	d10e      	bne.n	8002bce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d107      	bne.n	8002bce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f907 	bl	8002ddc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d10e      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f838 	bl	8002c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d10e      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0220 	mvn.w	r2, #32
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8c7 	bl	8002db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a40      	ldr	r2, [pc, #256]	; (8002d94 <TIM_Base_SetConfig+0x114>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d00f      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3d      	ldr	r2, [pc, #244]	; (8002d98 <TIM_Base_SetConfig+0x118>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3c      	ldr	r2, [pc, #240]	; (8002d9c <TIM_Base_SetConfig+0x11c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3b      	ldr	r2, [pc, #236]	; (8002da0 <TIM_Base_SetConfig+0x120>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <TIM_Base_SetConfig+0x124>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d108      	bne.n	8002cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <TIM_Base_SetConfig+0x114>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01f      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce0:	d01b      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <TIM_Base_SetConfig+0x118>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d017      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <TIM_Base_SetConfig+0x11c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <TIM_Base_SetConfig+0x120>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00f      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <TIM_Base_SetConfig+0x124>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <TIM_Base_SetConfig+0x128>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <TIM_Base_SetConfig+0x12c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_Base_SetConfig+0x9a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <TIM_Base_SetConfig+0x130>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d108      	bne.n	8002d2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <TIM_Base_SetConfig+0x114>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00f      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <TIM_Base_SetConfig+0x124>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <TIM_Base_SetConfig+0x128>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <TIM_Base_SetConfig+0x12c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_Base_SetConfig+0xf8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <TIM_Base_SetConfig+0x130>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d103      	bne.n	8002d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40013400 	.word	0x40013400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40014400 	.word	0x40014400
 8002db0:	40014800 	.word	0x40014800

08002db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e040      	b.n	8002e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fdc4 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fbe8 	bl	8003604 <UART_SetConfig>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e022      	b.n	8002e84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fe66 	bl	8003b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 feed 	bl	8003c5c <UART_CheckIdleState>
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	4613      	mov	r3, r2
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d156      	bne.n	8002f50 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_Transmit_IT+0x22>
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e04f      	b.n	8002f52 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_UART_Transmit_IT+0x34>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e048      	b.n	8002f52 <HAL_UART_Transmit_IT+0xc6>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	88fa      	ldrh	r2, [r7, #6]
 8002ed2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2221      	movs	r2, #33	; 0x21
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	d107      	bne.n	8002f0c <HAL_UART_Transmit_IT+0x80>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_UART_Transmit_IT+0xd4>)
 8002f08:	669a      	str	r2, [r3, #104]	; 0x68
 8002f0a:	e002      	b.n	8002f12 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_UART_Transmit_IT+0xd8>)
 8002f10:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	613b      	str	r3, [r7, #16]
   return(result);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	69f9      	ldr	r1, [r7, #28]
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e6      	bne.n	8002f1a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e000      	b.n	8002f52 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
  }
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	372c      	adds	r7, #44	; 0x2c
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	080041b7 	.word	0x080041b7
 8002f64:	080040ff 	.word	0x080040ff

08002f68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d142      	bne.n	8003004 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_UART_Receive_IT+0x22>
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e03b      	b.n	8003006 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Receive_IT+0x34>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e034      	b.n	8003006 <HAL_UART_Receive_IT+0x9e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_UART_Receive_IT+0xa8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d01f      	beq.n	8002ff4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	69f9      	ldr	r1, [r7, #28]
 8002fe6:	6a3a      	ldr	r2, [r7, #32]
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e6      	bne.n	8002fc2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 ff3c 	bl	8003e78 <UART_Start_Receive_IT>
 8003000:	4603      	mov	r3, r0
 8003002:	e000      	b.n	8003006 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40008000 	.word	0x40008000

08003014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0ba      	sub	sp, #232	; 0xe8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800303a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800303e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003042:	4013      	ands	r3, r2
 8003044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d115      	bne.n	800307c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00f      	beq.n	800307c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800305c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 82a6 	beq.w	80035be <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
      }
      return;
 800307a:	e2a0      	b.n	80035be <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800307c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8117 	beq.w	80032b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003092:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_UART_IRQHandler+0x298>)
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 810a 	beq.w	80032b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d011      	beq.n	80030d0 <HAL_UART_IRQHandler+0xbc>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d011      	beq.n	8003100 <HAL_UART_IRQHandler+0xec>
 80030dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2202      	movs	r2, #2
 80030ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d011      	beq.n	8003130 <HAL_UART_IRQHandler+0x11c>
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2204      	movs	r2, #4
 800311e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800314c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2208      	movs	r2, #8
 800315a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003162:	f043 0208 	orr.w	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <HAL_UART_IRQHandler+0x18a>
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00c      	beq.n	800319e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800318c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 820c 	beq.w	80035c2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04f      	beq.n	8003296 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 ff08 	bl	800400c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d141      	bne.n	800328e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800323a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800324e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1d9      	bne.n	800320a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <HAL_UART_IRQHandler+0x29c>)
 8003264:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fdac 	bl	8000dc8 <HAL_DMA_Abort_IT>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d017      	beq.n	80032a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003280:	4610      	mov	r0, r2
 8003282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00f      	b.n	80032a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9a6 	bl	80035d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e00b      	b.n	80032a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f9a2 	bl	80035d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	e007      	b.n	80032a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f99e 	bl	80035d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032a4:	e18d      	b.n	80035c2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	bf00      	nop
    return;
 80032a8:	e18b      	b.n	80035c2 <HAL_UART_IRQHandler+0x5ae>
 80032aa:	bf00      	nop
 80032ac:	04000120 	.word	0x04000120
 80032b0:	080040d3 	.word	0x080040d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 8146 	bne.w	800354a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 813f 	beq.w	800354a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8138 	beq.w	800354a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2210      	movs	r2, #16
 80032e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	f040 80b4 	bne.w	800345a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 815f 	beq.w	80035c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800330e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003312:	429a      	cmp	r2, r3
 8003314:	f080 8157 	bcs.w	80035c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800331e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8085 	bne.w	800343e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800335e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003362:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800336a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1da      	bne.n	8003334 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800338e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e1      	bne.n	800337e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e3      	bne.n	80033ba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003420:	65bb      	str	r3, [r7, #88]	; 0x58
 8003422:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800342e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e4      	bne.n	80033fe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fc87 	bl	8000d4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800344a:	b29b      	uxth	r3, r3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8ca 	bl	80035ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003458:	e0b5      	b.n	80035c6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003466:	b29b      	uxth	r3, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80a7 	beq.w	80035ca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800347c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80a2 	beq.w	80035ca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034a8:	647b      	str	r3, [r7, #68]	; 0x44
 80034aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e4      	bne.n	8003486 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	623b      	str	r3, [r7, #32]
   return(result);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034e0:	633a      	str	r2, [r7, #48]	; 0x30
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e3      	bne.n	80034bc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	60fb      	str	r3, [r7, #12]
   return(result);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0310 	bic.w	r3, r3, #16
 800351a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	69b9      	ldr	r1, [r7, #24]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	617b      	str	r3, [r7, #20]
   return(result);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e4      	bne.n	8003506 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800353c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f852 	bl	80035ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003548:	e03f      	b.n	80035ca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00e      	beq.n	8003574 <HAL_UART_IRQHandler+0x560>
 8003556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800356a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 f80c 	bl	800458a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003572:	e02d      	b.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
    }
    return;
 800359c:	e017      	b.n	80035ce <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
 80035aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fe5d 	bl	8004276 <UART_EndTransmit_IT>
    return;
 80035bc:	e008      	b.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035be:	bf00      	nop
 80035c0:	e006      	b.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80035c2:	bf00      	nop
 80035c4:	e004      	b.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80035ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035d0:	37e8      	adds	r7, #232	; 0xe8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop

080035d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	4313      	orrs	r3, r2
 8003626:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4bad      	ldr	r3, [pc, #692]	; (80038e4 <UART_SetConfig+0x2e0>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	69f9      	ldr	r1, [r7, #28]
 8003638:	430b      	orrs	r3, r1
 800363a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4aa2      	ldr	r2, [pc, #648]	; (80038e8 <UART_SetConfig+0x2e4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	4313      	orrs	r3, r2
 800366a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a99      	ldr	r2, [pc, #612]	; (80038ec <UART_SetConfig+0x2e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d121      	bne.n	80036ce <UART_SetConfig+0xca>
 800368a:	4b99      	ldr	r3, [pc, #612]	; (80038f0 <UART_SetConfig+0x2ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b03      	cmp	r3, #3
 8003696:	d817      	bhi.n	80036c8 <UART_SetConfig+0xc4>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <UART_SetConfig+0x9c>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036bd 	.word	0x080036bd
 80036a8:	080036b7 	.word	0x080036b7
 80036ac:	080036c3 	.word	0x080036c3
 80036b0:	2301      	movs	r3, #1
 80036b2:	76fb      	strb	r3, [r7, #27]
 80036b4:	e0e7      	b.n	8003886 <UART_SetConfig+0x282>
 80036b6:	2302      	movs	r3, #2
 80036b8:	76fb      	strb	r3, [r7, #27]
 80036ba:	e0e4      	b.n	8003886 <UART_SetConfig+0x282>
 80036bc:	2304      	movs	r3, #4
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e0e1      	b.n	8003886 <UART_SetConfig+0x282>
 80036c2:	2308      	movs	r3, #8
 80036c4:	76fb      	strb	r3, [r7, #27]
 80036c6:	e0de      	b.n	8003886 <UART_SetConfig+0x282>
 80036c8:	2310      	movs	r3, #16
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e0db      	b.n	8003886 <UART_SetConfig+0x282>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a88      	ldr	r2, [pc, #544]	; (80038f4 <UART_SetConfig+0x2f0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d132      	bne.n	800373e <UART_SetConfig+0x13a>
 80036d8:	4b85      	ldr	r3, [pc, #532]	; (80038f0 <UART_SetConfig+0x2ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d828      	bhi.n	8003738 <UART_SetConfig+0x134>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0xe8>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003739 	.word	0x08003739
 80036f4:	08003739 	.word	0x08003739
 80036f8:	08003739 	.word	0x08003739
 80036fc:	0800372d 	.word	0x0800372d
 8003700:	08003739 	.word	0x08003739
 8003704:	08003739 	.word	0x08003739
 8003708:	08003739 	.word	0x08003739
 800370c:	08003727 	.word	0x08003727
 8003710:	08003739 	.word	0x08003739
 8003714:	08003739 	.word	0x08003739
 8003718:	08003739 	.word	0x08003739
 800371c:	08003733 	.word	0x08003733
 8003720:	2300      	movs	r3, #0
 8003722:	76fb      	strb	r3, [r7, #27]
 8003724:	e0af      	b.n	8003886 <UART_SetConfig+0x282>
 8003726:	2302      	movs	r3, #2
 8003728:	76fb      	strb	r3, [r7, #27]
 800372a:	e0ac      	b.n	8003886 <UART_SetConfig+0x282>
 800372c:	2304      	movs	r3, #4
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e0a9      	b.n	8003886 <UART_SetConfig+0x282>
 8003732:	2308      	movs	r3, #8
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e0a6      	b.n	8003886 <UART_SetConfig+0x282>
 8003738:	2310      	movs	r3, #16
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e0a3      	b.n	8003886 <UART_SetConfig+0x282>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6d      	ldr	r2, [pc, #436]	; (80038f8 <UART_SetConfig+0x2f4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d120      	bne.n	800378a <UART_SetConfig+0x186>
 8003748:	4b69      	ldr	r3, [pc, #420]	; (80038f0 <UART_SetConfig+0x2ec>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003752:	2b30      	cmp	r3, #48	; 0x30
 8003754:	d013      	beq.n	800377e <UART_SetConfig+0x17a>
 8003756:	2b30      	cmp	r3, #48	; 0x30
 8003758:	d814      	bhi.n	8003784 <UART_SetConfig+0x180>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d009      	beq.n	8003772 <UART_SetConfig+0x16e>
 800375e:	2b20      	cmp	r3, #32
 8003760:	d810      	bhi.n	8003784 <UART_SetConfig+0x180>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <UART_SetConfig+0x168>
 8003766:	2b10      	cmp	r3, #16
 8003768:	d006      	beq.n	8003778 <UART_SetConfig+0x174>
 800376a:	e00b      	b.n	8003784 <UART_SetConfig+0x180>
 800376c:	2300      	movs	r3, #0
 800376e:	76fb      	strb	r3, [r7, #27]
 8003770:	e089      	b.n	8003886 <UART_SetConfig+0x282>
 8003772:	2302      	movs	r3, #2
 8003774:	76fb      	strb	r3, [r7, #27]
 8003776:	e086      	b.n	8003886 <UART_SetConfig+0x282>
 8003778:	2304      	movs	r3, #4
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e083      	b.n	8003886 <UART_SetConfig+0x282>
 800377e:	2308      	movs	r3, #8
 8003780:	76fb      	strb	r3, [r7, #27]
 8003782:	e080      	b.n	8003886 <UART_SetConfig+0x282>
 8003784:	2310      	movs	r3, #16
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e07d      	b.n	8003886 <UART_SetConfig+0x282>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5b      	ldr	r2, [pc, #364]	; (80038fc <UART_SetConfig+0x2f8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d120      	bne.n	80037d6 <UART_SetConfig+0x1d2>
 8003794:	4b56      	ldr	r3, [pc, #344]	; (80038f0 <UART_SetConfig+0x2ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800379e:	2bc0      	cmp	r3, #192	; 0xc0
 80037a0:	d013      	beq.n	80037ca <UART_SetConfig+0x1c6>
 80037a2:	2bc0      	cmp	r3, #192	; 0xc0
 80037a4:	d814      	bhi.n	80037d0 <UART_SetConfig+0x1cc>
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d009      	beq.n	80037be <UART_SetConfig+0x1ba>
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d810      	bhi.n	80037d0 <UART_SetConfig+0x1cc>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <UART_SetConfig+0x1b4>
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d006      	beq.n	80037c4 <UART_SetConfig+0x1c0>
 80037b6:	e00b      	b.n	80037d0 <UART_SetConfig+0x1cc>
 80037b8:	2300      	movs	r3, #0
 80037ba:	76fb      	strb	r3, [r7, #27]
 80037bc:	e063      	b.n	8003886 <UART_SetConfig+0x282>
 80037be:	2302      	movs	r3, #2
 80037c0:	76fb      	strb	r3, [r7, #27]
 80037c2:	e060      	b.n	8003886 <UART_SetConfig+0x282>
 80037c4:	2304      	movs	r3, #4
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	e05d      	b.n	8003886 <UART_SetConfig+0x282>
 80037ca:	2308      	movs	r3, #8
 80037cc:	76fb      	strb	r3, [r7, #27]
 80037ce:	e05a      	b.n	8003886 <UART_SetConfig+0x282>
 80037d0:	2310      	movs	r3, #16
 80037d2:	76fb      	strb	r3, [r7, #27]
 80037d4:	e057      	b.n	8003886 <UART_SetConfig+0x282>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a49      	ldr	r2, [pc, #292]	; (8003900 <UART_SetConfig+0x2fc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d125      	bne.n	800382c <UART_SetConfig+0x228>
 80037e0:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <UART_SetConfig+0x2ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ee:	d017      	beq.n	8003820 <UART_SetConfig+0x21c>
 80037f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f4:	d817      	bhi.n	8003826 <UART_SetConfig+0x222>
 80037f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fa:	d00b      	beq.n	8003814 <UART_SetConfig+0x210>
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	d811      	bhi.n	8003826 <UART_SetConfig+0x222>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <UART_SetConfig+0x20a>
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d006      	beq.n	800381a <UART_SetConfig+0x216>
 800380c:	e00b      	b.n	8003826 <UART_SetConfig+0x222>
 800380e:	2300      	movs	r3, #0
 8003810:	76fb      	strb	r3, [r7, #27]
 8003812:	e038      	b.n	8003886 <UART_SetConfig+0x282>
 8003814:	2302      	movs	r3, #2
 8003816:	76fb      	strb	r3, [r7, #27]
 8003818:	e035      	b.n	8003886 <UART_SetConfig+0x282>
 800381a:	2304      	movs	r3, #4
 800381c:	76fb      	strb	r3, [r7, #27]
 800381e:	e032      	b.n	8003886 <UART_SetConfig+0x282>
 8003820:	2308      	movs	r3, #8
 8003822:	76fb      	strb	r3, [r7, #27]
 8003824:	e02f      	b.n	8003886 <UART_SetConfig+0x282>
 8003826:	2310      	movs	r3, #16
 8003828:	76fb      	strb	r3, [r7, #27]
 800382a:	e02c      	b.n	8003886 <UART_SetConfig+0x282>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <UART_SetConfig+0x2e4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d125      	bne.n	8003882 <UART_SetConfig+0x27e>
 8003836:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <UART_SetConfig+0x2ec>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003844:	d017      	beq.n	8003876 <UART_SetConfig+0x272>
 8003846:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800384a:	d817      	bhi.n	800387c <UART_SetConfig+0x278>
 800384c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003850:	d00b      	beq.n	800386a <UART_SetConfig+0x266>
 8003852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003856:	d811      	bhi.n	800387c <UART_SetConfig+0x278>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <UART_SetConfig+0x260>
 800385c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003860:	d006      	beq.n	8003870 <UART_SetConfig+0x26c>
 8003862:	e00b      	b.n	800387c <UART_SetConfig+0x278>
 8003864:	2300      	movs	r3, #0
 8003866:	76fb      	strb	r3, [r7, #27]
 8003868:	e00d      	b.n	8003886 <UART_SetConfig+0x282>
 800386a:	2302      	movs	r3, #2
 800386c:	76fb      	strb	r3, [r7, #27]
 800386e:	e00a      	b.n	8003886 <UART_SetConfig+0x282>
 8003870:	2304      	movs	r3, #4
 8003872:	76fb      	strb	r3, [r7, #27]
 8003874:	e007      	b.n	8003886 <UART_SetConfig+0x282>
 8003876:	2308      	movs	r3, #8
 8003878:	76fb      	strb	r3, [r7, #27]
 800387a:	e004      	b.n	8003886 <UART_SetConfig+0x282>
 800387c:	2310      	movs	r3, #16
 800387e:	76fb      	strb	r3, [r7, #27]
 8003880:	e001      	b.n	8003886 <UART_SetConfig+0x282>
 8003882:	2310      	movs	r3, #16
 8003884:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <UART_SetConfig+0x2e4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	f040 8087 	bne.w	80039a0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003892:	7efb      	ldrb	r3, [r7, #27]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d837      	bhi.n	8003908 <UART_SetConfig+0x304>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0x29c>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	08003909 	.word	0x08003909
 80038a8:	080038cd 	.word	0x080038cd
 80038ac:	08003909 	.word	0x08003909
 80038b0:	080038d3 	.word	0x080038d3
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003909 	.word	0x08003909
 80038bc:	08003909 	.word	0x08003909
 80038c0:	080038db 	.word	0x080038db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fa48 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 80038c8:	6178      	str	r0, [r7, #20]
        break;
 80038ca:	e022      	b.n	8003912 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <UART_SetConfig+0x300>)
 80038ce:	617b      	str	r3, [r7, #20]
        break;
 80038d0:	e01f      	b.n	8003912 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038d2:	f7fe f9a9 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80038d6:	6178      	str	r0, [r7, #20]
        break;
 80038d8:	e01b      	b.n	8003912 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038de:	617b      	str	r3, [r7, #20]
        break;
 80038e0:	e017      	b.n	8003912 <UART_SetConfig+0x30e>
 80038e2:	bf00      	nop
 80038e4:	efff69f3 	.word	0xefff69f3
 80038e8:	40008000 	.word	0x40008000
 80038ec:	40013800 	.word	0x40013800
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40004400 	.word	0x40004400
 80038f8:	40004800 	.word	0x40004800
 80038fc:	40004c00 	.word	0x40004c00
 8003900:	40005000 	.word	0x40005000
 8003904:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	76bb      	strb	r3, [r7, #26]
        break;
 8003910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80f1 	beq.w	8003afc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	429a      	cmp	r2, r3
 8003928:	d305      	bcc.n	8003936 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	429a      	cmp	r2, r3
 8003934:	d902      	bls.n	800393c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	76bb      	strb	r3, [r7, #26]
 800393a:	e0df      	b.n	8003afc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4618      	mov	r0, r3
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	020b      	lsls	r3, r1, #8
 800394e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003952:	0202      	lsls	r2, r0, #8
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6849      	ldr	r1, [r1, #4]
 8003958:	0849      	lsrs	r1, r1, #1
 800395a:	4608      	mov	r0, r1
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	1814      	adds	r4, r2, r0
 8003962:	eb43 0501 	adc.w	r5, r3, r1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	4620      	mov	r0, r4
 8003972:	4629      	mov	r1, r5
 8003974:	f7fc fc2c 	bl	80001d0 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003986:	d308      	bcc.n	800399a <UART_SetConfig+0x396>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398e:	d204      	bcs.n	800399a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e0b0      	b.n	8003afc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	76bb      	strb	r3, [r7, #26]
 800399e:	e0ad      	b.n	8003afc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a8:	d15b      	bne.n	8003a62 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80039aa:	7efb      	ldrb	r3, [r7, #27]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d828      	bhi.n	8003a02 <UART_SetConfig+0x3fe>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0x3b4>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	08003a03 	.word	0x08003a03
 80039c8:	080039f3 	.word	0x080039f3
 80039cc:	08003a03 	.word	0x08003a03
 80039d0:	08003a03 	.word	0x08003a03
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe f9bc 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 80039e0:	6178      	str	r0, [r7, #20]
        break;
 80039e2:	e013      	b.n	8003a0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7fe f9ce 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80039e8:	6178      	str	r0, [r7, #20]
        break;
 80039ea:	e00f      	b.n	8003a0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <UART_SetConfig+0x510>)
 80039ee:	617b      	str	r3, [r7, #20]
        break;
 80039f0:	e00c      	b.n	8003a0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7fe f919 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80039f6:	6178      	str	r0, [r7, #20]
        break;
 80039f8:	e008      	b.n	8003a0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	617b      	str	r3, [r7, #20]
        break;
 8003a00:	e004      	b.n	8003a0c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	76bb      	strb	r3, [r7, #26]
        break;
 8003a0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d074      	beq.n	8003afc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005a      	lsls	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	d916      	bls.n	8003a5c <UART_SetConfig+0x458>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d212      	bcs.n	8003a5c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f023 030f 	bic.w	r3, r3, #15
 8003a3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	89fb      	ldrh	r3, [r7, #14]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	89fa      	ldrh	r2, [r7, #14]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e04f      	b.n	8003afc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	76bb      	strb	r3, [r7, #26]
 8003a60:	e04c      	b.n	8003afc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a62:	7efb      	ldrb	r3, [r7, #27]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d828      	bhi.n	8003aba <UART_SetConfig+0x4b6>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x46c>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003abb 	.word	0x08003abb
 8003a80:	08003aab 	.word	0x08003aab
 8003a84:	08003abb 	.word	0x08003abb
 8003a88:	08003abb 	.word	0x08003abb
 8003a8c:	08003abb 	.word	0x08003abb
 8003a90:	08003ab3 	.word	0x08003ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7fe f960 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 8003a98:	6178      	str	r0, [r7, #20]
        break;
 8003a9a:	e013      	b.n	8003ac4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7fe f972 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	6178      	str	r0, [r7, #20]
        break;
 8003aa2:	e00f      	b.n	8003ac4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <UART_SetConfig+0x510>)
 8003aa6:	617b      	str	r3, [r7, #20]
        break;
 8003aa8:	e00c      	b.n	8003ac4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7fe f8bd 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8003aae:	6178      	str	r0, [r7, #20]
        break;
 8003ab0:	e008      	b.n	8003ac4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab6:	617b      	str	r3, [r7, #20]
        break;
 8003ab8:	e004      	b.n	8003ac4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	76bb      	strb	r3, [r7, #26]
        break;
 8003ac2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d018      	beq.n	8003afc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	085a      	lsrs	r2, r3, #1
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d909      	bls.n	8003af8 <UART_SetConfig+0x4f4>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aea:	d205      	bcs.n	8003af8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	e001      	b.n	8003afc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b08:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bdb0      	pop	{r4, r5, r7, pc}
 8003b12:	bf00      	nop
 8003b14:	00f42400 	.word	0x00f42400

08003b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01a      	beq.n	8003c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d10a      	bne.n	8003c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c6c:	f7fc ff80 	bl	8000b70 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d10e      	bne.n	8003c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f82d 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e023      	b.n	8003ce6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d10e      	bne.n	8003cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f817 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00d      	b.n	8003ce6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b09c      	sub	sp, #112	; 0x70
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	e0a5      	b.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d06:	f000 80a1 	beq.w	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0a:	f7fc ff31 	bl	8000b70 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d13e      	bne.n	8003d9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d34:	667b      	str	r3, [r7, #100]	; 0x64
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e6      	bne.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e067      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d04f      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d147      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
 8003de6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e6      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	613b      	str	r3, [r7, #16]
   return(result);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e18:	623a      	str	r2, [r7, #32]
 8003e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	69f9      	ldr	r1, [r7, #28]
 8003e1e:	6a3a      	ldr	r2, [r7, #32]
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e010      	b.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	f43f af4a 	beq.w	8003d00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3770      	adds	r7, #112	; 0x70
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b097      	sub	sp, #92	; 0x5c
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d10e      	bne.n	8003eca <UART_Start_Receive_IT+0x52>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <UART_Start_Receive_IT+0x48>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ebe:	e02d      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec8:	e028      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <UART_Start_Receive_IT+0x76>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <UART_Start_Receive_IT+0x6c>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	22ff      	movs	r2, #255	; 0xff
 8003ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee2:	e01b      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	227f      	movs	r2, #127	; 0x7f
 8003ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eec:	e016      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef6:	d10d      	bne.n	8003f14 <UART_Start_Receive_IT+0x9c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <UART_Start_Receive_IT+0x92>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	227f      	movs	r2, #127	; 0x7f
 8003f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f08:	e008      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	223f      	movs	r2, #63	; 0x3f
 8003f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f12:	e003      	b.n	8003f1c <UART_Start_Receive_IT+0xa4>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2222      	movs	r2, #34	; 0x22
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	657b      	str	r3, [r7, #84]	; 0x54
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d107      	bne.n	8003f78 <UART_Start_Receive_IT+0x100>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a24      	ldr	r2, [pc, #144]	; (8004004 <UART_Start_Receive_IT+0x18c>)
 8003f74:	665a      	str	r2, [r3, #100]	; 0x64
 8003f76:	e002      	b.n	8003f7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a23      	ldr	r2, [pc, #140]	; (8004008 <UART_Start_Receive_IT+0x190>)
 8003f7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d019      	beq.n	8003fc2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
 8003fae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_Start_Receive_IT+0x116>
 8003fc0:	e018      	b.n	8003ff4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69f9      	ldr	r1, [r7, #28]
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e6      	bne.n	8003fc2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	375c      	adds	r7, #92	; 0x5c
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	0800442b 	.word	0x0800442b
 8004008:	080042cb 	.word	0x080042cb

0800400c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b095      	sub	sp, #84	; 0x54
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004032:	643b      	str	r3, [r7, #64]	; 0x40
 8004034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	61fb      	str	r3, [r7, #28]
   return(result);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	64bb      	str	r3, [r7, #72]	; 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	2b01      	cmp	r3, #1
 8004080:	d118      	bne.n	80040b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	647b      	str	r3, [r7, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040c6:	bf00      	nop
 80040c8:	3754      	adds	r7, #84	; 0x54
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fa71 	bl	80035d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040fe:	b480      	push	{r7}
 8004100:	b08f      	sub	sp, #60	; 0x3c
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410a:	2b21      	cmp	r3, #33	; 0x21
 800410c:	d14d      	bne.n	80041aa <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d132      	bne.n	8004180 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	61fb      	str	r3, [r7, #28]
   return(result);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	60bb      	str	r3, [r7, #8]
   return(result);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6979      	ldr	r1, [r7, #20]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	613b      	str	r3, [r7, #16]
   return(result);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e6      	bne.n	800414c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800417e:	e014      	b.n	80041aa <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	b292      	uxth	r2, r2
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041aa:	bf00      	nop
 80041ac:	373c      	adds	r7, #60	; 0x3c
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b091      	sub	sp, #68	; 0x44
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c2:	2b21      	cmp	r3, #33	; 0x21
 80041c4:	d151      	bne.n	800426a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d132      	bne.n	8004238 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	623b      	str	r3, [r7, #32]
   return(result);
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30
 80041f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	60fb      	str	r3, [r7, #12]
   return(result);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	617b      	str	r3, [r7, #20]
   return(result);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e6      	bne.n	8004204 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004236:	e018      	b.n	800426a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800423e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424a:	b292      	uxth	r2, r2
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800426a:	bf00      	nop
 800426c:	3744      	adds	r7, #68	; 0x44
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b088      	sub	sp, #32
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	60bb      	str	r3, [r7, #8]
   return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e6      	bne.n	800427e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7fc fa47 	bl	8000750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c2:	bf00      	nop
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b096      	sub	sp, #88	; 0x58
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	f040 8094 	bne.w	800440e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80042f4:	b2d9      	uxtb	r1, r3
 80042f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	400a      	ands	r2, r1
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d179      	bne.n	8004422 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004342:	653b      	str	r3, [r7, #80]	; 0x50
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
 800434e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800435a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	623b      	str	r3, [r7, #32]
   return(result);
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004380:	633a      	str	r2, [r7, #48]	; 0x30
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d12e      	bne.n	8004406 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	617b      	str	r3, [r7, #20]
   return(result);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e6      	bne.n	80043ae <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d103      	bne.n	80043f6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2210      	movs	r2, #16
 80043f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff f8f4 	bl	80035ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004404:	e00d      	b.n	8004422 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc f9b2 	bl	8000770 <HAL_UART_RxCpltCallback>
}
 800440c:	e009      	b.n	8004422 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	8b1b      	ldrh	r3, [r3, #24]
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0208 	orr.w	r2, r2, #8
 800441e:	b292      	uxth	r2, r2
 8004420:	831a      	strh	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	3758      	adds	r7, #88	; 0x58
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b096      	sub	sp, #88	; 0x58
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004438:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004440:	2b22      	cmp	r3, #34	; 0x22
 8004442:	f040 8094 	bne.w	800456e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800444c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004456:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800445a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800445e:	4013      	ands	r3, r2
 8004460:	b29a      	uxth	r2, r3
 8004462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004464:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	1c9a      	adds	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d179      	bne.n	8004582 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
 80044ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3308      	adds	r3, #8
 80044c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004504:	2b01      	cmp	r3, #1
 8004506:	d12e      	bne.n	8004566 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	60bb      	str	r3, [r7, #8]
   return(result);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f023 0310 	bic.w	r3, r3, #16
 8004522:	647b      	str	r3, [r7, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6979      	ldr	r1, [r7, #20]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	613b      	str	r3, [r7, #16]
   return(result);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e6      	bne.n	800450e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b10      	cmp	r3, #16
 800454c:	d103      	bne.n	8004556 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2210      	movs	r2, #16
 8004554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff f844 	bl	80035ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004564:	e00d      	b.n	8004582 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc f902 	bl	8000770 <HAL_UART_RxCpltCallback>
}
 800456c:	e009      	b.n	8004582 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	8b1b      	ldrh	r3, [r3, #24]
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0208 	orr.w	r2, r2, #8
 800457e:	b292      	uxth	r2, r2
 8004580:	831a      	strh	r2, [r3, #24]
}
 8004582:	bf00      	nop
 8004584:	3758      	adds	r7, #88	; 0x58
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <__NVIC_SetPriority>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db0a      	blt.n	80045ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	490c      	ldr	r1, [pc, #48]	; (80045ec <__NVIC_SetPriority+0x4c>)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	0112      	lsls	r2, r2, #4
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	440b      	add	r3, r1
 80045c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045c8:	e00a      	b.n	80045e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4908      	ldr	r1, [pc, #32]	; (80045f0 <__NVIC_SetPriority+0x50>)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	3b04      	subs	r3, #4
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	440b      	add	r3, r1
 80045de:	761a      	strb	r2, [r3, #24]
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000e100 	.word	0xe000e100
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <SysTick_Handler+0x1c>)
 80045fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045fc:	f001 fcfe 	bl	8005ffc <xTaskGetSchedulerState>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d001      	beq.n	800460a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004606:	f002 fae7 	bl	8006bd8 <xPortSysTickHandler>
  }
}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	e000e010 	.word	0xe000e010

08004614 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004618:	2100      	movs	r1, #0
 800461a:	f06f 0004 	mvn.w	r0, #4
 800461e:	f7ff ffbf 	bl	80045a0 <__NVIC_SetPriority>
#endif
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800462e:	f3ef 8305 	mrs	r3, IPSR
 8004632:	603b      	str	r3, [r7, #0]
  return(result);
 8004634:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800463a:	f06f 0305 	mvn.w	r3, #5
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	e00c      	b.n	800465c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <osKernelInitialize+0x44>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <osKernelInitialize+0x44>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004650:	2300      	movs	r3, #0
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	e002      	b.n	800465c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800465a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800465c:	687b      	ldr	r3, [r7, #4]
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000048 	.word	0x20000048

08004670 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004676:	f3ef 8305 	mrs	r3, IPSR
 800467a:	603b      	str	r3, [r7, #0]
  return(result);
 800467c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004682:	f06f 0305 	mvn.w	r3, #5
 8004686:	607b      	str	r3, [r7, #4]
 8004688:	e010      	b.n	80046ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <osKernelStart+0x48>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d109      	bne.n	80046a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004692:	f7ff ffbf 	bl	8004614 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004696:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <osKernelStart+0x48>)
 8004698:	2202      	movs	r2, #2
 800469a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800469c:	f001 f866 	bl	800576c <vTaskStartScheduler>
      stat = osOK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	e002      	b.n	80046ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046ac:	687b      	ldr	r3, [r7, #4]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000048 	.word	0x20000048

080046bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08e      	sub	sp, #56	; 0x38
 80046c0:	af04      	add	r7, sp, #16
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046cc:	f3ef 8305 	mrs	r3, IPSR
 80046d0:	617b      	str	r3, [r7, #20]
  return(result);
 80046d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d17e      	bne.n	80047d6 <osThreadNew+0x11a>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d07b      	beq.n	80047d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046e2:	2318      	movs	r3, #24
 80046e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d045      	beq.n	8004782 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <osThreadNew+0x48>
        name = attr->name;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <osThreadNew+0x6e>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b38      	cmp	r3, #56	; 0x38
 800471c:	d805      	bhi.n	800472a <osThreadNew+0x6e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <osThreadNew+0x72>
        return (NULL);
 800472a:	2300      	movs	r3, #0
 800472c:	e054      	b.n	80047d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00e      	beq.n	8004764 <osThreadNew+0xa8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b5b      	cmp	r3, #91	; 0x5b
 800474c:	d90a      	bls.n	8004764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <osThreadNew+0xa8>
        mem = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e010      	b.n	8004786 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10c      	bne.n	8004786 <osThreadNew+0xca>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <osThreadNew+0xca>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <osThreadNew+0xca>
          mem = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e001      	b.n	8004786 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d110      	bne.n	80047ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004794:	9202      	str	r2, [sp, #8]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fe0c 	bl	80053c0 <xTaskCreateStatic>
 80047a8:	4603      	mov	r3, r0
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e013      	b.n	80047d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	f107 0310 	add.w	r3, r7, #16
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fe57 	bl	800547a <xTaskCreate>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d001      	beq.n	80047d6 <osThreadNew+0x11a>
            hTask = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047d6:	693b      	ldr	r3, [r7, #16]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3728      	adds	r7, #40	; 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e8:	f3ef 8305 	mrs	r3, IPSR
 80047ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <osDelay+0x1c>
    stat = osErrorISR;
 80047f4:	f06f 0305 	mvn.w	r3, #5
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e007      	b.n	800480c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 ff7c 	bl	8005704 <vTaskDelay>
    }
  }

  return (stat);
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4a07      	ldr	r2, [pc, #28]	; (8004844 <vApplicationGetIdleTaskMemory+0x2c>)
 8004828:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a06      	ldr	r2, [pc, #24]	; (8004848 <vApplicationGetIdleTaskMemory+0x30>)
 800482e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2280      	movs	r2, #128	; 0x80
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	2000004c 	.word	0x2000004c
 8004848:	200000a8 	.word	0x200000a8

0800484c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <vApplicationGetTimerTaskMemory+0x2c>)
 800485c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4a06      	ldr	r2, [pc, #24]	; (800487c <vApplicationGetTimerTaskMemory+0x30>)
 8004862:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800486a:	601a      	str	r2, [r3, #0]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	200002a8 	.word	0x200002a8
 800487c:	20000304 	.word	0x20000304

08004880 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f103 0208 	add.w	r2, r3, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004898:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f103 0208 	add.w	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0208 	add.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004938:	d103      	bne.n	8004942 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e00c      	b.n	800495c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3308      	adds	r3, #8
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e002      	b.n	8004950 <vListInsert+0x2e>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d2f6      	bcs.n	800494a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6892      	ldr	r2, [r2, #8]
 80049aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6852      	ldr	r2, [r2, #4]
 80049b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d103      	bne.n	80049c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	1e5a      	subs	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a12:	f002 f84f 	bl	8006ab4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	441a      	add	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	3b01      	subs	r3, #1
 8004a44:	68f9      	ldr	r1, [r7, #12]
 8004a46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d114      	bne.n	8004a92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3310      	adds	r3, #16
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 f903 	bl	8005c80 <xTaskRemoveFromEventList>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d012      	beq.n	8004aa6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <xQueueGenericReset+0xcc>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	e009      	b.n	8004aa6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3310      	adds	r3, #16
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fef2 	bl	8004880 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3324      	adds	r3, #36	; 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff feed 	bl	8004880 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004aa6:	f002 f835 	bl	8006b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aaa:	2301      	movs	r3, #1
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	e000ed04 	.word	0xe000ed04

08004ab8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08e      	sub	sp, #56	; 0x38
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <xQueueGenericCreateStatic+0x52>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <xQueueGenericCreateStatic+0x56>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericCreateStatic+0x58>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	623b      	str	r3, [r7, #32]
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <xQueueGenericCreateStatic+0x7e>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <xQueueGenericCreateStatic+0x82>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <xQueueGenericCreateStatic+0x84>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	61fb      	str	r3, [r7, #28]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b56:	2350      	movs	r3, #80	; 0x50
 8004b58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b50      	cmp	r3, #80	; 0x50
 8004b5e:	d00a      	beq.n	8004b76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	61bb      	str	r3, [r7, #24]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	4613      	mov	r3, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f805 	bl	8004ba8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3730      	adds	r7, #48	; 0x30
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e002      	b.n	8004bca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	69b8      	ldr	r0, [r7, #24]
 8004bda:	f7ff ff05 	bl	80049e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	; 0x38
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <xQueueGenericSend+0x32>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <xQueueGenericSend+0x40>
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xQueueGenericSend+0x44>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <xQueueGenericSend+0x46>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <xQueueGenericSend+0x60>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSend+0x6e>
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <xQueueGenericSend+0x72>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <xQueueGenericSend+0x74>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xQueueGenericSend+0x8e>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c7e:	f001 f9bd 	bl	8005ffc <xTaskGetSchedulerState>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <xQueueGenericSend+0x9e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <xQueueGenericSend+0xa2>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <xQueueGenericSend+0xa4>
 8004c92:	2300      	movs	r3, #0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <xQueueGenericSend+0xbe>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	61fb      	str	r3, [r7, #28]
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cae:	f001 ff01 	bl	8006ab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <xQueueGenericSend+0xd4>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d129      	bne.n	8004d18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cca:	f000 fa0b 	bl	80050e4 <prvCopyDataToQueue>
 8004cce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ffcf 	bl	8005c80 <xTaskRemoveFromEventList>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ce8:	4b3f      	ldr	r3, [pc, #252]	; (8004de8 <xQueueGenericSend+0x1f8>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	e00a      	b.n	8004d10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d00:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <xQueueGenericSend+0x1f8>)
 8004d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d10:	f001 ff00 	bl	8006b14 <vPortExitCritical>
				return pdPASS;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e063      	b.n	8004de0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d1e:	f001 fef9 	bl	8006b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e05c      	b.n	8004de0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 f809 	bl	8005d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d36:	2301      	movs	r3, #1
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d3a:	f001 feeb 	bl	8006b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d3e:	f000 fd7b 	bl	8005838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d42:	f001 feb7 	bl	8006ab4 <vPortEnterCritical>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d4c:	b25b      	sxtb	r3, r3
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d52:	d103      	bne.n	8004d5c <xQueueGenericSend+0x16c>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d68:	d103      	bne.n	8004d72 <xQueueGenericSend+0x182>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d72:	f001 fecf 	bl	8006b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d76:	1d3a      	adds	r2, r7, #4
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fff8 	bl	8005d74 <xTaskCheckForTimeOut>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d124      	bne.n	8004dd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d8c:	f000 faa2 	bl	80052d4 <prvIsQueueFull>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d018      	beq.n	8004dc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	3310      	adds	r3, #16
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 ff1e 	bl	8005be0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da6:	f000 fa2d 	bl	8005204 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004daa:	f000 fd53 	bl	8005854 <xTaskResumeAll>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f47f af7c 	bne.w	8004cae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <xQueueGenericSend+0x1f8>)
 8004db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	e772      	b.n	8004cae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dca:	f000 fa1b 	bl	8005204 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dce:	f000 fd41 	bl	8005854 <xTaskResumeAll>
 8004dd2:	e76c      	b.n	8004cae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd6:	f000 fa15 	bl	8005204 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dda:	f000 fd3b 	bl	8005854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3738      	adds	r7, #56	; 0x38
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b090      	sub	sp, #64	; 0x40
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <xQueueGenericSendFromISR+0x3c>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <xQueueGenericSendFromISR+0x40>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <xQueueGenericSendFromISR+0x42>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10a      	bne.n	8004e48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d103      	bne.n	8004e56 <xQueueGenericSendFromISR+0x6a>
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <xQueueGenericSendFromISR+0x6e>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueGenericSendFromISR+0x70>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	623b      	str	r3, [r7, #32]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e76:	f001 feff 	bl	8006c78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	61fa      	str	r2, [r7, #28]
 8004e90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <xQueueGenericSendFromISR+0xbc>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d12f      	bne.n	8004f08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ebe:	f000 f911 	bl	80050e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ec2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eca:	d112      	bne.n	8004ef2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d016      	beq.n	8004f02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	3324      	adds	r3, #36	; 0x24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fed1 	bl	8005c80 <xTaskRemoveFromEventList>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e007      	b.n	8004f02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	b25a      	sxtb	r2, r3
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f02:	2301      	movs	r3, #1
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004f06:	e001      	b.n	8004f0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3740      	adds	r7, #64	; 0x40
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	; 0x30
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <xQueueReceive+0x30>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	623b      	str	r3, [r7, #32]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <xQueueReceive+0x3e>
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <xQueueReceive+0x42>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueReceive+0x44>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueReceive+0x5e>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	61fb      	str	r3, [r7, #28]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f82:	f001 f83b 	bl	8005ffc <xTaskGetSchedulerState>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <xQueueReceive+0x6e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <xQueueReceive+0x72>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueReceive+0x74>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xQueueReceive+0x8e>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	61bb      	str	r3, [r7, #24]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fb2:	f001 fd7f 	bl	8006ab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01f      	beq.n	8005002 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc6:	f000 f8f7 	bl	80051b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00f      	beq.n	8004ffa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	3310      	adds	r3, #16
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fe4e 	bl	8005c80 <xTaskRemoveFromEventList>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fea:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <xQueueReceive+0x1bc>)
 8004fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ffa:	f001 fd8b 	bl	8006b14 <vPortExitCritical>
				return pdPASS;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e069      	b.n	80050d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005008:	f001 fd84 	bl	8006b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800500c:	2300      	movs	r3, #0
 800500e:	e062      	b.n	80050d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005016:	f107 0310 	add.w	r3, r7, #16
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fe94 	bl	8005d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005024:	f001 fd76 	bl	8006b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005028:	f000 fc06 	bl	8005838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800502c:	f001 fd42 	bl	8006ab4 <vPortEnterCritical>
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503c:	d103      	bne.n	8005046 <xQueueReceive+0x122>
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800504c:	b25b      	sxtb	r3, r3
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005052:	d103      	bne.n	800505c <xQueueReceive+0x138>
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800505c:	f001 fd5a 	bl	8006b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005060:	1d3a      	adds	r2, r7, #4
 8005062:	f107 0310 	add.w	r3, r7, #16
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fe83 	bl	8005d74 <xTaskCheckForTimeOut>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d123      	bne.n	80050bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005076:	f000 f917 	bl	80052a8 <prvIsQueueEmpty>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	3324      	adds	r3, #36	; 0x24
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fda9 	bl	8005be0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800508e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005090:	f000 f8b8 	bl	8005204 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005094:	f000 fbde 	bl	8005854 <xTaskResumeAll>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d189      	bne.n	8004fb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <xQueueReceive+0x1bc>)
 80050a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	e780      	b.n	8004fb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b2:	f000 f8a7 	bl	8005204 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b6:	f000 fbcd 	bl	8005854 <xTaskResumeAll>
 80050ba:	e77a      	b.n	8004fb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050be:	f000 f8a1 	bl	8005204 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050c2:	f000 fbc7 	bl	8005854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c8:	f000 f8ee 	bl	80052a8 <prvIsQueueEmpty>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f43f af6f 	beq.w	8004fb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3730      	adds	r7, #48	; 0x30
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10d      	bne.n	800511e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d14d      	bne.n	80051a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 ff92 	bl	8006038 <xTaskPriorityDisinherit>
 8005114:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	e043      	b.n	80051a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d119      	bne.n	8005158 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6858      	ldr	r0, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	461a      	mov	r2, r3
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	f001 fff0 	bl	8007114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d32b      	bcc.n	80051a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	e026      	b.n	80051a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68d8      	ldr	r0, [r3, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	461a      	mov	r2, r3
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	f001 ffd6 	bl	8007114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	425b      	negs	r3, r3
 8005172:	441a      	add	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d207      	bcs.n	8005194 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	425b      	negs	r3, r3
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d105      	bne.n	80051a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051ae:	697b      	ldr	r3, [r7, #20]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d018      	beq.n	80051fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	441a      	add	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d303      	bcc.n	80051ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68d9      	ldr	r1, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	461a      	mov	r2, r3
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f001 ff8c 	bl	8007114 <memcpy>
	}
}
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800520c:	f001 fc52 	bl	8006ab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005216:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005218:	e011      	b.n	800523e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d012      	beq.n	8005248 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3324      	adds	r3, #36	; 0x24
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fd2a 	bl	8005c80 <xTaskRemoveFromEventList>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005232:	f000 fe01 	bl	8005e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	3b01      	subs	r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800523e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	dce9      	bgt.n	800521a <prvUnlockQueue+0x16>
 8005246:	e000      	b.n	800524a <prvUnlockQueue+0x46>
					break;
 8005248:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	22ff      	movs	r2, #255	; 0xff
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005252:	f001 fc5f 	bl	8006b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005256:	f001 fc2d 	bl	8006ab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005260:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005262:	e011      	b.n	8005288 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d012      	beq.n	8005292 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3310      	adds	r3, #16
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fd05 	bl	8005c80 <xTaskRemoveFromEventList>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800527c:	f000 fddc 	bl	8005e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	3b01      	subs	r3, #1
 8005284:	b2db      	uxtb	r3, r3
 8005286:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800528c:	2b00      	cmp	r3, #0
 800528e:	dce9      	bgt.n	8005264 <prvUnlockQueue+0x60>
 8005290:	e000      	b.n	8005294 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005292:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	22ff      	movs	r2, #255	; 0xff
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800529c:	f001 fc3a 	bl	8006b14 <vPortExitCritical>
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052b0:	f001 fc00 	bl	8006ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e001      	b.n	80052c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052c6:	f001 fc25 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052dc:	f001 fbea 	bl	8006ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d102      	bne.n	80052f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e001      	b.n	80052f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052f6:	f001 fc0d 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e014      	b.n	800533e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005314:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <vQueueAddToRegistry+0x50>)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005320:	490c      	ldr	r1, [pc, #48]	; (8005354 <vQueueAddToRegistry+0x50>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800532a:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <vQueueAddToRegistry+0x50>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005336:	e006      	b.n	8005346 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b07      	cmp	r3, #7
 8005342:	d9e7      	bls.n	8005314 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	200019ec 	.word	0x200019ec

08005358 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005368:	f001 fba4 	bl	8006ab4 <vPortEnterCritical>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005372:	b25b      	sxtb	r3, r3
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005378:	d103      	bne.n	8005382 <vQueueWaitForMessageRestricted+0x2a>
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005388:	b25b      	sxtb	r3, r3
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800538e:	d103      	bne.n	8005398 <vQueueWaitForMessageRestricted+0x40>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005398:	f001 fbbc 	bl	8006b14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3324      	adds	r3, #36	; 0x24
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fc3b 	bl	8005c28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053b2:	6978      	ldr	r0, [r7, #20]
 80053b4:	f7ff ff26 	bl	8005204 <prvUnlockQueue>
	}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08e      	sub	sp, #56	; 0x38
 80053c4:	af04      	add	r7, sp, #16
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	623b      	str	r3, [r7, #32]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <xTaskCreateStatic+0x46>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	61fb      	str	r3, [r7, #28]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005406:	235c      	movs	r3, #92	; 0x5c
 8005408:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b5c      	cmp	r3, #92	; 0x5c
 800540e:	d00a      	beq.n	8005426 <xTaskCreateStatic+0x66>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	61bb      	str	r3, [r7, #24]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005426:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01e      	beq.n	800546c <xTaskCreateStatic+0xac>
 800542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800543c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	2202      	movs	r2, #2
 8005442:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005446:	2300      	movs	r3, #0
 8005448:	9303      	str	r3, [sp, #12]
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	9302      	str	r3, [sp, #8]
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f850 	bl	8005504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005466:	f000 f8dd 	bl	8005624 <prvAddNewTaskToReadyList>
 800546a:	e001      	b.n	8005470 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005470:	697b      	ldr	r3, [r7, #20]
	}
 8005472:	4618      	mov	r0, r3
 8005474:	3728      	adds	r7, #40	; 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08c      	sub	sp, #48	; 0x30
 800547e:	af04      	add	r7, sp, #16
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f001 fc32 	bl	8006cf8 <pvPortMalloc>
 8005494:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00e      	beq.n	80054ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800549c:	205c      	movs	r0, #92	; 0x5c
 800549e:	f001 fc2b 	bl	8006cf8 <pvPortMalloc>
 80054a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
 80054b0:	e005      	b.n	80054be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054b2:	6978      	ldr	r0, [r7, #20]
 80054b4:	f001 fcec 	bl	8006e90 <vPortFree>
 80054b8:	e001      	b.n	80054be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d017      	beq.n	80054f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9303      	str	r3, [sp, #12]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	9302      	str	r3, [sp, #8]
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f80e 	bl	8005504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054e8:	69f8      	ldr	r0, [r7, #28]
 80054ea:	f000 f89b 	bl	8005624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e002      	b.n	80054fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054fa:	69bb      	ldr	r3, [r7, #24]
	}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	461a      	mov	r2, r3
 800551c:	21a5      	movs	r1, #165	; 0xa5
 800551e:	f001 fe07 	bl	8007130 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800552c:	3b01      	subs	r3, #1
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	617b      	str	r3, [r7, #20]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01f      	beq.n	80055a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e012      	b.n	800558e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	7819      	ldrb	r1, [r3, #0]
 8005570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	3334      	adds	r3, #52	; 0x34
 8005578:	460a      	mov	r2, r1
 800557a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b0f      	cmp	r3, #15
 8005592:	d9e9      	bls.n	8005568 <prvInitialiseNewTask+0x64>
 8005594:	e000      	b.n	8005598 <prvInitialiseNewTask+0x94>
			{
				break;
 8005596:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a0:	e003      	b.n	80055aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2b37      	cmp	r3, #55	; 0x37
 80055ae:	d901      	bls.n	80055b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055b0:	2337      	movs	r3, #55	; 0x37
 80055b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	3304      	adds	r3, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff f978 	bl	80048c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	3318      	adds	r3, #24
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f973 	bl	80048c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	2200      	movs	r2, #0
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	69b8      	ldr	r0, [r7, #24]
 8005604:	f001 f928 	bl	8006858 <pxPortInitialiseStack>
 8005608:	4602      	mov	r2, r0
 800560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561a:	bf00      	nop
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800562c:	f001 fa42 	bl	8006ab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005630:	4b2d      	ldr	r3, [pc, #180]	; (80056e8 <prvAddNewTaskToReadyList+0xc4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <prvAddNewTaskToReadyList+0xc4>)
 8005638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800563a:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005642:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005648:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <prvAddNewTaskToReadyList+0xc4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d110      	bne.n	8005672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005650:	f000 fc16 	bl	8005e80 <prvInitialiseTaskLists>
 8005654:	e00d      	b.n	8005672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005656:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <prvAddNewTaskToReadyList+0xcc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800565e:	4b23      	ldr	r3, [pc, #140]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	429a      	cmp	r2, r3
 800566a:	d802      	bhi.n	8005672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800566c:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005672:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <prvAddNewTaskToReadyList+0xd0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <prvAddNewTaskToReadyList+0xd0>)
 800567a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800567c:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <prvAddNewTaskToReadyList+0xd0>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	4b1b      	ldr	r3, [pc, #108]	; (80056f8 <prvAddNewTaskToReadyList+0xd4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d903      	bls.n	8005698 <prvAddNewTaskToReadyList+0x74>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <prvAddNewTaskToReadyList+0xd4>)
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <prvAddNewTaskToReadyList+0xd8>)
 80056a6:	441a      	add	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f7ff f913 	bl	80048da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056b4:	f001 fa2e 	bl	8006b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <prvAddNewTaskToReadyList+0xcc>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d207      	bcs.n	80056de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <prvAddNewTaskToReadyList+0xdc>)
 80056d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000bd8 	.word	0x20000bd8
 80056ec:	20000704 	.word	0x20000704
 80056f0:	20000be4 	.word	0x20000be4
 80056f4:	20000bf4 	.word	0x20000bf4
 80056f8:	20000be0 	.word	0x20000be0
 80056fc:	20000708 	.word	0x20000708
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005716:	4b13      	ldr	r3, [pc, #76]	; (8005764 <vTaskDelay+0x60>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <vTaskDelay+0x30>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60bb      	str	r3, [r7, #8]
}
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005734:	f000 f880 	bl	8005838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005738:	2100      	movs	r1, #0
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fcea 	bl	8006114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005740:	f000 f888 	bl	8005854 <xTaskResumeAll>
 8005744:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <vTaskDelay+0x64>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000c00 	.word	0x20000c00
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800577a:	463a      	mov	r2, r7
 800577c:	1d39      	adds	r1, r7, #4
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff f848 	bl	8004818 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	9202      	str	r2, [sp, #8]
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	2300      	movs	r3, #0
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	2300      	movs	r3, #0
 8005798:	460a      	mov	r2, r1
 800579a:	4921      	ldr	r1, [pc, #132]	; (8005820 <vTaskStartScheduler+0xb4>)
 800579c:	4821      	ldr	r0, [pc, #132]	; (8005824 <vTaskStartScheduler+0xb8>)
 800579e:	f7ff fe0f 	bl	80053c0 <xTaskCreateStatic>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4a20      	ldr	r2, [pc, #128]	; (8005828 <vTaskStartScheduler+0xbc>)
 80057a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <vTaskStartScheduler+0xbc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057b0:	2301      	movs	r3, #1
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e001      	b.n	80057ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d102      	bne.n	80057c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057c0:	f000 fcfc 	bl	80061bc <xTimerCreateTimerTask>
 80057c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d116      	bne.n	80057fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	613b      	str	r3, [r7, #16]
}
 80057de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057e0:	4b12      	ldr	r3, [pc, #72]	; (800582c <vTaskStartScheduler+0xc0>)
 80057e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <vTaskStartScheduler+0xc4>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <vTaskStartScheduler+0xc8>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057f4:	f001 f8bc 	bl	8006970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057f8:	e00e      	b.n	8005818 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005800:	d10a      	bne.n	8005818 <vTaskStartScheduler+0xac>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	60fb      	str	r3, [r7, #12]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <vTaskStartScheduler+0xaa>
}
 8005818:	bf00      	nop
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	08007174 	.word	0x08007174
 8005824:	08005e51 	.word	0x08005e51
 8005828:	20000bfc 	.word	0x20000bfc
 800582c:	20000bf8 	.word	0x20000bf8
 8005830:	20000be4 	.word	0x20000be4
 8005834:	20000bdc 	.word	0x20000bdc

08005838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800583c:	4b04      	ldr	r3, [pc, #16]	; (8005850 <vTaskSuspendAll+0x18>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	4a03      	ldr	r2, [pc, #12]	; (8005850 <vTaskSuspendAll+0x18>)
 8005844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000c00 	.word	0x20000c00

08005854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005862:	4b42      	ldr	r3, [pc, #264]	; (800596c <xTaskResumeAll+0x118>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <xTaskResumeAll+0x2c>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	603b      	str	r3, [r7, #0]
}
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005880:	f001 f918 	bl	8006ab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005884:	4b39      	ldr	r3, [pc, #228]	; (800596c <xTaskResumeAll+0x118>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3b01      	subs	r3, #1
 800588a:	4a38      	ldr	r2, [pc, #224]	; (800596c <xTaskResumeAll+0x118>)
 800588c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800588e:	4b37      	ldr	r3, [pc, #220]	; (800596c <xTaskResumeAll+0x118>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d162      	bne.n	800595c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005896:	4b36      	ldr	r3, [pc, #216]	; (8005970 <xTaskResumeAll+0x11c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d05e      	beq.n	800595c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800589e:	e02f      	b.n	8005900 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <xTaskResumeAll+0x120>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3318      	adds	r3, #24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff f871 	bl	8004994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f86c 	bl	8004994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <xTaskResumeAll+0x124>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <xTaskResumeAll+0x7c>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <xTaskResumeAll+0x124>)
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4a27      	ldr	r2, [pc, #156]	; (800597c <xTaskResumeAll+0x128>)
 80058de:	441a      	add	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f7fe fff7 	bl	80048da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	4b23      	ldr	r3, [pc, #140]	; (8005980 <xTaskResumeAll+0x12c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d302      	bcc.n	8005900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058fa:	4b22      	ldr	r3, [pc, #136]	; (8005984 <xTaskResumeAll+0x130>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005900:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <xTaskResumeAll+0x120>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1cb      	bne.n	80058a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800590e:	f000 fb55 	bl	8005fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005912:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <xTaskResumeAll+0x134>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d010      	beq.n	8005940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800591e:	f000 f847 	bl	80059b0 <xTaskIncrementTick>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005928:	4b16      	ldr	r3, [pc, #88]	; (8005984 <xTaskResumeAll+0x130>)
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3b01      	subs	r3, #1
 8005932:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f1      	bne.n	800591e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800593a:	4b13      	ldr	r3, [pc, #76]	; (8005988 <xTaskResumeAll+0x134>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005940:	4b10      	ldr	r3, [pc, #64]	; (8005984 <xTaskResumeAll+0x130>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <xTaskResumeAll+0x138>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800595c:	f001 f8da 	bl	8006b14 <vPortExitCritical>

	return xAlreadyYielded;
 8005960:	68bb      	ldr	r3, [r7, #8]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000c00 	.word	0x20000c00
 8005970:	20000bd8 	.word	0x20000bd8
 8005974:	20000b98 	.word	0x20000b98
 8005978:	20000be0 	.word	0x20000be0
 800597c:	20000708 	.word	0x20000708
 8005980:	20000704 	.word	0x20000704
 8005984:	20000bec 	.word	0x20000bec
 8005988:	20000be8 	.word	0x20000be8
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <xTaskGetTickCount+0x1c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800599c:	687b      	ldr	r3, [r7, #4]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000bdc 	.word	0x20000bdc

080059b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ba:	4b4f      	ldr	r3, [pc, #316]	; (8005af8 <xTaskIncrementTick+0x148>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 808f 	bne.w	8005ae2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059c4:	4b4d      	ldr	r3, [pc, #308]	; (8005afc <xTaskIncrementTick+0x14c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059cc:	4a4b      	ldr	r2, [pc, #300]	; (8005afc <xTaskIncrementTick+0x14c>)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d120      	bne.n	8005a1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059d8:	4b49      	ldr	r3, [pc, #292]	; (8005b00 <xTaskIncrementTick+0x150>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	603b      	str	r3, [r7, #0]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <xTaskIncrementTick+0x46>
 80059f8:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <xTaskIncrementTick+0x150>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	4b41      	ldr	r3, [pc, #260]	; (8005b04 <xTaskIncrementTick+0x154>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a3f      	ldr	r2, [pc, #252]	; (8005b00 <xTaskIncrementTick+0x150>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4a3f      	ldr	r2, [pc, #252]	; (8005b04 <xTaskIncrementTick+0x154>)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4b3e      	ldr	r3, [pc, #248]	; (8005b08 <xTaskIncrementTick+0x158>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <xTaskIncrementTick+0x158>)
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	f000 fad1 	bl	8005fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a1a:	4b3c      	ldr	r3, [pc, #240]	; (8005b0c <xTaskIncrementTick+0x15c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d349      	bcc.n	8005ab8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a24:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <xTaskIncrementTick+0x150>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a2e:	4b37      	ldr	r3, [pc, #220]	; (8005b0c <xTaskIncrementTick+0x15c>)
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a34:	601a      	str	r2, [r3, #0]
					break;
 8005a36:	e03f      	b.n	8005ab8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a38:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <xTaskIncrementTick+0x150>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d203      	bcs.n	8005a58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a50:	4a2e      	ldr	r2, [pc, #184]	; (8005b0c <xTaskIncrementTick+0x15c>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a56:	e02f      	b.n	8005ab8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe ff99 	bl	8004994 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3318      	adds	r3, #24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe ff90 	bl	8004994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <xTaskIncrementTick+0x160>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <xTaskIncrementTick+0xd8>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <xTaskIncrementTick+0x160>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <xTaskIncrementTick+0x164>)
 8005a96:	441a      	add	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe ff1b 	bl	80048da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <xTaskIncrementTick+0x168>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d3b8      	bcc.n	8005a24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab6:	e7b5      	b.n	8005a24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <xTaskIncrementTick+0x168>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abe:	4915      	ldr	r1, [pc, #84]	; (8005b14 <xTaskIncrementTick+0x164>)
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d901      	bls.n	8005ad4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <xTaskIncrementTick+0x16c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005adc:	2301      	movs	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	e004      	b.n	8005aec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <xTaskIncrementTick+0x170>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <xTaskIncrementTick+0x170>)
 8005aea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aec:	697b      	ldr	r3, [r7, #20]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000c00 	.word	0x20000c00
 8005afc:	20000bdc 	.word	0x20000bdc
 8005b00:	20000b90 	.word	0x20000b90
 8005b04:	20000b94 	.word	0x20000b94
 8005b08:	20000bf0 	.word	0x20000bf0
 8005b0c:	20000bf8 	.word	0x20000bf8
 8005b10:	20000be0 	.word	0x20000be0
 8005b14:	20000708 	.word	0x20000708
 8005b18:	20000704 	.word	0x20000704
 8005b1c:	20000bec 	.word	0x20000bec
 8005b20:	20000be8 	.word	0x20000be8

08005b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b2a:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <vTaskSwitchContext+0xa8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b32:	4b27      	ldr	r3, [pc, #156]	; (8005bd0 <vTaskSwitchContext+0xac>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b38:	e041      	b.n	8005bbe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005b3a:	4b25      	ldr	r3, [pc, #148]	; (8005bd0 <vTaskSwitchContext+0xac>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b40:	4b24      	ldr	r3, [pc, #144]	; (8005bd4 <vTaskSwitchContext+0xb0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	e010      	b.n	8005b6a <vTaskSwitchContext+0x46>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <vTaskSwitchContext+0x3e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	491b      	ldr	r1, [pc, #108]	; (8005bd8 <vTaskSwitchContext+0xb4>)
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0e4      	beq.n	8005b48 <vTaskSwitchContext+0x24>
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <vTaskSwitchContext+0xb4>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	605a      	str	r2, [r3, #4]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d104      	bne.n	8005bae <vTaskSwitchContext+0x8a>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a09      	ldr	r2, [pc, #36]	; (8005bdc <vTaskSwitchContext+0xb8>)
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	4a06      	ldr	r2, [pc, #24]	; (8005bd4 <vTaskSwitchContext+0xb0>)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6013      	str	r3, [r2, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000c00 	.word	0x20000c00
 8005bd0:	20000bec 	.word	0x20000bec
 8005bd4:	20000be0 	.word	0x20000be0
 8005bd8:	20000708 	.word	0x20000708
 8005bdc:	20000704 	.word	0x20000704

08005be0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	60fb      	str	r3, [r7, #12]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c06:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <vTaskPlaceOnEventList+0x44>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fe fe87 	bl	8004922 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c14:	2101      	movs	r1, #1
 8005c16:	6838      	ldr	r0, [r7, #0]
 8005c18:	f000 fa7c 	bl	8006114 <prvAddCurrentTaskToDelayedList>
}
 8005c1c:	bf00      	nop
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000704 	.word	0x20000704

08005c28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	617b      	str	r3, [r7, #20]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3318      	adds	r3, #24
 8005c56:	4619      	mov	r1, r3
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7fe fe3e 	bl	80048da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	68b8      	ldr	r0, [r7, #8]
 8005c6e:	f000 fa51 	bl	8006114 <prvAddCurrentTaskToDelayedList>
	}
 8005c72:	bf00      	nop
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000704 	.word	0x20000704

08005c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3318      	adds	r3, #24
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fe fe6f 	bl	8004994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb6:	4b1e      	ldr	r3, [pc, #120]	; (8005d30 <xTaskRemoveFromEventList+0xb0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d11d      	bne.n	8005cfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fe66 	bl	8004994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ccc:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <xTaskRemoveFromEventList+0xb4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d903      	bls.n	8005cdc <xTaskRemoveFromEventList+0x5c>
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <xTaskRemoveFromEventList+0xb4>)
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <xTaskRemoveFromEventList+0xb8>)
 8005cea:	441a      	add	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f7fe fdf1 	bl	80048da <vListInsertEnd>
 8005cf8:	e005      	b.n	8005d06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3318      	adds	r3, #24
 8005cfe:	4619      	mov	r1, r3
 8005d00:	480e      	ldr	r0, [pc, #56]	; (8005d3c <xTaskRemoveFromEventList+0xbc>)
 8005d02:	f7fe fdea 	bl	80048da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <xTaskRemoveFromEventList+0xc0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d905      	bls.n	8005d20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <xTaskRemoveFromEventList+0xc4>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e001      	b.n	8005d24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d24:	697b      	ldr	r3, [r7, #20]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000c00 	.word	0x20000c00
 8005d34:	20000be0 	.word	0x20000be0
 8005d38:	20000708 	.word	0x20000708
 8005d3c:	20000b98 	.word	0x20000b98
 8005d40:	20000704 	.word	0x20000704
 8005d44:	20000bec 	.word	0x20000bec

08005d48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <vTaskInternalSetTimeOutState+0x24>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <vTaskInternalSetTimeOutState+0x28>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	20000bf0 	.word	0x20000bf0
 8005d70:	20000bdc 	.word	0x20000bdc

08005d74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	613b      	str	r3, [r7, #16]
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005db6:	f000 fe7d 	bl	8006ab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dba:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <xTaskCheckForTimeOut+0xbc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd2:	d102      	bne.n	8005dda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e023      	b.n	8005e22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <xTaskCheckForTimeOut+0xc0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d007      	beq.n	8005df6 <xTaskCheckForTimeOut+0x82>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e015      	b.n	8005e22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d20b      	bcs.n	8005e18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ff9b 	bl	8005d48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	e004      	b.n	8005e22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e22:	f000 fe77 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 8005e26:	69fb      	ldr	r3, [r7, #28]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000bdc 	.word	0x20000bdc
 8005e34:	20000bf0 	.word	0x20000bf0

08005e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <vTaskMissedYield+0x14>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20000bec 	.word	0x20000bec

08005e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e58:	f000 f852 	bl	8005f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <prvIdleTask+0x28>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d9f9      	bls.n	8005e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <prvIdleTask+0x2c>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e74:	e7f0      	b.n	8005e58 <prvIdleTask+0x8>
 8005e76:	bf00      	nop
 8005e78:	20000708 	.word	0x20000708
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e86:	2300      	movs	r3, #0
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e00c      	b.n	8005ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <prvInitialiseTaskLists+0x60>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fcf0 	bl	8004880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b37      	cmp	r3, #55	; 0x37
 8005eaa:	d9ef      	bls.n	8005e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eac:	480d      	ldr	r0, [pc, #52]	; (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005eae:	f7fe fce7 	bl	8004880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eb2:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	f7fe fce4 	bl	8004880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005eb8:	480c      	ldr	r0, [pc, #48]	; (8005eec <prvInitialiseTaskLists+0x6c>)
 8005eba:	f7fe fce1 	bl	8004880 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ebe:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <prvInitialiseTaskLists+0x70>)
 8005ec0:	f7fe fcde 	bl	8004880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ec4:	480b      	ldr	r0, [pc, #44]	; (8005ef4 <prvInitialiseTaskLists+0x74>)
 8005ec6:	f7fe fcdb 	bl	8004880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <prvInitialiseTaskLists+0x78>)
 8005ecc:	4a05      	ldr	r2, [pc, #20]	; (8005ee4 <prvInitialiseTaskLists+0x64>)
 8005ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <prvInitialiseTaskLists+0x7c>)
 8005ed2:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <prvInitialiseTaskLists+0x68>)
 8005ed4:	601a      	str	r2, [r3, #0]
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000708 	.word	0x20000708
 8005ee4:	20000b68 	.word	0x20000b68
 8005ee8:	20000b7c 	.word	0x20000b7c
 8005eec:	20000b98 	.word	0x20000b98
 8005ef0:	20000bac 	.word	0x20000bac
 8005ef4:	20000bc4 	.word	0x20000bc4
 8005ef8:	20000b90 	.word	0x20000b90
 8005efc:	20000b94 	.word	0x20000b94

08005f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f06:	e019      	b.n	8005f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f08:	f000 fdd4 	bl	8006ab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <prvCheckTasksWaitingTermination+0x50>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fd3b 	bl	8004994 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4a0b      	ldr	r2, [pc, #44]	; (8005f54 <prvCheckTasksWaitingTermination+0x54>)
 8005f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	; (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f32:	f000 fdef 	bl	8006b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f810 	bl	8005f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <prvCheckTasksWaitingTermination+0x58>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e1      	bne.n	8005f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000bac 	.word	0x20000bac
 8005f54:	20000bd8 	.word	0x20000bd8
 8005f58:	20000bc0 	.word	0x20000bc0

08005f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d108      	bne.n	8005f80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 ff8c 	bl	8006e90 <vPortFree>
				vPortFree( pxTCB );
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 ff89 	bl	8006e90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f7e:	e018      	b.n	8005fb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d103      	bne.n	8005f92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 ff80 	bl	8006e90 <vPortFree>
	}
 8005f90:	e00f      	b.n	8005fb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d00a      	beq.n	8005fb2 <prvDeleteTCB+0x56>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <prvDeleteTCB+0x54>
	}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fd4:	e008      	b.n	8005fe8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <prvResetNextTaskUnblockTime+0x38>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4a04      	ldr	r2, [pc, #16]	; (8005ff8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	20000b90 	.word	0x20000b90
 8005ff8:	20000bf8 	.word	0x20000bf8

08005ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <xTaskGetSchedulerState+0x34>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800600a:	2301      	movs	r3, #1
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	e008      	b.n	8006022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <xTaskGetSchedulerState+0x38>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006018:	2302      	movs	r3, #2
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	e001      	b.n	8006022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006022:	687b      	ldr	r3, [r7, #4]
	}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	20000be4 	.word	0x20000be4
 8006034:	20000c00 	.word	0x20000c00

08006038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d056      	beq.n	80060fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800604e:	4b2e      	ldr	r3, [pc, #184]	; (8006108 <xTaskPriorityDisinherit+0xd0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	429a      	cmp	r2, r3
 8006056:	d00a      	beq.n	800606e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60fb      	str	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60bb      	str	r3, [r7, #8]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	1e5a      	subs	r2, r3, #1
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d02c      	beq.n	80060fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d128      	bne.n	80060fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fc70 	bl	8004994 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <xTaskPriorityDisinherit+0xd4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <xTaskPriorityDisinherit+0xa4>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a0c      	ldr	r2, [pc, #48]	; (800610c <xTaskPriorityDisinherit+0xd4>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a09      	ldr	r2, [pc, #36]	; (8006110 <xTaskPriorityDisinherit+0xd8>)
 80060ea:	441a      	add	r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe fbf1 	bl	80048da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060fc:	697b      	ldr	r3, [r7, #20]
	}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000704 	.word	0x20000704
 800610c:	20000be0 	.word	0x20000be0
 8006110:	20000708 	.word	0x20000708

08006114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800611e:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006124:	4b20      	ldr	r3, [pc, #128]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3304      	adds	r3, #4
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc32 	bl	8004994 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006136:	d10a      	bne.n	800614e <prvAddCurrentTaskToDelayedList+0x3a>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4819      	ldr	r0, [pc, #100]	; (80061ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006148:	f7fe fbc7 	bl	80048da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800614c:	e026      	b.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	429a      	cmp	r2, r3
 8006164:	d209      	bcs.n	800617a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7fe fbd5 	bl	8004922 <vListInsert>
}
 8006178:	e010      	b.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617a:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe fbcb 	bl	8004922 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	d202      	bcs.n	800619c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006196:	4a08      	ldr	r2, [pc, #32]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000bdc 	.word	0x20000bdc
 80061a8:	20000704 	.word	0x20000704
 80061ac:	20000bc4 	.word	0x20000bc4
 80061b0:	20000b94 	.word	0x20000b94
 80061b4:	20000b90 	.word	0x20000b90
 80061b8:	20000bf8 	.word	0x20000bf8

080061bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	; 0x28
 80061c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061c6:	f000 fb07 	bl	80067d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ca:	4b1c      	ldr	r3, [pc, #112]	; (800623c <xTimerCreateTimerTask+0x80>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d021      	beq.n	8006216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061da:	1d3a      	adds	r2, r7, #4
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe fb31 	bl	800484c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	9202      	str	r2, [sp, #8]
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	2302      	movs	r3, #2
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	460a      	mov	r2, r1
 80061fc:	4910      	ldr	r1, [pc, #64]	; (8006240 <xTimerCreateTimerTask+0x84>)
 80061fe:	4811      	ldr	r0, [pc, #68]	; (8006244 <xTimerCreateTimerTask+0x88>)
 8006200:	f7ff f8de 	bl	80053c0 <xTaskCreateStatic>
 8006204:	4603      	mov	r3, r0
 8006206:	4a10      	ldr	r2, [pc, #64]	; (8006248 <xTimerCreateTimerTask+0x8c>)
 8006208:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <xTimerCreateTimerTask+0x8c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006212:	2301      	movs	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	613b      	str	r3, [r7, #16]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006232:	697b      	ldr	r3, [r7, #20]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20000c34 	.word	0x20000c34
 8006240:	0800717c 	.word	0x0800717c
 8006244:	08006381 	.word	0x08006381
 8006248:	20000c38 	.word	0x20000c38

0800624c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800625a:	2300      	movs	r3, #0
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800627a:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <xTimerGenericCommand+0x98>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d02a      	beq.n	80062d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b05      	cmp	r3, #5
 8006292:	dc18      	bgt.n	80062c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006294:	f7ff feb2 	bl	8005ffc <xTaskGetSchedulerState>
 8006298:	4603      	mov	r3, r0
 800629a:	2b02      	cmp	r3, #2
 800629c:	d109      	bne.n	80062b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <xTimerGenericCommand+0x98>)
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	f107 0110 	add.w	r1, r7, #16
 80062a6:	2300      	movs	r3, #0
 80062a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062aa:	f7fe fca1 	bl	8004bf0 <xQueueGenericSend>
 80062ae:	6278      	str	r0, [r7, #36]	; 0x24
 80062b0:	e012      	b.n	80062d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062b2:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <xTimerGenericCommand+0x98>)
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	f107 0110 	add.w	r1, r7, #16
 80062ba:	2300      	movs	r3, #0
 80062bc:	2200      	movs	r2, #0
 80062be:	f7fe fc97 	bl	8004bf0 <xQueueGenericSend>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24
 80062c4:	e008      	b.n	80062d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <xTimerGenericCommand+0x98>)
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f107 0110 	add.w	r1, r7, #16
 80062ce:	2300      	movs	r3, #0
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	f7fe fd8b 	bl	8004dec <xQueueGenericSendFromISR>
 80062d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3728      	adds	r7, #40	; 0x28
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000c34 	.word	0x20000c34

080062e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f2:	4b22      	ldr	r3, [pc, #136]	; (800637c <prvProcessExpiredTimer+0x94>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fb47 	bl	8004994 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d022      	beq.n	800635a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	18d1      	adds	r1, r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	6978      	ldr	r0, [r7, #20]
 8006322:	f000 f8d1 	bl	80064c8 <prvInsertTimerInActiveList>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01f      	beq.n	800636c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800632c:	2300      	movs	r3, #0
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	2300      	movs	r3, #0
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	2100      	movs	r1, #0
 8006336:	6978      	ldr	r0, [r7, #20]
 8006338:	f7ff ff88 	bl	800624c <xTimerGenericCommand>
 800633c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d113      	bne.n	800636c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	60fb      	str	r3, [r7, #12]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	b2da      	uxtb	r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	6978      	ldr	r0, [r7, #20]
 8006372:	4798      	blx	r3
}
 8006374:	bf00      	nop
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000c2c 	.word	0x20000c2c

08006380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006388:	f107 0308 	add.w	r3, r7, #8
 800638c:	4618      	mov	r0, r3
 800638e:	f000 f857 	bl	8006440 <prvGetNextExpireTime>
 8006392:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4619      	mov	r1, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f803 	bl	80063a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800639e:	f000 f8d5 	bl	800654c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063a2:	e7f1      	b.n	8006388 <prvTimerTask+0x8>

080063a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063ae:	f7ff fa43 	bl	8005838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063b2:	f107 0308 	add.w	r3, r7, #8
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f866 	bl	8006488 <prvSampleTimeNow>
 80063bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d130      	bne.n	8006426 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <prvProcessTimerOrBlockTask+0x3c>
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d806      	bhi.n	80063e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063d2:	f7ff fa3f 	bl	8005854 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ff85 	bl	80062e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063de:	e024      	b.n	800642a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063e6:	4b13      	ldr	r3, [pc, #76]	; (8006434 <prvProcessTimerOrBlockTask+0x90>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <prvProcessTimerOrBlockTask+0x50>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <prvProcessTimerOrBlockTask+0x52>
 80063f4:	2300      	movs	r3, #0
 80063f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <prvProcessTimerOrBlockTask+0x94>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	4619      	mov	r1, r3
 8006406:	f7fe ffa7 	bl	8005358 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800640a:	f7ff fa23 	bl	8005854 <xTaskResumeAll>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006414:	4b09      	ldr	r3, [pc, #36]	; (800643c <prvProcessTimerOrBlockTask+0x98>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
}
 8006424:	e001      	b.n	800642a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006426:	f7ff fa15 	bl	8005854 <xTaskResumeAll>
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000c30 	.word	0x20000c30
 8006438:	20000c34 	.word	0x20000c34
 800643c:	e000ed04 	.word	0xe000ed04

08006440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006448:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <prvGetNextExpireTime+0x44>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <prvGetNextExpireTime+0x16>
 8006452:	2201      	movs	r2, #1
 8006454:	e000      	b.n	8006458 <prvGetNextExpireTime+0x18>
 8006456:	2200      	movs	r2, #0
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006464:	4b07      	ldr	r3, [pc, #28]	; (8006484 <prvGetNextExpireTime+0x44>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e001      	b.n	8006474 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006474:	68fb      	ldr	r3, [r7, #12]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000c2c 	.word	0x20000c2c

08006488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006490:	f7ff fa7e 	bl	8005990 <xTaskGetTickCount>
 8006494:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <prvSampleTimeNow+0x3c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	429a      	cmp	r2, r3
 800649e:	d205      	bcs.n	80064ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064a0:	f000 f936 	bl	8006710 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e002      	b.n	80064b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064b2:	4a04      	ldr	r2, [pc, #16]	; (80064c4 <prvSampleTimeNow+0x3c>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064b8:	68fb      	ldr	r3, [r7, #12]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000c3c 	.word	0x20000c3c

080064c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d812      	bhi.n	8006514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d302      	bcc.n	8006502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064fc:	2301      	movs	r3, #1
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e01b      	b.n	800653a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006502:	4b10      	ldr	r3, [pc, #64]	; (8006544 <prvInsertTimerInActiveList+0x7c>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3304      	adds	r3, #4
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f7fe fa08 	bl	8004922 <vListInsert>
 8006512:	e012      	b.n	800653a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d206      	bcs.n	800652a <prvInsertTimerInActiveList+0x62>
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d302      	bcc.n	800652a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006524:	2301      	movs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e007      	b.n	800653a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800652a:	4b07      	ldr	r3, [pc, #28]	; (8006548 <prvInsertTimerInActiveList+0x80>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3304      	adds	r3, #4
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f7fe f9f4 	bl	8004922 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800653a:	697b      	ldr	r3, [r7, #20]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000c30 	.word	0x20000c30
 8006548:	20000c2c 	.word	0x20000c2c

0800654c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	; 0x38
 8006550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006552:	e0ca      	b.n	80066ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	da18      	bge.n	800658c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	3304      	adds	r3, #4
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	61fb      	str	r3, [r7, #28]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006582:	6850      	ldr	r0, [r2, #4]
 8006584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006586:	6892      	ldr	r2, [r2, #8]
 8006588:	4611      	mov	r1, r2
 800658a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f2c0 80aa 	blt.w	80066e8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	3304      	adds	r3, #4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe f9f5 	bl	8004994 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065aa:	463b      	mov	r3, r7
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff ff6b 	bl	8006488 <prvSampleTimeNow>
 80065b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	f200 8097 	bhi.w	80066ea <prvProcessReceivedCommands+0x19e>
 80065bc:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <prvProcessReceivedCommands+0x78>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065ed 	.word	0x080065ed
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	080065ed 	.word	0x080065ed
 80065d0:	08006661 	.word	0x08006661
 80065d4:	08006675 	.word	0x08006675
 80065d8:	080066bf 	.word	0x080066bf
 80065dc:	080065ed 	.word	0x080065ed
 80065e0:	080065ed 	.word	0x080065ed
 80065e4:	08006661 	.word	0x08006661
 80065e8:	08006675 	.word	0x08006675
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	18d1      	adds	r1, r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660c:	f7ff ff5c 	bl	80064c8 <prvInsertTimerInActiveList>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d069      	beq.n	80066ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d05e      	beq.n	80066ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	441a      	add	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	2100      	movs	r1, #0
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f7ff fe05 	bl	800624c <xTimerGenericCommand>
 8006642:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d14f      	bne.n	80066ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	61bb      	str	r3, [r7, #24]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006672:	e03a      	b.n	80066ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	617b      	str	r3, [r7, #20]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	18d1      	adds	r1, r2, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b8:	f7ff ff06 	bl	80064c8 <prvInsertTimerInActiveList>
					break;
 80066bc:	e015      	b.n	80066ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80066cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ce:	f000 fbdf 	bl	8006e90 <vPortFree>
 80066d2:	e00a      	b.n	80066ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066e6:	e000      	b.n	80066ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ea:	4b08      	ldr	r3, [pc, #32]	; (800670c <prvProcessReceivedCommands+0x1c0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	1d39      	adds	r1, r7, #4
 80066f0:	2200      	movs	r2, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fc16 	bl	8004f24 <xQueueReceive>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f47f af2a 	bne.w	8006554 <prvProcessReceivedCommands+0x8>
	}
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	3730      	adds	r7, #48	; 0x30
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000c34 	.word	0x20000c34

08006710 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006716:	e048      	b.n	80067aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006718:	4b2d      	ldr	r3, [pc, #180]	; (80067d0 <prvSwitchTimerLists+0xc0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006722:	4b2b      	ldr	r3, [pc, #172]	; (80067d0 <prvSwitchTimerLists+0xc0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3304      	adds	r3, #4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe f92f 	bl	8004994 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d02e      	beq.n	80067aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4413      	add	r3, r2
 8006754:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	d90e      	bls.n	800677c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <prvSwitchTimerLists+0xc0>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f7fe f8d4 	bl	8004922 <vListInsert>
 800677a:	e016      	b.n	80067aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800677c:	2300      	movs	r3, #0
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2300      	movs	r3, #0
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	2100      	movs	r1, #0
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fd60 	bl	800624c <xTimerGenericCommand>
 800678c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	603b      	str	r3, [r7, #0]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <prvSwitchTimerLists+0xc0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1b1      	bne.n	8006718 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <prvSwitchTimerLists+0xc0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <prvSwitchTimerLists+0xc4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a04      	ldr	r2, [pc, #16]	; (80067d0 <prvSwitchTimerLists+0xc0>)
 80067c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067c2:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <prvSwitchTimerLists+0xc4>)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6013      	str	r3, [r2, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000c2c 	.word	0x20000c2c
 80067d4:	20000c30 	.word	0x20000c30

080067d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067de:	f000 f969 	bl	8006ab4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067e2:	4b15      	ldr	r3, [pc, #84]	; (8006838 <prvCheckForValidListAndQueue+0x60>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d120      	bne.n	800682c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067ea:	4814      	ldr	r0, [pc, #80]	; (800683c <prvCheckForValidListAndQueue+0x64>)
 80067ec:	f7fe f848 	bl	8004880 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067f0:	4813      	ldr	r0, [pc, #76]	; (8006840 <prvCheckForValidListAndQueue+0x68>)
 80067f2:	f7fe f845 	bl	8004880 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067f6:	4b13      	ldr	r3, [pc, #76]	; (8006844 <prvCheckForValidListAndQueue+0x6c>)
 80067f8:	4a10      	ldr	r2, [pc, #64]	; (800683c <prvCheckForValidListAndQueue+0x64>)
 80067fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067fc:	4b12      	ldr	r3, [pc, #72]	; (8006848 <prvCheckForValidListAndQueue+0x70>)
 80067fe:	4a10      	ldr	r2, [pc, #64]	; (8006840 <prvCheckForValidListAndQueue+0x68>)
 8006800:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006802:	2300      	movs	r3, #0
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <prvCheckForValidListAndQueue+0x74>)
 8006808:	4a11      	ldr	r2, [pc, #68]	; (8006850 <prvCheckForValidListAndQueue+0x78>)
 800680a:	2110      	movs	r1, #16
 800680c:	200a      	movs	r0, #10
 800680e:	f7fe f953 	bl	8004ab8 <xQueueGenericCreateStatic>
 8006812:	4603      	mov	r3, r0
 8006814:	4a08      	ldr	r2, [pc, #32]	; (8006838 <prvCheckForValidListAndQueue+0x60>)
 8006816:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <prvCheckForValidListAndQueue+0x60>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <prvCheckForValidListAndQueue+0x60>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	490b      	ldr	r1, [pc, #44]	; (8006854 <prvCheckForValidListAndQueue+0x7c>)
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fd6c 	bl	8005304 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800682c:	f000 f972 	bl	8006b14 <vPortExitCritical>
}
 8006830:	bf00      	nop
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000c34 	.word	0x20000c34
 800683c:	20000c04 	.word	0x20000c04
 8006840:	20000c18 	.word	0x20000c18
 8006844:	20000c2c 	.word	0x20000c2c
 8006848:	20000c30 	.word	0x20000c30
 800684c:	20000ce0 	.word	0x20000ce0
 8006850:	20000c40 	.word	0x20000c40
 8006854:	08007184 	.word	0x08007184

08006858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3b04      	subs	r3, #4
 8006868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b04      	subs	r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f023 0201 	bic.w	r2, r3, #1
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3b04      	subs	r3, #4
 8006886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006888:	4a0c      	ldr	r2, [pc, #48]	; (80068bc <pxPortInitialiseStack+0x64>)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3b14      	subs	r3, #20
 8006892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3b04      	subs	r3, #4
 800689e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f06f 0202 	mvn.w	r2, #2
 80068a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3b20      	subs	r3, #32
 80068ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	080068c1 	.word	0x080068c1

080068c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <prvTaskExitError+0x54>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d2:	d00a      	beq.n	80068ea <prvTaskExitError+0x2a>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	60fb      	str	r3, [r7, #12]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <prvTaskExitError+0x28>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	60bb      	str	r3, [r7, #8]
}
 80068fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068fe:	bf00      	nop
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0fc      	beq.n	8006900 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	20000024 	.word	0x20000024
	...

08006920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <pxCurrentTCBConst2>)
 8006922:	6819      	ldr	r1, [r3, #0]
 8006924:	6808      	ldr	r0, [r1, #0]
 8006926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	f380 8809 	msr	PSP, r0
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8811 	msr	BASEPRI, r0
 800693a:	4770      	bx	lr
 800693c:	f3af 8000 	nop.w

08006940 <pxCurrentTCBConst2>:
 8006940:	20000704 	.word	0x20000704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006948:	4808      	ldr	r0, [pc, #32]	; (800696c <prvPortStartFirstTask+0x24>)
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f380 8808 	msr	MSP, r0
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f380 8814 	msr	CONTROL, r0
 800695a:	b662      	cpsie	i
 800695c:	b661      	cpsie	f
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	df00      	svc	0
 8006968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800696a:	bf00      	nop
 800696c:	e000ed08 	.word	0xe000ed08

08006970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006976:	4b46      	ldr	r3, [pc, #280]	; (8006a90 <xPortStartScheduler+0x120>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a46      	ldr	r2, [pc, #280]	; (8006a94 <xPortStartScheduler+0x124>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d10a      	bne.n	8006996 <xPortStartScheduler+0x26>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	613b      	str	r3, [r7, #16]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006996:	4b3e      	ldr	r3, [pc, #248]	; (8006a90 <xPortStartScheduler+0x120>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a3f      	ldr	r2, [pc, #252]	; (8006a98 <xPortStartScheduler+0x128>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d10a      	bne.n	80069b6 <xPortStartScheduler+0x46>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	60fb      	str	r3, [r7, #12]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069b6:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <xPortStartScheduler+0x12c>)
 80069b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	22ff      	movs	r2, #255	; 0xff
 80069c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	4b31      	ldr	r3, [pc, #196]	; (8006aa0 <xPortStartScheduler+0x130>)
 80069dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069de:	4b31      	ldr	r3, [pc, #196]	; (8006aa4 <xPortStartScheduler+0x134>)
 80069e0:	2207      	movs	r2, #7
 80069e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069e4:	e009      	b.n	80069fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80069e6:	4b2f      	ldr	r3, [pc, #188]	; (8006aa4 <xPortStartScheduler+0x134>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	4a2d      	ldr	r2, [pc, #180]	; (8006aa4 <xPortStartScheduler+0x134>)
 80069ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d0ef      	beq.n	80069e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a06:	4b27      	ldr	r3, [pc, #156]	; (8006aa4 <xPortStartScheduler+0x134>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f1c3 0307 	rsb	r3, r3, #7
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d00a      	beq.n	8006a28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60bb      	str	r3, [r7, #8]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <xPortStartScheduler+0x134>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <xPortStartScheduler+0x134>)
 8006a30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a32:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <xPortStartScheduler+0x134>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a3a:	4a1a      	ldr	r2, [pc, #104]	; (8006aa4 <xPortStartScheduler+0x134>)
 8006a3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a46:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <xPortStartScheduler+0x138>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a17      	ldr	r2, [pc, #92]	; (8006aa8 <xPortStartScheduler+0x138>)
 8006a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <xPortStartScheduler+0x138>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <xPortStartScheduler+0x138>)
 8006a58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a5e:	f000 f8dd 	bl	8006c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <xPortStartScheduler+0x13c>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a68:	f000 f8fc 	bl	8006c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a6c:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <xPortStartScheduler+0x140>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <xPortStartScheduler+0x140>)
 8006a72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a78:	f7ff ff66 	bl	8006948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a7c:	f7ff f852 	bl	8005b24 <vTaskSwitchContext>
	prvTaskExitError();
 8006a80:	f7ff ff1e 	bl	80068c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	e000ed00 	.word	0xe000ed00
 8006a94:	410fc271 	.word	0x410fc271
 8006a98:	410fc270 	.word	0x410fc270
 8006a9c:	e000e400 	.word	0xe000e400
 8006aa0:	20000d30 	.word	0x20000d30
 8006aa4:	20000d34 	.word	0x20000d34
 8006aa8:	e000ed20 	.word	0xe000ed20
 8006aac:	20000024 	.word	0x20000024
 8006ab0:	e000ef34 	.word	0xe000ef34

08006ab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	607b      	str	r3, [r7, #4]
}
 8006acc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ace:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <vPortEnterCritical+0x58>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	4a0d      	ldr	r2, [pc, #52]	; (8006b0c <vPortEnterCritical+0x58>)
 8006ad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <vPortEnterCritical+0x58>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d10f      	bne.n	8006b00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <vPortEnterCritical+0x5c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	603b      	str	r3, [r7, #0]
}
 8006afc:	bf00      	nop
 8006afe:	e7fe      	b.n	8006afe <vPortEnterCritical+0x4a>
	}
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	20000024 	.word	0x20000024
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b1a:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <vPortExitCritical+0x50>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10a      	bne.n	8006b38 <vPortExitCritical+0x24>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	607b      	str	r3, [r7, #4]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <vPortExitCritical+0x50>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <vPortExitCritical+0x50>)
 8006b40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b42:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <vPortExitCritical+0x50>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d105      	bne.n	8006b56 <vPortExitCritical+0x42>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f383 8811 	msr	BASEPRI, r3
}
 8006b54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000024 	.word	0x20000024
	...

08006b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b70:	f3ef 8009 	mrs	r0, PSP
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <pxCurrentTCBConst>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	f01e 0f10 	tst.w	lr, #16
 8006b80:	bf08      	it	eq
 8006b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8a:	6010      	str	r0, [r2, #0]
 8006b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b94:	f380 8811 	msr	BASEPRI, r0
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f7fe ffc0 	bl	8005b24 <vTaskSwitchContext>
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f380 8811 	msr	BASEPRI, r0
 8006bac:	bc09      	pop	{r0, r3}
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	6808      	ldr	r0, [r1, #0]
 8006bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb6:	f01e 0f10 	tst.w	lr, #16
 8006bba:	bf08      	it	eq
 8006bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bc0:	f380 8809 	msr	PSP, r0
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	f3af 8000 	nop.w

08006bd0 <pxCurrentTCBConst>:
 8006bd0:	20000704 	.word	0x20000704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop

08006bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	607b      	str	r3, [r7, #4]
}
 8006bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bf2:	f7fe fedd 	bl	80059b0 <xTaskIncrementTick>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bfc:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <xPortSysTickHandler+0x40>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f383 8811 	msr	BASEPRI, r3
}
 8006c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <vPortSetupTimerInterrupt+0x34>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c26:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <vPortSetupTimerInterrupt+0x38>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <vPortSetupTimerInterrupt+0x3c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <vPortSetupTimerInterrupt+0x40>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	099b      	lsrs	r3, r3, #6
 8006c38:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <vPortSetupTimerInterrupt+0x44>)
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c3e:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <vPortSetupTimerInterrupt+0x34>)
 8006c40:	2207      	movs	r2, #7
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	e000e010 	.word	0xe000e010
 8006c54:	e000e018 	.word	0xe000e018
 8006c58:	20000018 	.word	0x20000018
 8006c5c:	10624dd3 	.word	0x10624dd3
 8006c60:	e000e014 	.word	0xe000e014

08006c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c74 <vPortEnableVFP+0x10>
 8006c68:	6801      	ldr	r1, [r0, #0]
 8006c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c6e:	6001      	str	r1, [r0, #0]
 8006c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c72:	bf00      	nop
 8006c74:	e000ed88 	.word	0xe000ed88

08006c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c7e:	f3ef 8305 	mrs	r3, IPSR
 8006c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d914      	bls.n	8006cb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c8a:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <vPortValidateInterruptPriority+0x70>)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c94:	4b15      	ldr	r3, [pc, #84]	; (8006cec <vPortValidateInterruptPriority+0x74>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	7afa      	ldrb	r2, [r7, #11]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d20a      	bcs.n	8006cb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <vPortValidateInterruptPriority+0x78>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <vPortValidateInterruptPriority+0x7c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d90a      	bls.n	8006cda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	603b      	str	r3, [r7, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <vPortValidateInterruptPriority+0x60>
	}
 8006cda:	bf00      	nop
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	e000e3f0 	.word	0xe000e3f0
 8006cec:	20000d30 	.word	0x20000d30
 8006cf0:	e000ed0c 	.word	0xe000ed0c
 8006cf4:	20000d34 	.word	0x20000d34

08006cf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d04:	f7fe fd98 	bl	8005838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d08:	4b5b      	ldr	r3, [pc, #364]	; (8006e78 <pvPortMalloc+0x180>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d10:	f000 f920 	bl	8006f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d14:	4b59      	ldr	r3, [pc, #356]	; (8006e7c <pvPortMalloc+0x184>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f040 8093 	bne.w	8006e48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01d      	beq.n	8006d64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d28:	2208      	movs	r2, #8
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d014      	beq.n	8006d64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f023 0307 	bic.w	r3, r3, #7
 8006d40:	3308      	adds	r3, #8
 8006d42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <pvPortMalloc+0x6c>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d06e      	beq.n	8006e48 <pvPortMalloc+0x150>
 8006d6a:	4b45      	ldr	r3, [pc, #276]	; (8006e80 <pvPortMalloc+0x188>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d869      	bhi.n	8006e48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d74:	4b43      	ldr	r3, [pc, #268]	; (8006e84 <pvPortMalloc+0x18c>)
 8006d76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d78:	4b42      	ldr	r3, [pc, #264]	; (8006e84 <pvPortMalloc+0x18c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d7e:	e004      	b.n	8006d8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d903      	bls.n	8006d9c <pvPortMalloc+0xa4>
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f1      	bne.n	8006d80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d9c:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <pvPortMalloc+0x180>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d050      	beq.n	8006e48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2208      	movs	r2, #8
 8006dac:	4413      	add	r3, r2
 8006dae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d91f      	bls.n	8006e08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <pvPortMalloc+0xf8>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	613b      	str	r3, [r7, #16]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e02:	69b8      	ldr	r0, [r7, #24]
 8006e04:	f000 f908 	bl	8007018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e08:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <pvPortMalloc+0x188>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <pvPortMalloc+0x188>)
 8006e14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e16:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <pvPortMalloc+0x188>)
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <pvPortMalloc+0x190>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d203      	bcs.n	8006e2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e22:	4b17      	ldr	r3, [pc, #92]	; (8006e80 <pvPortMalloc+0x188>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a18      	ldr	r2, [pc, #96]	; (8006e88 <pvPortMalloc+0x190>)
 8006e28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <pvPortMalloc+0x184>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <pvPortMalloc+0x194>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	4a11      	ldr	r2, [pc, #68]	; (8006e8c <pvPortMalloc+0x194>)
 8006e46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e48:	f7fe fd04 	bl	8005854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <pvPortMalloc+0x174>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <pvPortMalloc+0x172>
	return pvReturn;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3728      	adds	r7, #40	; 0x28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	200018f8 	.word	0x200018f8
 8006e7c:	2000190c 	.word	0x2000190c
 8006e80:	200018fc 	.word	0x200018fc
 8006e84:	200018f0 	.word	0x200018f0
 8006e88:	20001900 	.word	0x20001900
 8006e8c:	20001904 	.word	0x20001904

08006e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d04d      	beq.n	8006f3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	425b      	negs	r3, r3
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <vPortFree+0xb8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <vPortFree+0x44>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <vPortFree+0x62>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60bb      	str	r3, [r7, #8]
}
 8006eee:	bf00      	nop
 8006ef0:	e7fe      	b.n	8006ef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <vPortFree+0xb8>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01e      	beq.n	8006f3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d11a      	bne.n	8006f3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <vPortFree+0xb8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	43db      	mvns	r3, r3
 8006f12:	401a      	ands	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f18:	f7fe fc8e 	bl	8005838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <vPortFree+0xbc>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4413      	add	r3, r2
 8006f26:	4a09      	ldr	r2, [pc, #36]	; (8006f4c <vPortFree+0xbc>)
 8006f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f2a:	6938      	ldr	r0, [r7, #16]
 8006f2c:	f000 f874 	bl	8007018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <vPortFree+0xc0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	4a06      	ldr	r2, [pc, #24]	; (8006f50 <vPortFree+0xc0>)
 8006f38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f3a:	f7fe fc8b 	bl	8005854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f3e:	bf00      	nop
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	2000190c 	.word	0x2000190c
 8006f4c:	200018fc 	.word	0x200018fc
 8006f50:	20001908 	.word	0x20001908

08006f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f60:	4b27      	ldr	r3, [pc, #156]	; (8007000 <prvHeapInit+0xac>)
 8006f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3307      	adds	r3, #7
 8006f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0307 	bic.w	r3, r3, #7
 8006f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <prvHeapInit+0xac>)
 8006f84:	4413      	add	r3, r2
 8006f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f8c:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <prvHeapInit+0xb0>)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f92:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <prvHeapInit+0xb0>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <prvHeapInit+0xb4>)
 8006fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <prvHeapInit+0xb4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fbe:	4b12      	ldr	r3, [pc, #72]	; (8007008 <prvHeapInit+0xb4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <prvHeapInit+0xb4>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <prvHeapInit+0xb8>)
 8006fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <prvHeapInit+0xbc>)
 8006fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <prvHeapInit+0xc0>)
 8006fee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	20000d38 	.word	0x20000d38
 8007004:	200018f0 	.word	0x200018f0
 8007008:	200018f8 	.word	0x200018f8
 800700c:	20001900 	.word	0x20001900
 8007010:	200018fc 	.word	0x200018fc
 8007014:	2000190c 	.word	0x2000190c

08007018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007020:	4b28      	ldr	r3, [pc, #160]	; (80070c4 <prvInsertBlockIntoFreeList+0xac>)
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e002      	b.n	800702c <prvInsertBlockIntoFreeList+0x14>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d8f7      	bhi.n	8007026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	4413      	add	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d108      	bne.n	800705a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	441a      	add	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	441a      	add	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d118      	bne.n	80070a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d00d      	beq.n	8007096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	441a      	add	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	e008      	b.n	80070a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e003      	b.n	80070a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d002      	beq.n	80070b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	200018f0 	.word	0x200018f0
 80070c8:	200018f8 	.word	0x200018f8

080070cc <__libc_init_array>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4d0d      	ldr	r5, [pc, #52]	; (8007104 <__libc_init_array+0x38>)
 80070d0:	4c0d      	ldr	r4, [pc, #52]	; (8007108 <__libc_init_array+0x3c>)
 80070d2:	1b64      	subs	r4, r4, r5
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	2600      	movs	r6, #0
 80070d8:	42a6      	cmp	r6, r4
 80070da:	d109      	bne.n	80070f0 <__libc_init_array+0x24>
 80070dc:	4d0b      	ldr	r5, [pc, #44]	; (800710c <__libc_init_array+0x40>)
 80070de:	4c0c      	ldr	r4, [pc, #48]	; (8007110 <__libc_init_array+0x44>)
 80070e0:	f000 f82e 	bl	8007140 <_init>
 80070e4:	1b64      	subs	r4, r4, r5
 80070e6:	10a4      	asrs	r4, r4, #2
 80070e8:	2600      	movs	r6, #0
 80070ea:	42a6      	cmp	r6, r4
 80070ec:	d105      	bne.n	80070fa <__libc_init_array+0x2e>
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f4:	4798      	blx	r3
 80070f6:	3601      	adds	r6, #1
 80070f8:	e7ee      	b.n	80070d8 <__libc_init_array+0xc>
 80070fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fe:	4798      	blx	r3
 8007100:	3601      	adds	r6, #1
 8007102:	e7f2      	b.n	80070ea <__libc_init_array+0x1e>
 8007104:	08007224 	.word	0x08007224
 8007108:	08007224 	.word	0x08007224
 800710c:	08007224 	.word	0x08007224
 8007110:	08007228 	.word	0x08007228

08007114 <memcpy>:
 8007114:	440a      	add	r2, r1
 8007116:	4291      	cmp	r1, r2
 8007118:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800711c:	d100      	bne.n	8007120 <memcpy+0xc>
 800711e:	4770      	bx	lr
 8007120:	b510      	push	{r4, lr}
 8007122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800712a:	4291      	cmp	r1, r2
 800712c:	d1f9      	bne.n	8007122 <memcpy+0xe>
 800712e:	bd10      	pop	{r4, pc}

08007130 <memset>:
 8007130:	4402      	add	r2, r0
 8007132:	4603      	mov	r3, r0
 8007134:	4293      	cmp	r3, r2
 8007136:	d100      	bne.n	800713a <memset+0xa>
 8007138:	4770      	bx	lr
 800713a:	f803 1b01 	strb.w	r1, [r3], #1
 800713e:	e7f9      	b.n	8007134 <memset+0x4>

08007140 <_init>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr

0800714c <_fini>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr
